// This file has been generated by Py++.

#include "cbase.h"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "hl2wars/hl2wars_baseminimap.h"
#include "hl2wars/vgui_video_general.h"
#include "hl2wars/vgui/wars_model_panel.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "RichText_pypp.hpp"

namespace bp = boost::python;

struct RichText_wrapper : PyPanel, vgui::RichText, bp::wrapper< vgui::RichText > {

    RichText_wrapper(::vgui::Panel * parent, char const * panelName )
    : vgui::RichText( parent, panelName )
      , bp::wrapper< vgui::RichText >(){
        // constructor
    	g_PythonPanelCount++;
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::RichText, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::RichText::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::RichText::ApplySchemeSettings( pScheme );
    }

    void ApplySettings( ::KeyValues * inResourceData ){
        vgui::RichText::ApplySettings( inResourceData );
    }

    char const * GetDescription(  ){
        return vgui::RichText::GetDescription(  );
    }

    void GetSettings( ::KeyValues * outResourceData ){
        vgui::RichText::GetSettings( outResourceData );
    }

    void OnClickPanel( int index ){
        vgui::RichText::OnClickPanel( index );
    }

    virtual void OnCursorEntered(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorEntered(  );
            }
        else
            this->vgui::RichText::OnCursorEntered(  );
    }
    
    virtual void default_OnCursorEntered(  ){
        vgui::RichText::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorExited(  );
            }
        else
            this->vgui::RichText::OnCursorExited(  );
    }
    
    virtual void default_OnCursorExited(  ){
        vgui::RichText::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorMoved( x, y );
            }
        else
            this->vgui::RichText::OnCursorMoved( x, y );
    }
    
    virtual void default_OnCursorMoved( int x, int y ){
        vgui::RichText::OnCursorMoved( x, y );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnKeyCodeTyped( code );
            }
        else
            this->vgui::RichText::OnKeyCodeTyped( code );
    }
    
    virtual void default_OnKeyCodeTyped( ::vgui::KeyCode code ){
        vgui::RichText::OnKeyCodeTyped( code );
    }

    virtual void OnKillFocus(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnKillFocus(  );
            }
        else
            this->vgui::RichText::OnKillFocus(  );
    }
    
    virtual void default_OnKillFocus(  ){
        vgui::RichText::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseCaptureLost(  );
            }
        else
            this->vgui::RichText::OnMouseCaptureLost(  );
    }
    
    virtual void default_OnMouseCaptureLost(  ){
        vgui::RichText::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseDoublePressed( code );
            }
        else
            this->vgui::RichText::OnMouseDoublePressed( code );
    }
    
    virtual void default_OnMouseDoublePressed( ::vgui::MouseCode code ){
        vgui::RichText::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseFocusTicked(  );
            }
        else
            this->vgui::RichText::OnMouseFocusTicked(  );
    }
    
    virtual void default_OnMouseFocusTicked(  ){
        vgui::RichText::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMousePressed( code );
            }
        else
            this->vgui::RichText::OnMousePressed( code );
    }
    
    virtual void default_OnMousePressed( ::vgui::MouseCode code ){
        vgui::RichText::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseReleased( code );
            }
        else
            this->vgui::RichText::OnMouseReleased( code );
    }
    
    virtual void default_OnMouseReleased( ::vgui::MouseCode code ){
        vgui::RichText::OnMouseReleased( code );
    }

    virtual void OnMouseWheeled( int delta ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseWheeled( delta );
            }
        else
            this->vgui::RichText::OnMouseWheeled( delta );
    }
    
    virtual void default_OnMouseWheeled( int delta ){
        vgui::RichText::OnMouseWheeled( delta );
    }

    virtual void OnSetFocus(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnSetFocus(  );
            }
        else
            this->vgui::RichText::OnSetFocus(  );
    }
    
    virtual void default_OnSetFocus(  ){
        vgui::RichText::OnSetFocus( );
    }

    void OnSetText( wchar_t const * text ){
        vgui::RichText::OnSetText( text );
    }

    virtual void OnSizeChanged( int newWide, int newTall ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnSizeChanged( newWide, newTall );
            }
        else
            this->vgui::RichText::OnSizeChanged( newWide, newTall );
    }
    
    virtual void default_OnSizeChanged( int newWide, int newTall ){
        vgui::RichText::OnSizeChanged( newWide, newTall );
    }

    void OnSliderMoved(  ){
        vgui::RichText::OnSliderMoved(  );
    }

    void OnTextClicked( wchar_t const * text ){
        vgui::RichText::OnTextClicked( text );
    }

    virtual void OnThink(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnThink(  );
            }
        else
            this->vgui::RichText::OnThink(  );
    }
    
    virtual void default_OnThink(  ){
        vgui::RichText::OnThink( );
    }

    int ParseTextStringForUrls( char const * text, int startPos, char * pchURLText, int cchURLText, char * pchURL, int cchURL, bool & clickable ){
        return vgui::RichText::ParseTextStringForUrls( text, startPos, pchURLText, cchURLText, pchURL, cchURL, clickable );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::PerformLayout(  );
            }
        else
            this->vgui::RichText::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::RichText::PerformLayout( );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetFgColor( color );
            }
        else
            this->vgui::RichText::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::RichText::SetFgColor( color );
    }

    virtual void SetText( char const * text ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( text );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetText( text );
            }
        else
            this->vgui::RichText::SetText( text );
    }
    
    void default_SetText( char const * text ) {
        vgui::RichText::SetText( text );
    }

    virtual void SetText( wchar_t const * text ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( text );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetText( text );
            }
        else
            this->vgui::RichText::SetText( text );
    }
    
    void default_SetText( wchar_t const * text ) {
        vgui::RichText::SetText( text );
    }

    virtual void SetVerticalScrollbar( bool state ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetVerticalScrollbar )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetVerticalScrollbar )
        bp::override func_SetVerticalScrollbar = this->get_override( "SetVerticalScrollbar" );
        if( func_SetVerticalScrollbar.ptr() != Py_None )
            try {
                func_SetVerticalScrollbar( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetVerticalScrollbar( state );
            }
        else
            this->vgui::RichText::SetVerticalScrollbar( state );
    }
    
    void default_SetVerticalScrollbar( bool state ) {
        vgui::RichText::SetVerticalScrollbar( state );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors( ::vgui::IScheme * pScheme ){
        vgui::Panel::ApplyOverridableColors( pScheme );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    void InternalInitDefaultValues( ::PanelAnimationMap * map ){
        vgui::Panel::InternalInitDefaultValues( map );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnKeyFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Panel::OnKeyFocusTicked(  );
    }
    
    void default_OnKeyFocusTicked(  ) {
        vgui::Panel::OnKeyFocusTicked( );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetNavDown( char const * controlName ){
        vgui::Panel::SetNavDown( controlName );
    }

    void SetNavLeft( char const * controlName ){
        vgui::Panel::SetNavLeft( controlName );
    }

    void SetNavRight( char const * controlName ){
        vgui::Panel::SetNavRight( controlName );
    }

    void SetNavUp( char const * controlName ){
        vgui::Panel::SetNavUp( controlName );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual void Paint(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( vgui::RichText, Paint )
            PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, Paint )
            bp::override func_Paint = this->get_override( "Paint" );
            if( func_Paint.ptr() != Py_None )
                try {
                    func_Paint(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->vgui::RichText::Paint(  );
                }
            else
                this->vgui::RichText::Paint(  );
                
            FinishRecordSBuffer( m_PaintCallBuffer );
 
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintCallBuffer );
        }
    }
    
    void default_Paint(  ) {
        vgui::RichText::Paint( );
    }

    virtual void PaintBackground(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintBackgroundCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( vgui::RichText, PaintBackground )
            PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, PaintBackground )
            bp::override func_PaintBackground = this->get_override( "PaintBackground" );
            if( func_PaintBackground.ptr() != Py_None )
                try {
                    func_PaintBackground(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->vgui::Panel::PaintBackground(  );
                }
            else
                this->vgui::Panel::PaintBackground(  );
                
            FinishRecordSBuffer( m_PaintBackgroundCallBuffer );
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintBackgroundCallBuffer );
        }
    }
    
    void default_PaintBackground(  ) {
        vgui::Panel::PaintBackground( );
    }
    
    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        
        PY_OVERRIDE_CHECK( vgui::RichText, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~RichText_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

    void DeletePanel( void ) { ::PyDeletePanel( this, this ); }

    virtual void OnMessage(const KeyValues *params, VPANEL fromPanel) {
        if( Panel_DispatchMessage( m_PyMessageMap, params, fromPanel ) )
            return;
        Panel::OnMessage(params, fromPanel);
    }
    
    void RegMessageMethod( const char *message, boost::python::object method, int numParams=0, 
           const char *nameFirstParam="", int typeFirstParam=DATATYPE_VOID, 
           const char *nameSecondParam="", int typeSecondParam=DATATYPE_VOID ) { 
           py_message_entry_t entry;
           entry.method = method;
           entry.numParams = numParams;
           entry.firstParamName = nameFirstParam;
           entry.firstParamSymbol = KeyValuesSystem()->GetSymbolForString(nameFirstParam);
           entry.firstParamType = typeFirstParam;
           entry.secondParamName = nameSecondParam;
           entry.secondParamSymbol = KeyValuesSystem()->GetSymbolForString(nameSecondParam);
           entry.secondParamType = typeSecondParam;
    
           GetPyMessageMap().Insert(message, entry);
    }
    virtual Panel *GetPanel() { return this; }

    virtual void EnableSBuffer( bool bUseBuffer ) { PyPanel::EnableSBuffer( bUseBuffer ); }

    virtual bool IsSBufferEnabled() { return PyPanel::IsSBufferEnabled(); }

    virtual void FlushSBuffer() { PyPanel::FlushSBuffer(); }

    virtual void SetFlushedByParent( bool bEnabled ) { PyPanel::SetFlushedByParent( bEnabled ); }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        boost::python::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( *newParent );
            } catch(...) {
                PyErr_Print();
                this->vgui::Panel::SetParent( boost::python::ptr(newParent) );
            }
        else
            this->vgui::Panel::SetParent( boost::python::ptr(newParent) );
    }

    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

};

void register_RichText_class(){

    { //::vgui::RichText
        typedef bp::class_< RichText_wrapper, bp::bases< vgui::Panel >, boost::noncopyable > RichText_exposer_t;
        RichText_exposer_t RichText_exposer = RichText_exposer_t( "RichText", bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("panelName") )) );
        bp::scope RichText_scope( RichText_exposer );
        { //::vgui::RichText::ApplySchemeSettings
        
            typedef void ( RichText_wrapper::*ApplySchemeSettings_function_type )( ::vgui::IScheme * ) ;
            
            RichText_exposer.def( 
                "ApplySchemeSettings"
                , ApplySchemeSettings_function_type( &RichText_wrapper::default_ApplySchemeSettings )
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::RichText::ApplySettings
        
            typedef void ( RichText_wrapper::*ApplySettings_function_type )( ::KeyValues * ) ;
            
            RichText_exposer.def( 
                "ApplySettings"
                , ApplySettings_function_type( &RichText_wrapper::ApplySettings )
                , ( bp::arg("inResourceData") ) );
        
        }
        { //::vgui::RichText::CopySelected
        
            typedef void ( ::vgui::RichText::*CopySelected_function_type )(  ) ;
            
            RichText_exposer.def( 
                "CopySelected"
                , CopySelected_function_type( &::vgui::RichText::CopySelected ) );
        
        }
        { //::vgui::RichText::CutSelected
        
            typedef void ( ::vgui::RichText::*CutSelected_function_type )(  ) ;
            
            RichText_exposer.def( 
                "CutSelected"
                , CutSelected_function_type( &::vgui::RichText::CutSelected ) );
        
        }
        { //::vgui::RichText::GetDescription
        
            typedef char const * ( RichText_wrapper::*GetDescription_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetDescription"
                , GetDescription_function_type( &RichText_wrapper::GetDescription ) );
        
        }
        { //::vgui::RichText::GetNumLines
        
            typedef int ( ::vgui::RichText::*GetNumLines_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetNumLines"
                , GetNumLines_function_type( &::vgui::RichText::GetNumLines ) );
        
        }
        { //::vgui::RichText::GetPanelBaseClassName
        
            typedef char const * ( *GetPanelBaseClassName_function_type )(  );
            
            RichText_exposer.def( 
                "GetPanelBaseClassName"
                , GetPanelBaseClassName_function_type( &::vgui::RichText::GetPanelBaseClassName ) );
        
        }
        { //::vgui::RichText::GetPanelClassName
        
            typedef char const * ( *GetPanelClassName_function_type )(  );
            
            RichText_exposer.def( 
                "GetPanelClassName"
                , GetPanelClassName_function_type( &::vgui::RichText::GetPanelClassName ) );
        
        }
        { //::vgui::RichText::GetSettings
        
            typedef void ( RichText_wrapper::*GetSettings_function_type )( ::KeyValues * ) ;
            
            RichText_exposer.def( 
                "GetSettings"
                , GetSettings_function_type( &RichText_wrapper::GetSettings )
                , ( bp::arg("outResourceData") ) );
        
        }
        { //::vgui::RichText::GetText
        
            typedef void ( ::vgui::RichText::*GetText_function_type )( int,wchar_t *,int ) ;
            
            RichText_exposer.def( 
                "GetText"
                , GetText_function_type( &::vgui::RichText::GetText )
                , ( bp::arg("offset"), bp::arg("buf"), bp::arg("bufLenInBytes") ) );
        
        }
        { //::vgui::RichText::GetText
        
            typedef void ( ::vgui::RichText::*GetText_function_type )( int,char *,int ) ;
            
            RichText_exposer.def( 
                "GetText"
                , GetText_function_type( &::vgui::RichText::GetText )
                , ( bp::arg("offset"), bp::arg("pch"), bp::arg("bufLenInBytes") ) );
        
        }
        { //::vgui::RichText::GotoTextEnd
        
            typedef void ( ::vgui::RichText::*GotoTextEnd_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GotoTextEnd"
                , GotoTextEnd_function_type( &::vgui::RichText::GotoTextEnd ) );
        
        }
        { //::vgui::RichText::GotoTextStart
        
            typedef void ( ::vgui::RichText::*GotoTextStart_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GotoTextStart"
                , GotoTextStart_function_type( &::vgui::RichText::GotoTextStart ) );
        
        }
        { //::vgui::RichText::HasText
        
            typedef bool ( ::vgui::RichText::*HasText_function_type )(  ) const;
            
            RichText_exposer.def( 
                "HasText"
                , HasText_function_type( &::vgui::RichText::HasText ) );
        
        }
        { //::vgui::RichText::InsertChar
        
            typedef void ( ::vgui::RichText::*InsertChar_function_type )( wchar_t ) ;
            
            RichText_exposer.def( 
                "InsertChar"
                , InsertChar_function_type( &::vgui::RichText::InsertChar )
                , ( bp::arg("ch") ) );
        
        }
        { //::vgui::RichText::InsertClickableTextEnd
        
            typedef void ( ::vgui::RichText::*InsertClickableTextEnd_function_type )(  ) ;
            
            RichText_exposer.def( 
                "InsertClickableTextEnd"
                , InsertClickableTextEnd_function_type( &::vgui::RichText::InsertClickableTextEnd ) );
        
        }
        { //::vgui::RichText::InsertClickableTextStart
        
            typedef void ( ::vgui::RichText::*InsertClickableTextStart_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "InsertClickableTextStart"
                , InsertClickableTextStart_function_type( &::vgui::RichText::InsertClickableTextStart )
                , ( bp::arg("pchClickAction")=bp::object() ) );
        
        }
        { //::vgui::RichText::InsertColorChange
        
            typedef void ( ::vgui::RichText::*InsertColorChange_function_type )( ::Color ) ;
            
            RichText_exposer.def( 
                "InsertColorChange"
                , InsertColorChange_function_type( &::vgui::RichText::InsertColorChange )
                , ( bp::arg("col") ) );
        
        }
        { //::vgui::RichText::InsertFade
        
            typedef void ( ::vgui::RichText::*InsertFade_function_type )( float,float ) ;
            
            RichText_exposer.def( 
                "InsertFade"
                , InsertFade_function_type( &::vgui::RichText::InsertFade )
                , ( bp::arg("flSustain"), bp::arg("flLength") ) );
        
        }
        { //::vgui::RichText::InsertIndentChange
        
            typedef void ( ::vgui::RichText::*InsertIndentChange_function_type )( int ) ;
            
            RichText_exposer.def( 
                "InsertIndentChange"
                , InsertIndentChange_function_type( &::vgui::RichText::InsertIndentChange )
                , ( bp::arg("pixelsIndent") ) );
        
        }
        { //::vgui::RichText::InsertPossibleURLString
        
            typedef void ( ::vgui::RichText::*InsertPossibleURLString_function_type )( char const *,::Color,::Color ) ;
            
            RichText_exposer.def( 
                "InsertPossibleURLString"
                , InsertPossibleURLString_function_type( &::vgui::RichText::InsertPossibleURLString )
                , ( bp::arg("text"), bp::arg("URLTextColor"), bp::arg("normalTextColor") ) );
        
        }
        { //::vgui::RichText::InsertString
        
            typedef void ( ::vgui::RichText::*InsertString_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "InsertString"
                , InsertString_function_type( &::vgui::RichText::InsertString )
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::RichText::InsertString
        
            typedef void ( ::vgui::RichText::*InsertString_function_type )( wchar_t const * ) ;
            
            RichText_exposer.def( 
                "InsertString"
                , InsertString_function_type( &::vgui::RichText::InsertString )
                , ( bp::arg("wszText") ) );
        
        }
        { //::vgui::RichText::IsAllTextAlphaZero
        
            typedef bool ( ::vgui::RichText::*IsAllTextAlphaZero_function_type )(  ) const;
            
            RichText_exposer.def( 
                "IsAllTextAlphaZero"
                , IsAllTextAlphaZero_function_type( &::vgui::RichText::IsAllTextAlphaZero ) );
        
        }
        { //::vgui::RichText::IsScrollbarVisible
        
            typedef bool ( ::vgui::RichText::*IsScrollbarVisible_function_type )(  ) ;
            
            RichText_exposer.def( 
                "IsScrollbarVisible"
                , IsScrollbarVisible_function_type( &::vgui::RichText::IsScrollbarVisible ) );
        
        }
        { //::vgui::RichText::OnClickPanel
        
            typedef void ( RichText_wrapper::*OnClickPanel_function_type )( int ) ;
            
            RichText_exposer.def( 
                "OnClickPanel"
                , OnClickPanel_function_type( &RichText_wrapper::OnClickPanel )
                , ( bp::arg("index") ) );
        
        }
        { //::vgui::RichText::OnCursorEntered
        
            typedef void ( RichText_wrapper::*OnCursorEntered_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type( &RichText_wrapper::default_OnCursorEntered ) );
        
        }
        { //::vgui::RichText::OnCursorExited
        
            typedef void ( RichText_wrapper::*OnCursorExited_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type( &RichText_wrapper::default_OnCursorExited ) );
        
        }
        { //::vgui::RichText::OnCursorMoved
        
            typedef void ( RichText_wrapper::*OnCursorMoved_function_type )( int,int ) ;
            
            RichText_exposer.def( 
                "OnCursorMoved"
                , OnCursorMoved_function_type( &RichText_wrapper::default_OnCursorMoved )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::RichText::OnKeyCodeTyped
        
            typedef void ( RichText_wrapper::*OnKeyCodeTyped_function_type )( ::vgui::KeyCode ) ;
            
            RichText_exposer.def( 
                "OnKeyCodeTyped"
                , OnKeyCodeTyped_function_type( &RichText_wrapper::default_OnKeyCodeTyped )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::RichText::OnKillFocus
        
            typedef void ( RichText_wrapper::*OnKillFocus_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnKillFocus"
                , OnKillFocus_function_type( &RichText_wrapper::default_OnKillFocus ) );
        
        }
        { //::vgui::RichText::OnMouseCaptureLost
        
            typedef void ( RichText_wrapper::*OnMouseCaptureLost_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnMouseCaptureLost"
                , OnMouseCaptureLost_function_type( &RichText_wrapper::default_OnMouseCaptureLost ) );
        
        }
        { //::vgui::RichText::OnMouseDoublePressed
        
            typedef void ( RichText_wrapper::*OnMouseDoublePressed_function_type )( ::vgui::MouseCode ) ;
            
            RichText_exposer.def( 
                "OnMouseDoublePressed"
                , OnMouseDoublePressed_function_type( &RichText_wrapper::default_OnMouseDoublePressed )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::RichText::OnMouseFocusTicked
        
            typedef void ( RichText_wrapper::*OnMouseFocusTicked_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnMouseFocusTicked"
                , OnMouseFocusTicked_function_type( &RichText_wrapper::default_OnMouseFocusTicked ) );
        
        }
        { //::vgui::RichText::OnMousePressed
        
            typedef void ( RichText_wrapper::*OnMousePressed_function_type )( ::vgui::MouseCode ) ;
            
            RichText_exposer.def( 
                "OnMousePressed"
                , OnMousePressed_function_type( &RichText_wrapper::default_OnMousePressed )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::RichText::OnMouseReleased
        
            typedef void ( RichText_wrapper::*OnMouseReleased_function_type )( ::vgui::MouseCode ) ;
            
            RichText_exposer.def( 
                "OnMouseReleased"
                , OnMouseReleased_function_type( &RichText_wrapper::default_OnMouseReleased )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::RichText::OnMouseWheeled
        
            typedef void ( RichText_wrapper::*OnMouseWheeled_function_type )( int ) ;
            
            RichText_exposer.def( 
                "OnMouseWheeled"
                , OnMouseWheeled_function_type( &RichText_wrapper::default_OnMouseWheeled )
                , ( bp::arg("delta") ) );
        
        }
        { //::vgui::RichText::OnSetFocus
        
            typedef void ( RichText_wrapper::*OnSetFocus_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnSetFocus"
                , OnSetFocus_function_type( &RichText_wrapper::default_OnSetFocus ) );
        
        }
        { //::vgui::RichText::OnSetText
        
            typedef void ( RichText_wrapper::*OnSetText_function_type )( wchar_t const * ) ;
            
            RichText_exposer.def( 
                "OnSetText"
                , OnSetText_function_type( &RichText_wrapper::OnSetText )
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::RichText::OnSizeChanged
        
            typedef void ( RichText_wrapper::*OnSizeChanged_function_type )( int,int ) ;
            
            RichText_exposer.def( 
                "OnSizeChanged"
                , OnSizeChanged_function_type( &RichText_wrapper::default_OnSizeChanged )
                , ( bp::arg("newWide"), bp::arg("newTall") ) );
        
        }
        { //::vgui::RichText::OnSliderMoved
        
            typedef void ( RichText_wrapper::*OnSliderMoved_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnSliderMoved"
                , OnSliderMoved_function_type( &RichText_wrapper::OnSliderMoved ) );
        
        }
        { //::vgui::RichText::OnTextClicked
        
            typedef void ( RichText_wrapper::*OnTextClicked_function_type )( wchar_t const * ) ;
            
            RichText_exposer.def( 
                "OnTextClicked"
                , OnTextClicked_function_type( &RichText_wrapper::OnTextClicked )
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::RichText::OnThink
        
            typedef void ( RichText_wrapper::*OnThink_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnThink"
                , OnThink_function_type( &RichText_wrapper::default_OnThink ) );
        
        }
        { //::vgui::RichText::ParseTextStringForUrls
        
            typedef int ( RichText_wrapper::*ParseTextStringForUrls_function_type )( char const *,int,char *,int,char *,int,bool & ) ;
            
            RichText_exposer.def( 
                "ParseTextStringForUrls"
                , ParseTextStringForUrls_function_type( &RichText_wrapper::ParseTextStringForUrls )
                , ( bp::arg("text"), bp::arg("startPos"), bp::arg("pchURLText"), bp::arg("cchURLText"), bp::arg("pchURL"), bp::arg("cchURL"), bp::arg("clickable") ) );
        
        }
        { //::vgui::RichText::PerformLayout
        
            typedef void ( RichText_wrapper::*PerformLayout_function_type )(  ) ;
            
            RichText_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type( &RichText_wrapper::default_PerformLayout ) );
        
        }
        { //::vgui::RichText::RequestInfo
        
            typedef bool ( ::vgui::RichText::*RequestInfo_function_type )( ::KeyValues * ) ;
            
            RichText_exposer.def( 
                "RequestInfo"
                , RequestInfo_function_type( &::vgui::RichText::RequestInfo )
                , ( bp::arg("outputData") ) );
        
        }
        { //::vgui::RichText::ResetAllFades
        
            typedef void ( ::vgui::RichText::*ResetAllFades_function_type )( bool,bool,float ) ;
            
            RichText_exposer.def( 
                "ResetAllFades"
                , ResetAllFades_function_type( &::vgui::RichText::ResetAllFades )
                , ( bp::arg("bHold"), bp::arg("bOnlyExpired")=(bool)(false), bp::arg("flNewSustain")=-1.0e+0f ) );
        
        }
        { //::vgui::RichText::SelectAllText
        
            typedef void ( ::vgui::RichText::*SelectAllText_function_type )(  ) ;
            
            RichText_exposer.def( 
                "SelectAllText"
                , SelectAllText_function_type( &::vgui::RichText::SelectAllText ) );
        
        }
        { //::vgui::RichText::SelectNoText
        
            typedef void ( ::vgui::RichText::*SelectNoText_function_type )(  ) ;
            
            RichText_exposer.def( 
                "SelectNoText"
                , SelectNoText_function_type( &::vgui::RichText::SelectNoText ) );
        
        }
        { //::vgui::RichText::SelectNone
        
            typedef void ( ::vgui::RichText::*SelectNone_function_type )(  ) ;
            
            RichText_exposer.def( 
                "SelectNone"
                , SelectNone_function_type( &::vgui::RichText::SelectNone ) );
        
        }
        { //::vgui::RichText::SetDrawOffsets
        
            typedef void ( ::vgui::RichText::*SetDrawOffsets_function_type )( int,int ) ;
            
            RichText_exposer.def( 
                "SetDrawOffsets"
                , SetDrawOffsets_function_type( &::vgui::RichText::SetDrawOffsets )
                , ( bp::arg("ofsx"), bp::arg("ofsy") ) );
        
        }
        { //::vgui::RichText::SetDrawTextOnly
        
            typedef void ( ::vgui::RichText::*SetDrawTextOnly_function_type )(  ) ;
            
            RichText_exposer.def( 
                "SetDrawTextOnly"
                , SetDrawTextOnly_function_type( &::vgui::RichText::SetDrawTextOnly ) );
        
        }
        { //::vgui::RichText::SetFgColor
        
            typedef void ( ::vgui::RichText::*SetFgColor_function_type )( ::Color ) ;
            typedef void ( RichText_wrapper::*default_SetFgColor_function_type )( ::Color ) ;
            
            RichText_exposer.def( 
                "SetFgColor"
                , SetFgColor_function_type(&::vgui::RichText::SetFgColor)
                , default_SetFgColor_function_type(&RichText_wrapper::default_SetFgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::RichText::SetFont
        
            typedef void ( ::vgui::RichText::*SetFont_function_type )( ::vgui::HFont ) ;
            
            RichText_exposer.def( 
                "SetFont"
                , SetFont_function_type( &::vgui::RichText::SetFont )
                , ( bp::arg("font") ) );
        
        }
        { //::vgui::RichText::SetMaximumCharCount
        
            typedef void ( ::vgui::RichText::*SetMaximumCharCount_function_type )( int ) ;
            
            RichText_exposer.def( 
                "SetMaximumCharCount"
                , SetMaximumCharCount_function_type( &::vgui::RichText::SetMaximumCharCount )
                , ( bp::arg("maxChars") ) );
        
        }
        { //::vgui::RichText::SetPanelInteractive
        
            typedef void ( ::vgui::RichText::*SetPanelInteractive_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetPanelInteractive"
                , SetPanelInteractive_function_type( &::vgui::RichText::SetPanelInteractive )
                , ( bp::arg("bInteractive") ) );
        
        }
        { //::vgui::RichText::SetText
        
            typedef void ( ::vgui::RichText::*SetText_function_type )( char const * ) ;
            typedef void ( RichText_wrapper::*default_SetText_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetText"
                , SetText_function_type(&::vgui::RichText::SetText)
                , default_SetText_function_type(&RichText_wrapper::default_SetText)
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::RichText::SetText
        
            typedef void ( ::vgui::RichText::*SetText_function_type )( wchar_t const * ) ;
            typedef void ( RichText_wrapper::*default_SetText_function_type )( wchar_t const * ) ;
            
            RichText_exposer.def( 
                "SetText"
                , SetText_function_type(&::vgui::RichText::SetText)
                , default_SetText_function_type(&RichText_wrapper::default_SetText)
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::RichText::SetToFullHeight
        
            typedef void ( ::vgui::RichText::*SetToFullHeight_function_type )(  ) ;
            
            RichText_exposer.def( 
                "SetToFullHeight"
                , SetToFullHeight_function_type( &::vgui::RichText::SetToFullHeight ) );
        
        }
        { //::vgui::RichText::SetUnderlineFont
        
            typedef void ( ::vgui::RichText::*SetUnderlineFont_function_type )( ::vgui::HFont ) ;
            
            RichText_exposer.def( 
                "SetUnderlineFont"
                , SetUnderlineFont_function_type( &::vgui::RichText::SetUnderlineFont )
                , ( bp::arg("font") ) );
        
        }
        { //::vgui::RichText::SetUnusedScrollbarInvisible
        
            typedef void ( ::vgui::RichText::*SetUnusedScrollbarInvisible_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetUnusedScrollbarInvisible"
                , SetUnusedScrollbarInvisible_function_type( &::vgui::RichText::SetUnusedScrollbarInvisible )
                , ( bp::arg("bInvis") ) );
        
        }
        { //::vgui::RichText::SetVerticalScrollbar
        
            typedef void ( ::vgui::RichText::*SetVerticalScrollbar_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetVerticalScrollbar_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetVerticalScrollbar"
                , SetVerticalScrollbar_function_type(&::vgui::RichText::SetVerticalScrollbar)
                , default_SetVerticalScrollbar_function_type(&RichText_wrapper::default_SetVerticalScrollbar)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::AddToOverridableColors
        
            typedef void ( RichText_wrapper::*AddToOverridableColors_function_type )( ::Color *,char const * ) ;
            
            RichText_exposer.def( 
                "AddToOverridableColors"
                , AddToOverridableColors_function_type( &RichText_wrapper::AddToOverridableColors )
                , ( bp::arg("pColor"), bp::arg("scriptname") ) );
        
        }
        { //::vgui::Panel::ApplyOverridableColors
        
            typedef void ( RichText_wrapper::*ApplyOverridableColors_function_type )( ::vgui::IScheme * ) ;
            
            RichText_exposer.def( 
                "ApplyOverridableColors"
                , ApplyOverridableColors_function_type( &RichText_wrapper::ApplyOverridableColors )
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::CreateDragData
        
            typedef void ( RichText_wrapper::*CreateDragData_function_type )(  ) ;
            
            RichText_exposer.def( 
                "CreateDragData"
                , CreateDragData_function_type( &RichText_wrapper::CreateDragData ) );
        
        }
        { //::vgui::Panel::DragDropStartDragging
        
            typedef void ( RichText_wrapper::*DragDropStartDragging_function_type )(  ) ;
            
            RichText_exposer.def( 
                "DragDropStartDragging"
                , DragDropStartDragging_function_type( &RichText_wrapper::DragDropStartDragging ) );
        
        }
        { //::vgui::Panel::GetNavDownPanel
        
            typedef ::vgui::Panel * ( RichText_wrapper::*GetNavDownPanel_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetNavDownPanel"
                , GetNavDownPanel_function_type( &RichText_wrapper::GetNavDownPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavLeftPanel
        
            typedef ::vgui::Panel * ( RichText_wrapper::*GetNavLeftPanel_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetNavLeftPanel"
                , GetNavLeftPanel_function_type( &RichText_wrapper::GetNavLeftPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavRightPanel
        
            typedef ::vgui::Panel * ( RichText_wrapper::*GetNavRightPanel_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetNavRightPanel"
                , GetNavRightPanel_function_type( &RichText_wrapper::GetNavRightPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavUpPanel
        
            typedef ::vgui::Panel * ( RichText_wrapper::*GetNavUpPanel_function_type )(  ) ;
            
            RichText_exposer.def( 
                "GetNavUpPanel"
                , GetNavUpPanel_function_type( &RichText_wrapper::GetNavUpPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::InternalInitDefaultValues
        
            typedef void ( RichText_wrapper::*InternalInitDefaultValues_function_type )( ::PanelAnimationMap * ) ;
            
            RichText_exposer.def( 
                "InternalInitDefaultValues"
                , InternalInitDefaultValues_function_type( &RichText_wrapper::InternalInitDefaultValues )
                , ( bp::arg("map") ) );
        
        }
        { //::vgui::Panel::OnChildAdded
        
            typedef void ( ::vgui::Panel::*OnChildAdded_function_type )( ::vgui::VPANEL ) ;
            typedef void ( RichText_wrapper::*default_OnChildAdded_function_type )( ::vgui::VPANEL ) ;
            
            RichText_exposer.def( 
                "OnChildAdded"
                , OnChildAdded_function_type(&::vgui::Panel::OnChildAdded)
                , default_OnChildAdded_function_type(&RichText_wrapper::default_OnChildAdded)
                , ( bp::arg("child") ) );
        
        }
        { //::vgui::Panel::OnCommand
        
            typedef void ( ::vgui::Panel::*OnCommand_function_type )( char const * ) ;
            typedef void ( RichText_wrapper::*default_OnCommand_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "OnCommand"
                , OnCommand_function_type(&::vgui::Panel::OnCommand)
                , default_OnCommand_function_type(&RichText_wrapper::default_OnCommand)
                , ( bp::arg("command") ) );
        
        }
        { //::vgui::Panel::OnContinueDragging
        
            typedef void ( RichText_wrapper::*OnContinueDragging_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnContinueDragging"
                , OnContinueDragging_function_type( &RichText_wrapper::OnContinueDragging ) );
        
        }
        { //::vgui::Panel::OnFinishDragging
        
            typedef void ( RichText_wrapper::*OnFinishDragging_function_type )( bool,::vgui::MouseCode,bool ) ;
            
            RichText_exposer.def( 
                "OnFinishDragging"
                , OnFinishDragging_function_type( &RichText_wrapper::OnFinishDragging )
                , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::OnKeyCodePressed
        
            typedef void ( ::vgui::Panel::*OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            typedef void ( RichText_wrapper::*default_OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            
            RichText_exposer.def( 
                "OnKeyCodePressed"
                , OnKeyCodePressed_function_type(&::vgui::Panel::OnKeyCodePressed)
                , default_OnKeyCodePressed_function_type(&RichText_wrapper::default_OnKeyCodePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyCodeReleased
        
            typedef void ( ::vgui::Panel::*OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            typedef void ( RichText_wrapper::*default_OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            
            RichText_exposer.def( 
                "OnKeyCodeReleased"
                , OnKeyCodeReleased_function_type(&::vgui::Panel::OnKeyCodeReleased)
                , default_OnKeyCodeReleased_function_type(&RichText_wrapper::default_OnKeyCodeReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyFocusTicked
        
            typedef void ( ::vgui::Panel::*OnKeyFocusTicked_function_type )(  ) ;
            typedef void ( RichText_wrapper::*default_OnKeyFocusTicked_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnKeyFocusTicked"
                , OnKeyFocusTicked_function_type(&::vgui::Panel::OnKeyFocusTicked)
                , default_OnKeyFocusTicked_function_type(&RichText_wrapper::default_OnKeyFocusTicked) );
        
        }
        { //::vgui::Panel::OnMouseTriplePressed
        
            typedef void ( ::vgui::Panel::*OnMouseTriplePressed_function_type )( ::vgui::MouseCode ) ;
            typedef void ( RichText_wrapper::*default_OnMouseTriplePressed_function_type )( ::vgui::MouseCode ) ;
            
            RichText_exposer.def( 
                "OnMouseTriplePressed"
                , OnMouseTriplePressed_function_type(&::vgui::Panel::OnMouseTriplePressed)
                , default_OnMouseTriplePressed_function_type(&RichText_wrapper::default_OnMouseTriplePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnRequestFocus
        
            typedef void ( RichText_wrapper::*OnRequestFocus_function_type )( ::vgui::VPANEL,::vgui::VPANEL ) ;
            
            RichText_exposer.def( 
                "OnRequestFocus"
                , OnRequestFocus_function_type( &RichText_wrapper::default_OnRequestFocus )
                , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) );
        
        }
        { //::vgui::Panel::OnScreenSizeChanged
        
            typedef void ( RichText_wrapper::*OnScreenSizeChanged_function_type )( int,int ) ;
            
            RichText_exposer.def( 
                "OnScreenSizeChanged"
                , OnScreenSizeChanged_function_type( &RichText_wrapper::default_OnScreenSizeChanged )
                , ( bp::arg("oldwide"), bp::arg("oldtall") ) );
        
        }
        { //::vgui::Panel::OnStartDragging
        
            typedef void ( RichText_wrapper::*OnStartDragging_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnStartDragging"
                , OnStartDragging_function_type( &RichText_wrapper::OnStartDragging ) );
        
        }
        { //::vgui::Panel::OnTick
        
            typedef void ( ::vgui::Panel::*OnTick_function_type )(  ) ;
            typedef void ( RichText_wrapper::*default_OnTick_function_type )(  ) ;
            
            RichText_exposer.def( 
                "OnTick"
                , OnTick_function_type(&::vgui::Panel::OnTick)
                , default_OnTick_function_type(&RichText_wrapper::default_OnTick) );
        
        }
        { //::vgui::Panel::PaintBuildOverlay
        
            typedef void ( ::vgui::Panel::*PaintBuildOverlay_function_type )(  ) ;
            typedef void ( RichText_wrapper::*default_PaintBuildOverlay_function_type )(  ) ;
            
            RichText_exposer.def( 
                "PaintBuildOverlay"
                , PaintBuildOverlay_function_type(&::vgui::Panel::PaintBuildOverlay)
                , default_PaintBuildOverlay_function_type(&RichText_wrapper::default_PaintBuildOverlay) );
        
        }
        { //::vgui::Panel::PaintTraverse
        
            typedef void ( RichText_wrapper::*PaintTraverse_function_type )( bool,bool ) ;
            
            RichText_exposer.def( 
                "PaintTraverse"
                , PaintTraverse_function_type( &RichText_wrapper::PaintTraverse )
                , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) );
        
        }
        { //::vgui::Panel::PostChildPaint
        
            typedef void ( ::vgui::Panel::*PostChildPaint_function_type )(  ) ;
            typedef void ( RichText_wrapper::*default_PostChildPaint_function_type )(  ) ;
            
            RichText_exposer.def( 
                "PostChildPaint"
                , PostChildPaint_function_type(&::vgui::Panel::PostChildPaint)
                , default_PostChildPaint_function_type(&RichText_wrapper::default_PostChildPaint) );
        
        }
        { //::vgui::Panel::SetBgColor
        
            typedef void ( ::vgui::Panel::*SetBgColor_function_type )( ::Color ) ;
            typedef void ( RichText_wrapper::*default_SetBgColor_function_type )( ::Color ) ;
            
            RichText_exposer.def( 
                "SetBgColor"
                , SetBgColor_function_type(&::vgui::Panel::SetBgColor)
                , default_SetBgColor_function_type(&RichText_wrapper::default_SetBgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetBorder
        
            typedef void ( ::vgui::Panel::*SetBorder_function_type )( ::vgui::IBorder * ) ;
            typedef void ( RichText_wrapper::*default_SetBorder_function_type )( ::vgui::IBorder * ) ;
            
            RichText_exposer.def( 
                "SetBorder"
                , SetBorder_function_type(&::vgui::Panel::SetBorder)
                , default_SetBorder_function_type(&RichText_wrapper::default_SetBorder)
                , ( bp::arg("border") ) );
        
        }
        { //::vgui::Panel::SetCursor
        
            typedef void ( ::vgui::Panel::*SetCursor_function_type )( ::vgui::HCursor ) ;
            typedef void ( RichText_wrapper::*default_SetCursor_function_type )( ::vgui::HCursor ) ;
            
            RichText_exposer.def( 
                "SetCursor"
                , SetCursor_function_type(&::vgui::Panel::SetCursor)
                , default_SetCursor_function_type(&RichText_wrapper::default_SetCursor)
                , ( bp::arg("cursor") ) );
        
        }
        { //::vgui::Panel::SetDragEnabled
        
            typedef void ( ::vgui::Panel::*SetDragEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetDragEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetDragEnabled"
                , SetDragEnabled_function_type(&::vgui::Panel::SetDragEnabled)
                , default_SetDragEnabled_function_type(&RichText_wrapper::default_SetDragEnabled)
                , ( bp::arg("enabled") ) );
        
        }
        { //::vgui::Panel::SetEnabled
        
            typedef void ( ::vgui::Panel::*SetEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetEnabled"
                , SetEnabled_function_type(&::vgui::Panel::SetEnabled)
                , default_SetEnabled_function_type(&RichText_wrapper::default_SetEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetKeyBoardInputEnabled
        
            typedef void ( ::vgui::Panel::*SetKeyBoardInputEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetKeyBoardInputEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type(&::vgui::Panel::SetKeyBoardInputEnabled)
                , default_SetKeyBoardInputEnabled_function_type(&RichText_wrapper::default_SetKeyBoardInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetMouseInputEnabled
        
            typedef void ( ::vgui::Panel::*SetMouseInputEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetMouseInputEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type(&::vgui::Panel::SetMouseInputEnabled)
                , default_SetMouseInputEnabled_function_type(&RichText_wrapper::default_SetMouseInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavDown_function_type )( ::vgui::Panel * ) ;
            
            RichText_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &::vgui::Panel::SetNavDown )
                , ( bp::arg("navDown") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef void ( RichText_wrapper::*SetNavDown_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &RichText_wrapper::SetNavDown )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavLeft_function_type )( ::vgui::Panel * ) ;
            
            RichText_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &::vgui::Panel::SetNavLeft )
                , ( bp::arg("navLeft") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef void ( RichText_wrapper::*SetNavLeft_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &RichText_wrapper::SetNavLeft )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavRight_function_type )( ::vgui::Panel * ) ;
            
            RichText_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &::vgui::Panel::SetNavRight )
                , ( bp::arg("navRight") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef void ( RichText_wrapper::*SetNavRight_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &RichText_wrapper::SetNavRight )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavUp_function_type )( ::vgui::Panel * ) ;
            
            RichText_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &::vgui::Panel::SetNavUp )
                , ( bp::arg("navUp") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef void ( RichText_wrapper::*SetNavUp_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &RichText_wrapper::SetNavUp )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetOverridableColor
        
            typedef void ( RichText_wrapper::*SetOverridableColor_function_type )( ::Color *,::Color const & ) ;
            
            RichText_exposer.def( 
                "SetOverridableColor"
                , SetOverridableColor_function_type( &RichText_wrapper::SetOverridableColor )
                , ( bp::arg("pColor"), bp::arg("newColor") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetPaintBackgroundEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetPaintBackgroundEnabled"
                , SetPaintBackgroundEnabled_function_type(&::vgui::Panel::SetPaintBackgroundEnabled)
                , default_SetPaintBackgroundEnabled_function_type(&RichText_wrapper::default_SetPaintBackgroundEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundType
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundType_function_type )( int ) ;
            typedef void ( RichText_wrapper::*default_SetPaintBackgroundType_function_type )( int ) ;
            
            RichText_exposer.def( 
                "SetPaintBackgroundType"
                , SetPaintBackgroundType_function_type(&::vgui::Panel::SetPaintBackgroundType)
                , default_SetPaintBackgroundType_function_type(&RichText_wrapper::default_SetPaintBackgroundType)
                , ( bp::arg("type") ) );
        
        }
        { //::vgui::Panel::SetPaintBorderEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBorderEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetPaintBorderEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetPaintBorderEnabled"
                , SetPaintBorderEnabled_function_type(&::vgui::Panel::SetPaintBorderEnabled)
                , default_SetPaintBorderEnabled_function_type(&RichText_wrapper::default_SetPaintBorderEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintEnabled_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetPaintEnabled_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetPaintEnabled"
                , SetPaintEnabled_function_type(&::vgui::Panel::SetPaintEnabled)
                , default_SetPaintEnabled_function_type(&RichText_wrapper::default_SetPaintEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type )( ::vgui::VPANEL ) ;
            typedef void ( RichText_wrapper::*default_SetParent_function_type )( ::vgui::VPANEL ) ;
            
            RichText_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&RichText_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( char const * ) ;
            typedef void ( RichText_wrapper::*default_SetScheme_function_type )( char const * ) ;
            
            RichText_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&RichText_wrapper::default_SetScheme)
                , ( bp::arg("tag") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( ::vgui::HScheme ) ;
            typedef void ( RichText_wrapper::*default_SetScheme_function_type )( ::vgui::HScheme ) ;
            
            RichText_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&RichText_wrapper::default_SetScheme)
                , ( bp::arg("scheme") ) );
        
        }
        { //::vgui::Panel::SetVisible
        
            typedef void ( ::vgui::Panel::*SetVisible_function_type )( bool ) ;
            typedef void ( RichText_wrapper::*default_SetVisible_function_type )( bool ) ;
            
            RichText_exposer.def( 
                "SetVisible"
                , SetVisible_function_type(&::vgui::Panel::SetVisible)
                , default_SetVisible_function_type(&RichText_wrapper::default_SetVisible)
                , ( bp::arg("state") ) );
        
        }
        RichText_exposer.staticmethod( "GetPanelBaseClassName" );
        RichText_exposer.staticmethod( "GetPanelClassName" );
        { //::vgui::RichText::Paint

        typedef void ( ::vgui::Panel::*Paint_function_type )(  ) ;
        typedef void ( RichText_wrapper::*default_Paint_function_type )(  ) ;
        
        RichText_exposer.def( 
            "Paint"
            , Paint_function_type(&::vgui::Panel::Paint)
            , default_Paint_function_type(&RichText_wrapper::default_Paint) );

    }
    { //::vgui::RichText::PaintBackground

        typedef void ( ::vgui::Panel::*PaintBackground_function_type )(  ) ;
        typedef void ( RichText_wrapper::*default_PaintBackground_function_type )(  ) ;
        
        RichText_exposer.def( 
            "PaintBackground"
            , PaintBackground_function_type(&::vgui::Panel::PaintBackground)
            , default_PaintBackground_function_type(&RichText_wrapper::default_PaintBackground) );
    
    }
    { //::vgui::RichText::InvalidateLayout
    
        typedef void ( ::vgui::Panel::*InvalidateLayout_function_type )( bool,bool ) ;
        typedef void ( RichText_wrapper::*default_InvalidateLayout_function_type )( bool,bool ) ;
        
        RichText_exposer.def( 
            "InvalidateLayout"
            , InvalidateLayout_function_type(&::vgui::Panel::InvalidateLayout)
            , default_InvalidateLayout_function_type(&RichText_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) );
    
    }
        RichText_exposer.def( "RegMessageMethod", &RichText_wrapper::RegMessageMethod
        , ( bp::arg("message"), bp::arg("method"), bp::arg("numParams")=(int)(0), bp::arg("nameFirstParam")="", bp::arg("typeFirstParam")=int(::vgui::DATATYPE_VOID), bp::arg("nameSecondParam")="", bp::arg("typeSecondParam")=int(::vgui::DATATYPE_VOID) ));
        RichText_exposer.def( "EnableSBuffer", &RichText_wrapper::EnableSBuffer, bp::arg("bUseBuffer") );
        RichText_exposer.def( "IsSBufferEnabled", &RichText_wrapper::IsSBufferEnabled );
        RichText_exposer.def( "FlushSBuffer", &RichText_wrapper::FlushSBuffer );
        RichText_exposer.def( "SetFlushedByParent", &RichText_wrapper::SetFlushedByParent, bp::arg("bEnabled") );
        RichText_exposer.def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ) )(&::vgui::Panel::SetParent)
            , (void ( RichText_wrapper::* )( ::vgui::Panel * ) )(&RichText_wrapper::default_SetParent)
            , ( boost::python::arg("newParent") ) );
    }

}
