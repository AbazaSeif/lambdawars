// This file has been generated by Py++.

#include "cbase.h"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "hl2wars_baseminimap.h"
#include "vgui_video_general.h"
#include "vgui/wars_model_panel.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CWars_Model_Panel_pypp.hpp"

namespace bp = boost::python;

struct CWars_Model_Panel_wrapper : PyPanel, CWars_Model_Panel, bp::wrapper< CWars_Model_Panel > {

    CWars_Model_Panel_wrapper(::vgui::Panel * parent, char const * name )
    : CWars_Model_Panel( parent, name )
      , bp::wrapper< CWars_Model_Panel >(){
        // constructor
    	g_PythonPanelCount++;
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors( ::vgui::IScheme * pScheme ){
        vgui::Panel::ApplyOverridableColors( pScheme );
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::Panel::ApplySchemeSettings( pScheme );
    }
    
    void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ) {
        vgui::Panel::ApplySchemeSettings( pScheme );
    }

    void ApplyUserConfigSettings( ::KeyValues * userConfig ){
        vgui::EditablePanel::ApplyUserConfigSettings( userConfig );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    void GetUserConfigSettings( ::KeyValues * userConfig ){
        vgui::EditablePanel::GetUserConfigSettings( userConfig );
    }

    void InternalInitDefaultValues( ::PanelAnimationMap * map ){
        vgui::Panel::InternalInitDefaultValues( map );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ){
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnChildAdded( child );
            }
        else
            this->vgui::EditablePanel::OnChildAdded( child );
    }
    
    virtual void default_OnChildAdded( ::vgui::VPANEL child ){
        vgui::EditablePanel::OnChildAdded( child );
    }

    virtual void OnClose(  ){
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnClose )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnClose )
        bp::override func_OnClose = this->get_override( "OnClose" );
        if( func_OnClose.ptr() != Py_None )
            try {
                func_OnClose(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnClose(  );
            }
        else
            this->vgui::EditablePanel::OnClose(  );
    }
    
    virtual void default_OnClose(  ){
        vgui::EditablePanel::OnClose( );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnCurrentDefaultButtonSet( ::vgui::VPANEL button ){
        vgui::EditablePanel::OnCurrentDefaultButtonSet( button );
    }

    virtual void OnCursorEntered(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorEntered(  );
            }
        else
            this->vgui::Panel::OnCursorEntered(  );
    }
    
    void default_OnCursorEntered(  ) {
        vgui::Panel::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorExited(  );
            }
        else
            this->vgui::Panel::OnCursorExited(  );
    }
    
    void default_OnCursorExited(  ) {
        vgui::Panel::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorMoved( x, y );
            }
        else
            this->vgui::Panel::OnCursorMoved( x, y );
    }
    
    void default_OnCursorMoved( int x, int y ) {
        vgui::Panel::OnCursorMoved( x, y );
    }

    void OnDefaultButtonSet( ::vgui::VPANEL button ){
        vgui::EditablePanel::OnDefaultButtonSet( button );
    }

    void OnFindDefaultButton(  ){
        vgui::EditablePanel::OnFindDefaultButton(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnKeyCodeTyped( code );
            }
        else
            this->vgui::EditablePanel::OnKeyCodeTyped( code );
    }
    
    void default_OnKeyCodeTyped( ::vgui::KeyCode code ) {
        vgui::EditablePanel::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Panel::OnKeyFocusTicked(  );
    }
    
    void default_OnKeyFocusTicked(  ) {
        vgui::Panel::OnKeyFocusTicked( );
    }

    virtual void OnKillFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKillFocus(  );
            }
        else
            this->vgui::Panel::OnKillFocus(  );
    }
    
    void default_OnKillFocus(  ) {
        vgui::Panel::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseCaptureLost(  );
            }
        else
            this->vgui::Panel::OnMouseCaptureLost(  );
    }
    
    void default_OnMouseCaptureLost(  ) {
        vgui::Panel::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseDoublePressed( code );
            }
        else
            this->vgui::Panel::OnMouseDoublePressed( code );
    }
    
    void default_OnMouseDoublePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseFocusTicked(  );
            }
        else
            this->vgui::Panel::OnMouseFocusTicked(  );
    }
    
    void default_OnMouseFocusTicked(  ) {
        vgui::Panel::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMousePressed( code );
            }
        else
            this->vgui::Panel::OnMousePressed( code );
    }
    
    void default_OnMousePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseReleased( code );
            }
        else
            this->vgui::Panel::OnMouseReleased( code );
    }
    
    void default_OnMouseReleased( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseWheeled( delta );
            }
        else
            this->vgui::Panel::OnMouseWheeled( delta );
    }
    
    void default_OnMouseWheeled( int delta ) {
        vgui::Panel::OnMouseWheeled( delta );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ) {
        vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    virtual void OnSetFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnSetFocus(  );
            }
        else
            this->vgui::EditablePanel::OnSetFocus(  );
    }
    
    void default_OnSetFocus(  ) {
        vgui::EditablePanel::OnSetFocus( );
    }

    virtual void OnSizeChanged( int wide, int tall ){
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( wide, tall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnSizeChanged( wide, tall );
            }
        else
            this->vgui::EditablePanel::OnSizeChanged( wide, tall );
    }
    
    virtual void default_OnSizeChanged( int wide, int tall ){
        vgui::EditablePanel::OnSizeChanged( wide, tall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnThink(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnThink(  );
            }
        else
            this->vgui::Panel::OnThink(  );
    }
    
    void default_OnThink(  ) {
        vgui::Panel::OnThink( );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PerformLayout(  ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::PerformLayout(  );
            }
        else
            this->vgui::EditablePanel::PerformLayout(  );
    }
    
    void default_PerformLayout(  ) {
        vgui::EditablePanel::PerformLayout( );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetNavDown( char const * controlName ){
        vgui::Panel::SetNavDown( controlName );
    }

    void SetNavLeft( char const * controlName ){
        vgui::Panel::SetNavLeft( controlName );
    }

    void SetNavRight( char const * controlName ){
        vgui::Panel::SetNavRight( controlName );
    }

    void SetNavUp( char const * controlName ){
        vgui::Panel::SetNavUp( controlName );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual void Paint(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( CWars_Model_Panel, Paint )
            PY_OVERRIDE_LOG( _vguicontrols, CWars_Model_Panel, Paint )
            bp::override func_Paint = this->get_override( "Paint" );
            if( func_Paint.ptr() != Py_None )
                try {
                    func_Paint(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->CWars_Model_Panel::Paint(  );
                }
            else
                this->CWars_Model_Panel::Paint(  );
                
            FinishRecordSBuffer( m_PaintCallBuffer );
 
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintCallBuffer );
        }
    }
    
    void default_Paint(  ) {
        CWars_Model_Panel::Paint( );
    }

    virtual void PaintBackground(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintBackgroundCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( CWars_Model_Panel, PaintBackground )
            PY_OVERRIDE_LOG( _vguicontrols, CWars_Model_Panel, PaintBackground )
            bp::override func_PaintBackground = this->get_override( "PaintBackground" );
            if( func_PaintBackground.ptr() != Py_None )
                try {
                    func_PaintBackground(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->vgui::EditablePanel::PaintBackground(  );
                }
            else
                this->vgui::EditablePanel::PaintBackground(  );
                
            FinishRecordSBuffer( m_PaintBackgroundCallBuffer );
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintBackgroundCallBuffer );
        }
    }
    
    void default_PaintBackground(  ) {
        vgui::EditablePanel::PaintBackground( );
    }
    
    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        
        PY_OVERRIDE_CHECK( CWars_Model_Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, CWars_Model_Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~CWars_Model_Panel_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

    void DeletePanel( void ) { ::PyDeletePanel( this, this ); }

    virtual void OnMessage(const KeyValues *params, VPANEL fromPanel) {
        if( Panel_DispatchMessage( m_PyMessageMap, params, fromPanel ) )
            return;
        Panel::OnMessage(params, fromPanel);
    }
    
    void RegMessageMethod( const char *message, boost::python::object method, int numParams=0, 
           const char *nameFirstParam="", int typeFirstParam=DATATYPE_VOID, 
           const char *nameSecondParam="", int typeSecondParam=DATATYPE_VOID ) { 
           py_message_entry_t entry;
           entry.method = method;
           entry.numParams = numParams;
           entry.firstParamName = nameFirstParam;
           entry.firstParamSymbol = KeyValuesSystem()->GetSymbolForString(nameFirstParam);
           entry.firstParamType = typeFirstParam;
           entry.secondParamName = nameSecondParam;
           entry.secondParamSymbol = KeyValuesSystem()->GetSymbolForString(nameSecondParam);
           entry.secondParamType = typeSecondParam;
    
           GetPyMessageMap().Insert(message, entry);
    }
    virtual Panel *GetPanel() { return this; }

    virtual void EnableSBuffer( bool bUseBuffer ) { PyPanel::EnableSBuffer( bUseBuffer ); }

    virtual bool IsSBufferEnabled() { return PyPanel::IsSBufferEnabled(); }

    virtual void FlushSBuffer() { PyPanel::FlushSBuffer(); }

    virtual void SetFlushedByParent( bool bEnabled ) { PyPanel::SetFlushedByParent( bEnabled ); }

};

void register_CWars_Model_Panel_class(){

    { //::CWars_Model_Panel
        typedef bp::class_< CWars_Model_Panel_wrapper, bp::bases< vgui::EditablePanel >, boost::noncopyable > CWars_Model_Panel_exposer_t;
        CWars_Model_Panel_exposer_t CWars_Model_Panel_exposer = CWars_Model_Panel_exposer_t( "CWars_Model_Panel", bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("name") )) );
        bp::scope CWars_Model_Panel_scope( CWars_Model_Panel_exposer );
        { //::CWars_Model_Panel::GetPanelBaseClassName
        
            typedef char const * ( *GetPanelBaseClassName_function_type )(  );
            
            CWars_Model_Panel_exposer.def( 
                "GetPanelBaseClassName"
                , GetPanelBaseClassName_function_type( &::CWars_Model_Panel::GetPanelBaseClassName ) );
        
        }
        { //::CWars_Model_Panel::GetPanelClassName
        
            typedef char const * ( *GetPanelClassName_function_type )(  );
            
            CWars_Model_Panel_exposer.def( 
                "GetPanelClassName"
                , GetPanelClassName_function_type( &::CWars_Model_Panel::GetPanelClassName ) );
        
        }
        { //::vgui::Panel::AddToOverridableColors
        
            typedef void ( CWars_Model_Panel_wrapper::*AddToOverridableColors_function_type )( ::Color *,char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "AddToOverridableColors"
                , AddToOverridableColors_function_type( &CWars_Model_Panel_wrapper::AddToOverridableColors )
                , ( bp::arg("pColor"), bp::arg("scriptname") ) );
        
        }
        { //::vgui::Panel::ApplyOverridableColors
        
            typedef void ( CWars_Model_Panel_wrapper::*ApplyOverridableColors_function_type )( ::vgui::IScheme * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "ApplyOverridableColors"
                , ApplyOverridableColors_function_type( &CWars_Model_Panel_wrapper::ApplyOverridableColors )
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::ApplySchemeSettings
        
            typedef void ( ::vgui::Panel::*ApplySchemeSettings_function_type )( ::vgui::IScheme * ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_ApplySchemeSettings_function_type )( ::vgui::IScheme * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "ApplySchemeSettings"
                , ApplySchemeSettings_function_type(&::vgui::Panel::ApplySchemeSettings)
                , default_ApplySchemeSettings_function_type(&CWars_Model_Panel_wrapper::default_ApplySchemeSettings)
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::EditablePanel::ApplyUserConfigSettings
        
            typedef void ( CWars_Model_Panel_wrapper::*ApplyUserConfigSettings_function_type )( ::KeyValues * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "ApplyUserConfigSettings"
                , ApplyUserConfigSettings_function_type( &CWars_Model_Panel_wrapper::ApplyUserConfigSettings )
                , ( bp::arg("userConfig") ) );
        
        }
        { //::vgui::Panel::CreateDragData
        
            typedef void ( CWars_Model_Panel_wrapper::*CreateDragData_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "CreateDragData"
                , CreateDragData_function_type( &CWars_Model_Panel_wrapper::CreateDragData ) );
        
        }
        { //::vgui::Panel::DragDropStartDragging
        
            typedef void ( CWars_Model_Panel_wrapper::*DragDropStartDragging_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "DragDropStartDragging"
                , DragDropStartDragging_function_type( &CWars_Model_Panel_wrapper::DragDropStartDragging ) );
        
        }
        { //::vgui::Panel::GetNavDownPanel
        
            typedef ::vgui::Panel * ( CWars_Model_Panel_wrapper::*GetNavDownPanel_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "GetNavDownPanel"
                , GetNavDownPanel_function_type( &CWars_Model_Panel_wrapper::GetNavDownPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavLeftPanel
        
            typedef ::vgui::Panel * ( CWars_Model_Panel_wrapper::*GetNavLeftPanel_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "GetNavLeftPanel"
                , GetNavLeftPanel_function_type( &CWars_Model_Panel_wrapper::GetNavLeftPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavRightPanel
        
            typedef ::vgui::Panel * ( CWars_Model_Panel_wrapper::*GetNavRightPanel_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "GetNavRightPanel"
                , GetNavRightPanel_function_type( &CWars_Model_Panel_wrapper::GetNavRightPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavUpPanel
        
            typedef ::vgui::Panel * ( CWars_Model_Panel_wrapper::*GetNavUpPanel_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "GetNavUpPanel"
                , GetNavUpPanel_function_type( &CWars_Model_Panel_wrapper::GetNavUpPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::EditablePanel::GetUserConfigSettings
        
            typedef void ( CWars_Model_Panel_wrapper::*GetUserConfigSettings_function_type )( ::KeyValues * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "GetUserConfigSettings"
                , GetUserConfigSettings_function_type( &CWars_Model_Panel_wrapper::GetUserConfigSettings )
                , ( bp::arg("userConfig") ) );
        
        }
        { //::vgui::Panel::InternalInitDefaultValues
        
            typedef void ( CWars_Model_Panel_wrapper::*InternalInitDefaultValues_function_type )( ::PanelAnimationMap * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "InternalInitDefaultValues"
                , InternalInitDefaultValues_function_type( &CWars_Model_Panel_wrapper::InternalInitDefaultValues )
                , ( bp::arg("map") ) );
        
        }
        { //::vgui::EditablePanel::OnChildAdded
        
            typedef void ( CWars_Model_Panel_wrapper::*OnChildAdded_function_type )( ::vgui::VPANEL ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnChildAdded"
                , OnChildAdded_function_type( &CWars_Model_Panel_wrapper::default_OnChildAdded )
                , ( bp::arg("child") ) );
        
        }
        { //::vgui::EditablePanel::OnClose
        
            typedef void ( CWars_Model_Panel_wrapper::*OnClose_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnClose"
                , OnClose_function_type( &CWars_Model_Panel_wrapper::default_OnClose ) );
        
        }
        { //::vgui::Panel::OnCommand
        
            typedef void ( ::vgui::Panel::*OnCommand_function_type )( char const * ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnCommand_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnCommand"
                , OnCommand_function_type(&::vgui::Panel::OnCommand)
                , default_OnCommand_function_type(&CWars_Model_Panel_wrapper::default_OnCommand)
                , ( bp::arg("command") ) );
        
        }
        { //::vgui::Panel::OnContinueDragging
        
            typedef void ( CWars_Model_Panel_wrapper::*OnContinueDragging_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnContinueDragging"
                , OnContinueDragging_function_type( &CWars_Model_Panel_wrapper::OnContinueDragging ) );
        
        }
        { //::vgui::EditablePanel::OnCurrentDefaultButtonSet
        
            typedef void ( CWars_Model_Panel_wrapper::*OnCurrentDefaultButtonSet_function_type )( ::vgui::VPANEL ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnCurrentDefaultButtonSet"
                , OnCurrentDefaultButtonSet_function_type( &CWars_Model_Panel_wrapper::OnCurrentDefaultButtonSet )
                , ( bp::arg("button") ) );
        
        }
        { //::vgui::Panel::OnCursorEntered
        
            typedef void ( ::vgui::Panel::*OnCursorEntered_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnCursorEntered_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type(&::vgui::Panel::OnCursorEntered)
                , default_OnCursorEntered_function_type(&CWars_Model_Panel_wrapper::default_OnCursorEntered) );
        
        }
        { //::vgui::Panel::OnCursorExited
        
            typedef void ( ::vgui::Panel::*OnCursorExited_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnCursorExited_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type(&::vgui::Panel::OnCursorExited)
                , default_OnCursorExited_function_type(&CWars_Model_Panel_wrapper::default_OnCursorExited) );
        
        }
        { //::vgui::Panel::OnCursorMoved
        
            typedef void ( ::vgui::Panel::*OnCursorMoved_function_type )( int,int ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnCursorMoved_function_type )( int,int ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnCursorMoved"
                , OnCursorMoved_function_type(&::vgui::Panel::OnCursorMoved)
                , default_OnCursorMoved_function_type(&CWars_Model_Panel_wrapper::default_OnCursorMoved)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::EditablePanel::OnDefaultButtonSet
        
            typedef void ( CWars_Model_Panel_wrapper::*OnDefaultButtonSet_function_type )( ::vgui::VPANEL ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnDefaultButtonSet"
                , OnDefaultButtonSet_function_type( &CWars_Model_Panel_wrapper::OnDefaultButtonSet )
                , ( bp::arg("button") ) );
        
        }
        { //::vgui::EditablePanel::OnFindDefaultButton
        
            typedef void ( CWars_Model_Panel_wrapper::*OnFindDefaultButton_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnFindDefaultButton"
                , OnFindDefaultButton_function_type( &CWars_Model_Panel_wrapper::OnFindDefaultButton ) );
        
        }
        { //::vgui::Panel::OnFinishDragging
        
            typedef void ( CWars_Model_Panel_wrapper::*OnFinishDragging_function_type )( bool,::vgui::MouseCode,bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnFinishDragging"
                , OnFinishDragging_function_type( &CWars_Model_Panel_wrapper::OnFinishDragging )
                , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::OnKeyCodePressed
        
            typedef void ( ::vgui::Panel::*OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnKeyCodePressed"
                , OnKeyCodePressed_function_type(&::vgui::Panel::OnKeyCodePressed)
                , default_OnKeyCodePressed_function_type(&CWars_Model_Panel_wrapper::default_OnKeyCodePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyCodeReleased
        
            typedef void ( ::vgui::Panel::*OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnKeyCodeReleased"
                , OnKeyCodeReleased_function_type(&::vgui::Panel::OnKeyCodeReleased)
                , default_OnKeyCodeReleased_function_type(&CWars_Model_Panel_wrapper::default_OnKeyCodeReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::EditablePanel::OnKeyCodeTyped
        
            typedef void ( ::vgui::EditablePanel::*OnKeyCodeTyped_function_type )( ::vgui::KeyCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnKeyCodeTyped_function_type )( ::vgui::KeyCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnKeyCodeTyped"
                , OnKeyCodeTyped_function_type(&::vgui::EditablePanel::OnKeyCodeTyped)
                , default_OnKeyCodeTyped_function_type(&CWars_Model_Panel_wrapper::default_OnKeyCodeTyped)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyFocusTicked
        
            typedef void ( ::vgui::Panel::*OnKeyFocusTicked_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnKeyFocusTicked_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnKeyFocusTicked"
                , OnKeyFocusTicked_function_type(&::vgui::Panel::OnKeyFocusTicked)
                , default_OnKeyFocusTicked_function_type(&CWars_Model_Panel_wrapper::default_OnKeyFocusTicked) );
        
        }
        { //::vgui::Panel::OnKillFocus
        
            typedef void ( ::vgui::Panel::*OnKillFocus_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnKillFocus_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnKillFocus"
                , OnKillFocus_function_type(&::vgui::Panel::OnKillFocus)
                , default_OnKillFocus_function_type(&CWars_Model_Panel_wrapper::default_OnKillFocus) );
        
        }
        { //::vgui::Panel::OnMouseCaptureLost
        
            typedef void ( ::vgui::Panel::*OnMouseCaptureLost_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseCaptureLost_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseCaptureLost"
                , OnMouseCaptureLost_function_type(&::vgui::Panel::OnMouseCaptureLost)
                , default_OnMouseCaptureLost_function_type(&CWars_Model_Panel_wrapper::default_OnMouseCaptureLost) );
        
        }
        { //::vgui::Panel::OnMouseDoublePressed
        
            typedef void ( ::vgui::Panel::*OnMouseDoublePressed_function_type )( ::vgui::MouseCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseDoublePressed_function_type )( ::vgui::MouseCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseDoublePressed"
                , OnMouseDoublePressed_function_type(&::vgui::Panel::OnMouseDoublePressed)
                , default_OnMouseDoublePressed_function_type(&CWars_Model_Panel_wrapper::default_OnMouseDoublePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseFocusTicked
        
            typedef void ( ::vgui::Panel::*OnMouseFocusTicked_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseFocusTicked_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseFocusTicked"
                , OnMouseFocusTicked_function_type(&::vgui::Panel::OnMouseFocusTicked)
                , default_OnMouseFocusTicked_function_type(&CWars_Model_Panel_wrapper::default_OnMouseFocusTicked) );
        
        }
        { //::vgui::Panel::OnMousePressed
        
            typedef void ( ::vgui::Panel::*OnMousePressed_function_type )( ::vgui::MouseCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMousePressed_function_type )( ::vgui::MouseCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMousePressed"
                , OnMousePressed_function_type(&::vgui::Panel::OnMousePressed)
                , default_OnMousePressed_function_type(&CWars_Model_Panel_wrapper::default_OnMousePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseReleased
        
            typedef void ( ::vgui::Panel::*OnMouseReleased_function_type )( ::vgui::MouseCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseReleased_function_type )( ::vgui::MouseCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseReleased"
                , OnMouseReleased_function_type(&::vgui::Panel::OnMouseReleased)
                , default_OnMouseReleased_function_type(&CWars_Model_Panel_wrapper::default_OnMouseReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseTriplePressed
        
            typedef void ( ::vgui::Panel::*OnMouseTriplePressed_function_type )( ::vgui::MouseCode ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseTriplePressed_function_type )( ::vgui::MouseCode ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseTriplePressed"
                , OnMouseTriplePressed_function_type(&::vgui::Panel::OnMouseTriplePressed)
                , default_OnMouseTriplePressed_function_type(&CWars_Model_Panel_wrapper::default_OnMouseTriplePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseWheeled
        
            typedef void ( ::vgui::Panel::*OnMouseWheeled_function_type )( int ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnMouseWheeled_function_type )( int ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnMouseWheeled"
                , OnMouseWheeled_function_type(&::vgui::Panel::OnMouseWheeled)
                , default_OnMouseWheeled_function_type(&CWars_Model_Panel_wrapper::default_OnMouseWheeled)
                , ( bp::arg("delta") ) );
        
        }
        { //::vgui::EditablePanel::OnRequestFocus
        
            typedef void ( ::vgui::EditablePanel::*OnRequestFocus_function_type )( ::vgui::VPANEL,::vgui::VPANEL ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnRequestFocus_function_type )( ::vgui::VPANEL,::vgui::VPANEL ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnRequestFocus"
                , OnRequestFocus_function_type(&::vgui::EditablePanel::OnRequestFocus)
                , default_OnRequestFocus_function_type(&CWars_Model_Panel_wrapper::default_OnRequestFocus)
                , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) );
        
        }
        { //::vgui::Panel::OnScreenSizeChanged
        
            typedef void ( CWars_Model_Panel_wrapper::*OnScreenSizeChanged_function_type )( int,int ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnScreenSizeChanged"
                , OnScreenSizeChanged_function_type( &CWars_Model_Panel_wrapper::default_OnScreenSizeChanged )
                , ( bp::arg("oldwide"), bp::arg("oldtall") ) );
        
        }
        { //::vgui::EditablePanel::OnSetFocus
        
            typedef void ( ::vgui::EditablePanel::*OnSetFocus_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnSetFocus_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnSetFocus"
                , OnSetFocus_function_type(&::vgui::EditablePanel::OnSetFocus)
                , default_OnSetFocus_function_type(&CWars_Model_Panel_wrapper::default_OnSetFocus) );
        
        }
        { //::vgui::EditablePanel::OnSizeChanged
        
            typedef void ( CWars_Model_Panel_wrapper::*OnSizeChanged_function_type )( int,int ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnSizeChanged"
                , OnSizeChanged_function_type( &CWars_Model_Panel_wrapper::default_OnSizeChanged )
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::OnStartDragging
        
            typedef void ( CWars_Model_Panel_wrapper::*OnStartDragging_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnStartDragging"
                , OnStartDragging_function_type( &CWars_Model_Panel_wrapper::OnStartDragging ) );
        
        }
        { //::vgui::Panel::OnThink
        
            typedef void ( ::vgui::Panel::*OnThink_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnThink_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnThink"
                , OnThink_function_type(&::vgui::Panel::OnThink)
                , default_OnThink_function_type(&CWars_Model_Panel_wrapper::default_OnThink) );
        
        }
        { //::vgui::Panel::OnTick
        
            typedef void ( ::vgui::Panel::*OnTick_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_OnTick_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "OnTick"
                , OnTick_function_type(&::vgui::Panel::OnTick)
                , default_OnTick_function_type(&CWars_Model_Panel_wrapper::default_OnTick) );
        
        }
        { //::vgui::Panel::PaintBuildOverlay
        
            typedef void ( ::vgui::Panel::*PaintBuildOverlay_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_PaintBuildOverlay_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "PaintBuildOverlay"
                , PaintBuildOverlay_function_type(&::vgui::Panel::PaintBuildOverlay)
                , default_PaintBuildOverlay_function_type(&CWars_Model_Panel_wrapper::default_PaintBuildOverlay) );
        
        }
        { //::vgui::Panel::PaintTraverse
        
            typedef void ( CWars_Model_Panel_wrapper::*PaintTraverse_function_type )( bool,bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "PaintTraverse"
                , PaintTraverse_function_type( &CWars_Model_Panel_wrapper::PaintTraverse )
                , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) );
        
        }
        { //::vgui::EditablePanel::PerformLayout
        
            typedef void ( ::vgui::EditablePanel::*PerformLayout_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_PerformLayout_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type(&::vgui::EditablePanel::PerformLayout)
                , default_PerformLayout_function_type(&CWars_Model_Panel_wrapper::default_PerformLayout) );
        
        }
        { //::vgui::Panel::PostChildPaint
        
            typedef void ( ::vgui::Panel::*PostChildPaint_function_type )(  ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_PostChildPaint_function_type )(  ) ;
            
            CWars_Model_Panel_exposer.def( 
                "PostChildPaint"
                , PostChildPaint_function_type(&::vgui::Panel::PostChildPaint)
                , default_PostChildPaint_function_type(&CWars_Model_Panel_wrapper::default_PostChildPaint) );
        
        }
        { //::vgui::Panel::SetBgColor
        
            typedef void ( ::vgui::Panel::*SetBgColor_function_type )( ::Color ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetBgColor_function_type )( ::Color ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetBgColor"
                , SetBgColor_function_type(&::vgui::Panel::SetBgColor)
                , default_SetBgColor_function_type(&CWars_Model_Panel_wrapper::default_SetBgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetBorder
        
            typedef void ( ::vgui::Panel::*SetBorder_function_type )( ::vgui::IBorder * ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetBorder_function_type )( ::vgui::IBorder * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetBorder"
                , SetBorder_function_type(&::vgui::Panel::SetBorder)
                , default_SetBorder_function_type(&CWars_Model_Panel_wrapper::default_SetBorder)
                , ( bp::arg("border") ) );
        
        }
        { //::vgui::Panel::SetCursor
        
            typedef void ( ::vgui::Panel::*SetCursor_function_type )( ::vgui::HCursor ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetCursor_function_type )( ::vgui::HCursor ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetCursor"
                , SetCursor_function_type(&::vgui::Panel::SetCursor)
                , default_SetCursor_function_type(&CWars_Model_Panel_wrapper::default_SetCursor)
                , ( bp::arg("cursor") ) );
        
        }
        { //::vgui::Panel::SetDragEnabled
        
            typedef void ( ::vgui::Panel::*SetDragEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetDragEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetDragEnabled"
                , SetDragEnabled_function_type(&::vgui::Panel::SetDragEnabled)
                , default_SetDragEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetDragEnabled)
                , ( bp::arg("enabled") ) );
        
        }
        { //::vgui::Panel::SetEnabled
        
            typedef void ( ::vgui::Panel::*SetEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetEnabled"
                , SetEnabled_function_type(&::vgui::Panel::SetEnabled)
                , default_SetEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetFgColor
        
            typedef void ( ::vgui::Panel::*SetFgColor_function_type )( ::Color ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetFgColor_function_type )( ::Color ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetFgColor"
                , SetFgColor_function_type(&::vgui::Panel::SetFgColor)
                , default_SetFgColor_function_type(&CWars_Model_Panel_wrapper::default_SetFgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetKeyBoardInputEnabled
        
            typedef void ( ::vgui::Panel::*SetKeyBoardInputEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetKeyBoardInputEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type(&::vgui::Panel::SetKeyBoardInputEnabled)
                , default_SetKeyBoardInputEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetKeyBoardInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetMouseInputEnabled
        
            typedef void ( ::vgui::Panel::*SetMouseInputEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetMouseInputEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type(&::vgui::Panel::SetMouseInputEnabled)
                , default_SetMouseInputEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetMouseInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavDown_function_type )( ::vgui::Panel * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &::vgui::Panel::SetNavDown )
                , ( bp::arg("navDown") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef void ( CWars_Model_Panel_wrapper::*SetNavDown_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &CWars_Model_Panel_wrapper::SetNavDown )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavLeft_function_type )( ::vgui::Panel * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &::vgui::Panel::SetNavLeft )
                , ( bp::arg("navLeft") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef void ( CWars_Model_Panel_wrapper::*SetNavLeft_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &CWars_Model_Panel_wrapper::SetNavLeft )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavRight_function_type )( ::vgui::Panel * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &::vgui::Panel::SetNavRight )
                , ( bp::arg("navRight") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef void ( CWars_Model_Panel_wrapper::*SetNavRight_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &CWars_Model_Panel_wrapper::SetNavRight )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavUp_function_type )( ::vgui::Panel * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &::vgui::Panel::SetNavUp )
                , ( bp::arg("navUp") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef void ( CWars_Model_Panel_wrapper::*SetNavUp_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &CWars_Model_Panel_wrapper::SetNavUp )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetOverridableColor
        
            typedef void ( CWars_Model_Panel_wrapper::*SetOverridableColor_function_type )( ::Color *,::Color const & ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetOverridableColor"
                , SetOverridableColor_function_type( &CWars_Model_Panel_wrapper::SetOverridableColor )
                , ( bp::arg("pColor"), bp::arg("newColor") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetPaintBackgroundEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetPaintBackgroundEnabled"
                , SetPaintBackgroundEnabled_function_type(&::vgui::Panel::SetPaintBackgroundEnabled)
                , default_SetPaintBackgroundEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetPaintBackgroundEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundType
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundType_function_type )( int ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetPaintBackgroundType_function_type )( int ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetPaintBackgroundType"
                , SetPaintBackgroundType_function_type(&::vgui::Panel::SetPaintBackgroundType)
                , default_SetPaintBackgroundType_function_type(&CWars_Model_Panel_wrapper::default_SetPaintBackgroundType)
                , ( bp::arg("type") ) );
        
        }
        { //::vgui::Panel::SetPaintBorderEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBorderEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetPaintBorderEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetPaintBorderEnabled"
                , SetPaintBorderEnabled_function_type(&::vgui::Panel::SetPaintBorderEnabled)
                , default_SetPaintBorderEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetPaintBorderEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintEnabled_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetPaintEnabled_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetPaintEnabled"
                , SetPaintEnabled_function_type(&::vgui::Panel::SetPaintEnabled)
                , default_SetPaintEnabled_function_type(&CWars_Model_Panel_wrapper::default_SetPaintEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type )( ::vgui::Panel * ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetParent_function_type )( ::vgui::Panel * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&CWars_Model_Panel_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type )( ::vgui::VPANEL ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetParent_function_type )( ::vgui::VPANEL ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&CWars_Model_Panel_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( char const * ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetScheme_function_type )( char const * ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&CWars_Model_Panel_wrapper::default_SetScheme)
                , ( bp::arg("tag") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( ::vgui::HScheme ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetScheme_function_type )( ::vgui::HScheme ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&CWars_Model_Panel_wrapper::default_SetScheme)
                , ( bp::arg("scheme") ) );
        
        }
        { //::vgui::Panel::SetVisible
        
            typedef void ( ::vgui::Panel::*SetVisible_function_type )( bool ) ;
            typedef void ( CWars_Model_Panel_wrapper::*default_SetVisible_function_type )( bool ) ;
            
            CWars_Model_Panel_exposer.def( 
                "SetVisible"
                , SetVisible_function_type(&::vgui::Panel::SetVisible)
                , default_SetVisible_function_type(&CWars_Model_Panel_wrapper::default_SetVisible)
                , ( bp::arg("state") ) );
        
        }
        CWars_Model_Panel_exposer.staticmethod( "GetPanelBaseClassName" );
        CWars_Model_Panel_exposer.staticmethod( "GetPanelClassName" );
        { //::vgui::CWars_Model_Panel::Paint

        typedef void ( ::vgui::Panel::*Paint_function_type )(  ) ;
        typedef void ( CWars_Model_Panel_wrapper::*default_Paint_function_type )(  ) ;
        
        CWars_Model_Panel_exposer.def( 
            "Paint"
            , Paint_function_type(&::vgui::Panel::Paint)
            , default_Paint_function_type(&CWars_Model_Panel_wrapper::default_Paint) );

    }
    { //::vgui::CWars_Model_Panel::PaintBackground

        typedef void ( ::vgui::Panel::*PaintBackground_function_type )(  ) ;
        typedef void ( CWars_Model_Panel_wrapper::*default_PaintBackground_function_type )(  ) ;
        
        CWars_Model_Panel_exposer.def( 
            "PaintBackground"
            , PaintBackground_function_type(&::vgui::Panel::PaintBackground)
            , default_PaintBackground_function_type(&CWars_Model_Panel_wrapper::default_PaintBackground) );
    
    }
    { //::vgui::CWars_Model_Panel::InvalidateLayout
    
        typedef void ( ::vgui::Panel::*InvalidateLayout_function_type )( bool,bool ) ;
        typedef void ( CWars_Model_Panel_wrapper::*default_InvalidateLayout_function_type )( bool,bool ) ;
        
        CWars_Model_Panel_exposer.def( 
            "InvalidateLayout"
            , InvalidateLayout_function_type(&::vgui::Panel::InvalidateLayout)
            , default_InvalidateLayout_function_type(&CWars_Model_Panel_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) );
    
    }
        CWars_Model_Panel_exposer.def( "RegMessageMethod", &CWars_Model_Panel_wrapper::RegMessageMethod
        , ( bp::arg("message"), bp::arg("method"), bp::arg("numParams")=(int)(0), bp::arg("nameFirstParam")="", bp::arg("typeFirstParam")=int(::vgui::DATATYPE_VOID), bp::arg("nameSecondParam")="", bp::arg("typeSecondParam")=int(::vgui::DATATYPE_VOID) ));
        CWars_Model_Panel_exposer.def( "EnableSBuffer", &CWars_Model_Panel_wrapper::EnableSBuffer, bp::arg("bUseBuffer") );
        CWars_Model_Panel_exposer.def( "IsSBufferEnabled", &CWars_Model_Panel_wrapper::IsSBufferEnabled );
        CWars_Model_Panel_exposer.def( "FlushSBuffer", &CWars_Model_Panel_wrapper::FlushSBuffer );
        CWars_Model_Panel_exposer.def( "SetFlushedByParent", &CWars_Model_Panel_wrapper::SetFlushedByParent, bp::arg("bEnabled") );
    }

}
