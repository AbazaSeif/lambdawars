// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "hl2wars/hl2wars_baseminimap.h"
#include "hl2wars/vgui_video_general.h"
#include "hl2wars/vgui/wars_model_panel.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "TextEntry_pypp.hpp"

namespace bp = boost::python;

struct TextEntry_wrapper : PyPanel, vgui::TextEntry, bp::wrapper< vgui::TextEntry > {

    TextEntry_wrapper(::vgui::Panel * parent, char const * panelName )
    : vgui::TextEntry( parent, panelName )
      , bp::wrapper< vgui::TextEntry >(){
        // constructor
    	g_PythonPanelCount++;
    }

    void AddAnotherLine( int & cx, int & cy ){
        vgui::TextEntry::AddAnotherLine( cx, cy );
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::TextEntry::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::TextEntry::ApplySchemeSettings( pScheme );
    }

    void ApplySettings( ::KeyValues * inResourceData ){
        vgui::TextEntry::ApplySettings( inResourceData );
    }

    void CursorToPixelSpace( int cursorPos, int & cx, int & cy ){
        vgui::TextEntry::CursorToPixelSpace( cursorPos, cx, cy );
    }

    int DrawChar( wchar_t ch, ::vgui::HFont font, int index, int x, int y ){
        return vgui::TextEntry::DrawChar( ch, font, index, x, y );
    }

    bool DrawCursor( int x, int y ){
        return vgui::TextEntry::DrawCursor( x, y );
    }

    void FireActionSignal(  ){
        vgui::TextEntry::FireActionSignal(  );
    }

    char const * GetDescription(  ){
        return vgui::TextEntry::GetDescription(  );
    }

    bool GetSelectedRange( int & cx0, int & cx1 ){
        return vgui::TextEntry::GetSelectedRange( cx0, cx1 );
    }

    void GetSettings( ::KeyValues * outResourceData ){
        vgui::TextEntry::GetSettings( outResourceData );
    }

    int GetStartDrawIndex( int & lineBreakIndexIndex ){
        return vgui::TextEntry::GetStartDrawIndex( lineBreakIndexIndex );
    }

    int GetYStart(  ){
        return vgui::TextEntry::GetYStart(  );
    }

    bool IsCursorOffLeftSideOfWindow( int cursorPos ){
        return vgui::TextEntry::IsCursorOffLeftSideOfWindow( cursorPos );
    }

    bool IsCursorOffRightSideOfWindow( int cursorPos ){
        return vgui::TextEntry::IsCursorOffRightSideOfWindow( cursorPos );
    }

    virtual void MoveCursor( int line, int pixelsAcross ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, MoveCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, MoveCursor )
        bp::override func_MoveCursor = this->get_override( "MoveCursor" );
        if( func_MoveCursor.ptr() != Py_None )
            try {
                func_MoveCursor( line, pixelsAcross );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::MoveCursor( line, pixelsAcross );
            }
        else
            this->vgui::TextEntry::MoveCursor( line, pixelsAcross );
    }
    
    void default_MoveCursor( int line, int pixelsAcross ) {
        vgui::TextEntry::MoveCursor( line, pixelsAcross );
    }

    bool NeedsEllipses( ::vgui::HFont font, int * pIndex ){
        return vgui::TextEntry::NeedsEllipses( font, pIndex );
    }

    void OnChangeIME( bool forward ){
        vgui::TextEntry::OnChangeIME( forward );
    }

    virtual void OnCursorEntered(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorEntered(  );
            }
        else
            this->vgui::TextEntry::OnCursorEntered(  );
    }
    
    virtual void default_OnCursorEntered(  ){
        vgui::TextEntry::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorExited(  );
            }
        else
            this->vgui::TextEntry::OnCursorExited(  );
    }
    
    virtual void default_OnCursorExited(  ){
        vgui::TextEntry::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorMoved( x, y );
            }
        else
            this->vgui::TextEntry::OnCursorMoved( x, y );
    }
    
    virtual void default_OnCursorMoved( int x, int y ){
        vgui::TextEntry::OnCursorMoved( x, y );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKeyCodeTyped( code );
            }
        else
            this->vgui::TextEntry::OnKeyCodeTyped( code );
    }
    
    virtual void default_OnKeyCodeTyped( ::vgui::KeyCode code ){
        vgui::TextEntry::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKeyFocusTicked(  );
            }
        else
            this->vgui::TextEntry::OnKeyFocusTicked(  );
    }
    
    virtual void default_OnKeyFocusTicked(  ){
        vgui::TextEntry::OnKeyFocusTicked( );
    }

    virtual void OnKillFocus(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKillFocus(  );
            }
        else
            this->vgui::TextEntry::OnKillFocus(  );
    }
    
    virtual void default_OnKillFocus(  ){
        vgui::TextEntry::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseCaptureLost(  );
            }
        else
            this->vgui::TextEntry::OnMouseCaptureLost(  );
    }
    
    virtual void default_OnMouseCaptureLost(  ){
        vgui::TextEntry::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseDoublePressed( code );
            }
        else
            this->vgui::TextEntry::OnMouseDoublePressed( code );
    }
    
    virtual void default_OnMouseDoublePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseFocusTicked(  );
            }
        else
            this->vgui::TextEntry::OnMouseFocusTicked(  );
    }
    
    virtual void default_OnMouseFocusTicked(  ){
        vgui::TextEntry::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMousePressed( code );
            }
        else
            this->vgui::TextEntry::OnMousePressed( code );
    }
    
    virtual void default_OnMousePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseReleased( code );
            }
        else
            this->vgui::TextEntry::OnMouseReleased( code );
    }
    
    virtual void default_OnMouseReleased( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseTriplePressed( code );
            }
        else
            this->vgui::TextEntry::OnMouseTriplePressed( code );
    }
    
    virtual void default_OnMouseTriplePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseWheeled( delta );
            }
        else
            this->vgui::TextEntry::OnMouseWheeled( delta );
    }
    
    virtual void default_OnMouseWheeled( int delta ){
        vgui::TextEntry::OnMouseWheeled( delta );
    }

    virtual void OnSetFocus(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnSetFocus(  );
            }
        else
            this->vgui::TextEntry::OnSetFocus(  );
    }
    
    virtual void default_OnSetFocus(  ){
        vgui::TextEntry::OnSetFocus( );
    }

    void OnSetText( wchar_t const * text ){
        vgui::TextEntry::OnSetText( text );
    }

    virtual void OnSizeChanged( int newWide, int newTall ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnSizeChanged( newWide, newTall );
            }
        else
            this->vgui::TextEntry::OnSizeChanged( newWide, newTall );
    }
    
    virtual void default_OnSizeChanged( int newWide, int newTall ){
        vgui::TextEntry::OnSizeChanged( newWide, newTall );
    }

    void OnSliderMoved(  ){
        vgui::TextEntry::OnSliderMoved(  );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::PerformLayout(  );
            }
        else
            this->vgui::TextEntry::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::TextEntry::PerformLayout( );
    }

    int PixelToCursorSpace( int cx, int cy ){
        return vgui::TextEntry::PixelToCursorSpace( cx, cy );
    }

    void ResetCursorBlink(  ){
        vgui::TextEntry::ResetCursorBlink(  );
    }

    void ScrollLeft(  ){
        vgui::TextEntry::ScrollLeft(  );
    }

    void ScrollLeftForResize(  ){
        vgui::TextEntry::ScrollLeftForResize(  );
    }

    void ScrollRight(  ){
        vgui::TextEntry::ScrollRight(  );
    }

    bool SelectCheck( bool fromMouse=false ){
        return vgui::TextEntry::SelectCheck( fromMouse );
    }

    void SetCharAt( wchar_t ch, int index ){
        vgui::TextEntry::SetCharAt( ch, index );
    }

    virtual void SetDisabledBgColor( ::Color col ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetDisabledBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetDisabledBgColor )
        bp::override func_SetDisabledBgColor = this->get_override( "SetDisabledBgColor" );
        if( func_SetDisabledBgColor.ptr() != Py_None )
            try {
                func_SetDisabledBgColor( col );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetDisabledBgColor( col );
            }
        else
            this->vgui::TextEntry::SetDisabledBgColor( col );
    }
    
    void default_SetDisabledBgColor( ::Color col ) {
        vgui::TextEntry::SetDisabledBgColor( col );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetEnabled( state );
            }
        else
            this->vgui::TextEntry::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::TextEntry::SetEnabled( state );
    }

    virtual void SetMultiline( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetMultiline )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetMultiline )
        bp::override func_SetMultiline = this->get_override( "SetMultiline" );
        if( func_SetMultiline.ptr() != Py_None )
            try {
                func_SetMultiline( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetMultiline( state );
            }
        else
            this->vgui::TextEntry::SetMultiline( state );
    }
    
    void default_SetMultiline( bool state ) {
        vgui::TextEntry::SetMultiline( state );
    }

    virtual void SetText( wchar_t const * wszText ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( wszText );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetText( wszText );
            }
        else
            this->vgui::TextEntry::SetText( wszText );
    }
    
    void default_SetText( wchar_t const * wszText ) {
        vgui::TextEntry::SetText( wszText );
    }

    virtual void SetText( char const * text ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( text );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetText( text );
            }
        else
            this->vgui::TextEntry::SetText( text );
    }
    
    void default_SetText( char const * text ) {
        vgui::TextEntry::SetText( text );
    }

    virtual void SetVerticalScrollbar( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetVerticalScrollbar )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetVerticalScrollbar )
        bp::override func_SetVerticalScrollbar = this->get_override( "SetVerticalScrollbar" );
        if( func_SetVerticalScrollbar.ptr() != Py_None )
            try {
                func_SetVerticalScrollbar( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetVerticalScrollbar( state );
            }
        else
            this->vgui::TextEntry::SetVerticalScrollbar( state );
    }
    
    void default_SetVerticalScrollbar( bool state ) {
        vgui::TextEntry::SetVerticalScrollbar( state );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors( ::vgui::IScheme * pScheme ){
        vgui::Panel::ApplyOverridableColors( pScheme );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    void InternalInitDefaultValues( ::PanelAnimationMap * map ){
        vgui::Panel::InternalInitDefaultValues( map );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnThink(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnThink(  );
            }
        else
            this->vgui::Panel::OnThink(  );
    }
    
    void default_OnThink(  ) {
        vgui::Panel::OnThink( );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetNavDown( char const * controlName ){
        vgui::Panel::SetNavDown( controlName );
    }

    void SetNavLeft( char const * controlName ){
        vgui::Panel::SetNavLeft( controlName );
    }

    void SetNavRight( char const * controlName ){
        vgui::Panel::SetNavRight( controlName );
    }

    void SetNavUp( char const * controlName ){
        vgui::Panel::SetNavUp( controlName );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual void Paint(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( vgui::Panel, Paint )
            PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, Paint )
            bp::override func_Paint = this->get_override( "Paint" );
            if( func_Paint.ptr() != Py_None )
                try {
                    func_Paint(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->vgui::Panel::Paint(  );
                }
            else
                this->vgui::Panel::Paint(  );
                
            FinishRecordSBuffer( m_PaintCallBuffer );
 
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintCallBuffer );
        }
    }
    
    void default_Paint(  ) {
        vgui::Panel::Paint( );
    }

    virtual void PaintBackground(  ) {
        if( !IsSBufferEnabled() || ShouldRecordSBuffer( m_PaintBackgroundCallBuffer ) )
        {
            PY_OVERRIDE_CHECK( vgui::Panel, PaintBackground )
            PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBackground )
            bp::override func_PaintBackground = this->get_override( "PaintBackground" );
            if( func_PaintBackground.ptr() != Py_None )
                try {
                    func_PaintBackground(  );
                } catch(bp::error_already_set &) {
                    PyErr_Print();
                    this->vgui::TextEntry::PaintBackground(  );
                }
            else
                this->vgui::TextEntry::PaintBackground(  );
                
            FinishRecordSBuffer( m_PaintBackgroundCallBuffer );
        }
        else if( IsSBufferEnabled() )
        {
            DrawFromSBuffer( m_PaintBackgroundCallBuffer );
        }
    }
    
    void default_PaintBackground(  ) {
        vgui::TextEntry::PaintBackground( );
    }
    
    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        FlushSBuffer();
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~TextEntry_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

    void DeletePanel( void ) { ::PyDeletePanel( this, this ); }

    virtual void OnMessage(const KeyValues *params, VPANEL fromPanel) {
        if( Panel_DispatchMessage( m_PyMessageMap, params, fromPanel ) )
            return;
        Panel::OnMessage(params, fromPanel);
    }
    
    void RegMessageMethod( const char *message, boost::python::object method, int numParams=0, 
           const char *nameFirstParam="", int typeFirstParam=DATATYPE_VOID, 
           const char *nameSecondParam="", int typeSecondParam=DATATYPE_VOID ) { 
           py_message_entry_t entry;
           entry.method = method;
           entry.numParams = numParams;
           entry.firstParamName = nameFirstParam;
           entry.firstParamSymbol = KeyValuesSystem()->GetSymbolForString(nameFirstParam);
           entry.firstParamType = typeFirstParam;
           entry.secondParamName = nameSecondParam;
           entry.secondParamSymbol = KeyValuesSystem()->GetSymbolForString(nameSecondParam);
           entry.secondParamType = typeSecondParam;
    
           GetPyMessageMap().Insert(message, entry);
    }
    virtual Panel *GetPanel() { return this; }

    virtual void EnableSBuffer( bool bUseBuffer ) { PyPanel::EnableSBuffer( bUseBuffer ); }

    virtual bool IsSBufferEnabled() { return PyPanel::IsSBufferEnabled(); }

    virtual void FlushSBuffer() { PyPanel::FlushSBuffer(); }

    virtual void SetFlushedByParent( bool bEnabled ) { PyPanel::SetFlushedByParent( bEnabled ); }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        boost::python::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( *newParent );
            } catch(...) {
                PyErr_Print();
                this->vgui::Panel::SetParent( boost::python::ptr(newParent) );
            }
        else
            this->vgui::Panel::SetParent( boost::python::ptr(newParent) );
    }

    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    boost::python::object GetText() {
        const char *buf = (const char *)malloc( (GetTextLength()+1)*sizeof(char) );
        TextEntry::GetText((char *)buf, GetTextLength()+1);
        boost::python::object rv(buf);
        delete buf;
        return rv;
    }

};

void register_TextEntry_class(){

    { //::vgui::TextEntry
        typedef bp::class_< TextEntry_wrapper, bp::bases< vgui::Panel >, boost::noncopyable > TextEntry_exposer_t;
        TextEntry_exposer_t TextEntry_exposer = TextEntry_exposer_t( "TextEntry", bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("panelName") )) );
        bp::scope TextEntry_scope( TextEntry_exposer );
        { //::vgui::TextEntry::AddAnotherLine
        
            typedef void ( TextEntry_wrapper::*AddAnotherLine_function_type )( int &,int & ) ;
            
            TextEntry_exposer.def( 
                "AddAnotherLine"
                , AddAnotherLine_function_type( &TextEntry_wrapper::AddAnotherLine )
                , ( bp::arg("cx"), bp::arg("cy") ) );
        
        }
        { //::vgui::TextEntry::ApplySchemeSettings
        
            typedef void ( TextEntry_wrapper::*ApplySchemeSettings_function_type )( ::vgui::IScheme * ) ;
            
            TextEntry_exposer.def( 
                "ApplySchemeSettings"
                , ApplySchemeSettings_function_type( &TextEntry_wrapper::default_ApplySchemeSettings )
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::TextEntry::ApplySettings
        
            typedef void ( TextEntry_wrapper::*ApplySettings_function_type )( ::KeyValues * ) ;
            
            TextEntry_exposer.def( 
                "ApplySettings"
                , ApplySettings_function_type( &TextEntry_wrapper::ApplySettings )
                , ( bp::arg("inResourceData") ) );
        
        }
        { //::vgui::TextEntry::Backspace
        
            typedef void ( ::vgui::TextEntry::*Backspace_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "Backspace"
                , Backspace_function_type( &::vgui::TextEntry::Backspace ) );
        
        }
        { //::vgui::TextEntry::CompositionString
        
            typedef void ( ::vgui::TextEntry::*CompositionString_function_type )( wchar_t const * ) ;
            
            TextEntry_exposer.def( 
                "CompositionString"
                , CompositionString_function_type( &::vgui::TextEntry::CompositionString )
                , ( bp::arg("string") ) );
        
        }
        { //::vgui::TextEntry::ConversionModeChanged
        
            typedef void ( ::vgui::TextEntry::*ConversionModeChanged_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "ConversionModeChanged"
                , ConversionModeChanged_function_type( &::vgui::TextEntry::ConversionModeChanged )
                , ( bp::arg("handle") ) );
        
        }
        { //::vgui::TextEntry::CopySelected
        
            typedef void ( ::vgui::TextEntry::*CopySelected_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "CopySelected"
                , CopySelected_function_type( &::vgui::TextEntry::CopySelected ) );
        
        }
        { //::vgui::TextEntry::CursorToPixelSpace
        
            typedef void ( TextEntry_wrapper::*CursorToPixelSpace_function_type )( int,int &,int & ) ;
            
            TextEntry_exposer.def( 
                "CursorToPixelSpace"
                , CursorToPixelSpace_function_type( &TextEntry_wrapper::CursorToPixelSpace )
                , ( bp::arg("cursorPos"), bp::arg("cx"), bp::arg("cy") ) );
        
        }
        { //::vgui::TextEntry::CutSelected
        
            typedef void ( ::vgui::TextEntry::*CutSelected_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "CutSelected"
                , CutSelected_function_type( &::vgui::TextEntry::CutSelected ) );
        
        }
        { //::vgui::TextEntry::Delete
        
            typedef void ( ::vgui::TextEntry::*Delete_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "Delete"
                , Delete_function_type( &::vgui::TextEntry::Delete ) );
        
        }
        { //::vgui::TextEntry::DeleteSelected
        
            typedef void ( ::vgui::TextEntry::*DeleteSelected_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "DeleteSelected"
                , DeleteSelected_function_type( &::vgui::TextEntry::DeleteSelected ) );
        
        }
        { //::vgui::TextEntry::DrawChar
        
            typedef int ( TextEntry_wrapper::*DrawChar_function_type )( wchar_t,::vgui::HFont,int,int,int ) ;
            
            TextEntry_exposer.def( 
                "DrawChar"
                , DrawChar_function_type( &TextEntry_wrapper::DrawChar )
                , ( bp::arg("ch"), bp::arg("font"), bp::arg("index"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::TextEntry::DrawCursor
        
            typedef bool ( TextEntry_wrapper::*DrawCursor_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "DrawCursor"
                , DrawCursor_function_type( &TextEntry_wrapper::DrawCursor )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::TextEntry::FireActionSignal
        
            typedef void ( TextEntry_wrapper::*FireActionSignal_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "FireActionSignal"
                , FireActionSignal_function_type( &TextEntry_wrapper::FireActionSignal ) );
        
        }
        { //::vgui::TextEntry::GetCurrentStartLine
        
            typedef int ( ::vgui::TextEntry::*GetCurrentStartLine_function_type )(  ) const;
            
            TextEntry_exposer.def( 
                "GetCurrentStartLine"
                , GetCurrentStartLine_function_type( &::vgui::TextEntry::GetCurrentStartLine ) );
        
        }
        { //::vgui::TextEntry::GetDescription
        
            typedef char const * ( TextEntry_wrapper::*GetDescription_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetDescription"
                , GetDescription_function_type( &TextEntry_wrapper::GetDescription ) );
        
        }
        { //::vgui::TextEntry::GetDragPanel
        
            typedef ::vgui::Panel * ( ::vgui::TextEntry::*GetDragPanel_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetDragPanel"
                , GetDragPanel_function_type( &::vgui::TextEntry::GetDragPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::TextEntry::GetDrawWidth
        
            typedef int ( ::vgui::TextEntry::*GetDrawWidth_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetDrawWidth"
                , GetDrawWidth_function_type( &::vgui::TextEntry::GetDrawWidth ) );
        
        }
        { //::vgui::TextEntry::GetMaximumCharCount
        
            typedef int ( ::vgui::TextEntry::*GetMaximumCharCount_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetMaximumCharCount"
                , GetMaximumCharCount_function_type( &::vgui::TextEntry::GetMaximumCharCount ) );
        
        }
        { //::vgui::TextEntry::GetNumLines
        
            typedef int ( ::vgui::TextEntry::*GetNumLines_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetNumLines"
                , GetNumLines_function_type( &::vgui::TextEntry::GetNumLines ) );
        
        }
        { //::vgui::TextEntry::GetPanelBaseClassName
        
            typedef char const * ( *GetPanelBaseClassName_function_type )(  );
            
            TextEntry_exposer.def( 
                "GetPanelBaseClassName"
                , GetPanelBaseClassName_function_type( &::vgui::TextEntry::GetPanelBaseClassName ) );
        
        }
        { //::vgui::TextEntry::GetPanelClassName
        
            typedef char const * ( *GetPanelClassName_function_type )(  );
            
            TextEntry_exposer.def( 
                "GetPanelClassName"
                , GetPanelClassName_function_type( &::vgui::TextEntry::GetPanelClassName ) );
        
        }
        { //::vgui::TextEntry::GetSelectedRange
        
            typedef bool ( TextEntry_wrapper::*GetSelectedRange_function_type )( int &,int & ) ;
            
            TextEntry_exposer.def( 
                "GetSelectedRange"
                , GetSelectedRange_function_type( &TextEntry_wrapper::GetSelectedRange )
                , ( bp::arg("cx0"), bp::arg("cx1") ) );
        
        }
        { //::vgui::TextEntry::GetSettings
        
            typedef void ( TextEntry_wrapper::*GetSettings_function_type )( ::KeyValues * ) ;
            
            TextEntry_exposer.def( 
                "GetSettings"
                , GetSettings_function_type( &TextEntry_wrapper::GetSettings )
                , ( bp::arg("outResourceData") ) );
        
        }
        { //::vgui::TextEntry::GetSizerMinimumSize
        
            typedef void ( ::vgui::TextEntry::*GetSizerMinimumSize_function_type )( int &,int & ) ;
            
            TextEntry_exposer.def( 
                "GetSizerMinimumSize"
                , GetSizerMinimumSize_function_type( &::vgui::TextEntry::GetSizerMinimumSize )
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::TextEntry::GetStartDrawIndex
        
            typedef int ( TextEntry_wrapper::*GetStartDrawIndex_function_type )( int & ) ;
            
            TextEntry_exposer.def( 
                "GetStartDrawIndex"
                , GetStartDrawIndex_function_type( &TextEntry_wrapper::GetStartDrawIndex )
                , ( bp::arg("lineBreakIndexIndex") ) );
        
        }
        { //::vgui::TextEntry::GetTextCursorPos
        
            typedef int ( ::vgui::TextEntry::*GetTextCursorPos_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetTextCursorPos"
                , GetTextCursorPos_function_type( &::vgui::TextEntry::GetTextCursorPos ) );
        
        }
        { //::vgui::TextEntry::GetTextLength
        
            typedef int ( ::vgui::TextEntry::*GetTextLength_function_type )(  ) const;
            
            TextEntry_exposer.def( 
                "GetTextLength"
                , GetTextLength_function_type( &::vgui::TextEntry::GetTextLength ) );
        
        }
        { //::vgui::TextEntry::GetTextRange
        
            typedef void ( ::vgui::TextEntry::*GetTextRange_function_type )( wchar_t *,int,int ) ;
            
            TextEntry_exposer.def( 
                "GetTextRange"
                , GetTextRange_function_type( &::vgui::TextEntry::GetTextRange )
                , ( bp::arg("buf"), bp::arg("from"), bp::arg("numchars") ) );
        
        }
        { //::vgui::TextEntry::GetTextRange
        
            typedef void ( ::vgui::TextEntry::*GetTextRange_function_type )( char *,int,int ) ;
            
            TextEntry_exposer.def( 
                "GetTextRange"
                , GetTextRange_function_type( &::vgui::TextEntry::GetTextRange )
                , ( bp::arg("buf"), bp::arg("from"), bp::arg("numchars") ) );
        
        }
        { //::vgui::TextEntry::GetValueAsFloat
        
            typedef float ( ::vgui::TextEntry::*GetValueAsFloat_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetValueAsFloat"
                , GetValueAsFloat_function_type( &::vgui::TextEntry::GetValueAsFloat ) );
        
        }
        { //::vgui::TextEntry::GetValueAsInt
        
            typedef int ( ::vgui::TextEntry::*GetValueAsInt_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetValueAsInt"
                , GetValueAsInt_function_type( &::vgui::TextEntry::GetValueAsInt ) );
        
        }
        { //::vgui::TextEntry::GetYStart
        
            typedef int ( TextEntry_wrapper::*GetYStart_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetYStart"
                , GetYStart_function_type( &TextEntry_wrapper::GetYStart ) );
        
        }
        { //::vgui::TextEntry::GotoDown
        
            typedef void ( ::vgui::TextEntry::*GotoDown_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoDown"
                , GotoDown_function_type( &::vgui::TextEntry::GotoDown ) );
        
        }
        { //::vgui::TextEntry::GotoEndOfLine
        
            typedef void ( ::vgui::TextEntry::*GotoEndOfLine_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoEndOfLine"
                , GotoEndOfLine_function_type( &::vgui::TextEntry::GotoEndOfLine ) );
        
        }
        { //::vgui::TextEntry::GotoFirstOfLine
        
            typedef void ( ::vgui::TextEntry::*GotoFirstOfLine_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoFirstOfLine"
                , GotoFirstOfLine_function_type( &::vgui::TextEntry::GotoFirstOfLine ) );
        
        }
        { //::vgui::TextEntry::GotoLeft
        
            typedef void ( ::vgui::TextEntry::*GotoLeft_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoLeft"
                , GotoLeft_function_type( &::vgui::TextEntry::GotoLeft ) );
        
        }
        { //::vgui::TextEntry::GotoRight
        
            typedef void ( ::vgui::TextEntry::*GotoRight_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoRight"
                , GotoRight_function_type( &::vgui::TextEntry::GotoRight ) );
        
        }
        { //::vgui::TextEntry::GotoTextEnd
        
            typedef void ( ::vgui::TextEntry::*GotoTextEnd_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoTextEnd"
                , GotoTextEnd_function_type( &::vgui::TextEntry::GotoTextEnd ) );
        
        }
        { //::vgui::TextEntry::GotoTextStart
        
            typedef void ( ::vgui::TextEntry::*GotoTextStart_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoTextStart"
                , GotoTextStart_function_type( &::vgui::TextEntry::GotoTextStart ) );
        
        }
        { //::vgui::TextEntry::GotoUp
        
            typedef void ( ::vgui::TextEntry::*GotoUp_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoUp"
                , GotoUp_function_type( &::vgui::TextEntry::GotoUp ) );
        
        }
        { //::vgui::TextEntry::GotoWordLeft
        
            typedef void ( ::vgui::TextEntry::*GotoWordLeft_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoWordLeft"
                , GotoWordLeft_function_type( &::vgui::TextEntry::GotoWordLeft ) );
        
        }
        { //::vgui::TextEntry::GotoWordRight
        
            typedef void ( ::vgui::TextEntry::*GotoWordRight_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GotoWordRight"
                , GotoWordRight_function_type( &::vgui::TextEntry::GotoWordRight ) );
        
        }
        { //::vgui::TextEntry::HideIMECandidates
        
            typedef void ( ::vgui::TextEntry::*HideIMECandidates_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "HideIMECandidates"
                , HideIMECandidates_function_type( &::vgui::TextEntry::HideIMECandidates ) );
        
        }
        { //::vgui::TextEntry::InsertChar
        
            typedef void ( ::vgui::TextEntry::*InsertChar_function_type )( wchar_t ) ;
            
            TextEntry_exposer.def( 
                "InsertChar"
                , InsertChar_function_type( &::vgui::TextEntry::InsertChar )
                , ( bp::arg("ch") ) );
        
        }
        { //::vgui::TextEntry::InsertString
        
            typedef void ( ::vgui::TextEntry::*InsertString_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "InsertString"
                , InsertString_function_type( &::vgui::TextEntry::InsertString )
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::TextEntry::InsertString
        
            typedef void ( ::vgui::TextEntry::*InsertString_function_type )( wchar_t * ) ;
            
            TextEntry_exposer.def( 
                "InsertString"
                , InsertString_function_type( &::vgui::TextEntry::InsertString )
                , ( bp::arg("wszText") ) );
        
        }
        { //::vgui::TextEntry::IsCursorOffLeftSideOfWindow
        
            typedef bool ( TextEntry_wrapper::*IsCursorOffLeftSideOfWindow_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "IsCursorOffLeftSideOfWindow"
                , IsCursorOffLeftSideOfWindow_function_type( &TextEntry_wrapper::IsCursorOffLeftSideOfWindow )
                , ( bp::arg("cursorPos") ) );
        
        }
        { //::vgui::TextEntry::IsCursorOffRightSideOfWindow
        
            typedef bool ( TextEntry_wrapper::*IsCursorOffRightSideOfWindow_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "IsCursorOffRightSideOfWindow"
                , IsCursorOffRightSideOfWindow_function_type( &TextEntry_wrapper::IsCursorOffRightSideOfWindow )
                , ( bp::arg("cursorPos") ) );
        
        }
        { //::vgui::TextEntry::IsEditable
        
            typedef bool ( ::vgui::TextEntry::*IsEditable_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "IsEditable"
                , IsEditable_function_type( &::vgui::TextEntry::IsEditable ) );
        
        }
        { //::vgui::TextEntry::IsMultiline
        
            typedef bool ( ::vgui::TextEntry::*IsMultiline_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "IsMultiline"
                , IsMultiline_function_type( &::vgui::TextEntry::IsMultiline ) );
        
        }
        { //::vgui::TextEntry::IsTextFullySelected
        
            typedef bool ( ::vgui::TextEntry::*IsTextFullySelected_function_type )(  ) const;
            
            TextEntry_exposer.def( 
                "IsTextFullySelected"
                , IsTextFullySelected_function_type( &::vgui::TextEntry::IsTextFullySelected ) );
        
        }
        { //::vgui::TextEntry::LanguageChanged
        
            typedef void ( ::vgui::TextEntry::*LanguageChanged_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "LanguageChanged"
                , LanguageChanged_function_type( &::vgui::TextEntry::LanguageChanged )
                , ( bp::arg("handle") ) );
        
        }
        { //::vgui::TextEntry::LayoutVerticalScrollBarSlider
        
            typedef void ( ::vgui::TextEntry::*LayoutVerticalScrollBarSlider_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "LayoutVerticalScrollBarSlider"
                , LayoutVerticalScrollBarSlider_function_type( &::vgui::TextEntry::LayoutVerticalScrollBarSlider ) );
        
        }
        { //::vgui::TextEntry::MoveCursor
        
            typedef void ( ::vgui::TextEntry::*MoveCursor_function_type )( int,int ) ;
            typedef void ( TextEntry_wrapper::*default_MoveCursor_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "MoveCursor"
                , MoveCursor_function_type(&::vgui::TextEntry::MoveCursor)
                , default_MoveCursor_function_type(&TextEntry_wrapper::default_MoveCursor)
                , ( bp::arg("line"), bp::arg("pixelsAcross") ) );
        
        }
        { //::vgui::TextEntry::NeedsEllipses
        
            typedef bool ( TextEntry_wrapper::*NeedsEllipses_function_type )( ::vgui::HFont,int * ) ;
            
            TextEntry_exposer.def( 
                "NeedsEllipses"
                , NeedsEllipses_function_type( &TextEntry_wrapper::NeedsEllipses )
                , ( bp::arg("font"), bp::arg("pIndex") ) );
        
        }
        { //::vgui::TextEntry::OnChangeIME
        
            typedef void ( TextEntry_wrapper::*OnChangeIME_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "OnChangeIME"
                , OnChangeIME_function_type( &TextEntry_wrapper::OnChangeIME )
                , ( bp::arg("forward") ) );
        
        }
        { //::vgui::TextEntry::OnCreateDragData
        
            typedef void ( ::vgui::TextEntry::*OnCreateDragData_function_type )( ::KeyValues * ) ;
            
            TextEntry_exposer.def( 
                "OnCreateDragData"
                , OnCreateDragData_function_type( &::vgui::TextEntry::OnCreateDragData )
                , ( bp::arg("msg") ) );
        
        }
        { //::vgui::TextEntry::OnCursorEntered
        
            typedef void ( TextEntry_wrapper::*OnCursorEntered_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type( &TextEntry_wrapper::default_OnCursorEntered ) );
        
        }
        { //::vgui::TextEntry::OnCursorExited
        
            typedef void ( TextEntry_wrapper::*OnCursorExited_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type( &TextEntry_wrapper::default_OnCursorExited ) );
        
        }
        { //::vgui::TextEntry::OnCursorMoved
        
            typedef void ( TextEntry_wrapper::*OnCursorMoved_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "OnCursorMoved"
                , OnCursorMoved_function_type( &TextEntry_wrapper::default_OnCursorMoved )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::TextEntry::OnKeyCodeTyped
        
            typedef void ( TextEntry_wrapper::*OnKeyCodeTyped_function_type )( ::vgui::KeyCode ) ;
            
            TextEntry_exposer.def( 
                "OnKeyCodeTyped"
                , OnKeyCodeTyped_function_type( &TextEntry_wrapper::default_OnKeyCodeTyped )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::TextEntry::OnKeyFocusTicked
        
            typedef void ( TextEntry_wrapper::*OnKeyFocusTicked_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnKeyFocusTicked"
                , OnKeyFocusTicked_function_type( &TextEntry_wrapper::default_OnKeyFocusTicked ) );
        
        }
        { //::vgui::TextEntry::OnKillFocus
        
            typedef void ( TextEntry_wrapper::*OnKillFocus_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnKillFocus"
                , OnKillFocus_function_type( &TextEntry_wrapper::default_OnKillFocus ) );
        
        }
        { //::vgui::TextEntry::OnMouseCaptureLost
        
            typedef void ( TextEntry_wrapper::*OnMouseCaptureLost_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnMouseCaptureLost"
                , OnMouseCaptureLost_function_type( &TextEntry_wrapper::default_OnMouseCaptureLost ) );
        
        }
        { //::vgui::TextEntry::OnMouseDoublePressed
        
            typedef void ( TextEntry_wrapper::*OnMouseDoublePressed_function_type )( ::vgui::MouseCode ) ;
            
            TextEntry_exposer.def( 
                "OnMouseDoublePressed"
                , OnMouseDoublePressed_function_type( &TextEntry_wrapper::default_OnMouseDoublePressed )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::TextEntry::OnMouseFocusTicked
        
            typedef void ( TextEntry_wrapper::*OnMouseFocusTicked_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnMouseFocusTicked"
                , OnMouseFocusTicked_function_type( &TextEntry_wrapper::default_OnMouseFocusTicked ) );
        
        }
        { //::vgui::TextEntry::OnMousePressed
        
            typedef void ( TextEntry_wrapper::*OnMousePressed_function_type )( ::vgui::MouseCode ) ;
            
            TextEntry_exposer.def( 
                "OnMousePressed"
                , OnMousePressed_function_type( &TextEntry_wrapper::default_OnMousePressed )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::TextEntry::OnMouseReleased
        
            typedef void ( TextEntry_wrapper::*OnMouseReleased_function_type )( ::vgui::MouseCode ) ;
            
            TextEntry_exposer.def( 
                "OnMouseReleased"
                , OnMouseReleased_function_type( &TextEntry_wrapper::default_OnMouseReleased )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::TextEntry::OnMouseTriplePressed
        
            typedef void ( TextEntry_wrapper::*OnMouseTriplePressed_function_type )( ::vgui::MouseCode ) ;
            
            TextEntry_exposer.def( 
                "OnMouseTriplePressed"
                , OnMouseTriplePressed_function_type( &TextEntry_wrapper::default_OnMouseTriplePressed )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::TextEntry::OnMouseWheeled
        
            typedef void ( TextEntry_wrapper::*OnMouseWheeled_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "OnMouseWheeled"
                , OnMouseWheeled_function_type( &TextEntry_wrapper::default_OnMouseWheeled )
                , ( bp::arg("delta") ) );
        
        }
        { //::vgui::TextEntry::OnSetFocus
        
            typedef void ( TextEntry_wrapper::*OnSetFocus_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnSetFocus"
                , OnSetFocus_function_type( &TextEntry_wrapper::default_OnSetFocus ) );
        
        }
        { //::vgui::TextEntry::OnSetText
        
            typedef void ( TextEntry_wrapper::*OnSetText_function_type )( wchar_t const * ) ;
            
            TextEntry_exposer.def( 
                "OnSetText"
                , OnSetText_function_type( &TextEntry_wrapper::OnSetText )
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::TextEntry::OnSizeChanged
        
            typedef void ( TextEntry_wrapper::*OnSizeChanged_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "OnSizeChanged"
                , OnSizeChanged_function_type( &TextEntry_wrapper::default_OnSizeChanged )
                , ( bp::arg("newWide"), bp::arg("newTall") ) );
        
        }
        { //::vgui::TextEntry::OnSliderMoved
        
            typedef void ( TextEntry_wrapper::*OnSliderMoved_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnSliderMoved"
                , OnSliderMoved_function_type( &TextEntry_wrapper::OnSliderMoved ) );
        
        }
        { //::vgui::TextEntry::OpenEditMenu
        
            typedef void ( ::vgui::TextEntry::*OpenEditMenu_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OpenEditMenu"
                , OpenEditMenu_function_type( &::vgui::TextEntry::OpenEditMenu ) );
        
        }
        { //::vgui::TextEntry::Paste
        
            typedef void ( ::vgui::TextEntry::*Paste_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "Paste"
                , Paste_function_type( &::vgui::TextEntry::Paste ) );
        
        }
        { //::vgui::TextEntry::PerformLayout
        
            typedef void ( TextEntry_wrapper::*PerformLayout_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type( &TextEntry_wrapper::default_PerformLayout ) );
        
        }
        { //::vgui::TextEntry::PixelToCursorSpace
        
            typedef int ( TextEntry_wrapper::*PixelToCursorSpace_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "PixelToCursorSpace"
                , PixelToCursorSpace_function_type( &TextEntry_wrapper::PixelToCursorSpace )
                , ( bp::arg("cx"), bp::arg("cy") ) );
        
        }
        { //::vgui::TextEntry::RecalculateLineBreaks
        
            typedef void ( ::vgui::TextEntry::*RecalculateLineBreaks_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "RecalculateLineBreaks"
                , RecalculateLineBreaks_function_type( &::vgui::TextEntry::RecalculateLineBreaks ) );
        
        }
        { //::vgui::TextEntry::RequestInfo
        
            typedef bool ( ::vgui::TextEntry::*RequestInfo_function_type )( ::KeyValues * ) ;
            
            TextEntry_exposer.def( 
                "RequestInfo"
                , RequestInfo_function_type( &::vgui::TextEntry::RequestInfo )
                , ( bp::arg("outputData") ) );
        
        }
        { //::vgui::TextEntry::ResetCursorBlink
        
            typedef void ( TextEntry_wrapper::*ResetCursorBlink_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "ResetCursorBlink"
                , ResetCursorBlink_function_type( &TextEntry_wrapper::ResetCursorBlink ) );
        
        }
        { //::vgui::TextEntry::SaveUndoState
        
            typedef void ( ::vgui::TextEntry::*SaveUndoState_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "SaveUndoState"
                , SaveUndoState_function_type( &::vgui::TextEntry::SaveUndoState ) );
        
        }
        { //::vgui::TextEntry::ScrollLeft
        
            typedef void ( TextEntry_wrapper::*ScrollLeft_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "ScrollLeft"
                , ScrollLeft_function_type( &TextEntry_wrapper::ScrollLeft ) );
        
        }
        { //::vgui::TextEntry::ScrollLeftForResize
        
            typedef void ( TextEntry_wrapper::*ScrollLeftForResize_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "ScrollLeftForResize"
                , ScrollLeftForResize_function_type( &TextEntry_wrapper::ScrollLeftForResize ) );
        
        }
        { //::vgui::TextEntry::ScrollRight
        
            typedef void ( TextEntry_wrapper::*ScrollRight_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "ScrollRight"
                , ScrollRight_function_type( &TextEntry_wrapper::ScrollRight ) );
        
        }
        { //::vgui::TextEntry::SelectAllOnFirstFocus
        
            typedef void ( ::vgui::TextEntry::*SelectAllOnFirstFocus_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SelectAllOnFirstFocus"
                , SelectAllOnFirstFocus_function_type( &::vgui::TextEntry::SelectAllOnFirstFocus )
                , ( bp::arg("status") ) );
        
        }
        { //::vgui::TextEntry::SelectAllOnFocusAlways
        
            typedef void ( ::vgui::TextEntry::*SelectAllOnFocusAlways_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SelectAllOnFocusAlways"
                , SelectAllOnFocusAlways_function_type( &::vgui::TextEntry::SelectAllOnFocusAlways )
                , ( bp::arg("status") ) );
        
        }
        { //::vgui::TextEntry::SelectAllText
        
            typedef void ( ::vgui::TextEntry::*SelectAllText_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SelectAllText"
                , SelectAllText_function_type( &::vgui::TextEntry::SelectAllText )
                , ( bp::arg("bResetCursorPos") ) );
        
        }
        { //::vgui::TextEntry::SelectCheck
        
            typedef bool ( TextEntry_wrapper::*SelectCheck_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SelectCheck"
                , SelectCheck_function_type( &TextEntry_wrapper::SelectCheck )
                , ( bp::arg("fromMouse")=(bool)(false) ) );
        
        }
        { //::vgui::TextEntry::SelectNoText
        
            typedef void ( ::vgui::TextEntry::*SelectNoText_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "SelectNoText"
                , SelectNoText_function_type( &::vgui::TextEntry::SelectNoText ) );
        
        }
        { //::vgui::TextEntry::SelectNone
        
            typedef void ( ::vgui::TextEntry::*SelectNone_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "SelectNone"
                , SelectNone_function_type( &::vgui::TextEntry::SelectNone ) );
        
        }
        { //::vgui::TextEntry::SendNewLine
        
            typedef void ( ::vgui::TextEntry::*SendNewLine_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SendNewLine"
                , SendNewLine_function_type( &::vgui::TextEntry::SendNewLine )
                , ( bp::arg("send") ) );
        
        }
        { //::vgui::TextEntry::SentenceModeChanged
        
            typedef void ( ::vgui::TextEntry::*SentenceModeChanged_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "SentenceModeChanged"
                , SentenceModeChanged_function_type( &::vgui::TextEntry::SentenceModeChanged )
                , ( bp::arg("handle") ) );
        
        }
        { //::vgui::TextEntry::SetAllowNonAsciiCharacters
        
            typedef void ( ::vgui::TextEntry::*SetAllowNonAsciiCharacters_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetAllowNonAsciiCharacters"
                , SetAllowNonAsciiCharacters_function_type( &::vgui::TextEntry::SetAllowNonAsciiCharacters )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetAllowNumericInputOnly
        
            typedef void ( ::vgui::TextEntry::*SetAllowNumericInputOnly_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetAllowNumericInputOnly"
                , SetAllowNumericInputOnly_function_type( &::vgui::TextEntry::SetAllowNumericInputOnly )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetAutoLocalize
        
            typedef void ( ::vgui::TextEntry::*SetAutoLocalize_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetAutoLocalize"
                , SetAutoLocalize_function_type( &::vgui::TextEntry::SetAutoLocalize )
                , ( bp::arg("bState") ) );
        
        }
        { //::vgui::TextEntry::SetAutoProgressOnHittingCharLimit
        
            typedef void ( ::vgui::TextEntry::*SetAutoProgressOnHittingCharLimit_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetAutoProgressOnHittingCharLimit"
                , SetAutoProgressOnHittingCharLimit_function_type( &::vgui::TextEntry::SetAutoProgressOnHittingCharLimit )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetCatchEnterKey
        
            typedef void ( ::vgui::TextEntry::*SetCatchEnterKey_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetCatchEnterKey"
                , SetCatchEnterKey_function_type( &::vgui::TextEntry::SetCatchEnterKey )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetCatchTabKey
        
            typedef void ( ::vgui::TextEntry::*SetCatchTabKey_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetCatchTabKey"
                , SetCatchTabKey_function_type( &::vgui::TextEntry::SetCatchTabKey )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetCharAt
        
            typedef void ( TextEntry_wrapper::*SetCharAt_function_type )( wchar_t,int ) ;
            
            TextEntry_exposer.def( 
                "SetCharAt"
                , SetCharAt_function_type( &TextEntry_wrapper::SetCharAt )
                , ( bp::arg("ch"), bp::arg("index") ) );
        
        }
        { //::vgui::TextEntry::SetDisabledBgColor
        
            typedef void ( ::vgui::TextEntry::*SetDisabledBgColor_function_type )( ::Color ) ;
            typedef void ( TextEntry_wrapper::*default_SetDisabledBgColor_function_type )( ::Color ) ;
            
            TextEntry_exposer.def( 
                "SetDisabledBgColor"
                , SetDisabledBgColor_function_type(&::vgui::TextEntry::SetDisabledBgColor)
                , default_SetDisabledBgColor_function_type(&TextEntry_wrapper::default_SetDisabledBgColor)
                , ( bp::arg("col") ) );
        
        }
        { //::vgui::TextEntry::SetDrawLanguageIDAtLeft
        
            typedef void ( ::vgui::TextEntry::*SetDrawLanguageIDAtLeft_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetDrawLanguageIDAtLeft"
                , SetDrawLanguageIDAtLeft_function_type( &::vgui::TextEntry::SetDrawLanguageIDAtLeft )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetDrawWidth
        
            typedef void ( ::vgui::TextEntry::*SetDrawWidth_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "SetDrawWidth"
                , SetDrawWidth_function_type( &::vgui::TextEntry::SetDrawWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::vgui::TextEntry::SetEditable
        
            typedef void ( ::vgui::TextEntry::*SetEditable_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetEditable"
                , SetEditable_function_type( &::vgui::TextEntry::SetEditable )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetEnabled
        
            typedef void ( ::vgui::TextEntry::*SetEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetEnabled"
                , SetEnabled_function_type(&::vgui::TextEntry::SetEnabled)
                , default_SetEnabled_function_type(&TextEntry_wrapper::default_SetEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetFont
        
            typedef void ( ::vgui::TextEntry::*SetFont_function_type )( ::vgui::HFont ) ;
            
            TextEntry_exposer.def( 
                "SetFont"
                , SetFont_function_type( &::vgui::TextEntry::SetFont )
                , ( bp::arg("font") ) );
        
        }
        { //::vgui::TextEntry::SetHorizontalScrolling
        
            typedef void ( ::vgui::TextEntry::*SetHorizontalScrolling_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetHorizontalScrolling"
                , SetHorizontalScrolling_function_type( &::vgui::TextEntry::SetHorizontalScrolling )
                , ( bp::arg("status") ) );
        
        }
        { //::vgui::TextEntry::SetMaximumCharCount
        
            typedef void ( ::vgui::TextEntry::*SetMaximumCharCount_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "SetMaximumCharCount"
                , SetMaximumCharCount_function_type( &::vgui::TextEntry::SetMaximumCharCount )
                , ( bp::arg("maxChars") ) );
        
        }
        { //::vgui::TextEntry::SetMultiline
        
            typedef void ( ::vgui::TextEntry::*SetMultiline_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetMultiline_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetMultiline"
                , SetMultiline_function_type(&::vgui::TextEntry::SetMultiline)
                , default_SetMultiline_function_type(&TextEntry_wrapper::default_SetMultiline)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetSelectionBgColor
        
            typedef void ( ::vgui::TextEntry::*SetSelectionBgColor_function_type )( ::Color const & ) ;
            
            TextEntry_exposer.def( 
                "SetSelectionBgColor"
                , SetSelectionBgColor_function_type( &::vgui::TextEntry::SetSelectionBgColor )
                , ( bp::arg("clr") ) );
        
        }
        { //::vgui::TextEntry::SetSelectionTextColor
        
            typedef void ( ::vgui::TextEntry::*SetSelectionTextColor_function_type )( ::Color const & ) ;
            
            TextEntry_exposer.def( 
                "SetSelectionTextColor"
                , SetSelectionTextColor_function_type( &::vgui::TextEntry::SetSelectionTextColor )
                , ( bp::arg("clr") ) );
        
        }
        { //::vgui::TextEntry::SetSelectionUnfocusedBgColor
        
            typedef void ( ::vgui::TextEntry::*SetSelectionUnfocusedBgColor_function_type )( ::Color const & ) ;
            
            TextEntry_exposer.def( 
                "SetSelectionUnfocusedBgColor"
                , SetSelectionUnfocusedBgColor_function_type( &::vgui::TextEntry::SetSelectionUnfocusedBgColor )
                , ( bp::arg("clr") ) );
        
        }
        { //::vgui::TextEntry::SetTabSpaces
        
            typedef void ( ::vgui::TextEntry::*SetTabSpaces_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "SetTabSpaces"
                , SetTabSpaces_function_type( &::vgui::TextEntry::SetTabSpaces )
                , ( bp::arg("count") ) );
        
        }
        { //::vgui::TextEntry::SetText
        
            typedef void ( ::vgui::TextEntry::*SetText_function_type )( wchar_t const * ) ;
            typedef void ( TextEntry_wrapper::*default_SetText_function_type )( wchar_t const * ) ;
            
            TextEntry_exposer.def( 
                "SetText"
                , SetText_function_type(&::vgui::TextEntry::SetText)
                , default_SetText_function_type(&TextEntry_wrapper::default_SetText)
                , ( bp::arg("wszText") ) );
        
        }
        { //::vgui::TextEntry::SetText
        
            typedef void ( ::vgui::TextEntry::*SetText_function_type )( char const * ) ;
            typedef void ( TextEntry_wrapper::*default_SetText_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetText"
                , SetText_function_type(&::vgui::TextEntry::SetText)
                , default_SetText_function_type(&TextEntry_wrapper::default_SetText)
                , ( bp::arg("text") ) );
        
        }
        { //::vgui::TextEntry::SetTextHidden
        
            typedef void ( ::vgui::TextEntry::*SetTextHidden_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetTextHidden"
                , SetTextHidden_function_type( &::vgui::TextEntry::SetTextHidden )
                , ( bp::arg("bHideText") ) );
        
        }
        { //::vgui::TextEntry::SetToFullHeight
        
            typedef void ( ::vgui::TextEntry::*SetToFullHeight_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "SetToFullHeight"
                , SetToFullHeight_function_type( &::vgui::TextEntry::SetToFullHeight ) );
        
        }
        { //::vgui::TextEntry::SetToFullWidth
        
            typedef void ( ::vgui::TextEntry::*SetToFullWidth_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "SetToFullWidth"
                , SetToFullWidth_function_type( &::vgui::TextEntry::SetToFullWidth ) );
        
        }
        { //::vgui::TextEntry::SetUseFallbackFont
        
            typedef void ( ::vgui::TextEntry::*SetUseFallbackFont_function_type )( bool,::vgui::HFont ) ;
            
            TextEntry_exposer.def( 
                "SetUseFallbackFont"
                , SetUseFallbackFont_function_type( &::vgui::TextEntry::SetUseFallbackFont )
                , ( bp::arg("bState"), bp::arg("hFallback") ) );
        
        }
        { //::vgui::TextEntry::SetVerticalScrollbar
        
            typedef void ( ::vgui::TextEntry::*SetVerticalScrollbar_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetVerticalScrollbar_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetVerticalScrollbar"
                , SetVerticalScrollbar_function_type(&::vgui::TextEntry::SetVerticalScrollbar)
                , default_SetVerticalScrollbar_function_type(&TextEntry_wrapper::default_SetVerticalScrollbar)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::TextEntry::SetWrap
        
            typedef void ( ::vgui::TextEntry::*SetWrap_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetWrap"
                , SetWrap_function_type( &::vgui::TextEntry::SetWrap )
                , ( bp::arg("wrap") ) );
        
        }
        { //::vgui::TextEntry::ShowIMECandidates
        
            typedef void ( ::vgui::TextEntry::*ShowIMECandidates_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "ShowIMECandidates"
                , ShowIMECandidates_function_type( &::vgui::TextEntry::ShowIMECandidates ) );
        
        }
        { //::vgui::TextEntry::Undo
        
            typedef void ( ::vgui::TextEntry::*Undo_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "Undo"
                , Undo_function_type( &::vgui::TextEntry::Undo ) );
        
        }
        { //::vgui::TextEntry::UpdateIMECandidates
        
            typedef void ( ::vgui::TextEntry::*UpdateIMECandidates_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "UpdateIMECandidates"
                , UpdateIMECandidates_function_type( &::vgui::TextEntry::UpdateIMECandidates ) );
        
        }
        { //::vgui::Panel::AddToOverridableColors
        
            typedef void ( TextEntry_wrapper::*AddToOverridableColors_function_type )( ::Color *,char const * ) ;
            
            TextEntry_exposer.def( 
                "AddToOverridableColors"
                , AddToOverridableColors_function_type( &TextEntry_wrapper::AddToOverridableColors )
                , ( bp::arg("pColor"), bp::arg("scriptname") ) );
        
        }
        { //::vgui::Panel::ApplyOverridableColors
        
            typedef void ( TextEntry_wrapper::*ApplyOverridableColors_function_type )( ::vgui::IScheme * ) ;
            
            TextEntry_exposer.def( 
                "ApplyOverridableColors"
                , ApplyOverridableColors_function_type( &TextEntry_wrapper::ApplyOverridableColors )
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::CreateDragData
        
            typedef void ( TextEntry_wrapper::*CreateDragData_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "CreateDragData"
                , CreateDragData_function_type( &TextEntry_wrapper::CreateDragData ) );
        
        }
        { //::vgui::Panel::DragDropStartDragging
        
            typedef void ( TextEntry_wrapper::*DragDropStartDragging_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "DragDropStartDragging"
                , DragDropStartDragging_function_type( &TextEntry_wrapper::DragDropStartDragging ) );
        
        }
        { //::vgui::Panel::GetNavDownPanel
        
            typedef ::vgui::Panel * ( TextEntry_wrapper::*GetNavDownPanel_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetNavDownPanel"
                , GetNavDownPanel_function_type( &TextEntry_wrapper::GetNavDownPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavLeftPanel
        
            typedef ::vgui::Panel * ( TextEntry_wrapper::*GetNavLeftPanel_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetNavLeftPanel"
                , GetNavLeftPanel_function_type( &TextEntry_wrapper::GetNavLeftPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavRightPanel
        
            typedef ::vgui::Panel * ( TextEntry_wrapper::*GetNavRightPanel_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetNavRightPanel"
                , GetNavRightPanel_function_type( &TextEntry_wrapper::GetNavRightPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavUpPanel
        
            typedef ::vgui::Panel * ( TextEntry_wrapper::*GetNavUpPanel_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "GetNavUpPanel"
                , GetNavUpPanel_function_type( &TextEntry_wrapper::GetNavUpPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::InternalInitDefaultValues
        
            typedef void ( TextEntry_wrapper::*InternalInitDefaultValues_function_type )( ::PanelAnimationMap * ) ;
            
            TextEntry_exposer.def( 
                "InternalInitDefaultValues"
                , InternalInitDefaultValues_function_type( &TextEntry_wrapper::InternalInitDefaultValues )
                , ( bp::arg("map") ) );
        
        }
        { //::vgui::Panel::OnChildAdded
        
            typedef void ( ::vgui::Panel::*OnChildAdded_function_type )( ::vgui::VPANEL ) ;
            typedef void ( TextEntry_wrapper::*default_OnChildAdded_function_type )( ::vgui::VPANEL ) ;
            
            TextEntry_exposer.def( 
                "OnChildAdded"
                , OnChildAdded_function_type(&::vgui::Panel::OnChildAdded)
                , default_OnChildAdded_function_type(&TextEntry_wrapper::default_OnChildAdded)
                , ( bp::arg("child") ) );
        
        }
        { //::vgui::Panel::OnCommand
        
            typedef void ( ::vgui::Panel::*OnCommand_function_type )( char const * ) ;
            typedef void ( TextEntry_wrapper::*default_OnCommand_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "OnCommand"
                , OnCommand_function_type(&::vgui::Panel::OnCommand)
                , default_OnCommand_function_type(&TextEntry_wrapper::default_OnCommand)
                , ( bp::arg("command") ) );
        
        }
        { //::vgui::Panel::OnContinueDragging
        
            typedef void ( TextEntry_wrapper::*OnContinueDragging_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnContinueDragging"
                , OnContinueDragging_function_type( &TextEntry_wrapper::OnContinueDragging ) );
        
        }
        { //::vgui::Panel::OnFinishDragging
        
            typedef void ( TextEntry_wrapper::*OnFinishDragging_function_type )( bool,::vgui::MouseCode,bool ) ;
            
            TextEntry_exposer.def( 
                "OnFinishDragging"
                , OnFinishDragging_function_type( &TextEntry_wrapper::OnFinishDragging )
                , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::OnKeyCodePressed
        
            typedef void ( ::vgui::Panel::*OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            typedef void ( TextEntry_wrapper::*default_OnKeyCodePressed_function_type )( ::vgui::KeyCode ) ;
            
            TextEntry_exposer.def( 
                "OnKeyCodePressed"
                , OnKeyCodePressed_function_type(&::vgui::Panel::OnKeyCodePressed)
                , default_OnKeyCodePressed_function_type(&TextEntry_wrapper::default_OnKeyCodePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyCodeReleased
        
            typedef void ( ::vgui::Panel::*OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            typedef void ( TextEntry_wrapper::*default_OnKeyCodeReleased_function_type )( ::vgui::KeyCode ) ;
            
            TextEntry_exposer.def( 
                "OnKeyCodeReleased"
                , OnKeyCodeReleased_function_type(&::vgui::Panel::OnKeyCodeReleased)
                , default_OnKeyCodeReleased_function_type(&TextEntry_wrapper::default_OnKeyCodeReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnRequestFocus
        
            typedef void ( TextEntry_wrapper::*OnRequestFocus_function_type )( ::vgui::VPANEL,::vgui::VPANEL ) ;
            
            TextEntry_exposer.def( 
                "OnRequestFocus"
                , OnRequestFocus_function_type( &TextEntry_wrapper::default_OnRequestFocus )
                , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) );
        
        }
        { //::vgui::Panel::OnScreenSizeChanged
        
            typedef void ( TextEntry_wrapper::*OnScreenSizeChanged_function_type )( int,int ) ;
            
            TextEntry_exposer.def( 
                "OnScreenSizeChanged"
                , OnScreenSizeChanged_function_type( &TextEntry_wrapper::default_OnScreenSizeChanged )
                , ( bp::arg("oldwide"), bp::arg("oldtall") ) );
        
        }
        { //::vgui::Panel::OnStartDragging
        
            typedef void ( TextEntry_wrapper::*OnStartDragging_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnStartDragging"
                , OnStartDragging_function_type( &TextEntry_wrapper::OnStartDragging ) );
        
        }
        { //::vgui::Panel::OnThink
        
            typedef void ( ::vgui::Panel::*OnThink_function_type )(  ) ;
            typedef void ( TextEntry_wrapper::*default_OnThink_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnThink"
                , OnThink_function_type(&::vgui::Panel::OnThink)
                , default_OnThink_function_type(&TextEntry_wrapper::default_OnThink) );
        
        }
        { //::vgui::Panel::OnTick
        
            typedef void ( ::vgui::Panel::*OnTick_function_type )(  ) ;
            typedef void ( TextEntry_wrapper::*default_OnTick_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "OnTick"
                , OnTick_function_type(&::vgui::Panel::OnTick)
                , default_OnTick_function_type(&TextEntry_wrapper::default_OnTick) );
        
        }
        { //::vgui::Panel::PaintBuildOverlay
        
            typedef void ( ::vgui::Panel::*PaintBuildOverlay_function_type )(  ) ;
            typedef void ( TextEntry_wrapper::*default_PaintBuildOverlay_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "PaintBuildOverlay"
                , PaintBuildOverlay_function_type(&::vgui::Panel::PaintBuildOverlay)
                , default_PaintBuildOverlay_function_type(&TextEntry_wrapper::default_PaintBuildOverlay) );
        
        }
        { //::vgui::Panel::PaintTraverse
        
            typedef void ( TextEntry_wrapper::*PaintTraverse_function_type )( bool,bool ) ;
            
            TextEntry_exposer.def( 
                "PaintTraverse"
                , PaintTraverse_function_type( &TextEntry_wrapper::PaintTraverse )
                , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) );
        
        }
        { //::vgui::Panel::PostChildPaint
        
            typedef void ( ::vgui::Panel::*PostChildPaint_function_type )(  ) ;
            typedef void ( TextEntry_wrapper::*default_PostChildPaint_function_type )(  ) ;
            
            TextEntry_exposer.def( 
                "PostChildPaint"
                , PostChildPaint_function_type(&::vgui::Panel::PostChildPaint)
                , default_PostChildPaint_function_type(&TextEntry_wrapper::default_PostChildPaint) );
        
        }
        { //::vgui::Panel::SetBgColor
        
            typedef void ( ::vgui::Panel::*SetBgColor_function_type )( ::Color ) ;
            typedef void ( TextEntry_wrapper::*default_SetBgColor_function_type )( ::Color ) ;
            
            TextEntry_exposer.def( 
                "SetBgColor"
                , SetBgColor_function_type(&::vgui::Panel::SetBgColor)
                , default_SetBgColor_function_type(&TextEntry_wrapper::default_SetBgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetBorder
        
            typedef void ( ::vgui::Panel::*SetBorder_function_type )( ::vgui::IBorder * ) ;
            typedef void ( TextEntry_wrapper::*default_SetBorder_function_type )( ::vgui::IBorder * ) ;
            
            TextEntry_exposer.def( 
                "SetBorder"
                , SetBorder_function_type(&::vgui::Panel::SetBorder)
                , default_SetBorder_function_type(&TextEntry_wrapper::default_SetBorder)
                , ( bp::arg("border") ) );
        
        }
        { //::vgui::Panel::SetCursor
        
            typedef void ( ::vgui::Panel::*SetCursor_function_type )( ::vgui::HCursor ) ;
            typedef void ( TextEntry_wrapper::*default_SetCursor_function_type )( ::vgui::HCursor ) ;
            
            TextEntry_exposer.def( 
                "SetCursor"
                , SetCursor_function_type(&::vgui::Panel::SetCursor)
                , default_SetCursor_function_type(&TextEntry_wrapper::default_SetCursor)
                , ( bp::arg("cursor") ) );
        
        }
        { //::vgui::Panel::SetDragEnabled
        
            typedef void ( ::vgui::Panel::*SetDragEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetDragEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetDragEnabled"
                , SetDragEnabled_function_type(&::vgui::Panel::SetDragEnabled)
                , default_SetDragEnabled_function_type(&TextEntry_wrapper::default_SetDragEnabled)
                , ( bp::arg("enabled") ) );
        
        }
        { //::vgui::Panel::SetFgColor
        
            typedef void ( ::vgui::Panel::*SetFgColor_function_type )( ::Color ) ;
            typedef void ( TextEntry_wrapper::*default_SetFgColor_function_type )( ::Color ) ;
            
            TextEntry_exposer.def( 
                "SetFgColor"
                , SetFgColor_function_type(&::vgui::Panel::SetFgColor)
                , default_SetFgColor_function_type(&TextEntry_wrapper::default_SetFgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetKeyBoardInputEnabled
        
            typedef void ( ::vgui::Panel::*SetKeyBoardInputEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetKeyBoardInputEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type(&::vgui::Panel::SetKeyBoardInputEnabled)
                , default_SetKeyBoardInputEnabled_function_type(&TextEntry_wrapper::default_SetKeyBoardInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetMouseInputEnabled
        
            typedef void ( ::vgui::Panel::*SetMouseInputEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetMouseInputEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type(&::vgui::Panel::SetMouseInputEnabled)
                , default_SetMouseInputEnabled_function_type(&TextEntry_wrapper::default_SetMouseInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavDown_function_type )( ::vgui::Panel * ) ;
            
            TextEntry_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &::vgui::Panel::SetNavDown )
                , ( bp::arg("navDown") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef void ( TextEntry_wrapper::*SetNavDown_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &TextEntry_wrapper::SetNavDown )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavLeft_function_type )( ::vgui::Panel * ) ;
            
            TextEntry_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &::vgui::Panel::SetNavLeft )
                , ( bp::arg("navLeft") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef void ( TextEntry_wrapper::*SetNavLeft_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &TextEntry_wrapper::SetNavLeft )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavRight_function_type )( ::vgui::Panel * ) ;
            
            TextEntry_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &::vgui::Panel::SetNavRight )
                , ( bp::arg("navRight") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef void ( TextEntry_wrapper::*SetNavRight_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &TextEntry_wrapper::SetNavRight )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavUp_function_type )( ::vgui::Panel * ) ;
            
            TextEntry_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &::vgui::Panel::SetNavUp )
                , ( bp::arg("navUp") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef void ( TextEntry_wrapper::*SetNavUp_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &TextEntry_wrapper::SetNavUp )
                , ( bp::arg("controlName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetOverridableColor
        
            typedef void ( TextEntry_wrapper::*SetOverridableColor_function_type )( ::Color *,::Color const & ) ;
            
            TextEntry_exposer.def( 
                "SetOverridableColor"
                , SetOverridableColor_function_type( &TextEntry_wrapper::SetOverridableColor )
                , ( bp::arg("pColor"), bp::arg("newColor") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetPaintBackgroundEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetPaintBackgroundEnabled"
                , SetPaintBackgroundEnabled_function_type(&::vgui::Panel::SetPaintBackgroundEnabled)
                , default_SetPaintBackgroundEnabled_function_type(&TextEntry_wrapper::default_SetPaintBackgroundEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundType
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundType_function_type )( int ) ;
            typedef void ( TextEntry_wrapper::*default_SetPaintBackgroundType_function_type )( int ) ;
            
            TextEntry_exposer.def( 
                "SetPaintBackgroundType"
                , SetPaintBackgroundType_function_type(&::vgui::Panel::SetPaintBackgroundType)
                , default_SetPaintBackgroundType_function_type(&TextEntry_wrapper::default_SetPaintBackgroundType)
                , ( bp::arg("type") ) );
        
        }
        { //::vgui::Panel::SetPaintBorderEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBorderEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetPaintBorderEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetPaintBorderEnabled"
                , SetPaintBorderEnabled_function_type(&::vgui::Panel::SetPaintBorderEnabled)
                , default_SetPaintBorderEnabled_function_type(&TextEntry_wrapper::default_SetPaintBorderEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintEnabled_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetPaintEnabled_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetPaintEnabled"
                , SetPaintEnabled_function_type(&::vgui::Panel::SetPaintEnabled)
                , default_SetPaintEnabled_function_type(&TextEntry_wrapper::default_SetPaintEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type )( ::vgui::VPANEL ) ;
            typedef void ( TextEntry_wrapper::*default_SetParent_function_type )( ::vgui::VPANEL ) ;
            
            TextEntry_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&TextEntry_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( char const * ) ;
            typedef void ( TextEntry_wrapper::*default_SetScheme_function_type )( char const * ) ;
            
            TextEntry_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&TextEntry_wrapper::default_SetScheme)
                , ( bp::arg("tag") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type )( ::vgui::HScheme ) ;
            typedef void ( TextEntry_wrapper::*default_SetScheme_function_type )( ::vgui::HScheme ) ;
            
            TextEntry_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&TextEntry_wrapper::default_SetScheme)
                , ( bp::arg("scheme") ) );
        
        }
        { //::vgui::Panel::SetVisible
        
            typedef void ( ::vgui::Panel::*SetVisible_function_type )( bool ) ;
            typedef void ( TextEntry_wrapper::*default_SetVisible_function_type )( bool ) ;
            
            TextEntry_exposer.def( 
                "SetVisible"
                , SetVisible_function_type(&::vgui::Panel::SetVisible)
                , default_SetVisible_function_type(&TextEntry_wrapper::default_SetVisible)
                , ( bp::arg("state") ) );
        
        }
        TextEntry_exposer.staticmethod( "GetPanelBaseClassName" );
        TextEntry_exposer.staticmethod( "GetPanelClassName" );
        { //::vgui::TextEntry::Paint

        typedef void ( ::vgui::Panel::*Paint_function_type )(  ) ;
        typedef void ( TextEntry_wrapper::*default_Paint_function_type )(  ) ;
        
        TextEntry_exposer.def( 
            "Paint"
            , Paint_function_type(&::vgui::Panel::Paint)
            , default_Paint_function_type(&TextEntry_wrapper::default_Paint) );

    }
    { //::vgui::TextEntry::PaintBackground

        typedef void ( ::vgui::Panel::*PaintBackground_function_type )(  ) ;
        typedef void ( TextEntry_wrapper::*default_PaintBackground_function_type )(  ) ;
        
        TextEntry_exposer.def( 
            "PaintBackground"
            , PaintBackground_function_type(&::vgui::Panel::PaintBackground)
            , default_PaintBackground_function_type(&TextEntry_wrapper::default_PaintBackground) );
    
    }
    { //::vgui::TextEntry::InvalidateLayout
    
        typedef void ( ::vgui::Panel::*InvalidateLayout_function_type )( bool,bool ) ;
        typedef void ( TextEntry_wrapper::*default_InvalidateLayout_function_type )( bool,bool ) ;
        
        TextEntry_exposer.def( 
            "InvalidateLayout"
            , InvalidateLayout_function_type(&::vgui::Panel::InvalidateLayout)
            , default_InvalidateLayout_function_type(&TextEntry_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) );
    
    }
        TextEntry_exposer.def( "RegMessageMethod", &TextEntry_wrapper::RegMessageMethod
        , ( bp::arg("message"), bp::arg("method"), bp::arg("numParams")=(int)(0), bp::arg("nameFirstParam")="", bp::arg("typeFirstParam")=int(::vgui::DATATYPE_VOID), bp::arg("nameSecondParam")="", bp::arg("typeSecondParam")=int(::vgui::DATATYPE_VOID) ));
        TextEntry_exposer.def( "EnableSBuffer", &TextEntry_wrapper::EnableSBuffer, bp::arg("bUseBuffer") );
        TextEntry_exposer.def( "IsSBufferEnabled", &TextEntry_wrapper::IsSBufferEnabled );
        TextEntry_exposer.def( "FlushSBuffer", &TextEntry_wrapper::FlushSBuffer );
        TextEntry_exposer.def( "SetFlushedByParent", &TextEntry_wrapper::SetFlushedByParent, bp::arg("bEnabled") );
        TextEntry_exposer.def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ) )(&::vgui::Panel::SetParent)
            , (void ( TextEntry_wrapper::* )( ::vgui::Panel * ) )(&TextEntry_wrapper::default_SetParent)
            , ( boost::python::arg("newParent") ) );
        TextEntry_exposer.def( 
            "GetText"
            , (boost::python::object ( TextEntry_wrapper::* )())( &TextEntry_wrapper::GetText ) );
    }

}
