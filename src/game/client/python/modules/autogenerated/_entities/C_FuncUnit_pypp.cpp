// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "soundinfo.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iclientvehicle.h"
#include "steam/steamclientpublic.h"
#include "view_shared.h"
#include "c_playerresource.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "beam_shared.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "c_wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_FuncUnit_pypp.hpp"

namespace bp = boost::python;

struct C_FuncUnit_wrapper : C_FuncUnit, bp::wrapper< C_FuncUnit > {

    C_FuncUnit_wrapper( )
    : C_FuncUnit( )
      , bp::wrapper< C_FuncUnit >(){
        // null constructor
    
    }

    virtual long unsigned int GetCursor(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, GetCursor )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, GetCursor )
        bp::override func_GetCursor = this->get_override( "GetCursor" );
        if( func_GetCursor.ptr() != Py_None )
            try {
                return func_GetCursor(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_FuncUnit::GetCursor(  );
            }
        else
            return this->C_FuncUnit::GetCursor(  );
    }
    
    long unsigned int default_GetCursor(  ) {
        return C_FuncUnit::GetCursor( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, GetIMouse )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_FuncUnit::GetIMouse(  );
            }
        else
            return this->C_FuncUnit::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_FuncUnit::GetIMouse( );
    }

    virtual void OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnButtonsChanged )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnButtonsChanged )
        bp::override func_OnButtonsChanged = this->get_override( "OnButtonsChanged" );
        if( func_OnButtonsChanged.ptr() != Py_None )
            try {
                func_OnButtonsChanged( buttonsMask, buttonsChanged );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
            }
        else
            this->C_FuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
    }
    
    void default_OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        C_FuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
    }

    virtual void OnDataChanged( ::DataUpdateType_t updateType ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnDataChanged )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnDataChanged )
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( updateType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnDataChanged( updateType );
            }
        else
            this->C_FuncUnit::OnDataChanged( updateType );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t updateType ) {
        C_FuncUnit::OnDataChanged( updateType );
    }

    virtual void OnHoverPaint(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnHoverPaint )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnHoverPaint )
        bp::override func_OnHoverPaint = this->get_override( "OnHoverPaint" );
        if( func_OnHoverPaint.ptr() != Py_None )
            try {
                func_OnHoverPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnHoverPaint(  );
            }
        else
            this->C_FuncUnit::OnHoverPaint(  );
    }
    
    void default_OnHoverPaint(  ) {
        C_FuncUnit::OnHoverPaint( );
    }

    virtual void OnInSelectionBox(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnInSelectionBox )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnInSelectionBox )
        bp::override func_OnInSelectionBox = this->get_override( "OnInSelectionBox" );
        if( func_OnInSelectionBox.ptr() != Py_None )
            try {
                func_OnInSelectionBox(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnInSelectionBox(  );
            }
        else
            this->C_FuncUnit::OnInSelectionBox(  );
    }
    
    void default_OnInSelectionBox(  ) {
        C_FuncUnit::OnInSelectionBox( );
    }

    virtual void OnOutSelectionBox(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnOutSelectionBox )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnOutSelectionBox )
        bp::override func_OnOutSelectionBox = this->get_override( "OnOutSelectionBox" );
        if( func_OnOutSelectionBox.ptr() != Py_None )
            try {
                func_OnOutSelectionBox(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnOutSelectionBox(  );
            }
        else
            this->C_FuncUnit::OnOutSelectionBox(  );
    }
    
    void default_OnOutSelectionBox(  ) {
        C_FuncUnit::OnOutSelectionBox( );
    }

    virtual void OnUnitTypeChanged( char const * old_unit_type ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, OnUnitTypeChanged )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, OnUnitTypeChanged )
        bp::override func_OnUnitTypeChanged = this->get_override( "OnUnitTypeChanged" );
        if( func_OnUnitTypeChanged.ptr() != Py_None )
            try {
                func_OnUnitTypeChanged( old_unit_type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::OnUnitTypeChanged( old_unit_type );
            }
        else
            this->C_FuncUnit::OnUnitTypeChanged( old_unit_type );
    }
    
    void default_OnUnitTypeChanged( char const * old_unit_type ) {
        C_FuncUnit::OnUnitTypeChanged( old_unit_type );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, Spawn )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::Spawn(  );
            }
        else
            this->C_FuncUnit::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_FuncUnit::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::UpdateOnRemove(  );
            }
        else
            this->C_FuncUnit::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_FuncUnit::UpdateOnRemove( );
    }

    virtual void UserCmd( ::CUserCmd * pCmd ) {
        PY_OVERRIDE_CHECK( C_FuncUnit, UserCmd )
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, UserCmd )
        bp::override func_UserCmd = this->get_override( "UserCmd" );
        if( func_UserCmd.ptr() != Py_None )
            try {
                func_UserCmd( boost::python::ptr(pCmd) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_FuncUnit::UserCmd( pCmd );
            }
        else
            this->C_FuncUnit::UserCmd( pCmd );
    }
    
    void default_UserCmd( ::CUserCmd * pCmd ) {
        C_FuncUnit::UserCmd( pCmd );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, Activate )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, ClientThink )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, ClientThink )
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( pVecWorldMins, pVecWorldMaxs );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( pVecWorldMins, pVecWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( pVecWorldMins, pVecWorldMaxs );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( pOther );
            }
        else
            this->C_BaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( pOther );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, GetCollideType )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, GetCollideType )
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetCollideType(  );
            }
        else
            return this->C_BaseEntity::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseEntity::GetCollideType( );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, MakeTracer )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->C_BaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, NotifyShouldTransmit )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, NotifyShouldTransmit )
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::NotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::NotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::NotifyShouldTransmit( state );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, OnRestore )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnRestore(  );
            }
        else
            this->C_BaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseEntity::OnRestore( );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, Precache )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Precache(  );
            }
        else
            this->C_BaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseEntity::Precache( );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, PyReceiveMessage )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, PyReceiveMessage )
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual bool ShouldDraw(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, ShouldDraw )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, ShouldDraw )
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::ShouldDraw(  );
            }
        else
            return this->C_BaseEntity::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseEntity::ShouldDraw( );
    }

    virtual bool Simulate(  ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, Simulate )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, Simulate )
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::Simulate(  );
            }
        else
            return this->C_BaseEntity::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_BaseEntity::Simulate( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( C_BaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, C_BaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( pOther );
            }
        else
            this->C_BaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( pOther );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
#if defined(_WIN32) // POSIX: TODO
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_FuncUnit::GetClientClass();
#endif // _WIN32
        PY_OVERRIDE_LOG( _entities, C_FuncUnit, GetClientClass )
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
        if( pClientClass )
            return pClientClass;
        return C_FuncUnit::GetClientClass();
    }

    static int m_lifeState_Get( C_FuncUnit const & inst ) { return inst.m_lifeState; }

    static void m_lifeState_Set( C_FuncUnit & inst, int val ) { inst.m_lifeState = val; }

    static int m_takedamage_Get( C_FuncUnit const & inst ) { return inst.m_takedamage; }

    static void m_takedamage_Set( C_FuncUnit & inst, int val ) { inst.m_takedamage = val; }

    virtual bool IsSelectableByPlayer( ::C_HL2WarsPlayer * pPlayer, ::boost::python::object target_selection=boost::python::object() ) {
        boost::python::override func_IsSelectableByPlayer = this->get_override( "IsSelectableByPlayer" );
        if( func_IsSelectableByPlayer.ptr() != Py_None )
            try {
                return func_IsSelectableByPlayer( pPlayer ? pPlayer->GetPyHandle() : bp::object(), target_selection );
            } catch(...) {
                PyErr_Print();
                return this->C_FuncUnit::IsSelectableByPlayer( boost::python::ptr(pPlayer), target_selection );
            }
        else
            return this->C_FuncUnit::IsSelectableByPlayer( boost::python::ptr(pPlayer), target_selection );
    }

    bool default_IsSelectableByPlayer( ::C_HL2WarsPlayer * pPlayer, ::boost::python::object target_selection=boost::python::object() ) {
        return C_FuncUnit::IsSelectableByPlayer( pPlayer, target_selection );
    }

    virtual void Select( ::C_HL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        boost::python::override func_Select = this->get_override( "Select" );
        if( func_Select.ptr() != Py_None )
            try {
                func_Select( pPlayer ? pPlayer->GetPyHandle() : bp::object(), bTriggerOnSel );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::Select( boost::python::ptr(pPlayer), bTriggerOnSel );
            }
        else
            this->C_FuncUnit::Select( boost::python::ptr(pPlayer), bTriggerOnSel );
    }

    void default_Select( ::C_HL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        C_FuncUnit::Select( pPlayer, bTriggerOnSel );
    }

    virtual void OnSelected( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_OnSelected = this->get_override( "OnSelected" );
        if( func_OnSelected.ptr() != Py_None )
            try {
                func_OnSelected( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnSelected( boost::python::ptr(pPlayer) );
            }
        else
            this->C_FuncUnit::OnSelected( boost::python::ptr(pPlayer) );
    }

    void default_OnSelected( ::C_HL2WarsPlayer * pPlayer ) {
        C_FuncUnit::OnSelected( pPlayer );
    }

    virtual void OnDeSelected( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_OnDeSelected = this->get_override( "OnDeSelected" );
        if( func_OnDeSelected.ptr() != Py_None )
            try {
                func_OnDeSelected( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnDeSelected( boost::python::ptr(pPlayer) );
            }
        else
            this->C_FuncUnit::OnDeSelected( boost::python::ptr(pPlayer) );
    }

    void default_OnDeSelected( ::C_HL2WarsPlayer * pPlayer ) {
        C_FuncUnit::OnDeSelected( pPlayer );
    }

    virtual void Order( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_Order = this->get_override( "Order" );
        if( func_Order.ptr() != Py_None )
            try {
                func_Order( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::Order( boost::python::ptr(pPlayer) );
            }
        else
            this->C_FuncUnit::Order( boost::python::ptr(pPlayer) );
    }

    void default_Order( ::C_HL2WarsPlayer * pPlayer ) {
        C_FuncUnit::Order( pPlayer );
    }

    virtual void OnUserControl( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_OnUserControl = this->get_override( "OnUserControl" );
        if( func_OnUserControl.ptr() != Py_None )
            try {
                func_OnUserControl( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnUserControl( boost::python::ptr(pPlayer) );
            }
        else
            this->C_FuncUnit::OnUserControl( boost::python::ptr(pPlayer) );
    }

    void default_OnUserControl( ::C_HL2WarsPlayer * pPlayer ) {
        C_FuncUnit::OnUserControl( pPlayer );
    }

    virtual void OnUserLeftControl( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_OnUserLeftControl = this->get_override( "OnUserLeftControl" );
        if( func_OnUserLeftControl.ptr() != Py_None )
            try {
                func_OnUserLeftControl( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnUserLeftControl( boost::python::ptr(pPlayer) );
            }
        else
            this->C_FuncUnit::OnUserLeftControl( boost::python::ptr(pPlayer) );
    }

    void default_OnUserLeftControl( ::C_HL2WarsPlayer * pPlayer ) {
        C_FuncUnit::OnUserLeftControl( pPlayer );
    }

    virtual bool CanUserControl( ::C_HL2WarsPlayer * pPlayer ) {
        boost::python::override func_CanUserControl = this->get_override( "CanUserControl" );
        if( func_CanUserControl.ptr() != Py_None )
            try {
                return func_CanUserControl( pPlayer ? pPlayer->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                return this->C_FuncUnit::CanUserControl( boost::python::ptr(pPlayer) );
            }
        else
            return this->C_FuncUnit::CanUserControl( boost::python::ptr(pPlayer) );
    }

    bool default_CanUserControl( ::C_HL2WarsPlayer * pPlayer ) {
        return C_FuncUnit::CanUserControl( pPlayer );
    }

    virtual void OnClickLeftPressed( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        if( func_OnClickLeftPressed.ptr() != Py_None )
            try {
                func_OnClickLeftPressed( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickLeftPressed( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickLeftPressed( boost::python::ptr(player) );
    }

    void default_OnClickLeftPressed( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickLeftPressed( player );
    }

    virtual void OnClickRightPressed( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        if( func_OnClickRightPressed.ptr() != Py_None )
            try {
                func_OnClickRightPressed( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickRightPressed( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickRightPressed( boost::python::ptr(player) );
    }

    void default_OnClickRightPressed( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickRightPressed( player );
    }

    virtual void OnClickLeftReleased( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        if( func_OnClickLeftReleased.ptr() != Py_None )
            try {
                func_OnClickLeftReleased( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickLeftReleased( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickLeftReleased( boost::python::ptr(player) );
    }

    void default_OnClickLeftReleased( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickLeftReleased( player );
    }

    virtual void OnClickRightReleased( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        if( func_OnClickRightReleased.ptr() != Py_None )
            try {
                func_OnClickRightReleased( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickRightReleased( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickRightReleased( boost::python::ptr(player) );
    }

    void default_OnClickRightReleased( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickRightReleased( player );
    }

    virtual void OnClickLeftDoublePressed( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        if( func_OnClickLeftDoublePressed.ptr() != Py_None )
            try {
                func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickLeftDoublePressed( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickLeftDoublePressed( boost::python::ptr(player) );
    }

    void default_OnClickLeftDoublePressed( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickLeftDoublePressed( player );
    }

    virtual void OnClickRightDoublePressed( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        if( func_OnClickRightDoublePressed.ptr() != Py_None )
            try {
                func_OnClickRightDoublePressed( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnClickRightDoublePressed( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnClickRightDoublePressed( boost::python::ptr(player) );
    }

    void default_OnClickRightDoublePressed( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnClickRightDoublePressed( player );
    }

    virtual void OnCursorEntered( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnCursorEntered( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnCursorEntered( boost::python::ptr(player) );
    }

    void default_OnCursorEntered( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnCursorEntered( player );
    }

    virtual void OnCursorExited( ::C_HL2WarsPlayer * player ) {
        boost::python::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited( player ? player->GetPyHandle() : bp::object() );
            } catch(...) {
                PyErr_Print();
                this->C_FuncUnit::OnCursorExited( boost::python::ptr(player) );
            }
        else
            this->C_FuncUnit::OnCursorExited( boost::python::ptr(player) );
    }

    void default_OnCursorExited( ::C_HL2WarsPlayer * player ) {
        C_FuncUnit::OnCursorExited( player );
    }

};

void register_C_FuncUnit_class(){

    { //::C_FuncUnit
        typedef bp::class_< C_FuncUnit_wrapper, bp::bases< C_FuncBrush >, boost::noncopyable > C_FuncUnit_exposer_t;
        C_FuncUnit_exposer_t C_FuncUnit_exposer = C_FuncUnit_exposer_t( "C_FuncUnit", bp::init< >() );
        bp::scope C_FuncUnit_scope( C_FuncUnit_exposer );
        { //::C_FuncUnit::AreAttacksPassable
        
            typedef bool ( ::C_FuncUnit::*AreAttacksPassable_function_type )( ::C_BaseEntity * ) ;
            
            C_FuncUnit_exposer.def( 
                "AreAttacksPassable"
                , AreAttacksPassable_function_type( &::C_FuncUnit::AreAttacksPassable )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::C_FuncUnit::Blink
        
            typedef void ( ::C_FuncUnit::*Blink_function_type )( float ) ;
            
            C_FuncUnit_exposer.def( 
                "Blink"
                , Blink_function_type( &::C_FuncUnit::Blink )
                , ( bp::arg("blink_time")=3.0e+0f ) );
        
        }
        { //::C_FuncUnit::CanBeSeen
        
            typedef bool ( ::C_FuncUnit::*CanBeSeen_function_type )( ::C_UnitBase * ) ;
            
            C_FuncUnit_exposer.def( 
                "CanBeSeen"
                , CanBeSeen_function_type( &::C_FuncUnit::CanBeSeen )
                , ( bp::arg("pUnit")=bp::object() ) );
        
        }
        { //::C_FuncUnit::DisableTeamColorGlow
        
            typedef void ( ::C_FuncUnit::*DisableTeamColorGlow_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "DisableTeamColorGlow"
                , DisableTeamColorGlow_function_type( &::C_FuncUnit::DisableTeamColorGlow ) );
        
        }
        { //::C_FuncUnit::DrawModel
        
            typedef int ( ::C_FuncUnit::*DrawModel_function_type )( int,::RenderableInstance_t const & ) ;
            
            C_FuncUnit_exposer.def( 
                "DrawModel"
                , DrawModel_function_type( &::C_FuncUnit::DrawModel )
                , ( bp::arg("flags"), bp::arg("instance") ) );
        
        }
        { //::C_FuncUnit::EnableTeamColorGlow
        
            typedef void ( ::C_FuncUnit::*EnableTeamColorGlow_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "EnableTeamColorGlow"
                , EnableTeamColorGlow_function_type( &::C_FuncUnit::EnableTeamColorGlow ) );
        
        }
        { //::C_FuncUnit::GetCommander
        
            typedef ::C_HL2WarsPlayer * ( ::C_FuncUnit::*GetCommander_function_type )(  ) const;
            
            C_FuncUnit_exposer.def( 
                "GetCommander"
                , GetCommander_function_type( &::C_FuncUnit::GetCommander )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_FuncUnit::GetCursor
        
            typedef long unsigned int ( ::C_FuncUnit::*GetCursor_function_type )(  ) ;
            typedef long unsigned int ( C_FuncUnit_wrapper::*default_GetCursor_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetCursor"
                , GetCursor_function_type(&::C_FuncUnit::GetCursor)
                , default_GetCursor_function_type(&C_FuncUnit_wrapper::default_GetCursor) );
        
        }
        { //::C_FuncUnit::GetEnterOffset
        
            typedef ::Vector const & ( ::C_FuncUnit::*GetEnterOffset_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetEnterOffset"
                , GetEnterOffset_function_type( &::C_FuncUnit::GetEnterOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_FuncUnit::GetHealth
        
            typedef int ( ::C_FuncUnit::*GetHealth_function_type )(  ) const;
            
            C_FuncUnit_exposer.def( 
                "GetHealth"
                , GetHealth_function_type( &::C_FuncUnit::GetHealth ) );
        
        }
        { //::C_FuncUnit::GetIMouse
        
            typedef ::IMouse * ( ::C_FuncUnit::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_FuncUnit_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_FuncUnit::GetIMouse)
                , default_GetIMouse_function_type(&C_FuncUnit_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_FuncUnit::GetMaxHealth
        
            typedef int ( ::C_FuncUnit::*GetMaxHealth_function_type )(  ) const;
            
            C_FuncUnit_exposer.def( 
                "GetMaxHealth"
                , GetMaxHealth_function_type( &::C_FuncUnit::GetMaxHealth ) );
        
        }
        { //::C_FuncUnit::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_FuncUnit_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_FuncUnit::GetPyNetworkType ) );
        
        }
        { //::C_FuncUnit::GetSquad
        
            typedef ::C_BaseEntity * ( ::C_FuncUnit::*GetSquad_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetSquad"
                , GetSquad_function_type( &::C_FuncUnit::GetSquad )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_FuncUnit::GetUnitType
        
            typedef char const * ( ::C_FuncUnit::*GetUnitType_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetUnitType"
                , GetUnitType_function_type( &::C_FuncUnit::GetUnitType ) );
        
        }
        { //::C_FuncUnit::HasEnterOffset
        
            typedef bool ( ::C_FuncUnit::*HasEnterOffset_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "HasEnterOffset"
                , HasEnterOffset_function_type( &::C_FuncUnit::HasEnterOffset ) );
        
        }
        { //::C_FuncUnit::IRelationPriority
        
            typedef int ( ::C_FuncUnit::*IRelationPriority_function_type )( ::C_BaseEntity * ) ;
            
            C_FuncUnit_exposer.def( 
                "IRelationPriority"
                , IRelationPriority_function_type( &::C_FuncUnit::IRelationPriority )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::C_FuncUnit::IRelationType
        
            typedef ::Disposition_t ( ::C_FuncUnit::*IRelationType_function_type )( ::C_BaseEntity * ) ;
            
            C_FuncUnit_exposer.def( 
                "IRelationType"
                , IRelationType_function_type( &::C_FuncUnit::IRelationType )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::C_FuncUnit::IsUnit
        
            typedef bool ( ::C_FuncUnit::*IsUnit_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "IsUnit"
                , IsUnit_function_type( &::C_FuncUnit::IsUnit ) );
        
        }
        { //::C_FuncUnit::OnButtonsChanged
        
            typedef void ( ::C_FuncUnit::*OnButtonsChanged_function_type )( int,int ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnButtonsChanged_function_type )( int,int ) ;
            
            C_FuncUnit_exposer.def( 
                "OnButtonsChanged"
                , OnButtonsChanged_function_type(&::C_FuncUnit::OnButtonsChanged)
                , default_OnButtonsChanged_function_type(&C_FuncUnit_wrapper::default_OnButtonsChanged)
                , ( bp::arg("buttonsMask"), bp::arg("buttonsChanged") ) );
        
        }
        { //::C_FuncUnit::OnDataChanged
        
            typedef void ( ::C_FuncUnit::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_FuncUnit_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_FuncUnit::OnDataChanged)
                , default_OnDataChanged_function_type(&C_FuncUnit_wrapper::default_OnDataChanged)
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_FuncUnit::OnHoverPaint
        
            typedef void ( ::C_FuncUnit::*OnHoverPaint_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnHoverPaint_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "OnHoverPaint"
                , OnHoverPaint_function_type(&::C_FuncUnit::OnHoverPaint)
                , default_OnHoverPaint_function_type(&C_FuncUnit_wrapper::default_OnHoverPaint) );
        
        }
        { //::C_FuncUnit::OnInSelectionBox
        
            typedef void ( ::C_FuncUnit::*OnInSelectionBox_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnInSelectionBox_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "OnInSelectionBox"
                , OnInSelectionBox_function_type(&::C_FuncUnit::OnInSelectionBox)
                , default_OnInSelectionBox_function_type(&C_FuncUnit_wrapper::default_OnInSelectionBox) );
        
        }
        { //::C_FuncUnit::OnOutSelectionBox
        
            typedef void ( ::C_FuncUnit::*OnOutSelectionBox_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnOutSelectionBox_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "OnOutSelectionBox"
                , OnOutSelectionBox_function_type(&::C_FuncUnit::OnOutSelectionBox)
                , default_OnOutSelectionBox_function_type(&C_FuncUnit_wrapper::default_OnOutSelectionBox) );
        
        }
        { //::C_FuncUnit::OnUnitTypeChanged
        
            typedef void ( ::C_FuncUnit::*OnUnitTypeChanged_function_type )( char const * ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnUnitTypeChanged_function_type )( char const * ) ;
            
            C_FuncUnit_exposer.def( 
                "OnUnitTypeChanged"
                , OnUnitTypeChanged_function_type(&::C_FuncUnit::OnUnitTypeChanged)
                , default_OnUnitTypeChanged_function_type(&C_FuncUnit_wrapper::default_OnUnitTypeChanged)
                , ( bp::arg("old_unit_type") ) );
        
        }
        { //::C_FuncUnit::SelectSlot
        
            typedef bool ( ::C_FuncUnit::*SelectSlot_function_type )( int ) ;
            
            C_FuncUnit_exposer.def( 
                "SelectSlot"
                , SelectSlot_function_type( &::C_FuncUnit::SelectSlot )
                , ( bp::arg("slot") ) );
        
        }
        { //::C_FuncUnit::SetCanBeSeen
        
            typedef void ( ::C_FuncUnit::*SetCanBeSeen_function_type )( bool ) ;
            
            C_FuncUnit_exposer.def( 
                "SetCanBeSeen"
                , SetCanBeSeen_function_type( &::C_FuncUnit::SetCanBeSeen )
                , ( bp::arg("canbeseen") ) );
        
        }
        { //::C_FuncUnit::SetEnterOffset
        
            typedef void ( ::C_FuncUnit::*SetEnterOffset_function_type )( ::Vector const & ) ;
            
            C_FuncUnit_exposer.def( 
                "SetEnterOffset"
                , SetEnterOffset_function_type( &::C_FuncUnit::SetEnterOffset )
                , ( bp::arg("enteroffset") ) );
        
        }
        { //::C_FuncUnit::Spawn
        
            typedef void ( ::C_FuncUnit::*Spawn_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_FuncUnit::Spawn)
                , default_Spawn_function_type(&C_FuncUnit_wrapper::default_Spawn) );
        
        }
        { //::C_FuncUnit::UpdateOnRemove
        
            typedef void ( ::C_FuncUnit::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_FuncUnit::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_FuncUnit_wrapper::default_UpdateOnRemove) );
        
        }
        { //::C_FuncUnit::UserCmd
        
            typedef void ( ::C_FuncUnit::*UserCmd_function_type )( ::CUserCmd * ) ;
            typedef void ( C_FuncUnit_wrapper::*default_UserCmd_function_type )( ::CUserCmd * ) ;
            
            C_FuncUnit_exposer.def( 
                "UserCmd"
                , UserCmd_function_type(&::C_FuncUnit::UserCmd)
                , default_UserCmd_function_type(&C_FuncUnit_wrapper::default_UserCmd)
                , ( bp::arg("pCmd") ) );
        
        }
        C_FuncUnit_exposer.def_readwrite( "maxhealth", &C_FuncUnit::m_iMaxHealth );
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_Activate_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_FuncUnit_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_FuncUnit_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_FuncUnit_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_FuncUnit_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_FuncUnit_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_FuncUnit_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_FuncUnit_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_FuncUnit_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_FuncUnit_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_FuncUnit_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_FuncUnit_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_FuncUnit_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_FuncUnit_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_FuncUnit_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_FuncUnit_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseEntity::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_FuncUnit_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseEntity::GetCollideType)
                , default_GetCollideType_function_type(&C_FuncUnit_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_FuncUnit_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_FuncUnit_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_FuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_FuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_FuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_FuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_FuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_FuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_FuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_FuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::MakeTracer
        
            typedef void ( ::C_BaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_FuncUnit_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_FuncUnit_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_BaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&C_FuncUnit_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BaseEntity::NotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_FuncUnit_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_FuncUnit_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::NotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_FuncUnit_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_FuncUnit_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_FuncUnit_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseEntity::OnRestore
        
            typedef void ( ::C_BaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseEntity::OnRestore)
                , default_OnRestore_function_type(&C_FuncUnit_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseEntity::Precache
        
            typedef void ( ::C_BaseEntity::*Precache_function_type )(  ) ;
            typedef void ( C_FuncUnit_wrapper::*default_Precache_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseEntity::Precache)
                , default_Precache_function_type(&C_FuncUnit_wrapper::default_Precache) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_FuncUnit_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_FuncUnit_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_FuncUnit_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_FuncUnit_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_FuncUnit_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_FuncUnit_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ShouldDraw
        
            typedef bool ( ::C_BaseEntity::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_BaseEntity::ShouldDraw)
                , default_ShouldDraw_function_type(&C_FuncUnit_wrapper::default_ShouldDraw) );
        
        }
        { //::C_BaseEntity::Simulate
        
            typedef bool ( ::C_BaseEntity::*Simulate_function_type )(  ) ;
            typedef bool ( C_FuncUnit_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_FuncUnit_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_BaseEntity::Simulate)
                , default_Simulate_function_type(&C_FuncUnit_wrapper::default_Simulate) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_FuncUnit_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_FuncUnit_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_FuncUnit_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        C_FuncUnit_exposer.staticmethod( "GetPyNetworkType" );
        { //property "selectionpriority"[fget=::C_FuncUnit::GetSelectionPriority, fset=::C_FuncUnit::SetSelectionPriority]
        
            typedef int ( ::C_FuncUnit::*fget )(  ) ;
            typedef void ( ::C_FuncUnit::*fset )( int ) ;
            
            C_FuncUnit_exposer.add_property( 
                "selectionpriority"
                , fget( &::C_FuncUnit::GetSelectionPriority )
                , fset( &::C_FuncUnit::SetSelectionPriority ) );
        
        }
        { //property "attackpriority"[fget=::C_FuncUnit::GetAttackPriority, fset=::C_FuncUnit::SetAttackPriority]
        
            typedef int ( ::C_FuncUnit::*fget )(  ) ;
            typedef void ( ::C_FuncUnit::*fset )( int ) ;
            
            C_FuncUnit_exposer.add_property( 
                "attackpriority"
                , fget( &::C_FuncUnit::GetAttackPriority )
                , fset( &::C_FuncUnit::SetAttackPriority ) );
        
        }
        { //property "energy"[fget=::C_FuncUnit::GetEnergy]
        
            typedef int ( ::C_FuncUnit::*fget )(  ) const;
            
            C_FuncUnit_exposer.add_property( 
                "energy"
                , fget( &::C_FuncUnit::GetEnergy ) );
        
        }
        { //property "maxenergy"[fget=::C_FuncUnit::GetMaxEnergy]
        
            typedef int ( ::C_FuncUnit::*fget )(  ) const;
            
            C_FuncUnit_exposer.add_property( 
                "maxenergy"
                , fget( &::C_FuncUnit::GetMaxEnergy ) );
        
        }
        { //property "kills"[fget=::C_FuncUnit::GetKills, fset=::C_FuncUnit::SetKills]
        
            typedef int ( ::C_FuncUnit::*fget )(  ) const;
            typedef void ( ::C_FuncUnit::*fset )( int ) ;
            
            C_FuncUnit_exposer.add_property( 
                "kills"
                , fget( &::C_FuncUnit::GetKills )
                , fset( &::C_FuncUnit::SetKills ) );
        
        }
        C_FuncUnit_exposer.add_property( "lifestate", &C_FuncUnit_wrapper::m_lifeState_Get, &C_FuncUnit_wrapper::m_lifeState_Set );
        C_FuncUnit_exposer.add_property( "takedamage", &C_FuncUnit_wrapper::m_takedamage_Get, &C_FuncUnit_wrapper::m_takedamage_Set );
        C_FuncUnit_exposer.def( 
            "IsSelectableByPlayer"
            , (bool ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer *,::boost::python::object ) )(&::C_FuncUnit::IsSelectableByPlayer)
            , (bool ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer *,::boost::python::object ) )(&C_FuncUnit_wrapper::default_IsSelectableByPlayer)
            , ( boost::python::arg("pPlayer"), boost::python::arg("target_selection")=boost::python::object() ) );
        C_FuncUnit_exposer.def( 
            "Select"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer *,bool ) )(&::C_FuncUnit::Select)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer *,bool ) )(&C_FuncUnit_wrapper::default_Select)
            , ( boost::python::arg("pPlayer"), boost::python::arg("bTriggerOnSel")=(bool)(true) ) );
        C_FuncUnit_exposer.def( 
            "OnSelected"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnSelected)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnSelected)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "OnDeSelected"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnDeSelected)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnDeSelected)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "Order"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::Order)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_Order)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "OnUserControl"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnUserControl)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnUserControl)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "OnUserLeftControl"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnUserLeftControl)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnUserLeftControl)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "CanUserControl"
            , (bool ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::CanUserControl)
            , (bool ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_CanUserControl)
            , ( boost::python::arg("pPlayer") ) );
        C_FuncUnit_exposer.def( 
            "OnClickLeftPressed"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickLeftPressed)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickLeftPressed)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnClickRightPressed"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickRightPressed)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickRightPressed)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnClickLeftReleased"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickLeftReleased)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickLeftReleased)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnClickRightReleased"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickRightReleased)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickRightReleased)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnClickLeftDoublePressed"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickLeftDoublePressed)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickLeftDoublePressed)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnClickRightDoublePressed"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnClickRightDoublePressed)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnClickRightDoublePressed)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnCursorEntered"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnCursorEntered)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnCursorEntered)
            , ( boost::python::arg("player") ) );
        C_FuncUnit_exposer.def( 
            "OnCursorExited"
            , (void ( ::C_FuncUnit::* )( ::C_HL2WarsPlayer * ) )(&::C_FuncUnit::OnCursorExited)
            , (void ( C_FuncUnit_wrapper::* )( ::C_HL2WarsPlayer * ) )(&C_FuncUnit_wrapper::default_OnCursorExited)
            , ( boost::python::arg("player") ) );
    }

}

