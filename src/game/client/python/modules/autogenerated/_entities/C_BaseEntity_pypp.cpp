// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__array_1.pypp.hpp"
#include "videocfg/videocfg.h"
#include "cbase.h"
#include "takedamageinfo.h"
#include "c_baseanimating.h"
#include "c_baseanimatingoverlay.h"
#include "c_baseflex.h"
#include "c_basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "c_baseplayer.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "c_playerresource.h"
#include "sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "c_wars_weapon.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "srcpy_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_converters_ents.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_BaseEntity_pypp.hpp"

namespace bp = boost::python;

struct C_BaseEntity_wrapper : C_BaseEntity, bp::wrapper< C_BaseEntity > {

    C_BaseEntity_wrapper( )
    : C_BaseEntity( )
      , bp::wrapper< C_BaseEntity >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetCollideType(  );
            }
        else
            return this->C_BaseEntity::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseEntity::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnDataChanged( ::DataUpdateType_t type ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnDataChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnDataChanged( type ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnDataChanged( type );
            }
        else
            this->C_BaseEntity::OnDataChanged( type );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t type ) {
        C_BaseEntity::OnDataChanged( type );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnRestore(  );
            }
        else
            this->C_BaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseEntity::OnRestore( );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Precache(  );
            }
        else
            this->C_BaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseEntity::Precache( );
    }

    virtual void PyNotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyNotifyShouldTransmit( state ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyNotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::PyNotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::PyNotifyShouldTransmit( state );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::ShouldDraw(  );
            }
        else
            return this->C_BaseEntity::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseEntity::ShouldDraw( );
    }

    virtual bool Simulate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Simulate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Simulate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::Simulate(  );
            }
        else
            return this->C_BaseEntity::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_BaseEntity::Simulate( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Spawn(  );
            }
        else
            this->C_BaseEntity::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_BaseEntity::Spawn( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    static pyplusplus::containers::static_sized::array_1_t< float, 4>
    pyplusplus_m_fRenderingClipPlane_wrapper( ::C_BaseEntity & inst ){
        return pyplusplus::containers::static_sized::array_1_t< float, 4>( inst.m_fRenderingClipPlane );
    }

    static ::HSCRIPT get_m_hScriptInstance(C_BaseEntity const & inst ){
        return inst.m_hScriptInstance;
    }
    
    static void set_m_hScriptInstance( C_BaseEntity & inst, ::HSCRIPT new_value ){ 
        inst.m_hScriptInstance = new_value;
    }

    virtual ClientClass* GetClientClass() {
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_BaseEntity::GetClientClass();
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>("pyClientClass", GetPyInstance(), NULL, true);
        if( pClientClass )
            return pClientClass;
        return C_BaseEntity::GetClientClass();
    }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: C_BaseEntity\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->C_BaseEntity::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->C_BaseEntity::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return C_BaseEntity::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

};

void register_C_BaseEntity_class(){

    { //::C_BaseEntity
        typedef bp::class_< C_BaseEntity_wrapper, boost::noncopyable > C_BaseEntity_exposer_t;
        C_BaseEntity_exposer_t C_BaseEntity_exposer = C_BaseEntity_exposer_t( "C_BaseEntity", bp::no_init );
        bp::scope C_BaseEntity_scope( C_BaseEntity_exposer );
        bp::scope().attr("SLOT_ORIGINALDATA") = (int)C_BaseEntity::SLOT_ORIGINALDATA;
        bp::scope().attr("VISUALIZE_COLLISION_BOUNDS") = (int)C_BaseEntity::VISUALIZE_COLLISION_BOUNDS;
        bp::scope().attr("VISUALIZE_SURROUNDING_BOUNDS") = (int)C_BaseEntity::VISUALIZE_SURROUNDING_BOUNDS;
        bp::scope().attr("VISUALIZE_RENDER_BOUNDS") = (int)C_BaseEntity::VISUALIZE_RENDER_BOUNDS;
        C_BaseEntity_exposer.def( bp::init< >() );
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_Activate_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_BaseEntity_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddDecal
        
            typedef void ( ::C_BaseEntity::*AddDecal_function_type )( ::Vector const &,::Vector const &,::Vector const &,int,int,bool,::trace_t &,int ) ;
            
            C_BaseEntity_exposer.def( 
                "AddDecal"
                , AddDecal_function_type( &::C_BaseEntity::AddDecal )
                , ( bp::arg("rayStart"), bp::arg("rayEnd"), bp::arg("decalCenter"), bp::arg("hitbox"), bp::arg("decalIndex"), bp::arg("doTrace"), bp::arg("tr"), bp::arg("maxLODToDecal")=int(::ADDDECAL_TO_ALL_LODS) ) );
        
        }
        { //::C_BaseEntity::AddEFlags
        
            typedef void ( ::C_BaseEntity::*AddEFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "AddEFlags"
                , AddEFlags_function_type( &::C_BaseEntity::AddEFlags )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::C_BaseEntity::AddEffects
        
            typedef void ( ::C_BaseEntity::*AddEffects_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "AddEffects"
                , AddEffects_function_type( &::C_BaseEntity::AddEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::C_BaseEntity::AddFlag
        
            typedef void ( ::C_BaseEntity::*AddFlag_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "AddFlag"
                , AddFlag_function_type( &::C_BaseEntity::AddFlag )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BaseEntity::AddRagdollToFadeQueue
        
            typedef bool ( ::C_BaseEntity::*AddRagdollToFadeQueue_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "AddRagdollToFadeQueue"
                , AddRagdollToFadeQueue_function_type( &::C_BaseEntity::AddRagdollToFadeQueue ) );
        
        }
        { //::C_BaseEntity::AddSolidFlags
        
            typedef void ( ::C_BaseEntity::*AddSolidFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "AddSolidFlags"
                , AddSolidFlags_function_type( &::C_BaseEntity::AddSolidFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::C_BaseEntity::AddToAimEntsList
        
            typedef void ( ::C_BaseEntity::*AddToAimEntsList_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "AddToAimEntsList"
                , AddToAimEntsList_function_type( &::C_BaseEntity::AddToAimEntsList ) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_BaseEntity_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BaseEntity_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_BaseEntity_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::AddToLeafSystem
        
            typedef void ( ::C_BaseEntity::*AddToLeafSystem_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "AddToLeafSystem"
                , AddToLeafSystem_function_type( &::C_BaseEntity::AddToLeafSystem ) );
        
        }
        { //::C_BaseEntity::AddToLeafSystem
        
            typedef void ( ::C_BaseEntity::*AddToLeafSystem_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "AddToLeafSystem"
                , AddToLeafSystem_function_type( &::C_BaseEntity::AddToLeafSystem )
                , ( bp::arg("bRenderWithViewModels") ) );
        
        }
        { //::C_BaseEntity::AllowNavIgnore
        
            typedef bool ( ::C_BaseEntity::*AllowNavIgnore_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "AllowNavIgnore"
                , AllowNavIgnore_function_type( &::C_BaseEntity::AllowNavIgnore ) );
        
        }
        { //::C_BaseEntity::ApplyAbsVelocityImpulse
        
            typedef void ( ::C_BaseEntity::*ApplyAbsVelocityImpulse_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "ApplyAbsVelocityImpulse"
                , ApplyAbsVelocityImpulse_function_type( &::C_BaseEntity::ApplyAbsVelocityImpulse )
                , ( bp::arg("vecImpulse") ) );
        
        }
        { //::C_BaseEntity::ApplyLocalAngularVelocityImpulse
        
            typedef void ( ::C_BaseEntity::*ApplyLocalAngularVelocityImpulse_function_type )( ::AngularImpulse const & ) ;
            
            C_BaseEntity_exposer.def( 
                "ApplyLocalAngularVelocityImpulse"
                , ApplyLocalAngularVelocityImpulse_function_type( &::C_BaseEntity::ApplyLocalAngularVelocityImpulse )
                , ( bp::arg("angImpulse") ) );
        
        }
        { //::C_BaseEntity::ApplyLocalVelocityImpulse
        
            typedef void ( ::C_BaseEntity::*ApplyLocalVelocityImpulse_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "ApplyLocalVelocityImpulse"
                , ApplyLocalVelocityImpulse_function_type( &::C_BaseEntity::ApplyLocalVelocityImpulse )
                , ( bp::arg("vecImpulse") ) );
        
        }
        { //::C_BaseEntity::BecameDormantThisPacket
        
            typedef bool ( ::C_BaseEntity::*BecameDormantThisPacket_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "BecameDormantThisPacket"
                , BecameDormantThisPacket_function_type( &::C_BaseEntity::BecameDormantThisPacket ) );
        
        }
        { //::C_BaseEntity::BlocksLOS
        
            typedef bool ( ::C_BaseEntity::*BlocksLOS_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "BlocksLOS"
                , BlocksLOS_function_type( &::C_BaseEntity::BlocksLOS ) );
        
        }
        { //::C_BaseEntity::BloodColor
        
            typedef int ( ::C_BaseEntity::*BloodColor_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "BloodColor"
                , BloodColor_function_type( &::C_BaseEntity::BloodColor ) );
        
        }
        { //::C_BaseEntity::BoneMergeFastCullBloat
        
            typedef void ( ::C_BaseEntity::*BoneMergeFastCullBloat_function_type )( ::Vector &,::Vector &,::Vector const &,::Vector const & ) const;
            
            C_BaseEntity_exposer.def( 
                "BoneMergeFastCullBloat"
                , BoneMergeFastCullBloat_function_type( &::C_BaseEntity::BoneMergeFastCullBloat )
                , ( bp::arg("localMins"), bp::arg("localMaxs"), bp::arg("thisEntityMins"), bp::arg("thisEntityMaxs") ) );
        
        }
        { //::C_BaseEntity::BoundingRadius
        
            typedef float ( ::C_BaseEntity::*BoundingRadius_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "BoundingRadius"
                , BoundingRadius_function_type( &::C_BaseEntity::BoundingRadius ) );
        
        }
        { //::C_BaseEntity::CalcAimEntPositions
        
            typedef void ( *CalcAimEntPositions_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "CalcAimEntPositions"
                , CalcAimEntPositions_function_type( &::C_BaseEntity::CalcAimEntPositions ) );
        
        }
        { //::C_BaseEntity::CalculateIgnoreOwnerCollisionGroup
        
            typedef int ( ::C_BaseEntity::*CalculateIgnoreOwnerCollisionGroup_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CalculateIgnoreOwnerCollisionGroup"
                , CalculateIgnoreOwnerCollisionGroup_function_type( &::C_BaseEntity::CalculateIgnoreOwnerCollisionGroup ) );
        
        }
        { //::C_BaseEntity::CalculateOwnerCollisionGroup
        
            typedef int ( ::C_BaseEntity::*CalculateOwnerCollisionGroup_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CalculateOwnerCollisionGroup"
                , CalculateOwnerCollisionGroup_function_type( &::C_BaseEntity::CalculateOwnerCollisionGroup ) );
        
        }
        { //::C_BaseEntity::CanBePoweredUp
        
            typedef bool ( ::C_BaseEntity::*CanBePoweredUp_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CanBePoweredUp"
                , CanBePoweredUp_function_type( &::C_BaseEntity::CanBePoweredUp ) );
        
        }
        { //::C_BaseEntity::CanBeSeenBy
        
            typedef bool ( ::C_BaseEntity::*CanBeSeenBy_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "CanBeSeenBy"
                , CanBeSeenBy_function_type( &::C_BaseEntity::CanBeSeenBy )
                , ( bp::arg("pEnt") ) );
        
        }
        { //::C_BaseEntity::ChangeTeam
        
            typedef void ( ::C_BaseEntity::*ChangeTeam_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "ChangeTeam"
                , ChangeTeam_function_type( &::C_BaseEntity::ChangeTeam )
                , ( bp::arg("iTeamNum") ) );
        
        }
        { //::C_BaseEntity::CheckCLInterpChanged
        
            typedef void ( *CheckCLInterpChanged_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "CheckCLInterpChanged"
                , CheckCLInterpChanged_function_type( &::C_BaseEntity::CheckCLInterpChanged ) );
        
        }
        { //::C_BaseEntity::CheckHasGamePhysicsSimulation
        
            typedef void ( ::C_BaseEntity::*CheckHasGamePhysicsSimulation_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CheckHasGamePhysicsSimulation"
                , CheckHasGamePhysicsSimulation_function_type( &::C_BaseEntity::CheckHasGamePhysicsSimulation ) );
        
        }
        { //::C_BaseEntity::CheckHasThinkFunction
        
            typedef void ( ::C_BaseEntity::*CheckHasThinkFunction_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "CheckHasThinkFunction"
                , CheckHasThinkFunction_function_type( &::C_BaseEntity::CheckHasThinkFunction )
                , ( bp::arg("isThinkingHint")=(bool)(false) ) );
        
        }
        { //::C_BaseEntity::CheckInitPredictable
        
            typedef void ( ::C_BaseEntity::*CheckInitPredictable_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "CheckInitPredictable"
                , CheckInitPredictable_function_type( &::C_BaseEntity::CheckInitPredictable )
                , ( bp::arg("context") ) );
        
        }
        { //::C_BaseEntity::Classify
        
            typedef ::Class_T ( ::C_BaseEntity::*Classify_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Classify"
                , Classify_function_type( &::C_BaseEntity::Classify ) );
        
        }
        { //::C_BaseEntity::CleanupToolRecordingState
        
            typedef void ( ::C_BaseEntity::*CleanupToolRecordingState_function_type )( ::KeyValues * ) ;
            
            C_BaseEntity_exposer.def( 
                "CleanupToolRecordingState"
                , CleanupToolRecordingState_function_type( &::C_BaseEntity::CleanupToolRecordingState )
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::Clear
        
            typedef void ( ::C_BaseEntity::*Clear_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Clear"
                , Clear_function_type( &::C_BaseEntity::Clear ) );
        
        }
        { //::C_BaseEntity::ClearBBoxVisualization
        
            typedef void ( ::C_BaseEntity::*ClearBBoxVisualization_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ClearBBoxVisualization"
                , ClearBBoxVisualization_function_type( &::C_BaseEntity::ClearBBoxVisualization ) );
        
        }
        { //::C_BaseEntity::ClearEffects
        
            typedef void ( ::C_BaseEntity::*ClearEffects_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ClearEffects"
                , ClearEffects_function_type( &::C_BaseEntity::ClearEffects ) );
        
        }
        { //::C_BaseEntity::ClearFlags
        
            typedef void ( ::C_BaseEntity::*ClearFlags_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ClearFlags"
                , ClearFlags_function_type( &::C_BaseEntity::ClearFlags ) );
        
        }
        { //::C_BaseEntity::ClearNavIgnore
        
            typedef void ( ::C_BaseEntity::*ClearNavIgnore_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ClearNavIgnore"
                , ClearNavIgnore_function_type( &::C_BaseEntity::ClearNavIgnore ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_BaseEntity_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::CollisionProp
        
            typedef ::CCollisionProperty * ( ::C_BaseEntity::*CollisionProp_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CollisionProp"
                , CollisionProp_function_type( &::C_BaseEntity::CollisionProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::C_BaseEntity::CollisionProp
        
            typedef ::CCollisionProperty const * ( ::C_BaseEntity::*CollisionProp_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "CollisionProp"
                , CollisionProp_function_type( &::C_BaseEntity::CollisionProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::C_BaseEntity::CollisionRulesChanged
        
            typedef void ( ::C_BaseEntity::*CollisionRulesChanged_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CollisionRulesChanged"
                , CollisionRulesChanged_function_type( &::C_BaseEntity::CollisionRulesChanged ) );
        
        }
        { //::C_BaseEntity::ComputeAbsDirection
        
            typedef void ( ::C_BaseEntity::*ComputeAbsDirection_function_type )( ::Vector const &,::Vector * ) ;
            
            C_BaseEntity_exposer.def( 
                "ComputeAbsDirection"
                , ComputeAbsDirection_function_type( &::C_BaseEntity::ComputeAbsDirection )
                , ( bp::arg("vecLocalDirection"), bp::arg("pAbsDirection") ) );
        
        }
        { //::C_BaseEntity::ComputeAbsPosition
        
            typedef void ( ::C_BaseEntity::*ComputeAbsPosition_function_type )( ::Vector const &,::Vector * ) ;
            
            C_BaseEntity_exposer.def( 
                "ComputeAbsPosition"
                , ComputeAbsPosition_function_type( &::C_BaseEntity::ComputeAbsPosition )
                , ( bp::arg("vecLocalPosition"), bp::arg("pAbsPosition") ) );
        
        }
        { //::C_BaseEntity::ComputeTracerStartPosition
        
            typedef void ( ::C_BaseEntity::*ComputeTracerStartPosition_function_type )( ::Vector const &,::Vector * ) ;
            
            C_BaseEntity_exposer.def( 
                "ComputeTracerStartPosition"
                , ComputeTracerStartPosition_function_type( &::C_BaseEntity::ComputeTracerStartPosition )
                , ( bp::arg("vecShotSrc"), bp::arg("pVecTracerStart") ) );
        
        }
        { //::C_BaseEntity::ComputeTranslucencyType
        
            typedef ::RenderableTranslucencyType_t ( ::C_BaseEntity::*ComputeTranslucencyType_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ComputeTranslucencyType"
                , ComputeTranslucencyType_function_type( &::C_BaseEntity::ComputeTranslucencyType ) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_BaseEntity_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_BaseEntity_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_BaseEntity_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateLightEffects
        
            typedef bool ( ::C_BaseEntity::*CreateLightEffects_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CreateLightEffects"
                , CreateLightEffects_function_type( &::C_BaseEntity::CreateLightEffects ) );
        
        }
        { //::C_BaseEntity::CreateModelInstance
        
            typedef void ( ::C_BaseEntity::*CreateModelInstance_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CreateModelInstance"
                , CreateModelInstance_function_type( &::C_BaseEntity::CreateModelInstance ) );
        
        }
        { //::C_BaseEntity::CreatePredictedEntityByName
        
            typedef ::C_BaseEntity * ( *CreatePredictedEntityByName_function_type )( char const *,char const *,int,bool );
            
            C_BaseEntity_exposer.def( 
                "CreatePredictedEntityByName"
                , CreatePredictedEntityByName_function_type( &::C_BaseEntity::CreatePredictedEntityByName )
                , ( bp::arg("classname"), bp::arg("module"), bp::arg("line"), bp::arg("persist")=(bool)(false) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::CreateShadow
        
            typedef void ( ::C_BaseEntity::*CreateShadow_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CreateShadow"
                , CreateShadow_function_type( &::C_BaseEntity::CreateShadow ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_BaseEntity_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DamageDecal
        
            typedef char const * ( ::C_BaseEntity::*DamageDecal_function_type )( int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "DamageDecal"
                , DamageDecal_function_type( &::C_BaseEntity::DamageDecal )
                , ( bp::arg("bitsDamageType"), bp::arg("gameMaterial") ) );
        
        }
        { //::C_BaseEntity::DecalTrace
        
            typedef void ( ::C_BaseEntity::*DecalTrace_function_type )( ::trace_t *,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "DecalTrace"
                , DecalTrace_function_type( &::C_BaseEntity::DecalTrace )
                , ( bp::arg("pTrace"), bp::arg("decalName") ) );
        
        }
        { //::C_BaseEntity::DestroyShadow
        
            typedef void ( ::C_BaseEntity::*DestroyShadow_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "DestroyShadow"
                , DestroyShadow_function_type( &::C_BaseEntity::DestroyShadow ) );
        
        }
        { //::C_BaseEntity::DisableCachedRenderBounds
        
            typedef void ( ::C_BaseEntity::*DisableCachedRenderBounds_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "DisableCachedRenderBounds"
                , DisableCachedRenderBounds_function_type( &::C_BaseEntity::DisableCachedRenderBounds )
                , ( bp::arg("bDisabled") ) );
        
        }
        { //::C_BaseEntity::DispatchTraceAttack
        
            typedef void ( ::C_BaseEntity::*DispatchTraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            C_BaseEntity_exposer.def( 
                "DispatchTraceAttack"
                , DispatchTraceAttack_function_type( &::C_BaseEntity::DispatchTraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::C_BaseEntity::DoAnimationEvents
        
            typedef void ( ::C_BaseEntity::*DoAnimationEvents_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "DoAnimationEvents"
                , DoAnimationEvents_function_type( &::C_BaseEntity::DoAnimationEvents ) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_BaseEntity_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_BaseEntity_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_BaseEntity_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::DontRecordInTools
        
            typedef void ( ::C_BaseEntity::*DontRecordInTools_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "DontRecordInTools"
                , DontRecordInTools_function_type( &::C_BaseEntity::DontRecordInTools ) );
        
        }
        { //::C_BaseEntity::DrawBBoxVisualizations
        
            typedef void ( ::C_BaseEntity::*DrawBBoxVisualizations_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "DrawBBoxVisualizations"
                , DrawBBoxVisualizations_function_type( &::C_BaseEntity::DrawBBoxVisualizations ) );
        
        }
        { //::C_BaseEntity::DrawBrushModel
        
            typedef int ( ::C_BaseEntity::*DrawBrushModel_function_type )( bool,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "DrawBrushModel"
                , DrawBrushModel_function_type( &::C_BaseEntity::DrawBrushModel )
                , ( bp::arg("bSort"), bp::arg("bShadowDepth") ) );
        
        }
        { //::C_BaseEntity::DrawModel
        
            typedef int ( ::C_BaseEntity::*DrawModel_function_type )( int,::RenderableInstance_t const & ) ;
            
            C_BaseEntity_exposer.def( 
                "DrawModel"
                , DrawModel_function_type( &::C_BaseEntity::DrawModel )
                , ( bp::arg("flags"), bp::arg("instance") ) );
        
        }
        { //::C_BaseEntity::EarPosition
        
            typedef ::Vector ( ::C_BaseEntity::*EarPosition_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "EarPosition"
                , EarPosition_function_type( &::C_BaseEntity::EarPosition ) );
        
        }
        { //::C_BaseEntity::EarPosition
        
            typedef ::Vector ( ::C_BaseEntity::*EarPosition_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "EarPosition"
                , EarPosition_function_type( &::C_BaseEntity::EarPosition ) );
        
        }
        { //::C_BaseEntity::EmitAmbientSound
        
            typedef void ( *EmitAmbientSound_function_type )( int,::Vector const &,char const *,int,float,float * );
            
            C_BaseEntity_exposer.def( 
                "EmitAmbientSound"
                , EmitAmbientSound_function_type( &::C_BaseEntity::EmitAmbientSound )
                , ( bp::arg("entindex"), bp::arg("origin"), bp::arg("soundname"), bp::arg("flags")=(int)(0), bp::arg("soundtime")=0.0f, bp::arg("duration")=bp::object() ) );
        
        }
        { //::C_BaseEntity::EmitCloseCaption
        
            typedef void ( *EmitCloseCaption_function_type )( ::IRecipientFilter &,int,char const *,::CUtlVector< Vector, CUtlMemory< Vector, int > > &,float,bool );
            
            C_BaseEntity_exposer.def( 
                "EmitCloseCaption"
                , EmitCloseCaption_function_type( &::C_BaseEntity::EmitCloseCaption )
                , ( bp::arg("filter"), bp::arg("entindex"), bp::arg("token"), bp::arg("soundorigins"), bp::arg("duration"), bp::arg("warnifmissing")=(bool)(false) ) );
        
        }
        { //::C_BaseEntity::EnableAbsRecomputations
        
            typedef void ( *EnableAbsRecomputations_function_type )( bool );
            
            C_BaseEntity_exposer.def( 
                "EnableAbsRecomputations"
                , EnableAbsRecomputations_function_type( &::C_BaseEntity::EnableAbsRecomputations )
                , ( bp::arg("bEnable") ) );
        
        }
        { //::C_BaseEntity::EnableInToolView
        
            typedef void ( ::C_BaseEntity::*EnableInToolView_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "EnableInToolView"
                , EnableInToolView_function_type( &::C_BaseEntity::EnableInToolView )
                , ( bp::arg("bEnable") ) );
        
        }
        { //::C_BaseEntity::EndGroundContact
        
            typedef void ( ::C_BaseEntity::*EndGroundContact_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "EndGroundContact"
                , EndGroundContact_function_type( &::C_BaseEntity::EndGroundContact )
                , ( bp::arg("ground") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BaseEntity_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_BaseEntity_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::EntityToWorldSpace
        
            typedef void ( ::C_BaseEntity::*EntityToWorldSpace_function_type )( ::Vector const &,::Vector * ) const;
            
            C_BaseEntity_exposer.def( 
                "EntityToWorldSpace"
                , EntityToWorldSpace_function_type( &::C_BaseEntity::EntityToWorldSpace )
                , ( bp::arg("in"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::EntityToWorldTransform
        
            typedef ::matrix3x4_t & ( ::C_BaseEntity::*EntityToWorldTransform_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "EntityToWorldTransform"
                , EntityToWorldTransform_function_type( &::C_BaseEntity::EntityToWorldTransform )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::EntityToWorldTransform
        
            typedef ::matrix3x4_t const & ( ::C_BaseEntity::*EntityToWorldTransform_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "EntityToWorldTransform"
                , EntityToWorldTransform_function_type( &::C_BaseEntity::EntityToWorldTransform )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::EstimateAbsVelocity
        
            typedef void ( ::C_BaseEntity::*EstimateAbsVelocity_function_type )( ::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "EstimateAbsVelocity"
                , EstimateAbsVelocity_function_type( &::C_BaseEntity::EstimateAbsVelocity )
                , ( bp::arg("vel") ) );
        
        }
        { //::C_BaseEntity::EyeAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*EyeAngles_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::C_BaseEntity::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::EyeAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*EyeAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::C_BaseEntity::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::EyePosition
        
            typedef ::Vector ( ::C_BaseEntity::*EyePosition_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::C_BaseEntity::EyePosition ) );
        
        }
        { //::C_BaseEntity::EyePosition
        
            typedef ::Vector ( ::C_BaseEntity::*EyePosition_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::C_BaseEntity::EyePosition ) );
        
        }
        { //::C_BaseEntity::FOWShouldShow
        
            typedef bool ( ::C_BaseEntity::*FOWShouldShow_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "FOWShouldShow"
                , FOWShouldShow_function_type( &::C_BaseEntity::FOWShouldShow ) );
        
        }
        { //::C_BaseEntity::FireBullets
        
            typedef void ( ::C_BaseEntity::*FireBullets_function_type )( ::FireBulletsInfo_t const & ) ;
            
            C_BaseEntity_exposer.def( 
                "FireBullets"
                , FireBullets_function_type( &::C_BaseEntity::FireBullets )
                , ( bp::arg("info") ) );
        
        }
        { //::C_BaseEntity::FirstMoveChild
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*FirstMoveChild_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "FirstMoveChild"
                , FirstMoveChild_function_type( &::C_BaseEntity::FirstMoveChild )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::FollowEntity
        
            typedef void ( ::C_BaseEntity::*FollowEntity_function_type )( ::C_BaseEntity *,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "FollowEntity"
                , FollowEntity_function_type( &::C_BaseEntity::FollowEntity )
                , ( bp::arg("pBaseEntity"), bp::arg("bBoneMerge")=(bool)(true) ) );
        
        }
        { //::C_BaseEntity::Forward
        
            typedef ::Vector ( ::C_BaseEntity::*Forward_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "Forward"
                , Forward_function_type( &::C_BaseEntity::Forward ) );
        
        }
        { //::C_BaseEntity::GenderExpandString
        
            typedef void ( ::C_BaseEntity::*GenderExpandString_function_type )( char const *,char *,int ) ;
            
            C_BaseEntity_exposer.def( 
                "GenderExpandString"
                , GenderExpandString_function_type( &::C_BaseEntity::GenderExpandString )
                , ( bp::arg("in"), bp::arg("out"), bp::arg("maxlen") ) );
        
        }
        { //::C_BaseEntity::GetAbsAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetAbsAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetAbsAngles"
                , GetAbsAngles_function_type( &::C_BaseEntity::GetAbsAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetAbsOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetAbsOrigin_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetAbsOrigin"
                , GetAbsOrigin_function_type( &::C_BaseEntity::GetAbsOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetAbsVelocity
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetAbsVelocity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetAbsVelocity"
                , GetAbsVelocity_function_type( &::C_BaseEntity::GetAbsVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetAnimTime
        
            typedef float ( ::C_BaseEntity::*GetAnimTime_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetAnimTime"
                , GetAnimTime_function_type( &::C_BaseEntity::GetAnimTime ) );
        
        }
        { //::C_BaseEntity::GetAttachment
        
            typedef bool ( ::C_BaseEntity::*GetAttachment_function_type )( int,::matrix3x4_t & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::C_BaseEntity::GetAttachment )
                , ( bp::arg("number"), bp::arg("matrix") ) );
        
        }
        { //::C_BaseEntity::GetAttachment
        
            typedef bool ( ::C_BaseEntity::*GetAttachment_function_type )( int,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::C_BaseEntity::GetAttachment )
                , ( bp::arg("number"), bp::arg("origin") ) );
        
        }
        { //::C_BaseEntity::GetAttachment
        
            typedef bool ( ::C_BaseEntity::*GetAttachment_function_type )( int,::Vector &,::QAngle & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::C_BaseEntity::GetAttachment )
                , ( bp::arg("number"), bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::C_BaseEntity::GetAttackDamageScale
        
            typedef float ( ::C_BaseEntity::*GetAttackDamageScale_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetAttackDamageScale"
                , GetAttackDamageScale_function_type( &::C_BaseEntity::GetAttackDamageScale ) );
        
        }
        { //::C_BaseEntity::GetBaseVelocity
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetBaseVelocity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetBaseVelocity"
                , GetBaseVelocity_function_type( &::C_BaseEntity::GetBaseVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetBody
        
            typedef int ( ::C_BaseEntity::*GetBody_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetBody"
                , GetBody_function_type( &::C_BaseEntity::GetBody ) );
        
        }
        { //::C_BaseEntity::GetCheckUntouch
        
            typedef bool ( ::C_BaseEntity::*GetCheckUntouch_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetCheckUntouch"
                , GetCheckUntouch_function_type( &::C_BaseEntity::GetCheckUntouch ) );
        
        }
        { //::C_BaseEntity::GetClassname
        
            typedef char const * ( ::C_BaseEntity::*GetClassname_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetClassname"
                , GetClassname_function_type( &::C_BaseEntity::GetClassname ) );
        
        }
        { //::C_BaseEntity::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseEntity::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_BaseEntity_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseEntity::GetCollideType)
                , default_GetCollideType_function_type(&C_BaseEntity_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetCollisionGroup
        
            typedef int ( ::C_BaseEntity::*GetCollisionGroup_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetCollisionGroup"
                , GetCollisionGroup_function_type( &::C_BaseEntity::GetCollisionGroup ) );
        
        }
        { //::C_BaseEntity::GetColorModulation
        
            typedef void ( ::C_BaseEntity::*GetColorModulation_function_type )( float * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetColorModulation"
                , GetColorModulation_function_type( &::C_BaseEntity::GetColorModulation )
                , ( bp::arg("color") ) );
        
        }
        { //::C_BaseEntity::GetCreateTime
        
            typedef float ( ::C_BaseEntity::*GetCreateTime_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetCreateTime"
                , GetCreateTime_function_type( &::C_BaseEntity::GetCreateTime ) );
        
        }
        { //::C_BaseEntity::GetCreationTick
        
            typedef int ( ::C_BaseEntity::*GetCreationTick_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetCreationTick"
                , GetCreationTick_function_type( &::C_BaseEntity::GetCreationTick ) );
        
        }
        { //::C_BaseEntity::GetDebugName
        
            typedef char const * ( ::C_BaseEntity::*GetDebugName_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetDebugName"
                , GetDebugName_function_type( &::C_BaseEntity::GetDebugName ) );
        
        }
        { //::C_BaseEntity::GetEFlags
        
            typedef int ( ::C_BaseEntity::*GetEFlags_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetEFlags"
                , GetEFlags_function_type( &::C_BaseEntity::GetEFlags ) );
        
        }
        { //::C_BaseEntity::GetEffectEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetEffectEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetEffectEntity"
                , GetEffectEntity_function_type( &::C_BaseEntity::GetEffectEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetEffects
        
            typedef int ( ::C_BaseEntity::*GetEffects_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetEffects"
                , GetEffects_function_type( &::C_BaseEntity::GetEffects ) );
        
        }
        { //::C_BaseEntity::GetElasticity
        
            typedef float ( ::C_BaseEntity::*GetElasticity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetElasticity"
                , GetElasticity_function_type( &::C_BaseEntity::GetElasticity ) );
        
        }
        { //::C_BaseEntity::GetEntityName
        
            typedef char const * ( ::C_BaseEntity::*GetEntityName_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetEntityName"
                , GetEntityName_function_type( &::C_BaseEntity::GetEntityName ) );
        
        }
        { //::C_BaseEntity::GetEyeAngleOffset
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetEyeAngleOffset_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetEyeAngleOffset"
                , GetEyeAngleOffset_function_type( &::C_BaseEntity::GetEyeAngleOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetEyeOffset
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetEyeOffset_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetEyeOffset"
                , GetEyeOffset_function_type( &::C_BaseEntity::GetEyeOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetFOWFlags
        
            typedef int ( ::C_BaseEntity::*GetFOWFlags_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetFOWFlags"
                , GetFOWFlags_function_type( &::C_BaseEntity::GetFOWFlags ) );
        
        }
        { //::C_BaseEntity::GetFirstThinkTick
        
            typedef int ( ::C_BaseEntity::*GetFirstThinkTick_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetFirstThinkTick"
                , GetFirstThinkTick_function_type( &::C_BaseEntity::GetFirstThinkTick ) );
        
        }
        { //::C_BaseEntity::GetFlags
        
            typedef int ( ::C_BaseEntity::*GetFlags_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetFlags"
                , GetFlags_function_type( &::C_BaseEntity::GetFlags ) );
        
        }
        { //::C_BaseEntity::GetFollowedEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetFollowedEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetFollowedEntity"
                , GetFollowedEntity_function_type( &::C_BaseEntity::GetFollowedEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetFriction
        
            typedef float ( ::C_BaseEntity::*GetFriction_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetFriction"
                , GetFriction_function_type( &::C_BaseEntity::GetFriction ) );
        
        }
        { //::C_BaseEntity::GetGlobalFadeScale
        
            typedef float ( ::C_BaseEntity::*GetGlobalFadeScale_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetGlobalFadeScale"
                , GetGlobalFadeScale_function_type( &::C_BaseEntity::GetGlobalFadeScale ) );
        
        }
        { //::C_BaseEntity::GetGravity
        
            typedef float ( ::C_BaseEntity::*GetGravity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetGravity"
                , GetGravity_function_type( &::C_BaseEntity::GetGravity ) );
        
        }
        { //::C_BaseEntity::GetGroundChangeTime
        
            typedef float ( ::C_BaseEntity::*GetGroundChangeTime_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetGroundChangeTime"
                , GetGroundChangeTime_function_type( &::C_BaseEntity::GetGroundChangeTime ) );
        
        }
        { //::C_BaseEntity::GetGroundEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetGroundEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetGroundEntity"
                , GetGroundEntity_function_type( &::C_BaseEntity::GetGroundEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetGroundEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetGroundEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetGroundEntity"
                , GetGroundEntity_function_type( &::C_BaseEntity::GetGroundEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetGroundVelocityToApply
        
            typedef void ( ::C_BaseEntity::*GetGroundVelocityToApply_function_type )( ::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetGroundVelocityToApply"
                , GetGroundVelocityToApply_function_type( &::C_BaseEntity::GetGroundVelocityToApply )
                , ( bp::arg("vecGroundVel") ) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_BaseEntity_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_BaseEntity_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetInterpolationAmount
        
            typedef float ( ::C_BaseEntity::*GetInterpolationAmount_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "GetInterpolationAmount"
                , GetInterpolationAmount_function_type( &::C_BaseEntity::GetInterpolationAmount )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BaseEntity::GetKeyValue
        
            typedef bool ( ::C_BaseEntity::*GetKeyValue_function_type )( char const *,char *,int ) ;
            
            C_BaseEntity_exposer.def( 
                "GetKeyValue"
                , GetKeyValue_function_type( &::C_BaseEntity::GetKeyValue )
                , ( bp::arg("szKeyName"), bp::arg("szValue"), bp::arg("iMaxLen") ) );
        
        }
        { //::C_BaseEntity::GetLastChangeTime
        
            typedef float ( ::C_BaseEntity::*GetLastChangeTime_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "GetLastChangeTime"
                , GetLastChangeTime_function_type( &::C_BaseEntity::GetLastChangeTime )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BaseEntity::GetLastShouldTransmitState
        
            typedef ::ShouldTransmitState_t ( ::C_BaseEntity::*GetLastShouldTransmitState_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetLastShouldTransmitState"
                , GetLastShouldTransmitState_function_type( &::C_BaseEntity::GetLastShouldTransmitState ) );
        
        }
        { //::C_BaseEntity::GetLastThink
        
            typedef float ( ::C_BaseEntity::*GetLastThink_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetLastThink"
                , GetLastThink_function_type( &::C_BaseEntity::GetLastThink )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::GetLastThinkTick
        
            typedef int ( ::C_BaseEntity::*GetLastThinkTick_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetLastThinkTick"
                , GetLastThinkTick_function_type( &::C_BaseEntity::GetLastThinkTick )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::GetLocalAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetLocalAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalAngles"
                , GetLocalAngles_function_type( &::C_BaseEntity::GetLocalAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetLocalAnglesDim
        
            typedef ::vec_t ( ::C_BaseEntity::*GetLocalAnglesDim_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalAnglesDim"
                , GetLocalAnglesDim_function_type( &::C_BaseEntity::GetLocalAnglesDim )
                , ( bp::arg("iDim") ) );
        
        }
        { //::C_BaseEntity::GetLocalAngularVelocity
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetLocalAngularVelocity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalAngularVelocity"
                , GetLocalAngularVelocity_function_type( &::C_BaseEntity::GetLocalAngularVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetLocalOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetLocalOrigin_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalOrigin"
                , GetLocalOrigin_function_type( &::C_BaseEntity::GetLocalOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetLocalOriginDim
        
            typedef ::vec_t ( ::C_BaseEntity::*GetLocalOriginDim_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalOriginDim"
                , GetLocalOriginDim_function_type( &::C_BaseEntity::GetLocalOriginDim )
                , ( bp::arg("iDim") ) );
        
        }
        { //::C_BaseEntity::GetLocalVelocity
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetLocalVelocity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetLocalVelocity"
                , GetLocalVelocity_function_type( &::C_BaseEntity::GetLocalVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetMaxCPULevel
        
            typedef int ( ::C_BaseEntity::*GetMaxCPULevel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMaxCPULevel"
                , GetMaxCPULevel_function_type( &::C_BaseEntity::GetMaxCPULevel ) );
        
        }
        { //::C_BaseEntity::GetMaxFadeDist
        
            typedef float ( ::C_BaseEntity::*GetMaxFadeDist_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMaxFadeDist"
                , GetMaxFadeDist_function_type( &::C_BaseEntity::GetMaxFadeDist ) );
        
        }
        { //::C_BaseEntity::GetMaxGPULevel
        
            typedef int ( ::C_BaseEntity::*GetMaxGPULevel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMaxGPULevel"
                , GetMaxGPULevel_function_type( &::C_BaseEntity::GetMaxGPULevel ) );
        
        }
        { //::C_BaseEntity::GetMinCPULevel
        
            typedef int ( ::C_BaseEntity::*GetMinCPULevel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMinCPULevel"
                , GetMinCPULevel_function_type( &::C_BaseEntity::GetMinCPULevel ) );
        
        }
        { //::C_BaseEntity::GetMinFadeDist
        
            typedef float ( ::C_BaseEntity::*GetMinFadeDist_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMinFadeDist"
                , GetMinFadeDist_function_type( &::C_BaseEntity::GetMinFadeDist ) );
        
        }
        { //::C_BaseEntity::GetMinGPULevel
        
            typedef int ( ::C_BaseEntity::*GetMinGPULevel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMinGPULevel"
                , GetMinGPULevel_function_type( &::C_BaseEntity::GetMinGPULevel ) );
        
        }
        { //::C_BaseEntity::GetModelIndex
        
            typedef int ( ::C_BaseEntity::*GetModelIndex_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetModelIndex"
                , GetModelIndex_function_type( &::C_BaseEntity::GetModelIndex ) );
        
        }
        { //::C_BaseEntity::GetModelInstance
        
            typedef ::ModelInstanceHandle_t ( ::C_BaseEntity::*GetModelInstance_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetModelInstance"
                , GetModelInstance_function_type( &::C_BaseEntity::GetModelInstance ) );
        
        }
        { //::C_BaseEntity::GetModelName
        
            typedef ::string_t ( ::C_BaseEntity::*GetModelName_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetModelName"
                , GetModelName_function_type( &::C_BaseEntity::GetModelName ) );
        
        }
        { //::C_BaseEntity::GetMousePassEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetMousePassEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetMousePassEntity"
                , GetMousePassEntity_function_type( &::C_BaseEntity::GetMousePassEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetMoveCollide
        
            typedef ::MoveCollide_t ( ::C_BaseEntity::*GetMoveCollide_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMoveCollide"
                , GetMoveCollide_function_type( &::C_BaseEntity::GetMoveCollide ) );
        
        }
        { //::C_BaseEntity::GetMoveParent
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetMoveParent_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMoveParent"
                , GetMoveParent_function_type( &::C_BaseEntity::GetMoveParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetMoveType
        
            typedef ::MoveType_t ( ::C_BaseEntity::*GetMoveType_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetMoveType"
                , GetMoveType_function_type( &::C_BaseEntity::GetMoveType ) );
        
        }
        { //::C_BaseEntity::GetNetworkAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetNetworkAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetNetworkAngles"
                , GetNetworkAngles_function_type( &::C_BaseEntity::GetNetworkAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetNetworkOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetNetworkOrigin_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetNetworkOrigin"
                , GetNetworkOrigin_function_type( &::C_BaseEntity::GetNetworkOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetNextThink
        
            typedef float ( ::C_BaseEntity::*GetNextThink_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetNextThink"
                , GetNextThink_function_type( &::C_BaseEntity::GetNextThink )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::GetNextThinkTick
        
            typedef int ( ::C_BaseEntity::*GetNextThinkTick_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetNextThinkTick"
                , GetNextThinkTick_function_type( &::C_BaseEntity::GetNextThinkTick )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::GetObserverCamOrigin
        
            typedef ::Vector ( ::C_BaseEntity::*GetObserverCamOrigin_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetObserverCamOrigin"
                , GetObserverCamOrigin_function_type( &::C_BaseEntity::GetObserverCamOrigin ) );
        
        }
        { //::C_BaseEntity::GetOldOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetOldOrigin_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetOldOrigin"
                , GetOldOrigin_function_type( &::C_BaseEntity::GetOldOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetOwnerEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetOwnerEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetOwnerEntity"
                , GetOwnerEntity_function_type( &::C_BaseEntity::GetOwnerEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetOwnerNumber
        
            typedef int ( ::C_BaseEntity::*GetOwnerNumber_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetOwnerNumber"
                , GetOwnerNumber_function_type( &::C_BaseEntity::GetOwnerNumber ) );
        
        }
        { //::C_BaseEntity::GetParametersForSound
        
            typedef bool ( *GetParametersForSound_function_type )( char const *,::CSoundParameters &,char const * );
            
            C_BaseEntity_exposer.def( 
                "GetParametersForSound"
                , GetParametersForSound_function_type( &::C_BaseEntity::GetParametersForSound )
                , ( bp::arg("soundname"), bp::arg("params"), bp::arg("actormodel") ) );
        
        }
        { //::C_BaseEntity::GetParametersForSound
        
            typedef bool ( *GetParametersForSound_function_type )( char const *,::HSOUNDSCRIPTHANDLE &,::CSoundParameters &,char const * );
            
            C_BaseEntity_exposer.def( 
                "GetParametersForSound"
                , GetParametersForSound_function_type( &::C_BaseEntity::GetParametersForSound )
                , ( bp::arg("soundname"), bp::arg("handle"), bp::arg("params"), bp::arg("actormodel") ) );
        
        }
        { //::C_BaseEntity::GetParentAttachment
        
            typedef unsigned char ( ::C_BaseEntity::*GetParentAttachment_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetParentAttachment"
                , GetParentAttachment_function_type( &::C_BaseEntity::GetParentAttachment ) );
        
        }
        { //::C_BaseEntity::GetPlayerName
        
            typedef char const * ( ::C_BaseEntity::*GetPlayerName_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetPlayerName"
                , GetPlayerName_function_type( &::C_BaseEntity::GetPlayerName ) );
        
        }
        { //::C_BaseEntity::GetPredictable
        
            typedef bool ( ::C_BaseEntity::*GetPredictable_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetPredictable"
                , GetPredictable_function_type( &::C_BaseEntity::GetPredictable ) );
        
        }
        { //::C_BaseEntity::GetPredictionEligible
        
            typedef bool ( ::C_BaseEntity::*GetPredictionEligible_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetPredictionEligible"
                , GetPredictionEligible_function_type( &::C_BaseEntity::GetPredictionEligible ) );
        
        }
        { //::C_BaseEntity::GetPredictionOwner
        
            typedef ::C_BasePlayer * ( ::C_BaseEntity::*GetPredictionOwner_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetPredictionOwner"
                , GetPredictionOwner_function_type( &::C_BaseEntity::GetPredictionOwner )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetPredictionPlayer
        
            typedef ::C_BasePlayer * ( *GetPredictionPlayer_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "GetPredictionPlayer"
                , GetPredictionPlayer_function_type( &::C_BaseEntity::GetPredictionPlayer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetPredictionRandomSeed
        
            typedef int ( *GetPredictionRandomSeed_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "GetPredictionRandomSeed"
                , GetPredictionRandomSeed_function_type( &::C_BaseEntity::GetPredictionRandomSeed ) );
        
        }
        { //::C_BaseEntity::GetPrevLocalAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetPrevLocalAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetPrevLocalAngles"
                , GetPrevLocalAngles_function_type( &::C_BaseEntity::GetPrevLocalAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetPrevLocalOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetPrevLocalOrigin_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetPrevLocalOrigin"
                , GetPrevLocalOrigin_function_type( &::C_BaseEntity::GetPrevLocalOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetPyHandle
        
            typedef ::boost::python::object ( ::C_BaseEntity::*GetHandle_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetHandle"
                , GetHandle_function_type( &::C_BaseEntity::GetPyHandle ) );
        
        }
        { //::C_BaseEntity::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_BaseEntity::GetPyNetworkType ) );
        
        }
        { //::C_BaseEntity::GetPyThink
        
            typedef ::boost::python::object ( ::C_BaseEntity::*GetThink_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetThink"
                , GetThink_function_type( &::C_BaseEntity::GetPyThink ) );
        
        }
        { //::C_BaseEntity::GetRenderAlpha
        
            typedef ::uint8 ( ::C_BaseEntity::*GetRenderAlpha_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderAlpha"
                , GetRenderAlpha_function_type( &::C_BaseEntity::GetRenderAlpha ) );
        
        }
        { //::C_BaseEntity::GetRenderAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*GetRenderAngles_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderAngles"
                , GetRenderAngles_function_type( &::C_BaseEntity::GetRenderAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetRenderBounds
        
            typedef void ( ::C_BaseEntity::*GetRenderBounds_function_type )( ::Vector &,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderBounds"
                , GetRenderBounds_function_type( &::C_BaseEntity::GetRenderBounds )
                , ( bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::C_BaseEntity::GetRenderBoundsWorldspace
        
            typedef void ( ::C_BaseEntity::*GetRenderBoundsWorldspace_function_type )( ::Vector &,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderBoundsWorldspace"
                , GetRenderBoundsWorldspace_function_type( &::C_BaseEntity::GetRenderBoundsWorldspace )
                , ( bp::arg("absMins"), bp::arg("absMaxs") ) );
        
        }
        { //::C_BaseEntity::GetRenderColor
        
            typedef ::color24 const ( ::C_BaseEntity::*GetRenderColor_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderColor"
                , GetRenderColor_function_type( &::C_BaseEntity::GetRenderColor ) );
        
        }
        { //::C_BaseEntity::GetRenderColorB
        
            typedef ::uint8 ( ::C_BaseEntity::*GetRenderColorB_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderColorB"
                , GetRenderColorB_function_type( &::C_BaseEntity::GetRenderColorB ) );
        
        }
        { //::C_BaseEntity::GetRenderColorG
        
            typedef ::uint8 ( ::C_BaseEntity::*GetRenderColorG_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderColorG"
                , GetRenderColorG_function_type( &::C_BaseEntity::GetRenderColorG ) );
        
        }
        { //::C_BaseEntity::GetRenderColorR
        
            typedef ::uint8 ( ::C_BaseEntity::*GetRenderColorR_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderColorR"
                , GetRenderColorR_function_type( &::C_BaseEntity::GetRenderColorR ) );
        
        }
        { //::C_BaseEntity::GetRenderFX
        
            typedef ::RenderFx_t ( ::C_BaseEntity::*GetRenderFX_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderFX"
                , GetRenderFX_function_type( &::C_BaseEntity::GetRenderFX ) );
        
        }
        { //::C_BaseEntity::GetRenderFlags
        
            typedef int ( ::C_BaseEntity::*GetRenderFlags_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderFlags"
                , GetRenderFlags_function_type( &::C_BaseEntity::GetRenderFlags ) );
        
        }
        { //::C_BaseEntity::GetRenderHandle
        
            typedef ::ClientRenderHandle_t ( ::C_BaseEntity::*GetRenderHandle_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderHandle"
                , GetRenderHandle_function_type( &::C_BaseEntity::GetRenderHandle ) );
        
        }
        { //::C_BaseEntity::GetRenderMode
        
            typedef ::RenderMode_t ( ::C_BaseEntity::*GetRenderMode_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetRenderMode"
                , GetRenderMode_function_type( &::C_BaseEntity::GetRenderMode ) );
        
        }
        { //::C_BaseEntity::GetRenderOrigin
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetRenderOrigin_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderOrigin"
                , GetRenderOrigin_function_type( &::C_BaseEntity::GetRenderOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetRenderTeamNumber
        
            typedef int ( ::C_BaseEntity::*GetRenderTeamNumber_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRenderTeamNumber"
                , GetRenderTeamNumber_function_type( &::C_BaseEntity::GetRenderTeamNumber ) );
        
        }
        { //::C_BaseEntity::GetRootMoveParent
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetRootMoveParent_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetRootMoveParent"
                , GetRootMoveParent_function_type( &::C_BaseEntity::GetRootMoveParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetShadowCastDirection
        
            typedef bool ( ::C_BaseEntity::*GetShadowCastDirection_function_type )( ::Vector *,::ShadowType_t ) const;
            
            C_BaseEntity_exposer.def( 
                "GetShadowCastDirection"
                , GetShadowCastDirection_function_type( &::C_BaseEntity::GetShadowCastDirection )
                , ( bp::arg("pDirection"), bp::arg("shadowType") ) );
        
        }
        { //::C_BaseEntity::GetShadowCastDistance
        
            typedef bool ( ::C_BaseEntity::*GetShadowCastDistance_function_type )( float *,::ShadowType_t ) const;
            
            C_BaseEntity_exposer.def( 
                "GetShadowCastDistance"
                , GetShadowCastDistance_function_type( &::C_BaseEntity::GetShadowCastDistance )
                , ( bp::arg("pDist"), bp::arg("shadowType") ) );
        
        }
        { //::C_BaseEntity::GetShadowHandle
        
            typedef ::ClientShadowHandle_t ( ::C_BaseEntity::*GetShadowHandle_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetShadowHandle"
                , GetShadowHandle_function_type( &::C_BaseEntity::GetShadowHandle ) );
        
        }
        { //::C_BaseEntity::GetShadowRenderBounds
        
            typedef void ( ::C_BaseEntity::*GetShadowRenderBounds_function_type )( ::Vector &,::Vector &,::ShadowType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "GetShadowRenderBounds"
                , GetShadowRenderBounds_function_type( &::C_BaseEntity::GetShadowRenderBounds )
                , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("shadowType") ) );
        
        }
        { //::C_BaseEntity::GetShadowUseOtherEntity
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*GetShadowUseOtherEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetShadowUseOtherEntity"
                , GetShadowUseOtherEntity_function_type( &::C_BaseEntity::GetShadowUseOtherEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetSimulatingPlayer
        
            typedef ::C_BasePlayer * ( ::C_BaseEntity::*GetSimulatingPlayer_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetSimulatingPlayer"
                , GetSimulatingPlayer_function_type( &::C_BaseEntity::GetSimulatingPlayer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetSimulationTime
        
            typedef float ( ::C_BaseEntity::*GetSimulationTime_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetSimulationTime"
                , GetSimulationTime_function_type( &::C_BaseEntity::GetSimulationTime ) );
        
        }
        { //::C_BaseEntity::GetSkin
        
            typedef int ( ::C_BaseEntity::*GetSkin_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetSkin"
                , GetSkin_function_type( &::C_BaseEntity::GetSkin ) );
        
        }
        { //::C_BaseEntity::GetSolid
        
            typedef ::SolidType_t ( ::C_BaseEntity::*GetSolid_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetSolid"
                , GetSolid_function_type( &::C_BaseEntity::GetSolid ) );
        
        }
        { //::C_BaseEntity::GetSolidFlags
        
            typedef int ( ::C_BaseEntity::*GetSolidFlags_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetSolidFlags"
                , GetSolidFlags_function_type( &::C_BaseEntity::GetSolidFlags ) );
        
        }
        { //::C_BaseEntity::GetSoundDuration
        
            typedef float ( *GetSoundDuration_function_type )( char const *,char const * );
            
            C_BaseEntity_exposer.def( 
                "GetSoundDuration"
                , GetSoundDuration_function_type( &::C_BaseEntity::GetSoundDuration )
                , ( bp::arg("soundname"), bp::arg("actormodel") ) );
        
        }
        { //::C_BaseEntity::GetSoundSourceIndex
        
            typedef int ( ::C_BaseEntity::*GetSoundSourceIndex_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetSoundSourceIndex"
                , GetSoundSourceIndex_function_type( &::C_BaseEntity::GetSoundSourceIndex ) );
        
        }
        { //::C_BaseEntity::GetSplitUserPlayerPredictionSlot
        
            typedef int ( ::C_BaseEntity::*GetSplitUserPlayerPredictionSlot_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetSplitUserPlayerPredictionSlot"
                , GetSplitUserPlayerPredictionSlot_function_type( &::C_BaseEntity::GetSplitUserPlayerPredictionSlot ) );
        
        }
        { //::C_BaseEntity::GetTeamColor
        
            typedef ::Vector & ( ::C_BaseEntity::*GetTeamColor_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "GetTeamColor"
                , GetTeamColor_function_type( &::C_BaseEntity::GetTeamColor )
                , ( bp::arg("bDirect")=(bool)(true) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetTeamNumber
        
            typedef int ( ::C_BaseEntity::*GetTeamNumber_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetTeamNumber"
                , GetTeamNumber_function_type( &::C_BaseEntity::GetTeamNumber ) );
        
        }
        { //::C_BaseEntity::GetTextureAnimationStartTime
        
            typedef float ( ::C_BaseEntity::*GetTextureAnimationStartTime_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetTextureAnimationStartTime"
                , GetTextureAnimationStartTime_function_type( &::C_BaseEntity::GetTextureAnimationStartTime ) );
        
        }
        { //::C_BaseEntity::GetToolHandle
        
            typedef ::HTOOLHANDLE ( ::C_BaseEntity::*GetToolHandle_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetToolHandle"
                , GetToolHandle_function_type( &::C_BaseEntity::GetToolHandle ) );
        
        }
        { //::C_BaseEntity::GetToolRecordingState
        
            typedef void ( ::C_BaseEntity::*GetToolRecordingState_function_type )( ::KeyValues * ) ;
            
            C_BaseEntity_exposer.def( 
                "GetToolRecordingState"
                , GetToolRecordingState_function_type( &::C_BaseEntity::GetToolRecordingState )
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::GetTouchTrace
        
            typedef ::trace_t const & ( *GetTouchTrace_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "GetTouchTrace"
                , GetTouchTrace_function_type( &::C_BaseEntity::GetTouchTrace )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetTracerAttachment
        
            typedef int ( ::C_BaseEntity::*GetTracerAttachment_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetTracerAttachment"
                , GetTracerAttachment_function_type( &::C_BaseEntity::GetTracerAttachment ) );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_BaseEntity_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_BaseEntity_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::GetVectors
        
            typedef void ( ::C_BaseEntity::*GetVectors_function_type )( ::Vector *,::Vector *,::Vector * ) const;
            
            C_BaseEntity_exposer.def( 
                "GetVectors"
                , GetVectors_function_type( &::C_BaseEntity::GetVectors )
                , ( bp::arg("forward"), bp::arg("right"), bp::arg("up") ) );
        
        }
        { //::C_BaseEntity::GetViewOffset
        
            typedef ::Vector const & ( ::C_BaseEntity::*GetViewOffset_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetViewOffset"
                , GetViewOffset_function_type( &::C_BaseEntity::GetViewOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::GetWaterLevel
        
            typedef int ( ::C_BaseEntity::*GetWaterLevel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetWaterLevel"
                , GetWaterLevel_function_type( &::C_BaseEntity::GetWaterLevel ) );
        
        }
        { //::C_BaseEntity::GetWaterType
        
            typedef int ( ::C_BaseEntity::*GetWaterType_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "GetWaterType"
                , GetWaterType_function_type( &::C_BaseEntity::GetWaterType ) );
        
        }
        { //::C_BaseEntity::HandleShotImpactingWater
        
            typedef bool ( ::C_BaseEntity::*HandleShotImpactingWater_function_type )( ::FireBulletsInfo_t const &,::Vector const &,::ITraceFilter *,::Vector * ) ;
            
            C_BaseEntity_exposer.def( 
                "HandleShotImpactingWater"
                , HandleShotImpactingWater_function_type( &::C_BaseEntity::HandleShotImpactingWater )
                , ( bp::arg("info"), bp::arg("vecEnd"), bp::arg("pTraceFilter"), bp::arg("pVecTracerDest") ) );
        
        }
        { //::C_BaseEntity::HasNPCsOnIt
        
            typedef bool ( ::C_BaseEntity::*HasNPCsOnIt_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "HasNPCsOnIt"
                , HasNPCsOnIt_function_type( &::C_BaseEntity::HasNPCsOnIt ) );
        
        }
        { //::C_BaseEntity::HasRecordedThisFrame
        
            typedef bool ( ::C_BaseEntity::*HasRecordedThisFrame_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "HasRecordedThisFrame"
                , HasRecordedThisFrame_function_type( &::C_BaseEntity::HasRecordedThisFrame ) );
        
        }
        { //::C_BaseEntity::HasSpawnFlags
        
            typedef bool ( ::C_BaseEntity::*HasSpawnFlags_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "HasSpawnFlags"
                , HasSpawnFlags_function_type( &::C_BaseEntity::HasSpawnFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::C_BaseEntity::HealthFraction
        
            typedef float ( ::C_BaseEntity::*HealthFraction_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "HealthFraction"
                , HealthFraction_function_type( &::C_BaseEntity::HealthFraction ) );
        
        }
        { //::C_BaseEntity::HierarchyUpdateMoveParent
        
            typedef void ( ::C_BaseEntity::*HierarchyUpdateMoveParent_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "HierarchyUpdateMoveParent"
                , HierarchyUpdateMoveParent_function_type( &::C_BaseEntity::HierarchyUpdateMoveParent ) );
        
        }
        { //::C_BaseEntity::ImpactTrace
        
            typedef void ( ::C_BaseEntity::*ImpactTrace_function_type )( ::trace_t *,int,char * ) ;
            
            C_BaseEntity_exposer.def( 
                "ImpactTrace"
                , ImpactTrace_function_type( &::C_BaseEntity::ImpactTrace )
                , ( bp::arg("pTrace"), bp::arg("iDamageType"), bp::arg("pCustomImpactName") ) );
        
        }
        { //::C_BaseEntity::InLocalTeam
        
            typedef bool ( ::C_BaseEntity::*InLocalTeam_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "InLocalTeam"
                , InLocalTeam_function_type( &::C_BaseEntity::InLocalTeam ) );
        
        }
        { //::C_BaseEntity::InSameTeam
        
            typedef bool ( ::C_BaseEntity::*InSameTeam_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "InSameTeam"
                , InSameTeam_function_type( &::C_BaseEntity::InSameTeam )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::C_BaseEntity::Init
        
            typedef bool ( ::C_BaseEntity::*Init_function_type )( int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "Init"
                , Init_function_type( &::C_BaseEntity::Init )
                , ( bp::arg("entnum"), bp::arg("iSerialNum") ) );
        
        }
        { //::C_BaseEntity::InitPredictable
        
            typedef void ( ::C_BaseEntity::*InitPredictable_function_type )( ::C_BasePlayer * ) ;
            
            C_BaseEntity_exposer.def( 
                "InitPredictable"
                , InitPredictable_function_type( &::C_BaseEntity::InitPredictable )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::C_BaseEntity::InitSharedVars
        
            typedef void ( ::C_BaseEntity::*InitSharedVars_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "InitSharedVars"
                , InitSharedVars_function_type( &::C_BaseEntity::InitSharedVars ) );
        
        }
        { //::C_BaseEntity::InitializeAsClientEntity
        
            typedef bool ( ::C_BaseEntity::*InitializeAsClientEntity_function_type )( char const *,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "InitializeAsClientEntity"
                , InitializeAsClientEntity_function_type( &::C_BaseEntity::InitializeAsClientEntity )
                , ( bp::arg("pszModelName"), bp::arg("bRenderWithViewModels") ) );
        
        }
        { //::C_BaseEntity::Instance
        
            typedef ::C_BaseEntity * ( *Instance_function_type )( int );
            
            C_BaseEntity_exposer.def( 
                "Instance"
                , Instance_function_type( &::C_BaseEntity::Instance )
                , ( bp::arg("iEnt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::Interpolate
        
            typedef bool ( ::C_BaseEntity::*Interpolate_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "Interpolate"
                , Interpolate_function_type( &::C_BaseEntity::Interpolate )
                , ( bp::arg("currentTime") ) );
        
        }
        { //::C_BaseEntity::InvalidateAttachments
        
            typedef void ( ::C_BaseEntity::*InvalidateAttachments_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "InvalidateAttachments"
                , InvalidateAttachments_function_type( &::C_BaseEntity::InvalidateAttachments ) );
        
        }
        { //::C_BaseEntity::InvalidatePhysicsRecursive
        
            typedef void ( ::C_BaseEntity::*InvalidatePhysicsRecursive_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "InvalidatePhysicsRecursive"
                , InvalidatePhysicsRecursive_function_type( &::C_BaseEntity::InvalidatePhysicsRecursive )
                , ( bp::arg("nChangeFlags") ) );
        
        }
        { //::C_BaseEntity::IsAIWalkable
        
            typedef bool ( ::C_BaseEntity::*IsAIWalkable_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsAIWalkable"
                , IsAIWalkable_function_type( &::C_BaseEntity::IsAIWalkable ) );
        
        }
        { //::C_BaseEntity::IsAbleToHaveFireEffect
        
            typedef bool ( ::C_BaseEntity::*IsAbleToHaveFireEffect_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsAbleToHaveFireEffect"
                , IsAbleToHaveFireEffect_function_type( &::C_BaseEntity::IsAbleToHaveFireEffect ) );
        
        }
        { //::C_BaseEntity::IsAbsQueriesValid
        
            typedef bool ( *IsAbsQueriesValid_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "IsAbsQueriesValid"
                , IsAbsQueriesValid_function_type( &::C_BaseEntity::IsAbsQueriesValid ) );
        
        }
        { //::C_BaseEntity::IsAbsRecomputationsEnabled
        
            typedef bool ( *IsAbsRecomputationsEnabled_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "IsAbsRecomputationsEnabled"
                , IsAbsRecomputationsEnabled_function_type( &::C_BaseEntity::IsAbsRecomputationsEnabled ) );
        
        }
        { //::C_BaseEntity::IsAlive
        
            typedef bool ( ::C_BaseEntity::*IsAlive_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsAlive"
                , IsAlive_function_type( &::C_BaseEntity::IsAlive ) );
        
        }
        { //::C_BaseEntity::IsAnimatedEveryTick
        
            typedef bool ( ::C_BaseEntity::*IsAnimatedEveryTick_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsAnimatedEveryTick"
                , IsAnimatedEveryTick_function_type( &::C_BaseEntity::IsAnimatedEveryTick ) );
        
        }
        { //::C_BaseEntity::IsBSPModel
        
            typedef bool ( ::C_BaseEntity::*IsBSPModel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsBSPModel"
                , IsBSPModel_function_type( &::C_BaseEntity::IsBSPModel ) );
        
        }
        { //::C_BaseEntity::IsBaseCombatCharacter
        
            typedef bool ( ::C_BaseEntity::*IsBaseCombatCharacter_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsBaseCombatCharacter"
                , IsBaseCombatCharacter_function_type( &::C_BaseEntity::IsBaseCombatCharacter ) );
        
        }
        { //::C_BaseEntity::IsBaseCombatWeapon
        
            typedef bool ( ::C_BaseEntity::*IsBaseCombatWeapon_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsBaseCombatWeapon"
                , IsBaseCombatWeapon_function_type( &::C_BaseEntity::IsBaseCombatWeapon ) );
        
        }
        { //::C_BaseEntity::IsBaseObject
        
            typedef bool ( ::C_BaseEntity::*IsBaseObject_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsBaseObject"
                , IsBaseObject_function_type( &::C_BaseEntity::IsBaseObject ) );
        
        }
        { //::C_BaseEntity::IsBaseTrain
        
            typedef bool ( ::C_BaseEntity::*IsBaseTrain_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsBaseTrain"
                , IsBaseTrain_function_type( &::C_BaseEntity::IsBaseTrain ) );
        
        }
        { //::C_BaseEntity::IsBlurred
        
            typedef bool ( ::C_BaseEntity::*IsBlurred_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsBlurred"
                , IsBlurred_function_type( &::C_BaseEntity::IsBlurred ) );
        
        }
        { //::C_BaseEntity::IsBrushModel
        
            typedef bool ( ::C_BaseEntity::*IsBrushModel_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsBrushModel"
                , IsBrushModel_function_type( &::C_BaseEntity::IsBrushModel ) );
        
        }
        { //::C_BaseEntity::IsCachedRenderBoundsDisabled
        
            typedef bool ( ::C_BaseEntity::*IsCachedRenderBoundsDisabled_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsCachedRenderBoundsDisabled"
                , IsCachedRenderBoundsDisabled_function_type( &::C_BaseEntity::IsCachedRenderBoundsDisabled ) );
        
        }
        { //::C_BaseEntity::IsClientCreated
        
            typedef bool ( ::C_BaseEntity::*IsClientCreated_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsClientCreated"
                , IsClientCreated_function_type( &::C_BaseEntity::IsClientCreated ) );
        
        }
        { //::C_BaseEntity::IsCurrentlyTouching
        
            typedef bool ( ::C_BaseEntity::*IsCurrentlyTouching_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsCurrentlyTouching"
                , IsCurrentlyTouching_function_type( &::C_BaseEntity::IsCurrentlyTouching ) );
        
        }
        { //::C_BaseEntity::IsDormant
        
            typedef bool ( ::C_BaseEntity::*IsDormant_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsDormant"
                , IsDormant_function_type( &::C_BaseEntity::IsDormant ) );
        
        }
        { //::C_BaseEntity::IsDormantPredictable
        
            typedef bool ( ::C_BaseEntity::*IsDormantPredictable_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsDormantPredictable"
                , IsDormantPredictable_function_type( &::C_BaseEntity::IsDormantPredictable ) );
        
        }
        { //::C_BaseEntity::IsEFlagSet
        
            typedef bool ( ::C_BaseEntity::*IsEFlagSet_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "IsEFlagSet"
                , IsEFlagSet_function_type( &::C_BaseEntity::IsEFlagSet )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::C_BaseEntity::IsEffectActive
        
            typedef bool ( ::C_BaseEntity::*IsEffectActive_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "IsEffectActive"
                , IsEffectActive_function_type( &::C_BaseEntity::IsEffectActive )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::C_BaseEntity::IsEnabledInToolView
        
            typedef bool ( ::C_BaseEntity::*IsEnabledInToolView_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsEnabledInToolView"
                , IsEnabledInToolView_function_type( &::C_BaseEntity::IsEnabledInToolView ) );
        
        }
        { //::C_BaseEntity::IsFloating
        
            typedef bool ( ::C_BaseEntity::*IsFloating_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsFloating"
                , IsFloating_function_type( &::C_BaseEntity::IsFloating ) );
        
        }
        { //::C_BaseEntity::IsFollowingEntity
        
            typedef bool ( ::C_BaseEntity::*IsFollowingEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsFollowingEntity"
                , IsFollowingEntity_function_type( &::C_BaseEntity::IsFollowingEntity ) );
        
        }
        { //::C_BaseEntity::IsInFOW
        
            typedef bool ( ::C_BaseEntity::*IsInFOW_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsInFOW"
                , IsInFOW_function_type( &::C_BaseEntity::IsInFOW ) );
        
        }
        { //::C_BaseEntity::IsInWorld
        
            typedef bool ( ::C_BaseEntity::*IsInWorld_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsInWorld"
                , IsInWorld_function_type( &::C_BaseEntity::IsInWorld ) );
        
        }
        { //::C_BaseEntity::IsInterpolationEnabled
        
            typedef bool ( *IsInterpolationEnabled_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "IsInterpolationEnabled"
                , IsInterpolationEnabled_function_type( &::C_BaseEntity::IsInterpolationEnabled ) );
        
        }
        { //::C_BaseEntity::IsMarkedForDeletion
        
            typedef bool ( ::C_BaseEntity::*IsMarkedForDeletion_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsMarkedForDeletion"
                , IsMarkedForDeletion_function_type( &::C_BaseEntity::IsMarkedForDeletion ) );
        
        }
        { //::C_BaseEntity::IsNPC
        
            typedef bool ( ::C_BaseEntity::*IsNPC_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsNPC"
                , IsNPC_function_type( &::C_BaseEntity::IsNPC ) );
        
        }
        { //::C_BaseEntity::IsNavIgnored
        
            typedef bool ( ::C_BaseEntity::*IsNavIgnored_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsNavIgnored"
                , IsNavIgnored_function_type( &::C_BaseEntity::IsNavIgnored ) );
        
        }
        { //::C_BaseEntity::IsPlayer
        
            typedef bool ( ::C_BaseEntity::*IsPlayer_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsPlayer"
                , IsPlayer_function_type( &::C_BaseEntity::IsPlayer ) );
        
        }
        { //::C_BaseEntity::IsPlayerSimulated
        
            typedef bool ( ::C_BaseEntity::*IsPlayerSimulated_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsPlayerSimulated"
                , IsPlayerSimulated_function_type( &::C_BaseEntity::IsPlayerSimulated ) );
        
        }
        { //::C_BaseEntity::IsPointSized
        
            typedef bool ( ::C_BaseEntity::*IsPointSized_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsPointSized"
                , IsPointSized_function_type( &::C_BaseEntity::IsPointSized ) );
        
        }
        { //::C_BaseEntity::IsPrecacheAllowed
        
            typedef bool ( *IsPrecacheAllowed_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "IsPrecacheAllowed"
                , IsPrecacheAllowed_function_type( &::C_BaseEntity::IsPrecacheAllowed ) );
        
        }
        { //::C_BaseEntity::IsProp
        
            typedef bool ( ::C_BaseEntity::*IsProp_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsProp"
                , IsProp_function_type( &::C_BaseEntity::IsProp ) );
        
        }
        { //::C_BaseEntity::IsRenderingWithViewModels
        
            typedef bool ( ::C_BaseEntity::*IsRenderingWithViewModels_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsRenderingWithViewModels"
                , IsRenderingWithViewModels_function_type( &::C_BaseEntity::IsRenderingWithViewModels ) );
        
        }
        { //::C_BaseEntity::IsSelfAnimating
        
            typedef bool ( ::C_BaseEntity::*IsSelfAnimating_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsSelfAnimating"
                , IsSelfAnimating_function_type( &::C_BaseEntity::IsSelfAnimating ) );
        
        }
        { //::C_BaseEntity::IsServerEntity
        
            typedef bool ( ::C_BaseEntity::*IsServerEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsServerEntity"
                , IsServerEntity_function_type( &::C_BaseEntity::IsServerEntity ) );
        
        }
        { //::C_BaseEntity::IsShadowDirty
        
            typedef bool ( ::C_BaseEntity::*IsShadowDirty_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsShadowDirty"
                , IsShadowDirty_function_type( &::C_BaseEntity::IsShadowDirty ) );
        
        }
        { //::C_BaseEntity::IsSimulatedEveryTick
        
            typedef bool ( ::C_BaseEntity::*IsSimulatedEveryTick_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsSimulatedEveryTick"
                , IsSimulatedEveryTick_function_type( &::C_BaseEntity::IsSimulatedEveryTick ) );
        
        }
        { //::C_BaseEntity::IsSimulatingOnAlternateTicks
        
            typedef bool ( *IsSimulatingOnAlternateTicks_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "IsSimulatingOnAlternateTicks"
                , IsSimulatingOnAlternateTicks_function_type( &::C_BaseEntity::IsSimulatingOnAlternateTicks ) );
        
        }
        { //::C_BaseEntity::IsSolid
        
            typedef bool ( ::C_BaseEntity::*IsSolid_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsSolid"
                , IsSolid_function_type( &::C_BaseEntity::IsSolid ) );
        
        }
        { //::C_BaseEntity::IsSolidFlagSet
        
            typedef bool ( ::C_BaseEntity::*IsSolidFlagSet_function_type )( int ) const;
            
            C_BaseEntity_exposer.def( 
                "IsSolidFlagSet"
                , IsSolidFlagSet_function_type( &::C_BaseEntity::IsSolidFlagSet )
                , ( bp::arg("flagMask") ) );
        
        }
        { //::C_BaseEntity::IsSprite
        
            typedef bool ( ::C_BaseEntity::*IsSprite_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsSprite"
                , IsSprite_function_type( &::C_BaseEntity::IsSprite ) );
        
        }
        { //::C_BaseEntity::IsStandable
        
            typedef bool ( ::C_BaseEntity::*IsStandable_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsStandable"
                , IsStandable_function_type( &::C_BaseEntity::IsStandable ) );
        
        }
        { //::C_BaseEntity::IsSubModel
        
            typedef bool ( ::C_BaseEntity::*IsSubModel_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsSubModel"
                , IsSubModel_function_type( &::C_BaseEntity::IsSubModel ) );
        
        }
        { //::C_BaseEntity::IsToolRecording
        
            typedef bool ( ::C_BaseEntity::*IsToolRecording_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsToolRecording"
                , IsToolRecording_function_type( &::C_BaseEntity::IsToolRecording ) );
        
        }
        { //::C_BaseEntity::IsUnit
        
            typedef bool ( ::C_BaseEntity::*IsUnit_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsUnit"
                , IsUnit_function_type( &::C_BaseEntity::IsUnit ) );
        
        }
        { //::C_BaseEntity::IsValidIDTarget
        
            typedef bool ( ::C_BaseEntity::*IsValidIDTarget_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "IsValidIDTarget"
                , IsValidIDTarget_function_type( &::C_BaseEntity::IsValidIDTarget ) );
        
        }
        { //::C_BaseEntity::IsViewEntity
        
            typedef bool ( ::C_BaseEntity::*IsViewEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsViewEntity"
                , IsViewEntity_function_type( &::C_BaseEntity::IsViewEntity ) );
        
        }
        { //::C_BaseEntity::IsVisible
        
            typedef bool ( ::C_BaseEntity::*IsVisible_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsVisible"
                , IsVisible_function_type( &::C_BaseEntity::IsVisible ) );
        
        }
        { //::C_BaseEntity::IsVisibleToAnyPlayer
        
            typedef bool ( ::C_BaseEntity::*IsVisibleToAnyPlayer_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsVisibleToAnyPlayer"
                , IsVisibleToAnyPlayer_function_type( &::C_BaseEntity::IsVisibleToAnyPlayer ) );
        
        }
        { //::C_BaseEntity::IsWorld
        
            typedef bool ( ::C_BaseEntity::*IsWorld_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "IsWorld"
                , IsWorld_function_type( &::C_BaseEntity::IsWorld ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_BaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_BaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::LODTest
        
            typedef bool ( ::C_BaseEntity::*LODTest_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "LODTest"
                , LODTest_function_type( &::C_BaseEntity::LODTest ) );
        
        }
        { //::C_BaseEntity::Left
        
            typedef ::Vector ( ::C_BaseEntity::*Left_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "Left"
                , Left_function_type( &::C_BaseEntity::Left ) );
        
        }
        { //::C_BaseEntity::LocalEyeAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*LocalEyeAngles_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::C_BaseEntity::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::LocalEyeAngles
        
            typedef ::QAngle const & ( ::C_BaseEntity::*LocalEyeAngles_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::C_BaseEntity::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::LookupAttachment
        
            typedef int ( ::C_BaseEntity::*LookupAttachment_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "LookupAttachment"
                , LookupAttachment_function_type( &::C_BaseEntity::LookupAttachment )
                , ( bp::arg("pAttachmentName") ) );
        
        }
        { //::C_BaseEntity::LookupSoundLevel
        
            typedef ::soundlevel_t ( *LookupSoundLevel_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "LookupSoundLevel"
                , LookupSoundLevel_function_type( &::C_BaseEntity::LookupSoundLevel )
                , ( bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::LookupSoundLevel
        
            typedef ::soundlevel_t ( *LookupSoundLevel_function_type )( char const *,::HSOUNDSCRIPTHANDLE & );
            
            C_BaseEntity_exposer.def( 
                "LookupSoundLevel"
                , LookupSoundLevel_function_type( &::C_BaseEntity::LookupSoundLevel )
                , ( bp::arg("soundname"), bp::arg("handle") ) );
        
        }
        { //::C_BaseEntity::MakeTracer
        
            typedef void ( ::C_BaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_BaseEntity_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_BaseEntity_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_BaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&C_BaseEntity_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BaseEntity::MarkAimEntsDirty
        
            typedef void ( *MarkAimEntsDirty_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "MarkAimEntsDirty"
                , MarkAimEntsDirty_function_type( &::C_BaseEntity::MarkAimEntsDirty ) );
        
        }
        { //::C_BaseEntity::MarkRenderHandleDirty
        
            typedef void ( ::C_BaseEntity::*MarkRenderHandleDirty_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "MarkRenderHandleDirty"
                , MarkRenderHandleDirty_function_type( &::C_BaseEntity::MarkRenderHandleDirty ) );
        
        }
        { //::C_BaseEntity::MarkShadowDirty
        
            typedef void ( ::C_BaseEntity::*MarkShadowDirty_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "MarkShadowDirty"
                , MarkShadowDirty_function_type( &::C_BaseEntity::MarkShadowDirty )
                , ( bp::arg("bDirty") ) );
        
        }
        { //::C_BaseEntity::ModifyOrAppendCriteria
        
            typedef void ( ::C_BaseEntity::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            C_BaseEntity_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type( &::C_BaseEntity::ModifyOrAppendCriteria )
                , ( bp::arg("set") ) );
        
        }
        { //::C_BaseEntity::MoveToLastReceivedPosition
        
            typedef void ( ::C_BaseEntity::*MoveToLastReceivedPosition_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "MoveToLastReceivedPosition"
                , MoveToLastReceivedPosition_function_type( &::C_BaseEntity::MoveToLastReceivedPosition )
                , ( bp::arg("force")=(bool)(false) ) );
        
        }
        { //::C_BaseEntity::NetworkStateChanged
        
            typedef void ( ::C_BaseEntity::*NetworkStateChanged_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "NetworkStateChanged"
                , NetworkStateChanged_function_type( &::C_BaseEntity::NetworkStateChanged ) );
        
        }
        { //::C_BaseEntity::NetworkStateChanged
        
            typedef void ( ::C_BaseEntity::*NetworkStateChanged_function_type )( void * ) ;
            
            C_BaseEntity_exposer.def( 
                "NetworkStateChanged"
                , NetworkStateChanged_function_type( &::C_BaseEntity::NetworkStateChanged )
                , ( bp::arg("pVar") ) );
        
        }
        { //::C_BaseEntity::NetworkStateForceUpdate
        
            typedef void ( ::C_BaseEntity::*NetworkStateForceUpdate_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "NetworkStateForceUpdate"
                , NetworkStateForceUpdate_function_type( &::C_BaseEntity::NetworkStateForceUpdate ) );
        
        }
        { //::C_BaseEntity::NetworkStateManualMode
        
            typedef void ( ::C_BaseEntity::*NetworkStateManualMode_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "NetworkStateManualMode"
                , NetworkStateManualMode_function_type( &::C_BaseEntity::NetworkStateManualMode )
                , ( bp::arg("activate") ) );
        
        }
        { //::C_BaseEntity::NetworkStateSetUpdateInterval
        
            typedef void ( ::C_BaseEntity::*NetworkStateSetUpdateInterval_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "NetworkStateSetUpdateInterval"
                , NetworkStateSetUpdateInterval_function_type( &::C_BaseEntity::NetworkStateSetUpdateInterval )
                , ( bp::arg("N") ) );
        
        }
        { //::C_BaseEntity::NextMovePeer
        
            typedef ::C_BaseEntity * ( ::C_BaseEntity::*NextMovePeer_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "NextMovePeer"
                , NextMovePeer_function_type( &::C_BaseEntity::NextMovePeer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::ObjectCaps
        
            typedef int ( ::C_BaseEntity::*ObjectCaps_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::C_BaseEntity::ObjectCaps ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_BaseEntity_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_BaseEntity_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseEntity::OnDataChanged
        
            typedef void ( ::C_BaseEntity::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_BaseEntity_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_BaseEntity::OnDataChanged)
                , default_OnDataChanged_function_type(&C_BaseEntity_wrapper::default_OnDataChanged)
                , ( bp::arg("type") ) );
        
        }
        { //::C_BaseEntity::OnLatchInterpolatedVariables
        
            typedef void ( ::C_BaseEntity::*OnLatchInterpolatedVariables_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "OnLatchInterpolatedVariables"
                , OnLatchInterpolatedVariables_function_type( &::C_BaseEntity::OnLatchInterpolatedVariables )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BaseEntity::OnParseMapDataFinished
        
            typedef void ( ::C_BaseEntity::*OnParseMapDataFinished_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnParseMapDataFinished"
                , OnParseMapDataFinished_function_type( &::C_BaseEntity::OnParseMapDataFinished ) );
        
        }
        { //::C_BaseEntity::OnPostRestoreData
        
            typedef void ( ::C_BaseEntity::*OnPostRestoreData_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnPostRestoreData"
                , OnPostRestoreData_function_type( &::C_BaseEntity::OnPostRestoreData ) );
        
        }
        { //::C_BaseEntity::OnPreDataChanged
        
            typedef void ( ::C_BaseEntity::*OnPreDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "OnPreDataChanged"
                , OnPreDataChanged_function_type( &::C_BaseEntity::OnPreDataChanged )
                , ( bp::arg("type") ) );
        
        }
        { //::C_BaseEntity::OnPredictedEntityRemove
        
            typedef bool ( ::C_BaseEntity::*OnPredictedEntityRemove_function_type )( bool,::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "OnPredictedEntityRemove"
                , OnPredictedEntityRemove_function_type( &::C_BaseEntity::OnPredictedEntityRemove )
                , ( bp::arg("isbeingremoved"), bp::arg("predicted") ) );
        
        }
        { //::C_BaseEntity::OnRestore
        
            typedef void ( ::C_BaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseEntity::OnRestore)
                , default_OnRestore_function_type(&C_BaseEntity_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseEntity::OnSave
        
            typedef void ( ::C_BaseEntity::*OnSave_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnSave"
                , OnSave_function_type( &::C_BaseEntity::OnSave ) );
        
        }
        { //::C_BaseEntity::OnSetDormant
        
            typedef void ( ::C_BaseEntity::*OnSetDormant_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "OnSetDormant"
                , OnSetDormant_function_type( &::C_BaseEntity::OnSetDormant )
                , ( bp::arg("bDormant") ) );
        
        }
        { //::C_BaseEntity::OnSplitscreenRenderingChanged
        
            typedef void ( ::C_BaseEntity::*OnSplitscreenRenderingChanged_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnSplitscreenRenderingChanged"
                , OnSplitscreenRenderingChanged_function_type( &::C_BaseEntity::OnSplitscreenRenderingChanged ) );
        
        }
        { //::C_BaseEntity::OnStoreLastNetworkedValue
        
            typedef void ( ::C_BaseEntity::*OnStoreLastNetworkedValue_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnStoreLastNetworkedValue"
                , OnStoreLastNetworkedValue_function_type( &::C_BaseEntity::OnStoreLastNetworkedValue ) );
        
        }
        { //::C_BaseEntity::OnThreadedDrawSetup
        
            typedef void ( ::C_BaseEntity::*OnThreadedDrawSetup_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnThreadedDrawSetup"
                , OnThreadedDrawSetup_function_type( &::C_BaseEntity::OnThreadedDrawSetup ) );
        
        }
        { //::C_BaseEntity::OnTranslucencyTypeChanged
        
            typedef void ( ::C_BaseEntity::*OnTranslucencyTypeChanged_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "OnTranslucencyTypeChanged"
                , OnTranslucencyTypeChanged_function_type( &::C_BaseEntity::OnTranslucencyTypeChanged ) );
        
        }
        { //::C_BaseEntity::OverrideAlphaModulation
        
            typedef ::uint8 ( ::C_BaseEntity::*OverrideAlphaModulation_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "OverrideAlphaModulation"
                , OverrideAlphaModulation_function_type( &::C_BaseEntity::OverrideAlphaModulation )
                , ( bp::arg("nAlpha") ) );
        
        }
        { //::C_BaseEntity::OverrideShadowAlphaModulation
        
            typedef ::uint8 ( ::C_BaseEntity::*OverrideShadowAlphaModulation_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "OverrideShadowAlphaModulation"
                , OverrideShadowAlphaModulation_function_type( &::C_BaseEntity::OverrideShadowAlphaModulation )
                , ( bp::arg("nAlpha") ) );
        
        }
        { //::C_BaseEntity::ParticleProp
        
            typedef ::CParticleProperty * ( ::C_BaseEntity::*ParticleProp_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ParticleProp"
                , ParticleProp_function_type( &::C_BaseEntity::ParticleProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::C_BaseEntity::ParticleProp
        
            typedef ::CParticleProperty const * ( ::C_BaseEntity::*ParticleProp_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "ParticleProp"
                , ParticleProp_function_type( &::C_BaseEntity::ParticleProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::C_BaseEntity::PerformFlyCollisionResolution
        
            typedef void ( ::C_BaseEntity::*PerformFlyCollisionResolution_function_type )( ::trace_t &,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "PerformFlyCollisionResolution"
                , PerformFlyCollisionResolution_function_type( &::C_BaseEntity::PerformFlyCollisionResolution )
                , ( bp::arg("trace"), bp::arg("move") ) );
        
        }
        { //::C_BaseEntity::PhysicsAddGravityMove
        
            typedef void ( ::C_BaseEntity::*PhysicsAddGravityMove_function_type )( ::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsAddGravityMove"
                , PhysicsAddGravityMove_function_type( &::C_BaseEntity::PhysicsAddGravityMove )
                , ( bp::arg("move") ) );
        
        }
        { //::C_BaseEntity::PhysicsCheckForEntityUntouch
        
            typedef void ( ::C_BaseEntity::*PhysicsCheckForEntityUntouch_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsCheckForEntityUntouch"
                , PhysicsCheckForEntityUntouch_function_type( &::C_BaseEntity::PhysicsCheckForEntityUntouch ) );
        
        }
        { //::C_BaseEntity::PhysicsCheckVelocity
        
            typedef void ( ::C_BaseEntity::*PhysicsCheckVelocity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsCheckVelocity"
                , PhysicsCheckVelocity_function_type( &::C_BaseEntity::PhysicsCheckVelocity ) );
        
        }
        { //::C_BaseEntity::PhysicsCheckWater
        
            typedef bool ( ::C_BaseEntity::*PhysicsCheckWater_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsCheckWater"
                , PhysicsCheckWater_function_type( &::C_BaseEntity::PhysicsCheckWater ) );
        
        }
        { //::C_BaseEntity::PhysicsCheckWaterTransition
        
            typedef void ( ::C_BaseEntity::*PhysicsCheckWaterTransition_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsCheckWaterTransition"
                , PhysicsCheckWaterTransition_function_type( &::C_BaseEntity::PhysicsCheckWaterTransition ) );
        
        }
        { //::C_BaseEntity::PhysicsImpact
        
            typedef void ( ::C_BaseEntity::*PhysicsImpact_function_type )( ::C_BaseEntity *,::trace_t & ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsImpact"
                , PhysicsImpact_function_type( &::C_BaseEntity::PhysicsImpact )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::C_BaseEntity::PhysicsMarkEntitiesAsTouching
        
            typedef void ( ::C_BaseEntity::*PhysicsMarkEntitiesAsTouching_function_type )( ::C_BaseEntity *,::trace_t & ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsMarkEntitiesAsTouching"
                , PhysicsMarkEntitiesAsTouching_function_type( &::C_BaseEntity::PhysicsMarkEntitiesAsTouching )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::C_BaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven
        
            typedef void ( ::C_BaseEntity::*PhysicsMarkEntitiesAsTouchingEventDriven_function_type )( ::C_BaseEntity *,::trace_t & ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsMarkEntitiesAsTouchingEventDriven"
                , PhysicsMarkEntitiesAsTouchingEventDriven_function_type( &::C_BaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::C_BaseEntity::PhysicsNotifyOtherOfGroundRemoval
        
            typedef void ( *PhysicsNotifyOtherOfGroundRemoval_function_type )( ::C_BaseEntity *,::C_BaseEntity * );
            
            C_BaseEntity_exposer.def( 
                "PhysicsNotifyOtherOfGroundRemoval"
                , PhysicsNotifyOtherOfGroundRemoval_function_type( &::C_BaseEntity::PhysicsNotifyOtherOfGroundRemoval )
                , ( bp::arg("ent"), bp::arg("other") ) );
        
        }
        { //::C_BaseEntity::PhysicsNotifyOtherOfUntouch
        
            typedef void ( *PhysicsNotifyOtherOfUntouch_function_type )( ::C_BaseEntity *,::C_BaseEntity * );
            
            C_BaseEntity_exposer.def( 
                "PhysicsNotifyOtherOfUntouch"
                , PhysicsNotifyOtherOfUntouch_function_type( &::C_BaseEntity::PhysicsNotifyOtherOfUntouch )
                , ( bp::arg("ent"), bp::arg("other") ) );
        
        }
        { //::C_BaseEntity::PhysicsPushEntity
        
            typedef void ( ::C_BaseEntity::*PhysicsPushEntity_function_type )( ::Vector const &,::trace_t * ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsPushEntity"
                , PhysicsPushEntity_function_type( &::C_BaseEntity::PhysicsPushEntity )
                , ( bp::arg("push"), bp::arg("pTrace") ) );
        
        }
        { //::C_BaseEntity::PhysicsPyDispatchThink
        
            typedef void ( ::C_BaseEntity::*PhysicsPyDispatchThink_function_type )( ::boost::python::object ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsPyDispatchThink"
                , PhysicsPyDispatchThink_function_type( &::C_BaseEntity::PhysicsPyDispatchThink )
                , ( bp::arg("thinkFunc") ) );
        
        }
        { //::C_BaseEntity::PhysicsPyRunSpecificThink
        
            typedef bool ( ::C_BaseEntity::*PhysicsPyRunSpecificThink_function_type )( int,::boost::python::object ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsPyRunSpecificThink"
                , PhysicsPyRunSpecificThink_function_type( &::C_BaseEntity::PhysicsPyRunSpecificThink )
                , ( bp::arg("nContextIndex"), bp::arg("thinkFunc") ) );
        
        }
        { //::C_BaseEntity::PhysicsRemoveGroundList
        
            typedef void ( *PhysicsRemoveGroundList_function_type )( ::C_BaseEntity * );
            
            C_BaseEntity_exposer.def( 
                "PhysicsRemoveGroundList"
                , PhysicsRemoveGroundList_function_type( &::C_BaseEntity::PhysicsRemoveGroundList )
                , ( bp::arg("ent") ) );
        
        }
        { //::C_BaseEntity::PhysicsRemoveTouchedList
        
            typedef void ( *PhysicsRemoveTouchedList_function_type )( ::C_BaseEntity * );
            
            C_BaseEntity_exposer.def( 
                "PhysicsRemoveTouchedList"
                , PhysicsRemoveTouchedList_function_type( &::C_BaseEntity::PhysicsRemoveTouchedList )
                , ( bp::arg("ent") ) );
        
        }
        { //::C_BaseEntity::PhysicsSimulate
        
            typedef void ( ::C_BaseEntity::*PhysicsSimulate_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsSimulate"
                , PhysicsSimulate_function_type( &::C_BaseEntity::PhysicsSimulate ) );
        
        }
        { //::C_BaseEntity::PhysicsSolidMaskForEntity
        
            typedef unsigned int ( ::C_BaseEntity::*PhysicsSolidMaskForEntity_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "PhysicsSolidMaskForEntity"
                , PhysicsSolidMaskForEntity_function_type( &::C_BaseEntity::PhysicsSolidMaskForEntity ) );
        
        }
        { //::C_BaseEntity::PhysicsStartGroundContact
        
            typedef void ( ::C_BaseEntity::*PhysicsStartGroundContact_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsStartGroundContact"
                , PhysicsStartGroundContact_function_type( &::C_BaseEntity::PhysicsStartGroundContact )
                , ( bp::arg("pentOther") ) );
        
        }
        { //::C_BaseEntity::PhysicsStartTouch
        
            typedef void ( ::C_BaseEntity::*PhysicsStartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsStartTouch"
                , PhysicsStartTouch_function_type( &::C_BaseEntity::PhysicsStartTouch )
                , ( bp::arg("pentOther") ) );
        
        }
        { //::C_BaseEntity::PhysicsStep
        
            typedef void ( ::C_BaseEntity::*PhysicsStep_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsStep"
                , PhysicsStep_function_type( &::C_BaseEntity::PhysicsStep ) );
        
        }
        { //::C_BaseEntity::PhysicsTouch
        
            typedef void ( ::C_BaseEntity::*PhysicsTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsTouch"
                , PhysicsTouch_function_type( &::C_BaseEntity::PhysicsTouch )
                , ( bp::arg("pentOther") ) );
        
        }
        { //::C_BaseEntity::PhysicsTouchTriggers
        
            typedef void ( ::C_BaseEntity::*PhysicsTouchTriggers_function_type )( ::Vector const * ) ;
            
            C_BaseEntity_exposer.def( 
                "PhysicsTouchTriggers"
                , PhysicsTouchTriggers_function_type( &::C_BaseEntity::PhysicsTouchTriggers )
                , ( bp::arg("pPrevAbsOrigin")=bp::object() ) );
        
        }
        { //::C_BaseEntity::PopEnableAbsRecomputations
        
            typedef void ( *PopEnableAbsRecomputations_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "PopEnableAbsRecomputations"
                , PopEnableAbsRecomputations_function_type( &::C_BaseEntity::PopEnableAbsRecomputations ) );
        
        }
        { //::C_BaseEntity::PostDataUpdate
        
            typedef void ( ::C_BaseEntity::*PostDataUpdate_function_type )( ::DataUpdateType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "PostDataUpdate"
                , PostDataUpdate_function_type( &::C_BaseEntity::PostDataUpdate )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BaseEntity::PostEntityPacketReceived
        
            typedef void ( ::C_BaseEntity::*PostEntityPacketReceived_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PostEntityPacketReceived"
                , PostEntityPacketReceived_function_type( &::C_BaseEntity::PostEntityPacketReceived ) );
        
        }
        { //::C_BaseEntity::PostNetworkDataReceived
        
            typedef bool ( ::C_BaseEntity::*PostNetworkDataReceived_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "PostNetworkDataReceived"
                , PostNetworkDataReceived_function_type( &::C_BaseEntity::PostNetworkDataReceived )
                , ( bp::arg("commands_acknowledged") ) );
        
        }
        { //::C_BaseEntity::PreDataUpdate
        
            typedef void ( ::C_BaseEntity::*PreDataUpdate_function_type )( ::DataUpdateType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "PreDataUpdate"
                , PreDataUpdate_function_type( &::C_BaseEntity::PreDataUpdate )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BaseEntity::PreEntityPacketReceived
        
            typedef void ( ::C_BaseEntity::*PreEntityPacketReceived_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "PreEntityPacketReceived"
                , PreEntityPacketReceived_function_type( &::C_BaseEntity::PreEntityPacketReceived )
                , ( bp::arg("commands_acknowledged") ) );
        
        }
        { //::C_BaseEntity::PreRender
        
            typedef bool ( ::C_BaseEntity::*PreRender_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "PreRender"
                , PreRender_function_type( &::C_BaseEntity::PreRender )
                , ( bp::arg("nSplitScreenPlayerSlot") ) );
        
        }
        { //::C_BaseEntity::PreRenderEntities
        
            typedef void ( *PreRenderEntities_function_type )( int );
            
            C_BaseEntity_exposer.def( 
                "PreRenderEntities"
                , PreRenderEntities_function_type( &::C_BaseEntity::PreRenderEntities )
                , ( bp::arg("nSplitScreenPlayerSlot") ) );
        
        }
        { //::C_BaseEntity::Precache
        
            typedef void ( ::C_BaseEntity::*Precache_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_Precache_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseEntity::Precache)
                , default_Precache_function_type(&C_BaseEntity_wrapper::default_Precache) );
        
        }
        { //::C_BaseEntity::PrecacheModel
        
            typedef int ( *PrecacheModel_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "PrecacheModel"
                , PrecacheModel_function_type( &::C_BaseEntity::PrecacheModel )
                , ( bp::arg("name") ) );
        
        }
        { //::C_BaseEntity::PrecacheScriptSound
        
            typedef ::HSOUNDSCRIPTHANDLE ( *PrecacheScriptSound_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "PrecacheScriptSound"
                , PrecacheScriptSound_function_type( &::C_BaseEntity::PrecacheScriptSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::PrecacheSound
        
            typedef bool ( *PrecacheSound_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "PrecacheSound"
                , PrecacheSound_function_type( &::C_BaseEntity::PrecacheSound )
                , ( bp::arg("name") ) );
        
        }
        { //::C_BaseEntity::PrefetchScriptSound
        
            typedef void ( *PrefetchScriptSound_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "PrefetchScriptSound"
                , PrefetchScriptSound_function_type( &::C_BaseEntity::PrefetchScriptSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::PrefetchSound
        
            typedef void ( *PrefetchSound_function_type )( char const * );
            
            C_BaseEntity_exposer.def( 
                "PrefetchSound"
                , PrefetchSound_function_type( &::C_BaseEntity::PrefetchSound )
                , ( bp::arg("name") ) );
        
        }
        { //::C_BaseEntity::ProxyRandomValue
        
            typedef float ( ::C_BaseEntity::*ProxyRandomValue_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "ProxyRandomValue"
                , ProxyRandomValue_function_type( &::C_BaseEntity::ProxyRandomValue ) );
        
        }
        { //::C_BaseEntity::PurgeRemovedEntities
        
            typedef void ( *PurgeRemovedEntities_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "PurgeRemovedEntities"
                , PurgeRemovedEntities_function_type( &::C_BaseEntity::PurgeRemovedEntities ) );
        
        }
        { //::C_BaseEntity::PushEnableAbsRecomputations
        
            typedef void ( *PushEnableAbsRecomputations_function_type )( bool );
            
            C_BaseEntity_exposer.def( 
                "PushEnableAbsRecomputations"
                , PushEnableAbsRecomputations_function_type( &::C_BaseEntity::PushEnableAbsRecomputations )
                , ( bp::arg("bEnable") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const *,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname"), bp::arg("soundtime") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const *,float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname"), bp::arg("soundtime"), bp::arg("duration") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const *,short int ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname"), bp::arg("handle") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const *,short int,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname"), bp::arg("handle"), bp::arg("soundtime") ) );
        
        }
        { //::C_BaseEntity::PyEmitSound
        
            typedef void ( ::C_BaseEntity::*EmitSound_function_type )( char const *,short int,float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &::C_BaseEntity::PyEmitSound )
                , ( bp::arg("soundname"), bp::arg("handle"), bp::arg("soundtime"), bp::arg("duration") ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,::Vector const * ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("pOrigin")=bp::object() ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,::Vector const *,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.0f ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,::Vector const *,float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.0f, bp::arg("duration")=0.0f ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,short int,::Vector const * ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("handle"), bp::arg("pOrigin")=bp::object() ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,short int,::Vector const *,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("handle"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.0f ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,short int,::Vector const *,float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("handle"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.0f, bp::arg("duration")=0.0f ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,::EmitSound_t const & ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("params") ) );
        
        }
        { //::C_BaseEntity::PyEmitSoundFilter
        
            typedef void ( ::C_BaseEntity::*EmitSoundFilter_function_type )( ::IRecipientFilter &,int,::EmitSound_t const &,short int ) ;
            
            C_BaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::C_BaseEntity::PyEmitSoundFilter )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("params"), bp::arg("handle") ) );
        
        }
        { //::C_BaseEntity::PyNotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_BaseEntity_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_BaseEntity_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::PyNotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_BaseEntity_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_BaseEntity_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_BaseEntity_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_BaseEntity_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::PyStopSound
        
            typedef void ( ::C_BaseEntity::*StopSound_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::C_BaseEntity::PyStopSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::PyStopSound
        
            typedef void ( ::C_BaseEntity::*StopSound_function_type )( char const *,short int ) ;
            
            C_BaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::C_BaseEntity::PyStopSound )
                , ( bp::arg("soundname"), bp::arg("handle") ) );
        
        }
        { //::C_BaseEntity::PyStopSound
        
            typedef void ( ::C_BaseEntity::*StopSound_function_type )( int,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::C_BaseEntity::PyStopSound )
                , ( bp::arg("iEntIndex"), bp::arg("soundname") ) );
        
        }
        { //::C_BaseEntity::PyStopSound
        
            typedef void ( ::C_BaseEntity::*StopSound_function_type )( int,int,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::C_BaseEntity::PyStopSound )
                , ( bp::arg("iEntIndex"), bp::arg("iChannel"), bp::arg("pSample") ) );
        
        }
        { //::C_BaseEntity::PyThink
        
            typedef void ( ::C_BaseEntity::*PyThink_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "PyThink"
                , PyThink_function_type( &::C_BaseEntity::PyThink ) );
        
        }
        { //::C_BaseEntity::PyUpdateNetworkVar
        
            typedef void ( ::C_BaseEntity::*PyUpdateNetworkVar_function_type )( char const *,::boost::python::object,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "PyUpdateNetworkVar"
                , PyUpdateNetworkVar_function_type( &::C_BaseEntity::PyUpdateNetworkVar )
                , ( bp::arg("pName"), bp::arg("data"), bp::arg("callchanged")=(bool)(false) ) );
        
        }
        { //::C_BaseEntity::PyVPhysicsGetObject
        
            typedef ::boost::python::object ( ::C_BaseEntity::*VPhysicsGetObject_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsGetObject"
                , VPhysicsGetObject_function_type( &::C_BaseEntity::PyVPhysicsGetObject ) );
        
        }
        { //::C_BaseEntity::PyVPhysicsInitNormal
        
            typedef ::boost::python::object ( ::C_BaseEntity::*VPhysicsInitNormal_function_type )( ::SolidType_t,int,bool,::solid_t * ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsInitNormal"
                , VPhysicsInitNormal_function_type( &::C_BaseEntity::PyVPhysicsInitNormal )
                , ( bp::arg("solidType"), bp::arg("nSolidFlags"), bp::arg("createAsleep"), bp::arg("pSolid")=bp::object() ) );
        
        }
        { //::C_BaseEntity::PyVPhysicsInitShadow
        
            typedef ::boost::python::object ( ::C_BaseEntity::*VPhysicsInitShadow_function_type )( bool,bool,::solid_t * ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsInitShadow"
                , VPhysicsInitShadow_function_type( &::C_BaseEntity::PyVPhysicsInitShadow )
                , ( bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation"), bp::arg("pSolid")=bp::object() ) );
        
        }
        { //::C_BaseEntity::PyVPhysicsInitStatic
        
            typedef ::boost::python::object ( ::C_BaseEntity::*VPhysicsInitStatic_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsInitStatic"
                , VPhysicsInitStatic_function_type( &::C_BaseEntity::PyVPhysicsInitStatic ) );
        
        }
        { //::C_BaseEntity::PyVPhysicsSetObject
        
            typedef void ( ::C_BaseEntity::*VPhysicsSetObject_function_type )( ::boost::python::object ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsSetObject"
                , VPhysicsSetObject_function_type( &::C_BaseEntity::PyVPhysicsSetObject )
                , ( bp::arg("physref") ) );
        
        }
        { //::C_BaseEntity::RecordToolMessage
        
            typedef void ( ::C_BaseEntity::*RecordToolMessage_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "RecordToolMessage"
                , RecordToolMessage_function_type( &::C_BaseEntity::RecordToolMessage ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellBits
        
            typedef void ( *RecvProxy_CellBits_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellBits"
                , RecvProxy_CellBits_function_type( &::C_BaseEntity::RecvProxy_CellBits )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellOrigin
        
            typedef void ( *RecvProxy_CellOrigin_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellOrigin"
                , RecvProxy_CellOrigin_function_type( &::C_BaseEntity::RecvProxy_CellOrigin )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellOriginXY
        
            typedef void ( *RecvProxy_CellOriginXY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellOriginXY"
                , RecvProxy_CellOriginXY_function_type( &::C_BaseEntity::RecvProxy_CellOriginXY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellOriginZ
        
            typedef void ( *RecvProxy_CellOriginZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellOriginZ"
                , RecvProxy_CellOriginZ_function_type( &::C_BaseEntity::RecvProxy_CellOriginZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellX
        
            typedef void ( *RecvProxy_CellX_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellX"
                , RecvProxy_CellX_function_type( &::C_BaseEntity::RecvProxy_CellX )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellY
        
            typedef void ( *RecvProxy_CellY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellY"
                , RecvProxy_CellY_function_type( &::C_BaseEntity::RecvProxy_CellY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RecvProxy_CellZ
        
            typedef void ( *RecvProxy_CellZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BaseEntity_exposer.def( 
                "RecvProxy_CellZ"
                , RecvProxy_CellZ_function_type( &::C_BaseEntity::RecvProxy_CellZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::RegisterThinkContext
        
            typedef int ( ::C_BaseEntity::*RegisterThinkContext_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "RegisterThinkContext"
                , RegisterThinkContext_function_type( &::C_BaseEntity::RegisterThinkContext )
                , ( bp::arg("szContext") ) );
        
        }
        { //::C_BaseEntity::Remove
        
            typedef void ( ::C_BaseEntity::*Remove_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Remove"
                , Remove_function_type( &::C_BaseEntity::Remove ) );
        
        }
        { //::C_BaseEntity::RemoveAllDecals
        
            typedef void ( ::C_BaseEntity::*RemoveAllDecals_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveAllDecals"
                , RemoveAllDecals_function_type( &::C_BaseEntity::RemoveAllDecals ) );
        
        }
        { //::C_BaseEntity::RemoveEFlags
        
            typedef void ( ::C_BaseEntity::*RemoveEFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveEFlags"
                , RemoveEFlags_function_type( &::C_BaseEntity::RemoveEFlags )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::C_BaseEntity::RemoveEffects
        
            typedef void ( ::C_BaseEntity::*RemoveEffects_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveEffects"
                , RemoveEffects_function_type( &::C_BaseEntity::RemoveEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::C_BaseEntity::RemoveFlag
        
            typedef void ( ::C_BaseEntity::*RemoveFlag_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveFlag"
                , RemoveFlag_function_type( &::C_BaseEntity::RemoveFlag )
                , ( bp::arg("flagsToRemove") ) );
        
        }
        { //::C_BaseEntity::RemoveFromAimEntsList
        
            typedef void ( ::C_BaseEntity::*RemoveFromAimEntsList_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveFromAimEntsList"
                , RemoveFromAimEntsList_function_type( &::C_BaseEntity::RemoveFromAimEntsList ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_BaseEntity_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_BaseEntity_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::RemoveFromLeafSystem
        
            typedef void ( ::C_BaseEntity::*RemoveFromLeafSystem_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveFromLeafSystem"
                , RemoveFromLeafSystem_function_type( &::C_BaseEntity::RemoveFromLeafSystem ) );
        
        }
        { //::C_BaseEntity::RemoveSolidFlags
        
            typedef void ( ::C_BaseEntity::*RemoveSolidFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveSolidFlags"
                , RemoveSolidFlags_function_type( &::C_BaseEntity::RemoveSolidFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::C_BaseEntity::RemoveVar
        
            typedef void ( ::C_BaseEntity::*RemoveVar_function_type )( void *,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "RemoveVar"
                , RemoveVar_function_type( &::C_BaseEntity::RemoveVar )
                , ( bp::arg("data"), bp::arg("bAssert")=(bool)(true) ) );
        
        }
        { //::C_BaseEntity::RenderWithViewModels
        
            typedef void ( ::C_BaseEntity::*RenderWithViewModels_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "RenderWithViewModels"
                , RenderWithViewModels_function_type( &::C_BaseEntity::RenderWithViewModels )
                , ( bp::arg("bEnable") ) );
        
        }
        { //::C_BaseEntity::RenderableToWorldTransform
        
            typedef ::matrix3x4_t const & ( ::C_BaseEntity::*RenderableToWorldTransform_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "RenderableToWorldTransform"
                , RenderableToWorldTransform_function_type( &::C_BaseEntity::RenderableToWorldTransform )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::ResetLatched
        
            typedef void ( ::C_BaseEntity::*ResetLatched_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ResetLatched"
                , ResetLatched_function_type( &::C_BaseEntity::ResetLatched ) );
        
        }
        { //::C_BaseEntity::ResolveFlyCollisionBounce
        
            typedef void ( ::C_BaseEntity::*ResolveFlyCollisionBounce_function_type )( ::trace_t &,::Vector &,float ) ;
            
            C_BaseEntity_exposer.def( 
                "ResolveFlyCollisionBounce"
                , ResolveFlyCollisionBounce_function_type( &::C_BaseEntity::ResolveFlyCollisionBounce )
                , ( bp::arg("trace"), bp::arg("vecVelocity"), bp::arg("flMinTotalElasticity")=0.0f ) );
        
        }
        { //::C_BaseEntity::ResolveFlyCollisionCustom
        
            typedef void ( ::C_BaseEntity::*ResolveFlyCollisionCustom_function_type )( ::trace_t &,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "ResolveFlyCollisionCustom"
                , ResolveFlyCollisionCustom_function_type( &::C_BaseEntity::ResolveFlyCollisionCustom )
                , ( bp::arg("trace"), bp::arg("vecVelocity") ) );
        
        }
        { //::C_BaseEntity::ResolveFlyCollisionSlide
        
            typedef void ( ::C_BaseEntity::*ResolveFlyCollisionSlide_function_type )( ::trace_t &,::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "ResolveFlyCollisionSlide"
                , ResolveFlyCollisionSlide_function_type( &::C_BaseEntity::ResolveFlyCollisionSlide )
                , ( bp::arg("trace"), bp::arg("vecVelocity") ) );
        
        }
        { //::C_BaseEntity::Restore
        
            typedef int ( ::C_BaseEntity::*Restore_function_type )( ::IRestore & ) ;
            
            C_BaseEntity_exposer.def( 
                "Restore"
                , Restore_function_type( &::C_BaseEntity::Restore )
                , ( bp::arg("restore") ) );
        
        }
        { //::C_BaseEntity::RestoreData
        
            typedef void ( ::C_BaseEntity::*RestoreData_function_type )( char const *,int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "RestoreData"
                , RestoreData_function_type( &::C_BaseEntity::RestoreData )
                , ( bp::arg("context"), bp::arg("slot"), bp::arg("type") ) );
        
        }
        { //::C_BaseEntity::SUB_Remove
        
            typedef void ( ::C_BaseEntity::*SUB_Remove_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "SUB_Remove"
                , SUB_Remove_function_type( &::C_BaseEntity::SUB_Remove ) );
        
        }
        { //::C_BaseEntity::Save
        
            typedef int ( ::C_BaseEntity::*Save_function_type )( ::ISave & ) ;
            
            C_BaseEntity_exposer.def( 
                "Save"
                , Save_function_type( &::C_BaseEntity::Save )
                , ( bp::arg("save") ) );
        
        }
        { //::C_BaseEntity::SaveData
        
            typedef void ( ::C_BaseEntity::*SaveData_function_type )( char const *,int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "SaveData"
                , SaveData_function_type( &::C_BaseEntity::SaveData )
                , ( bp::arg("context"), bp::arg("slot"), bp::arg("type") ) );
        
        }
        { //::C_BaseEntity::ScriptGetForward
        
            typedef ::Vector const & ( ::C_BaseEntity::*ScriptGetForward_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ScriptGetForward"
                , ScriptGetForward_function_type( &::C_BaseEntity::ScriptGetForward )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::ScriptGetLeft
        
            typedef ::Vector const & ( ::C_BaseEntity::*ScriptGetLeft_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ScriptGetLeft"
                , ScriptGetLeft_function_type( &::C_BaseEntity::ScriptGetLeft )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::ScriptGetUp
        
            typedef ::Vector const & ( ::C_BaseEntity::*ScriptGetUp_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ScriptGetUp"
                , ScriptGetUp_function_type( &::C_BaseEntity::ScriptGetUp )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::SetAIWalkable
        
            typedef void ( ::C_BaseEntity::*SetAIWalkable_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAIWalkable"
                , SetAIWalkable_function_type( &::C_BaseEntity::SetAIWalkable )
                , ( bp::arg("bBlocksLOS") ) );
        
        }
        { //::C_BaseEntity::SetAbsAngles
        
            typedef void ( ::C_BaseEntity::*SetAbsAngles_function_type )( ::QAngle const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAbsAngles"
                , SetAbsAngles_function_type( &::C_BaseEntity::SetAbsAngles )
                , ( bp::arg("angles") ) );
        
        }
        { //::C_BaseEntity::SetAbsOrigin
        
            typedef void ( ::C_BaseEntity::*SetAbsOrigin_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAbsOrigin"
                , SetAbsOrigin_function_type( &::C_BaseEntity::SetAbsOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::C_BaseEntity::SetAbsQueriesValid
        
            typedef void ( *SetAbsQueriesValid_function_type )( bool );
            
            C_BaseEntity_exposer.def( 
                "SetAbsQueriesValid"
                , SetAbsQueriesValid_function_type( &::C_BaseEntity::SetAbsQueriesValid )
                , ( bp::arg("bValid") ) );
        
        }
        { //::C_BaseEntity::SetAbsVelocity
        
            typedef void ( ::C_BaseEntity::*SetAbsVelocity_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAbsVelocity"
                , SetAbsVelocity_function_type( &::C_BaseEntity::SetAbsVelocity )
                , ( bp::arg("vecVelocity") ) );
        
        }
        { //::C_BaseEntity::SetAllowNavIgnore
        
            typedef void ( ::C_BaseEntity::*SetAllowNavIgnore_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAllowNavIgnore"
                , SetAllowNavIgnore_function_type( &::C_BaseEntity::SetAllowNavIgnore )
                , ( bp::arg("bAllowNavIgnore") ) );
        
        }
        { //::C_BaseEntity::SetAllowPrecache
        
            typedef void ( *SetAllowPrecache_function_type )( bool );
            
            C_BaseEntity_exposer.def( 
                "SetAllowPrecache"
                , SetAllowPrecache_function_type( &::C_BaseEntity::SetAllowPrecache )
                , ( bp::arg("allow") ) );
        
        }
        { //::C_BaseEntity::SetAnimTime
        
            typedef void ( ::C_BaseEntity::*SetAnimTime_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAnimTime"
                , SetAnimTime_function_type( &::C_BaseEntity::SetAnimTime )
                , ( bp::arg("at") ) );
        
        }
        { //::C_BaseEntity::SetAnimatedEveryTick
        
            typedef void ( ::C_BaseEntity::*SetAnimatedEveryTick_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetAnimatedEveryTick"
                , SetAnimatedEveryTick_function_type( &::C_BaseEntity::SetAnimatedEveryTick )
                , ( bp::arg("anim") ) );
        
        }
        { //::C_BaseEntity::SetBaseVelocity
        
            typedef void ( ::C_BaseEntity::*SetBaseVelocity_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetBaseVelocity"
                , SetBaseVelocity_function_type( &::C_BaseEntity::SetBaseVelocity )
                , ( bp::arg("v") ) );
        
        }
        { //::C_BaseEntity::SetBlocksLOS
        
            typedef void ( ::C_BaseEntity::*SetBlocksLOS_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetBlocksLOS"
                , SetBlocksLOS_function_type( &::C_BaseEntity::SetBlocksLOS )
                , ( bp::arg("bBlocksLOS") ) );
        
        }
        { //::C_BaseEntity::SetBlurState
        
            typedef void ( ::C_BaseEntity::*SetBlurState_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetBlurState"
                , SetBlurState_function_type( &::C_BaseEntity::SetBlurState )
                , ( bp::arg("bShouldBlur") ) );
        
        }
        { //::C_BaseEntity::SetCPULevels
        
            typedef void ( ::C_BaseEntity::*SetCPULevels_function_type )( int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCPULevels"
                , SetCPULevels_function_type( &::C_BaseEntity::SetCPULevels )
                , ( bp::arg("nMinCPULevel"), bp::arg("nMaxCPULevel") ) );
        
        }
        { //::C_BaseEntity::SetCellBits
        
            typedef bool ( ::C_BaseEntity::*SetCellBits_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCellBits"
                , SetCellBits_function_type( &::C_BaseEntity::SetCellBits )
                , ( bp::arg("cellbits")=(int)(5) ) );
        
        }
        { //::C_BaseEntity::SetCheckUntouch
        
            typedef void ( ::C_BaseEntity::*SetCheckUntouch_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCheckUntouch"
                , SetCheckUntouch_function_type( &::C_BaseEntity::SetCheckUntouch )
                , ( bp::arg("check") ) );
        
        }
        { //::C_BaseEntity::SetClassname
        
            typedef void ( ::C_BaseEntity::*SetClassname_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetClassname"
                , SetClassname_function_type( &::C_BaseEntity::SetClassname )
                , ( bp::arg("className") ) );
        
        }
        { //::C_BaseEntity::SetCollisionBounds
        
            typedef void ( ::C_BaseEntity::*SetCollisionBounds_function_type )( ::Vector const &,::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCollisionBounds"
                , SetCollisionBounds_function_type( &::C_BaseEntity::SetCollisionBounds )
                , ( bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::C_BaseEntity::SetCollisionGroup
        
            typedef void ( ::C_BaseEntity::*SetCollisionGroup_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCollisionGroup"
                , SetCollisionGroup_function_type( &::C_BaseEntity::SetCollisionGroup )
                , ( bp::arg("collisionGroup") ) );
        
        }
        { //::C_BaseEntity::SetCreateTime
        
            typedef void ( ::C_BaseEntity::*SetCreateTime_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetCreateTime"
                , SetCreateTime_function_type( &::C_BaseEntity::SetCreateTime )
                , ( bp::arg("flCreateTime") ) );
        
        }
        { //::C_BaseEntity::SetDestroyedOnRecreateEntities
        
            typedef void ( ::C_BaseEntity::*SetDestroyedOnRecreateEntities_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "SetDestroyedOnRecreateEntities"
                , SetDestroyedOnRecreateEntities_function_type( &::C_BaseEntity::SetDestroyedOnRecreateEntities ) );
        
        }
        { //::C_BaseEntity::SetDistanceFade
        
            typedef void ( ::C_BaseEntity::*SetDistanceFade_function_type )( float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetDistanceFade"
                , SetDistanceFade_function_type( &::C_BaseEntity::SetDistanceFade )
                , ( bp::arg("flMinDist"), bp::arg("flMaxDist") ) );
        
        }
        { //::C_BaseEntity::SetDoNotRegisterEntity
        
            typedef void ( ::C_BaseEntity::*SetDoNotRegisterEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "SetDoNotRegisterEntity"
                , SetDoNotRegisterEntity_function_type( &::C_BaseEntity::SetDoNotRegisterEntity ) );
        
        }
        { //::C_BaseEntity::SetDormant
        
            typedef void ( ::C_BaseEntity::*SetDormant_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetDormant"
                , SetDormant_function_type( &::C_BaseEntity::SetDormant )
                , ( bp::arg("bDormant") ) );
        
        }
        { //::C_BaseEntity::SetDormantPredictable
        
            typedef void ( ::C_BaseEntity::*SetDormantPredictable_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetDormantPredictable"
                , SetDormantPredictable_function_type( &::C_BaseEntity::SetDormantPredictable )
                , ( bp::arg("dormant") ) );
        
        }
        { //::C_BaseEntity::SetEFlags
        
            typedef void ( ::C_BaseEntity::*SetEFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetEFlags"
                , SetEFlags_function_type( &::C_BaseEntity::SetEFlags )
                , ( bp::arg("iEFlags") ) );
        
        }
        { //::C_BaseEntity::SetEffectEntity
        
            typedef void ( ::C_BaseEntity::*SetEffectEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetEffectEntity"
                , SetEffectEntity_function_type( &::C_BaseEntity::SetEffectEntity )
                , ( bp::arg("pEffectEnt") ) );
        
        }
        { //::C_BaseEntity::SetEffects
        
            typedef void ( ::C_BaseEntity::*SetEffects_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetEffects"
                , SetEffects_function_type( &::C_BaseEntity::SetEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::C_BaseEntity::SetEyeAngleOffset
        
            typedef void ( ::C_BaseEntity::*SetEyeAngleOffset_function_type )( ::QAngle const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetEyeAngleOffset"
                , SetEyeAngleOffset_function_type( &::C_BaseEntity::SetEyeAngleOffset )
                , ( bp::arg("qa") ) );
        
        }
        { //::C_BaseEntity::SetEyeOffset
        
            typedef void ( ::C_BaseEntity::*SetEyeOffset_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetEyeOffset"
                , SetEyeOffset_function_type( &::C_BaseEntity::SetEyeOffset )
                , ( bp::arg("v") ) );
        
        }
        { //::C_BaseEntity::SetFriction
        
            typedef void ( ::C_BaseEntity::*SetFriction_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetFriction"
                , SetFriction_function_type( &::C_BaseEntity::SetFriction )
                , ( bp::arg("flFriction") ) );
        
        }
        { //::C_BaseEntity::SetGPULevels
        
            typedef void ( ::C_BaseEntity::*SetGPULevels_function_type )( int,int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetGPULevels"
                , SetGPULevels_function_type( &::C_BaseEntity::SetGPULevels )
                , ( bp::arg("nMinGPULevel"), bp::arg("nMaxGPULevel") ) );
        
        }
        { //::C_BaseEntity::SetGlobalFadeScale
        
            typedef void ( ::C_BaseEntity::*SetGlobalFadeScale_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetGlobalFadeScale"
                , SetGlobalFadeScale_function_type( &::C_BaseEntity::SetGlobalFadeScale )
                , ( bp::arg("flFadeScale") ) );
        
        }
        { //::C_BaseEntity::SetGravity
        
            typedef void ( ::C_BaseEntity::*SetGravity_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetGravity"
                , SetGravity_function_type( &::C_BaseEntity::SetGravity )
                , ( bp::arg("flGravity") ) );
        
        }
        { //::C_BaseEntity::SetGroundChangeTime
        
            typedef void ( ::C_BaseEntity::*SetGroundChangeTime_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetGroundChangeTime"
                , SetGroundChangeTime_function_type( &::C_BaseEntity::SetGroundChangeTime )
                , ( bp::arg("flTime") ) );
        
        }
        { //::C_BaseEntity::SetGroundEntity
        
            typedef void ( ::C_BaseEntity::*SetGroundEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetGroundEntity"
                , SetGroundEntity_function_type( &::C_BaseEntity::SetGroundEntity )
                , ( bp::arg("ground") ) );
        
        }
        { //::C_BaseEntity::SetInFOW
        
            typedef void ( ::C_BaseEntity::*SetInFOW_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetInFOW"
                , SetInFOW_function_type( &::C_BaseEntity::SetInFOW )
                , ( bp::arg("infow") ) );
        
        }
        { //::C_BaseEntity::SetLocalAngles
        
            typedef void ( ::C_BaseEntity::*SetLocalAngles_function_type )( ::QAngle const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalAngles"
                , SetLocalAngles_function_type( &::C_BaseEntity::SetLocalAngles )
                , ( bp::arg("angles") ) );
        
        }
        { //::C_BaseEntity::SetLocalAnglesDim
        
            typedef void ( ::C_BaseEntity::*SetLocalAnglesDim_function_type )( int,::vec_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalAnglesDim"
                , SetLocalAnglesDim_function_type( &::C_BaseEntity::SetLocalAnglesDim )
                , ( bp::arg("iDim"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::SetLocalAngularVelocity
        
            typedef void ( ::C_BaseEntity::*SetLocalAngularVelocity_function_type )( ::QAngle const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalAngularVelocity"
                , SetLocalAngularVelocity_function_type( &::C_BaseEntity::SetLocalAngularVelocity )
                , ( bp::arg("vecAngVelocity") ) );
        
        }
        { //::C_BaseEntity::SetLocalOrigin
        
            typedef void ( ::C_BaseEntity::*SetLocalOrigin_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalOrigin"
                , SetLocalOrigin_function_type( &::C_BaseEntity::SetLocalOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::C_BaseEntity::SetLocalOriginDim
        
            typedef void ( ::C_BaseEntity::*SetLocalOriginDim_function_type )( int,::vec_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalOriginDim"
                , SetLocalOriginDim_function_type( &::C_BaseEntity::SetLocalOriginDim )
                , ( bp::arg("iDim"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::SetLocalTransform
        
            typedef void ( ::C_BaseEntity::*SetLocalTransform_function_type )( ::matrix3x4_t const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalTransform"
                , SetLocalTransform_function_type( &::C_BaseEntity::SetLocalTransform )
                , ( bp::arg("localTransform") ) );
        
        }
        { //::C_BaseEntity::SetLocalVelocity
        
            typedef void ( ::C_BaseEntity::*SetLocalVelocity_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetLocalVelocity"
                , SetLocalVelocity_function_type( &::C_BaseEntity::SetLocalVelocity )
                , ( bp::arg("vecVelocity") ) );
        
        }
        { //::C_BaseEntity::SetModel
        
            typedef bool ( ::C_BaseEntity::*SetModel_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModel"
                , SetModel_function_type( &::C_BaseEntity::SetModel )
                , ( bp::arg("pModelName") ) );
        
        }
        { //::C_BaseEntity::SetModelByIndex
        
            typedef void ( ::C_BaseEntity::*SetModelByIndex_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModelByIndex"
                , SetModelByIndex_function_type( &::C_BaseEntity::SetModelByIndex )
                , ( bp::arg("nModelIndex") ) );
        
        }
        { //::C_BaseEntity::SetModelIndex
        
            typedef void ( ::C_BaseEntity::*SetModelIndex_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModelIndex"
                , SetModelIndex_function_type( &::C_BaseEntity::SetModelIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::C_BaseEntity::SetModelInstance
        
            typedef void ( ::C_BaseEntity::*SetModelInstance_function_type )( ::ModelInstanceHandle_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModelInstance"
                , SetModelInstance_function_type( &::C_BaseEntity::SetModelInstance )
                , ( bp::arg("hInstance") ) );
        
        }
        { //::C_BaseEntity::SetModelName
        
            typedef void ( ::C_BaseEntity::*SetModelName_function_type )( ::string_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModelName"
                , SetModelName_function_type( &::C_BaseEntity::SetModelName )
                , ( bp::arg("name") ) );
        
        }
        { //::C_BaseEntity::SetModelPointer
        
            typedef void ( ::C_BaseEntity::*SetModelPointer_function_type )( ::model_t const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetModelPointer"
                , SetModelPointer_function_type( &::C_BaseEntity::SetModelPointer )
                , ( bp::arg("pModel") ) );
        
        }
        { //::C_BaseEntity::SetMousePassEntity
        
            typedef void ( ::C_BaseEntity::*SetMousePassEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetMousePassEntity"
                , SetMousePassEntity_function_type( &::C_BaseEntity::SetMousePassEntity )
                , ( bp::arg("pEnt") ) );
        
        }
        { //::C_BaseEntity::SetMoveCollide
        
            typedef void ( ::C_BaseEntity::*SetMoveCollide_function_type )( ::MoveCollide_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetMoveCollide"
                , SetMoveCollide_function_type( &::C_BaseEntity::SetMoveCollide )
                , ( bp::arg("val") ) );
        
        }
        { //::C_BaseEntity::SetMoveType
        
            typedef void ( ::C_BaseEntity::*SetMoveType_function_type )( ::MoveType_t,::MoveCollide_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetMoveType"
                , SetMoveType_function_type( &::C_BaseEntity::SetMoveType )
                , ( bp::arg("val"), bp::arg("moveCollide")=::MOVECOLLIDE_DEFAULT ) );
        
        }
        { //::C_BaseEntity::SetNavIgnore
        
            typedef void ( ::C_BaseEntity::*SetNavIgnore_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetNavIgnore"
                , SetNavIgnore_function_type( &::C_BaseEntity::SetNavIgnore )
                , ( bp::arg("duration")=3.4028234663852885981170418348451692544e+38f ) );
        
        }
        { //::C_BaseEntity::SetNetworkAngles
        
            typedef void ( ::C_BaseEntity::*SetNetworkAngles_function_type )( ::QAngle const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetNetworkAngles"
                , SetNetworkAngles_function_type( &::C_BaseEntity::SetNetworkAngles )
                , ( bp::arg("ang") ) );
        
        }
        { //::C_BaseEntity::SetNetworkOrigin
        
            typedef void ( ::C_BaseEntity::*SetNetworkOrigin_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetNetworkOrigin"
                , SetNetworkOrigin_function_type( &::C_BaseEntity::SetNetworkOrigin )
                , ( bp::arg("org") ) );
        
        }
        { //::C_BaseEntity::SetNextClientThink
        
            typedef void ( ::C_BaseEntity::*SetNextClientThink_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetNextClientThink"
                , SetNextClientThink_function_type( &::C_BaseEntity::SetNextClientThink )
                , ( bp::arg("nextThinkTime") ) );
        
        }
        { //::C_BaseEntity::SetNextThink
        
            typedef void ( ::C_BaseEntity::*SetNextThink_function_type )( float,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetNextThink"
                , SetNextThink_function_type( &::C_BaseEntity::SetNextThink )
                , ( bp::arg("nextThinkTime"), bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::SetOverrideClassname
        
            typedef void ( ::C_BaseEntity::*SetOverrideClassname_function_type )( char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetOverrideClassname"
                , SetOverrideClassname_function_type( &::C_BaseEntity::SetOverrideClassname )
                , ( bp::arg("classname") ) );
        
        }
        { //::C_BaseEntity::SetOwnerEntity
        
            typedef void ( ::C_BaseEntity::*SetOwnerEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetOwnerEntity"
                , SetOwnerEntity_function_type( &::C_BaseEntity::SetOwnerEntity )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::C_BaseEntity::SetOwnerNumber
        
            typedef void ( ::C_BaseEntity::*SetOwnerNumber_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetOwnerNumber"
                , SetOwnerNumber_function_type( &::C_BaseEntity::SetOwnerNumber )
                , ( bp::arg("owner_number") ) );
        
        }
        { //::C_BaseEntity::SetParent
        
            typedef void ( ::C_BaseEntity::*SetParent_function_type )( ::C_BaseEntity *,int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetParent"
                , SetParent_function_type( &::C_BaseEntity::SetParent )
                , ( bp::arg("pParentEntity"), bp::arg("iParentAttachment")=(int)(0) ) );
        
        }
        { //::C_BaseEntity::SetPlayerSimulated
        
            typedef void ( ::C_BaseEntity::*SetPlayerSimulated_function_type )( ::C_BasePlayer * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetPlayerSimulated"
                , SetPlayerSimulated_function_type( &::C_BaseEntity::SetPlayerSimulated )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::C_BaseEntity::SetPredictable
        
            typedef void ( ::C_BaseEntity::*SetPredictable_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetPredictable"
                , SetPredictable_function_type( &::C_BaseEntity::SetPredictable )
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseEntity::SetPredictionEligible
        
            typedef void ( ::C_BaseEntity::*SetPredictionEligible_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetPredictionEligible"
                , SetPredictionEligible_function_type( &::C_BaseEntity::SetPredictionEligible )
                , ( bp::arg("canpredict") ) );
        
        }
        { //::C_BaseEntity::SetPredictionPlayer
        
            typedef void ( *SetPredictionPlayer_function_type )( ::C_BasePlayer * );
            
            C_BaseEntity_exposer.def( 
                "SetPredictionPlayer"
                , SetPredictionPlayer_function_type( &::C_BaseEntity::SetPredictionPlayer )
                , ( bp::arg("player") ) );
        
        }
        { //::C_BaseEntity::SetPyThink
        
            typedef void ( ::C_BaseEntity::*SetThink_function_type )( ::boost::python::object,float,char const * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetThink"
                , SetThink_function_type( &::C_BaseEntity::SetPyThink )
                , ( bp::arg("think_method"), bp::arg("flNextThinkTime")=0, bp::arg("szContext")=bp::object() ) );
        
        }
        { //::C_BaseEntity::SetPyTouch
        
            typedef void ( ::C_BaseEntity::*SetTouch_function_type )( ::boost::python::object ) ;
            
            C_BaseEntity_exposer.def( 
                "SetTouch"
                , SetTouch_function_type( &::C_BaseEntity::SetPyTouch )
                , ( bp::arg("touch_method") ) );
        
        }
        { //::C_BaseEntity::SetRemovalFlag
        
            typedef void ( ::C_BaseEntity::*SetRemovalFlag_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRemovalFlag"
                , SetRemovalFlag_function_type( &::C_BaseEntity::SetRemovalFlag )
                , ( bp::arg("bRemove") ) );
        
        }
        { //::C_BaseEntity::SetRenderAlpha
        
            typedef void ( ::C_BaseEntity::*SetRenderAlpha_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderAlpha"
                , SetRenderAlpha_function_type( &::C_BaseEntity::SetRenderAlpha )
                , ( bp::arg("a") ) );
        
        }
        { //::C_BaseEntity::SetRenderColor
        
            typedef void ( ::C_BaseEntity::*SetRenderColor_function_type )( ::uint8,::uint8,::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderColor"
                , SetRenderColor_function_type( &::C_BaseEntity::SetRenderColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::C_BaseEntity::SetRenderColorB
        
            typedef void ( ::C_BaseEntity::*SetRenderColorB_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderColorB"
                , SetRenderColorB_function_type( &::C_BaseEntity::SetRenderColorB )
                , ( bp::arg("b") ) );
        
        }
        { //::C_BaseEntity::SetRenderColorG
        
            typedef void ( ::C_BaseEntity::*SetRenderColorG_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderColorG"
                , SetRenderColorG_function_type( &::C_BaseEntity::SetRenderColorG )
                , ( bp::arg("g") ) );
        
        }
        { //::C_BaseEntity::SetRenderColorR
        
            typedef void ( ::C_BaseEntity::*SetRenderColorR_function_type )( ::uint8 ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderColorR"
                , SetRenderColorR_function_type( &::C_BaseEntity::SetRenderColorR )
                , ( bp::arg("r") ) );
        
        }
        { //::C_BaseEntity::SetRenderFX
        
            typedef void ( ::C_BaseEntity::*SetRenderFX_function_type )( ::RenderFx_t,float,float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderFX"
                , SetRenderFX_function_type( &::C_BaseEntity::SetRenderFX )
                , ( bp::arg("nRenderFX"), bp::arg("flStartTime")=3.4028234663852885981170418348451692544e+38f, bp::arg("flDuration")=0.0f ) );
        
        }
        { //::C_BaseEntity::SetRenderMode
        
            typedef void ( ::C_BaseEntity::*SetRenderMode_function_type )( ::RenderMode_t,bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetRenderMode"
                , SetRenderMode_function_type( &::C_BaseEntity::SetRenderMode )
                , ( bp::arg("nRenderMode"), bp::arg("bForceUpdate")=(bool)(false) ) );
        
        }
        { //::C_BaseEntity::SetShadowUseOtherEntity
        
            typedef void ( ::C_BaseEntity::*SetShadowUseOtherEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetShadowUseOtherEntity"
                , SetShadowUseOtherEntity_function_type( &::C_BaseEntity::SetShadowUseOtherEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::C_BaseEntity::SetSimulatedEveryTick
        
            typedef void ( ::C_BaseEntity::*SetSimulatedEveryTick_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetSimulatedEveryTick"
                , SetSimulatedEveryTick_function_type( &::C_BaseEntity::SetSimulatedEveryTick )
                , ( bp::arg("sim") ) );
        
        }
        { //::C_BaseEntity::SetSimulationTime
        
            typedef void ( ::C_BaseEntity::*SetSimulationTime_function_type )( float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetSimulationTime"
                , SetSimulationTime_function_type( &::C_BaseEntity::SetSimulationTime )
                , ( bp::arg("st") ) );
        
        }
        { //::C_BaseEntity::SetSize
        
            typedef void ( ::C_BaseEntity::*SetSize_function_type )( ::Vector const &,::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetSize"
                , SetSize_function_type( &::C_BaseEntity::SetSize )
                , ( bp::arg("vecMin"), bp::arg("vecMax") ) );
        
        }
        { //::C_BaseEntity::SetSolid
        
            typedef void ( ::C_BaseEntity::*SetSolid_function_type )( ::SolidType_t ) ;
            
            C_BaseEntity_exposer.def( 
                "SetSolid"
                , SetSolid_function_type( &::C_BaseEntity::SetSolid )
                , ( bp::arg("val") ) );
        
        }
        { //::C_BaseEntity::SetSolidFlags
        
            typedef void ( ::C_BaseEntity::*SetSolidFlags_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetSolidFlags"
                , SetSolidFlags_function_type( &::C_BaseEntity::SetSolidFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::C_BaseEntity::SetTeamColor
        
            typedef void ( ::C_BaseEntity::*SetTeamColor_function_type )( ::Vector & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetTeamColor"
                , SetTeamColor_function_type( &::C_BaseEntity::SetTeamColor )
                , ( bp::arg("vTeamColor") ) );
        
        }
        { //::C_BaseEntity::SetToolHandle
        
            typedef void ( ::C_BaseEntity::*SetToolHandle_function_type )( ::HTOOLHANDLE ) ;
            
            C_BaseEntity_exposer.def( 
                "SetToolHandle"
                , SetToolHandle_function_type( &::C_BaseEntity::SetToolHandle )
                , ( bp::arg("handle") ) );
        
        }
        { //::C_BaseEntity::SetToolRecording
        
            typedef void ( ::C_BaseEntity::*SetToolRecording_function_type )( bool ) ;
            
            C_BaseEntity_exposer.def( 
                "SetToolRecording"
                , SetToolRecording_function_type( &::C_BaseEntity::SetToolRecording )
                , ( bp::arg("recording") ) );
        
        }
        { //::C_BaseEntity::SetViewOffset
        
            typedef void ( ::C_BaseEntity::*SetViewOffset_function_type )( ::Vector const & ) ;
            
            C_BaseEntity_exposer.def( 
                "SetViewOffset"
                , SetViewOffset_function_type( &::C_BaseEntity::SetViewOffset )
                , ( bp::arg("v") ) );
        
        }
        { //::C_BaseEntity::SetWaterLevel
        
            typedef void ( ::C_BaseEntity::*SetWaterLevel_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetWaterLevel"
                , SetWaterLevel_function_type( &::C_BaseEntity::SetWaterLevel )
                , ( bp::arg("nLevel") ) );
        
        }
        { //::C_BaseEntity::SetWaterType
        
            typedef void ( ::C_BaseEntity::*SetWaterType_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "SetWaterType"
                , SetWaterType_function_type( &::C_BaseEntity::SetWaterType )
                , ( bp::arg("nType") ) );
        
        }
        { //::C_BaseEntity::SetupBones
        
            typedef bool ( ::C_BaseEntity::*SetupBones_function_type )( ::matrix3x4a_t *,int,int,float ) ;
            
            C_BaseEntity_exposer.def( 
                "SetupBones"
                , SetupBones_function_type( &::C_BaseEntity::SetupBones )
                , ( bp::arg("pBoneToWorldOut"), bp::arg("nMaxBones"), bp::arg("boneMask"), bp::arg("currentTime") ) );
        
        }
        { //::C_BaseEntity::SetupWeights
        
            typedef void ( ::C_BaseEntity::*SetupWeights_function_type )( ::matrix3x4_t const *,int,float *,float * ) ;
            
            C_BaseEntity_exposer.def( 
                "SetupWeights"
                , SetupWeights_function_type( &::C_BaseEntity::SetupWeights )
                , ( bp::arg("pBoneToWorld"), bp::arg("nFlexWeightCount"), bp::arg("pFlexWeights"), bp::arg("pFlexDelayedWeights") ) );
        
        }
        { //::C_BaseEntity::ShadowCastType
        
            typedef ::ShadowType_t ( ::C_BaseEntity::*ShadowCastType_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShadowCastType"
                , ShadowCastType_function_type( &::C_BaseEntity::ShadowCastType ) );
        
        }
        { //::C_BaseEntity::ShouldCollide
        
            typedef bool ( ::C_BaseEntity::*ShouldCollide_function_type )( int,int ) const;
            
            C_BaseEntity_exposer.def( 
                "ShouldCollide"
                , ShouldCollide_function_type( &::C_BaseEntity::ShouldCollide )
                , ( bp::arg("collisionGroup"), bp::arg("contentsMask") ) );
        
        }
        { //::C_BaseEntity::ShouldDraw
        
            typedef bool ( ::C_BaseEntity::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_BaseEntity::ShouldDraw)
                , default_ShouldDraw_function_type(&C_BaseEntity_wrapper::default_ShouldDraw) );
        
        }
        { //::C_BaseEntity::ShouldDrawForSplitScreenUser
        
            typedef bool ( ::C_BaseEntity::*ShouldDrawForSplitScreenUser_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldDrawForSplitScreenUser"
                , ShouldDrawForSplitScreenUser_function_type( &::C_BaseEntity::ShouldDrawForSplitScreenUser )
                , ( bp::arg("nSlot") ) );
        
        }
        { //::C_BaseEntity::ShouldDrawUnderwaterBulletBubbles
        
            typedef bool ( ::C_BaseEntity::*ShouldDrawUnderwaterBulletBubbles_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldDrawUnderwaterBulletBubbles"
                , ShouldDrawUnderwaterBulletBubbles_function_type( &::C_BaseEntity::ShouldDrawUnderwaterBulletBubbles ) );
        
        }
        { //::C_BaseEntity::ShouldDrawWaterImpacts
        
            typedef bool ( ::C_BaseEntity::*ShouldDrawWaterImpacts_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldDrawWaterImpacts"
                , ShouldDrawWaterImpacts_function_type( &::C_BaseEntity::ShouldDrawWaterImpacts ) );
        
        }
        { //::C_BaseEntity::ShouldPredict
        
            typedef bool ( ::C_BaseEntity::*ShouldPredict_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldPredict"
                , ShouldPredict_function_type( &::C_BaseEntity::ShouldPredict ) );
        
        }
        { //::C_BaseEntity::ShouldReceiveProjectedTextures
        
            typedef bool ( ::C_BaseEntity::*ShouldReceiveProjectedTextures_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldReceiveProjectedTextures"
                , ShouldReceiveProjectedTextures_function_type( &::C_BaseEntity::ShouldReceiveProjectedTextures )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BaseEntity::ShouldRecordInTools
        
            typedef bool ( ::C_BaseEntity::*ShouldRecordInTools_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "ShouldRecordInTools"
                , ShouldRecordInTools_function_type( &::C_BaseEntity::ShouldRecordInTools ) );
        
        }
        { //::C_BaseEntity::ShouldRegenerateOriginFromCellBits
        
            typedef bool ( ::C_BaseEntity::*ShouldRegenerateOriginFromCellBits_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "ShouldRegenerateOriginFromCellBits"
                , ShouldRegenerateOriginFromCellBits_function_type( &::C_BaseEntity::ShouldRegenerateOriginFromCellBits ) );
        
        }
        { //::C_BaseEntity::ShouldSavePhysics
        
            typedef bool ( ::C_BaseEntity::*ShouldSavePhysics_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShouldSavePhysics"
                , ShouldSavePhysics_function_type( &::C_BaseEntity::ShouldSavePhysics ) );
        
        }
        { //::C_BaseEntity::ShutdownPredictable
        
            typedef void ( ::C_BaseEntity::*ShutdownPredictable_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ShutdownPredictable"
                , ShutdownPredictable_function_type( &::C_BaseEntity::ShutdownPredictable ) );
        
        }
        { //::C_BaseEntity::Simulate
        
            typedef bool ( ::C_BaseEntity::*Simulate_function_type )(  ) ;
            typedef bool ( C_BaseEntity_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_BaseEntity::Simulate)
                , default_Simulate_function_type(&C_BaseEntity_wrapper::default_Simulate) );
        
        }
        { //::C_BaseEntity::SimulateEntities
        
            typedef void ( *SimulateEntities_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "SimulateEntities"
                , SimulateEntities_function_type( &::C_BaseEntity::SimulateEntities ) );
        
        }
        { //::C_BaseEntity::SnatchModelInstance
        
            typedef bool ( ::C_BaseEntity::*SnatchModelInstance_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "SnatchModelInstance"
                , SnatchModelInstance_function_type( &::C_BaseEntity::SnatchModelInstance )
                , ( bp::arg("pToEntity") ) );
        
        }
        { //::C_BaseEntity::Spawn
        
            typedef void ( ::C_BaseEntity::*Spawn_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_BaseEntity::Spawn)
                , default_Spawn_function_type(&C_BaseEntity_wrapper::default_Spawn) );
        
        }
        { //::C_BaseEntity::SpawnClientEntity
        
            typedef void ( ::C_BaseEntity::*SpawnClientEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "SpawnClientEntity"
                , SpawnClientEntity_function_type( &::C_BaseEntity::SpawnClientEntity ) );
        
        }
        { //::C_BaseEntity::SpawnTime
        
            typedef float ( ::C_BaseEntity::*SpawnTime_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "SpawnTime"
                , SpawnTime_function_type( &::C_BaseEntity::SpawnTime ) );
        
        }
        { //::C_BaseEntity::StartGroundContact
        
            typedef void ( ::C_BaseEntity::*StartGroundContact_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "StartGroundContact"
                , StartGroundContact_function_type( &::C_BaseEntity::StartGroundContact )
                , ( bp::arg("ground") ) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BaseEntity_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_BaseEntity_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::StopFollowingEntity
        
            typedef void ( ::C_BaseEntity::*StopFollowingEntity_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "StopFollowingEntity"
                , StopFollowingEntity_function_type( &::C_BaseEntity::StopFollowingEntity ) );
        
        }
        { //::C_BaseEntity::TakeDamage
        
            typedef void ( ::C_BaseEntity::*TakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            C_BaseEntity_exposer.def( 
                "TakeDamage"
                , TakeDamage_function_type( &::C_BaseEntity::TakeDamage )
                , ( bp::arg("info") ) );
        
        }
        { //::C_BaseEntity::Teleported
        
            typedef bool ( ::C_BaseEntity::*Teleported_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Teleported"
                , Teleported_function_type( &::C_BaseEntity::Teleported ) );
        
        }
        { //::C_BaseEntity::Term
        
            typedef void ( ::C_BaseEntity::*Term_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Term"
                , Term_function_type( &::C_BaseEntity::Term ) );
        
        }
        { //::C_BaseEntity::TextureAnimationWrapped
        
            typedef void ( ::C_BaseEntity::*TextureAnimationWrapped_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "TextureAnimationWrapped"
                , TextureAnimationWrapped_function_type( &::C_BaseEntity::TextureAnimationWrapped ) );
        
        }
        { //::C_BaseEntity::Think
        
            typedef void ( ::C_BaseEntity::*Think_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "Think"
                , Think_function_type( &::C_BaseEntity::Think ) );
        
        }
        { //::C_BaseEntity::ToggleBBoxVisualization
        
            typedef void ( ::C_BaseEntity::*ToggleBBoxVisualization_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "ToggleBBoxVisualization"
                , ToggleBBoxVisualization_function_type( &::C_BaseEntity::ToggleBBoxVisualization )
                , ( bp::arg("fVisFlags") ) );
        
        }
        { //::C_BaseEntity::ToggleFlag
        
            typedef void ( ::C_BaseEntity::*ToggleFlag_function_type )( int ) ;
            
            C_BaseEntity_exposer.def( 
                "ToggleFlag"
                , ToggleFlag_function_type( &::C_BaseEntity::ToggleFlag )
                , ( bp::arg("flagToToggle") ) );
        
        }
        { //::C_BaseEntity::Touch
        
            typedef void ( ::C_BaseEntity::*Touch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseEntity_exposer.def( 
                "Touch"
                , Touch_function_type( &::C_BaseEntity::Touch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::TraceAttack
        
            typedef void ( ::C_BaseEntity::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            C_BaseEntity_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &::C_BaseEntity::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::C_BaseEntity::TraceBleed
        
            typedef void ( ::C_BaseEntity::*TraceBleed_function_type )( float,::Vector const &,::trace_t *,int ) ;
            
            C_BaseEntity_exposer.def( 
                "TraceBleed"
                , TraceBleed_function_type( &::C_BaseEntity::TraceBleed )
                , ( bp::arg("flDamage"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("bitsDamageType") ) );
        
        }
        { //::C_BaseEntity::UnsetPlayerSimulated
        
            typedef void ( ::C_BaseEntity::*UnsetPlayerSimulated_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "UnsetPlayerSimulated"
                , UnsetPlayerSimulated_function_type( &::C_BaseEntity::UnsetPlayerSimulated ) );
        
        }
        { //::C_BaseEntity::Up
        
            typedef ::Vector ( ::C_BaseEntity::*Up_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "Up"
                , Up_function_type( &::C_BaseEntity::Up ) );
        
        }
        { //::C_BaseEntity::UpdateOnRemove
        
            typedef void ( ::C_BaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_BaseEntity_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_BaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_BaseEntity_wrapper::default_UpdateOnRemove) );
        
        }
        { //::C_BaseEntity::UpdatePartitionListEntry
        
            typedef void ( ::C_BaseEntity::*UpdatePartitionListEntry_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "UpdatePartitionListEntry"
                , UpdatePartitionListEntry_function_type( &::C_BaseEntity::UpdatePartitionListEntry ) );
        
        }
        { //::C_BaseEntity::UpdateVisibility
        
            typedef void ( ::C_BaseEntity::*UpdateVisibility_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "UpdateVisibility"
                , UpdateVisibility_function_type( &::C_BaseEntity::UpdateVisibility ) );
        
        }
        { //::C_BaseEntity::UpdateVisibilityAllEntities
        
            typedef void ( *UpdateVisibilityAllEntities_function_type )(  );
            
            C_BaseEntity_exposer.def( 
                "UpdateVisibilityAllEntities"
                , UpdateVisibilityAllEntities_function_type( &::C_BaseEntity::UpdateVisibilityAllEntities ) );
        
        }
        { //::C_BaseEntity::UsesFlexDelayedWeights
        
            typedef bool ( ::C_BaseEntity::*UsesFlexDelayedWeights_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "UsesFlexDelayedWeights"
                , UsesFlexDelayedWeights_function_type( &::C_BaseEntity::UsesFlexDelayedWeights ) );
        
        }
        { //::C_BaseEntity::VPhysicsDestroyObject
        
            typedef void ( ::C_BaseEntity::*VPhysicsDestroyObject_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsDestroyObject"
                , VPhysicsDestroyObject_function_type( &::C_BaseEntity::VPhysicsDestroyObject ) );
        
        }
        { //::C_BaseEntity::VPhysicsIsFlesh
        
            typedef bool ( ::C_BaseEntity::*VPhysicsIsFlesh_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsIsFlesh"
                , VPhysicsIsFlesh_function_type( &::C_BaseEntity::VPhysicsIsFlesh ) );
        
        }
        { //::C_BaseEntity::VPhysicsUpdate
        
            typedef void ( ::C_BaseEntity::*VPhysicsUpdate_function_type )( ::IPhysicsObject * ) ;
            
            C_BaseEntity_exposer.def( 
                "VPhysicsUpdate"
                , VPhysicsUpdate_function_type( &::C_BaseEntity::VPhysicsUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::C_BaseEntity::ValidateModelIndex
        
            typedef void ( ::C_BaseEntity::*ValidateModelIndex_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "ValidateModelIndex"
                , ValidateModelIndex_function_type( &::C_BaseEntity::ValidateModelIndex ) );
        
        }
        { //::C_BaseEntity::WakeRestingObjects
        
            typedef void ( ::C_BaseEntity::*WakeRestingObjects_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "WakeRestingObjects"
                , WakeRestingObjects_function_type( &::C_BaseEntity::WakeRestingObjects ) );
        
        }
        { //::C_BaseEntity::WillSimulateGamePhysics
        
            typedef bool ( ::C_BaseEntity::*WillSimulateGamePhysics_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "WillSimulateGamePhysics"
                , WillSimulateGamePhysics_function_type( &::C_BaseEntity::WillSimulateGamePhysics ) );
        
        }
        { //::C_BaseEntity::WillThink
        
            typedef bool ( ::C_BaseEntity::*WillThink_function_type )(  ) ;
            
            C_BaseEntity_exposer.def( 
                "WillThink"
                , WillThink_function_type( &::C_BaseEntity::WillThink ) );
        
        }
        { //::C_BaseEntity::WorldAlignMaxs
        
            typedef ::Vector const & ( ::C_BaseEntity::*WorldAlignMaxs_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "WorldAlignMaxs"
                , WorldAlignMaxs_function_type( &::C_BaseEntity::WorldAlignMaxs )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::WorldAlignMins
        
            typedef ::Vector const & ( ::C_BaseEntity::*WorldAlignMins_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "WorldAlignMins"
                , WorldAlignMins_function_type( &::C_BaseEntity::WorldAlignMins )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::WorldAlignSize
        
            typedef ::Vector const & ( ::C_BaseEntity::*WorldAlignSize_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "WorldAlignSize"
                , WorldAlignSize_function_type( &::C_BaseEntity::WorldAlignSize )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::WorldSpaceCenter
        
            typedef ::Vector const & ( ::C_BaseEntity::*WorldSpaceCenter_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "WorldSpaceCenter"
                , WorldSpaceCenter_function_type( &::C_BaseEntity::WorldSpaceCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::WorldToEntitySpace
        
            typedef void ( ::C_BaseEntity::*WorldToEntitySpace_function_type )( ::Vector const &,::Vector * ) const;
            
            C_BaseEntity_exposer.def( 
                "WorldToEntitySpace"
                , WorldToEntitySpace_function_type( &::C_BaseEntity::WorldToEntitySpace )
                , ( bp::arg("in"), bp::arg("pOut") ) );
        
        }
        { //::C_BaseEntity::entindex
        
            typedef int ( ::C_BaseEntity::*entindex_function_type )(  ) const;
            
            C_BaseEntity_exposer.def( 
                "entindex"
                , entindex_function_type( &::C_BaseEntity::entindex ) );
        
        }
        C_BaseEntity_exposer.def_readwrite( "index", &C_BaseEntity::index );
        C_BaseEntity_exposer.def_readwrite( "m_EntClientFlags", &C_BaseEntity::m_EntClientFlags );
        C_BaseEntity_exposer.def_readwrite( "m_VisibilityBits", &C_BaseEntity::m_VisibilityBits );
        C_BaseEntity_exposer.def_readwrite( "m_bAllowPrecache", C_BaseEntity::m_bAllowPrecache );
        C_BaseEntity_exposer.def_readwrite( "m_bClientSideRagdoll", &C_BaseEntity::m_bClientSideRagdoll );
        C_BaseEntity_exposer.def_readwrite( "m_bEnableRenderingClipPlane", &C_BaseEntity::m_bEnableRenderingClipPlane );
        C_BaseEntity_exposer.def_readwrite( "m_bReadyToDraw", &C_BaseEntity::m_bReadyToDraw );
        pyplusplus::containers::static_sized::register_array_1< float, 4 >( "__array_1_float_4" );
        { //C_BaseEntity::m_fRenderingClipPlane [variable], type=float[4]
        
            typedef pyplusplus::containers::static_sized::array_1_t< float, 4> ( *array_wrapper_creator )( ::C_BaseEntity & );
            
            C_BaseEntity_exposer.add_property( "m_fRenderingClipPlane"
                , bp::make_function( array_wrapper_creator(&C_BaseEntity_wrapper::pyplusplus_m_fRenderingClipPlane_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        C_BaseEntity_exposer.def_readwrite( "animtime", &C_BaseEntity::m_flAnimTime );
        C_BaseEntity_exposer.def_readwrite( "m_flCreateTime", &C_BaseEntity::m_flCreateTime );
        C_BaseEntity_exposer.def_readwrite( "oldanimtime", &C_BaseEntity::m_flOldAnimTime );
        C_BaseEntity_exposer.def_readwrite( "oldsimulationtime", &C_BaseEntity::m_flOldSimulationTime );
        C_BaseEntity_exposer.def_readwrite( "simulationtime", &C_BaseEntity::m_flSimulationTime );
        C_BaseEntity_exposer.def_readwrite( "speed", &C_BaseEntity::m_flSpeed );
        C_BaseEntity_exposer.add_property( "m_hScriptInstance"
                    , bp::make_function( (::HSCRIPT (*)( ::C_BaseEntity const & ))(&C_BaseEntity_wrapper::get_m_hScriptInstance), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::C_BaseEntity &,::HSCRIPT ))(&C_BaseEntity_wrapper::set_m_hScriptInstance), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        C_BaseEntity_exposer.def_readwrite( "classname", &C_BaseEntity::m_iClassname );
        C_BaseEntity_exposer.def_readwrite( "health", &C_BaseEntity::m_iHealth );
        C_BaseEntity_exposer.def_readwrite( "m_iszScriptId", &C_BaseEntity::m_iszScriptId );
        C_BaseEntity_exposer.def_readwrite( "lastthinktick", &C_BaseEntity::m_nLastThinkTick );
        C_BaseEntity_exposer.def_readwrite( "nextthinktick", &C_BaseEntity::m_nNextThinkTick );
        C_BaseEntity_exposer.def_readwrite( "m_pyHandle", &C_BaseEntity::m_pyHandle );
        C_BaseEntity_exposer.def_readwrite( "sm_bAccurateTriggerBboxChecks", C_BaseEntity::sm_bAccurateTriggerBboxChecks );
        C_BaseEntity_exposer.def_readwrite( "touchStamp", &C_BaseEntity::touchStamp );
        C_BaseEntity_exposer.staticmethod( "CalcAimEntPositions" );
        C_BaseEntity_exposer.staticmethod( "CheckCLInterpChanged" );
        C_BaseEntity_exposer.staticmethod( "CreatePredictedEntityByName" );
        C_BaseEntity_exposer.staticmethod( "EmitAmbientSound" );
        C_BaseEntity_exposer.staticmethod( "EmitCloseCaption" );
        C_BaseEntity_exposer.staticmethod( "EnableAbsRecomputations" );
        C_BaseEntity_exposer.staticmethod( "GetParametersForSound" );
        C_BaseEntity_exposer.staticmethod( "GetPredictionPlayer" );
        C_BaseEntity_exposer.staticmethod( "GetPredictionRandomSeed" );
        C_BaseEntity_exposer.staticmethod( "GetPyNetworkType" );
        C_BaseEntity_exposer.staticmethod( "GetSoundDuration" );
        C_BaseEntity_exposer.staticmethod( "GetTouchTrace" );
        C_BaseEntity_exposer.staticmethod( "Instance" );
        C_BaseEntity_exposer.staticmethod( "IsAbsQueriesValid" );
        C_BaseEntity_exposer.staticmethod( "IsAbsRecomputationsEnabled" );
        C_BaseEntity_exposer.staticmethod( "IsInterpolationEnabled" );
        C_BaseEntity_exposer.staticmethod( "IsPrecacheAllowed" );
        C_BaseEntity_exposer.staticmethod( "IsSimulatingOnAlternateTicks" );
        C_BaseEntity_exposer.staticmethod( "LookupSoundLevel" );
        C_BaseEntity_exposer.staticmethod( "MarkAimEntsDirty" );
        C_BaseEntity_exposer.staticmethod( "PhysicsNotifyOtherOfGroundRemoval" );
        C_BaseEntity_exposer.staticmethod( "PhysicsNotifyOtherOfUntouch" );
        C_BaseEntity_exposer.staticmethod( "PhysicsRemoveGroundList" );
        C_BaseEntity_exposer.staticmethod( "PhysicsRemoveTouchedList" );
        C_BaseEntity_exposer.staticmethod( "PopEnableAbsRecomputations" );
        C_BaseEntity_exposer.staticmethod( "PreRenderEntities" );
        C_BaseEntity_exposer.staticmethod( "PrecacheModel" );
        C_BaseEntity_exposer.staticmethod( "PrecacheScriptSound" );
        C_BaseEntity_exposer.staticmethod( "PrecacheSound" );
        C_BaseEntity_exposer.staticmethod( "PrefetchScriptSound" );
        C_BaseEntity_exposer.staticmethod( "PrefetchSound" );
        C_BaseEntity_exposer.staticmethod( "PurgeRemovedEntities" );
        C_BaseEntity_exposer.staticmethod( "PushEnableAbsRecomputations" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellBits" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellOrigin" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellOriginXY" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellOriginZ" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellX" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellY" );
        C_BaseEntity_exposer.staticmethod( "RecvProxy_CellZ" );
        C_BaseEntity_exposer.staticmethod( "SetAbsQueriesValid" );
        C_BaseEntity_exposer.staticmethod( "SetAllowPrecache" );
        C_BaseEntity_exposer.staticmethod( "SetPredictionPlayer" );
        C_BaseEntity_exposer.staticmethod( "SimulateEntities" );
        C_BaseEntity_exposer.staticmethod( "UpdateVisibilityAllEntities" );
        { //property "lifestate"[fget=::C_BaseEntity::PyGetLifeState, fset=::C_BaseEntity::PySetLifeState]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "lifestate"
                , fget( &::C_BaseEntity::PyGetLifeState )
                , fset( &::C_BaseEntity::PySetLifeState ) );
        
        }
        { //property "takedamage"[fget=::C_BaseEntity::PyGetTakeDamage, fset=::C_BaseEntity::PySetTakeDamage]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "takedamage"
                , fget( &::C_BaseEntity::PyGetTakeDamage )
                , fset( &::C_BaseEntity::PySetTakeDamage ) );
        
        }
        { //property "propfloat1"[fget=::C_BaseEntity::PyGetPropFloat1, fset=::C_BaseEntity::PySetPropFloat1]
        
            typedef float ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( float ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propfloat1"
                , fget( &::C_BaseEntity::PyGetPropFloat1 )
                , fset( &::C_BaseEntity::PySetPropFloat1 ) );
        
        }
        { //property "propfloat2"[fget=::C_BaseEntity::PyGetPropFloat2, fset=::C_BaseEntity::PySetPropFloat2]
        
            typedef float ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( float ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propfloat2"
                , fget( &::C_BaseEntity::PyGetPropFloat2 )
                , fset( &::C_BaseEntity::PySetPropFloat2 ) );
        
        }
        { //property "propfloat3"[fget=::C_BaseEntity::PyGetPropFloat3, fset=::C_BaseEntity::PySetPropFloat3]
        
            typedef float ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( float ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propfloat3"
                , fget( &::C_BaseEntity::PyGetPropFloat3 )
                , fset( &::C_BaseEntity::PySetPropFloat3 ) );
        
        }
        { //property "propfloat4"[fget=::C_BaseEntity::PyGetPropFloat4, fset=::C_BaseEntity::PySetPropFloat4]
        
            typedef float ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( float ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propfloat4"
                , fget( &::C_BaseEntity::PyGetPropFloat4 )
                , fset( &::C_BaseEntity::PySetPropFloat4 ) );
        
        }
        { //property "propint1"[fget=::C_BaseEntity::PyGetPropInt1, fset=::C_BaseEntity::PySetPropInt1]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propint1"
                , fget( &::C_BaseEntity::PyGetPropInt1 )
                , fset( &::C_BaseEntity::PySetPropInt1 ) );
        
        }
        { //property "propint2"[fget=::C_BaseEntity::PyGetPropInt2, fset=::C_BaseEntity::PySetPropInt2]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propint2"
                , fget( &::C_BaseEntity::PyGetPropInt2 )
                , fset( &::C_BaseEntity::PySetPropInt2 ) );
        
        }
        { //property "propint3"[fget=::C_BaseEntity::PyGetPropInt3, fset=::C_BaseEntity::PySetPropInt3]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propint3"
                , fget( &::C_BaseEntity::PyGetPropInt3 )
                , fset( &::C_BaseEntity::PySetPropInt3 ) );
        
        }
        { //property "propint4"[fget=::C_BaseEntity::PyGetPropInt4, fset=::C_BaseEntity::PySetPropInt4]
        
            typedef int ( ::C_BaseEntity::*fget )(  ) ;
            typedef void ( ::C_BaseEntity::*fset )( int ) ;
            
            C_BaseEntity_exposer.add_property( 
                "propint4"
                , fget( &::C_BaseEntity::PyGetPropInt4 )
                , fset( &::C_BaseEntity::PySetPropInt4 ) );
        
        }
        { //property "viewdistance"[fget=::C_BaseEntity::GetViewDistance]
        
            typedef float ( ::C_BaseEntity::*fget )(  ) ;
            
            C_BaseEntity_exposer.add_property( 
                "viewdistance"
                , fget( &::C_BaseEntity::GetViewDistance ) );
        
        }
        { //::C_BaseEntity::TestCollision
            
                typedef bool ( ::C_BaseEntity::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( C_BaseEntity_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                C_BaseEntity_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::C_BaseEntity::TestCollision)
                    , default_TestCollision_function_type(&C_BaseEntity_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

