// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "soundinfo.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iclientvehicle.h"
#include "steam/steamclientpublic.h"
#include "view_shared.h"
#include "c_playerresource.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "beam_shared.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "c_wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_Beam_pypp.hpp"

namespace bp = boost::python;

struct C_Beam_wrapper : C_Beam, bp::wrapper< C_Beam > {

    C_Beam_wrapper( )
    : C_Beam( )
      , bp::wrapper< C_Beam >(){
        // null constructor
    
    }

    virtual void OnDataChanged( ::DataUpdateType_t updateType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnDataChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnDataChanged( updateType ) of Class: C_Beam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( updateType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_Beam::OnDataChanged( updateType );
            }
        else
            this->C_Beam::OnDataChanged( updateType );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t updateType ) {
        C_Beam::OnDataChanged( updateType );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_Beam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_Beam::Precache(  );
            }
        else
            this->C_Beam::Precache(  );
    }
    
    void default_Precache(  ) {
        C_Beam::Precache( );
    }

    virtual bool Simulate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Simulate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Simulate(  ) of Class: C_Beam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_Beam::Simulate(  );
            }
        else
            return this->C_Beam::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_Beam::Simulate( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_Beam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_Beam::Spawn(  );
            }
        else
            this->C_Beam::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_Beam::Spawn( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetCollideType(  );
            }
        else
            return this->C_BaseEntity::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseEntity::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnRestore(  );
            }
        else
            this->C_BaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseEntity::OnRestore( );
    }

    virtual void PyNotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyNotifyShouldTransmit( state ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyNotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::PyNotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::PyNotifyShouldTransmit( state );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::ShouldDraw(  );
            }
        else
            return this->C_BaseEntity::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseEntity::ShouldDraw( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
#if defined(_WIN32) // POSIX: TODO
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_Beam::GetClientClass();
#endif // _WIN32
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
        if( pClientClass )
            return pClientClass;
        return C_Beam::GetClientClass();
    }

    int m_lifeState_Get() { return m_lifeState; }

    void m_lifeState_Set( int val ) { m_lifeState = val; }

    int m_takedamage_Get() { return m_takedamage; }

    void m_takedamage_Set( int val ) { m_takedamage = val; }

};

void register_C_Beam_class(){

    { //::C_Beam
        typedef bp::class_< C_Beam_wrapper, bp::bases< C_BaseEntity >, boost::noncopyable > C_Beam_exposer_t;
        C_Beam_exposer_t C_Beam_exposer = C_Beam_exposer_t( "C_Beam", bp::init< >() );
        bp::scope C_Beam_scope( C_Beam_exposer );
        bp::enum_< C_Beam::BeamClipStyle_t>("BeamClipStyle_t")
            .value("kNOCLIP", C_Beam::kNOCLIP)
            .value("kGEOCLIP", C_Beam::kGEOCLIP)
            .value("kMODELCLIP", C_Beam::kMODELCLIP)
            .value("kBEAMCLIPSTYLE_NUMBITS", C_Beam::kBEAMCLIPSTYLE_NUMBITS)
            .export_values()
            ;
        { //::C_Beam::BeamCreate
        
            typedef ::C_Beam * ( *BeamCreate_function_type )( char const *,float );
            
            C_Beam_exposer.def( 
                "BeamCreate"
                , BeamCreate_function_type( &::C_Beam::BeamCreate )
                , ( bp::arg("pSpriteName"), bp::arg("width") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_Beam::BeamCreatePredictable
        
            typedef ::C_Beam * ( *BeamCreatePredictable_function_type )( char const *,int,bool,char const *,float,::C_BasePlayer * );
            
            C_Beam_exposer.def( 
                "BeamCreatePredictable"
                , BeamCreatePredictable_function_type( &::C_Beam::BeamCreatePredictable )
                , ( bp::arg("module"), bp::arg("line"), bp::arg("persist"), bp::arg("pSpriteName"), bp::arg("width"), bp::arg("pOwner") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_Beam::BeamDamage
        
            typedef void ( ::C_Beam::*BeamDamage_function_type )( ::trace_t * ) ;
            
            C_Beam_exposer.def( 
                "BeamDamage"
                , BeamDamage_function_type( &::C_Beam::BeamDamage )
                , ( bp::arg("ptr") ) );
        
        }
        { //::C_Beam::BeamDamageInstant
        
            typedef void ( ::C_Beam::*BeamDamageInstant_function_type )( ::trace_t *,float ) ;
            
            C_Beam_exposer.def( 
                "BeamDamageInstant"
                , BeamDamageInstant_function_type( &::C_Beam::BeamDamageInstant )
                , ( bp::arg("ptr"), bp::arg("damage") ) );
        
        }
        { //::C_Beam::BeamInit
        
            typedef void ( ::C_Beam::*BeamInit_function_type )( char const *,float ) ;
            
            C_Beam_exposer.def( 
                "BeamInit"
                , BeamInit_function_type( &::C_Beam::BeamInit )
                , ( bp::arg("pSpriteName"), bp::arg("width") ) );
        
        }
        { //::C_Beam::ComputeTranslucencyType
        
            typedef ::RenderableTranslucencyType_t ( ::C_Beam::*ComputeTranslucencyType_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "ComputeTranslucencyType"
                , ComputeTranslucencyType_function_type( &::C_Beam::ComputeTranslucencyType ) );
        
        }
        { //::C_Beam::DoSparks
        
            typedef void ( ::C_Beam::*DoSparks_function_type )( ::Vector const &,::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "DoSparks"
                , DoSparks_function_type( &::C_Beam::DoSparks )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::C_Beam::DrawDebugTextOverlays
        
            typedef int ( ::C_Beam::*DrawDebugTextOverlays_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type( &::C_Beam::DrawDebugTextOverlays ) );
        
        }
        { //::C_Beam::DrawModel
        
            typedef int ( ::C_Beam::*DrawModel_function_type )( int,::RenderableInstance_t const & ) ;
            
            C_Beam_exposer.def( 
                "DrawModel"
                , DrawModel_function_type( &::C_Beam::DrawModel )
                , ( bp::arg("flags"), bp::arg("instance") ) );
        
        }
        { //::C_Beam::EntsInit
        
            typedef void ( ::C_Beam::*EntsInit_function_type )( ::C_BaseEntity *,::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "EntsInit"
                , EntsInit_function_type( &::C_Beam::EntsInit )
                , ( bp::arg("pStartEntity"), bp::arg("pEndEntity") ) );
        
        }
        { //::C_Beam::GetAbsEndPos
        
            typedef ::Vector const & ( ::C_Beam::*GetAbsEndPos_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetAbsEndPos"
                , GetAbsEndPos_function_type( &::C_Beam::GetAbsEndPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_Beam::GetAbsStartPos
        
            typedef ::Vector const & ( ::C_Beam::*GetAbsStartPos_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetAbsStartPos"
                , GetAbsStartPos_function_type( &::C_Beam::GetAbsStartPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_Beam::GetBeamFlags
        
            typedef int ( ::C_Beam::*GetBeamFlags_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetBeamFlags"
                , GetBeamFlags_function_type( &::C_Beam::GetBeamFlags ) );
        
        }
        { //::C_Beam::GetBrightness
        
            typedef int ( ::C_Beam::*GetBrightness_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetBrightness"
                , GetBrightness_function_type( &::C_Beam::GetBrightness ) );
        
        }
        { //::C_Beam::GetClipStyle
        
            typedef ::C_Beam::BeamClipStyle_t ( ::C_Beam::*GetClipStyle_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetClipStyle"
                , GetClipStyle_function_type( &::C_Beam::GetClipStyle ) );
        
        }
        { //::C_Beam::GetDecalName
        
            typedef char const * ( ::C_Beam::*GetDecalName_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "GetDecalName"
                , GetDecalName_function_type( &::C_Beam::GetDecalName ) );
        
        }
        { //::C_Beam::GetEndAttachment
        
            typedef int ( ::C_Beam::*GetEndAttachment_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetEndAttachment"
                , GetEndAttachment_function_type( &::C_Beam::GetEndAttachment ) );
        
        }
        { //::C_Beam::GetEndEntity
        
            typedef int ( ::C_Beam::*GetEndEntity_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetEndEntity"
                , GetEndEntity_function_type( &::C_Beam::GetEndEntity ) );
        
        }
        { //::C_Beam::GetEndEntityPtr
        
            typedef ::C_BaseEntity * ( ::C_Beam::*GetEndEntityPtr_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetEndEntityPtr"
                , GetEndEntityPtr_function_type( &::C_Beam::GetEndEntityPtr )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_Beam::GetEndWidth
        
            typedef float ( ::C_Beam::*GetEndWidth_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetEndWidth"
                , GetEndWidth_function_type( &::C_Beam::GetEndWidth ) );
        
        }
        { //::C_Beam::GetFadeLength
        
            typedef float ( ::C_Beam::*GetFadeLength_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetFadeLength"
                , GetFadeLength_function_type( &::C_Beam::GetFadeLength ) );
        
        }
        { //::C_Beam::GetFrame
        
            typedef float ( ::C_Beam::*GetFrame_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetFrame"
                , GetFrame_function_type( &::C_Beam::GetFrame ) );
        
        }
        { //::C_Beam::GetHDRColorScale
        
            typedef float ( ::C_Beam::*GetHDRColorScale_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetHDRColorScale"
                , GetHDRColorScale_function_type( &::C_Beam::GetHDRColorScale ) );
        
        }
        { //::C_Beam::GetNoise
        
            typedef float ( ::C_Beam::*GetNoise_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetNoise"
                , GetNoise_function_type( &::C_Beam::GetNoise ) );
        
        }
        { //::C_Beam::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_Beam_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_Beam::GetPyNetworkType ) );
        
        }
        { //::C_Beam::GetScrollRate
        
            typedef float ( ::C_Beam::*GetScrollRate_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetScrollRate"
                , GetScrollRate_function_type( &::C_Beam::GetScrollRate ) );
        
        }
        { //::C_Beam::GetStartAttachment
        
            typedef int ( ::C_Beam::*GetStartAttachment_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetStartAttachment"
                , GetStartAttachment_function_type( &::C_Beam::GetStartAttachment ) );
        
        }
        { //::C_Beam::GetStartEntity
        
            typedef int ( ::C_Beam::*GetStartEntity_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetStartEntity"
                , GetStartEntity_function_type( &::C_Beam::GetStartEntity ) );
        
        }
        { //::C_Beam::GetStartEntityPtr
        
            typedef ::C_BaseEntity * ( ::C_Beam::*GetStartEntityPtr_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetStartEntityPtr"
                , GetStartEntityPtr_function_type( &::C_Beam::GetStartEntityPtr )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_Beam::GetTexture
        
            typedef int ( ::C_Beam::*GetTexture_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "GetTexture"
                , GetTexture_function_type( &::C_Beam::GetTexture ) );
        
        }
        { //::C_Beam::GetType
        
            typedef int ( ::C_Beam::*GetType_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetType"
                , GetType_function_type( &::C_Beam::GetType ) );
        
        }
        { //::C_Beam::GetWidth
        
            typedef float ( ::C_Beam::*GetWidth_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "GetWidth"
                , GetWidth_function_type( &::C_Beam::GetWidth ) );
        
        }
        { //::C_Beam::HoseInit
        
            typedef void ( ::C_Beam::*HoseInit_function_type )( ::Vector const &,::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "HoseInit"
                , HoseInit_function_type( &::C_Beam::HoseInit )
                , ( bp::arg("start"), bp::arg("direction") ) );
        
        }
        { //::C_Beam::LaserInit
        
            typedef void ( ::C_Beam::*LaserInit_function_type )( ::C_BaseEntity *,::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "LaserInit"
                , LaserInit_function_type( &::C_Beam::LaserInit )
                , ( bp::arg("pStartEntity"), bp::arg("pEndEntity") ) );
        
        }
        { //::C_Beam::LiveForTime
        
            typedef void ( ::C_Beam::*LiveForTime_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "LiveForTime"
                , LiveForTime_function_type( &::C_Beam::LiveForTime )
                , ( bp::arg("time") ) );
        
        }
        { //::C_Beam::OnDataChanged
        
            typedef void ( ::C_Beam::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_Beam_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_Beam_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_Beam::OnDataChanged)
                , default_OnDataChanged_function_type(&C_Beam_wrapper::default_OnDataChanged)
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_Beam::OnPredictedEntityRemove
        
            typedef bool ( ::C_Beam::*OnPredictedEntityRemove_function_type )( bool,::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "OnPredictedEntityRemove"
                , OnPredictedEntityRemove_function_type( &::C_Beam::OnPredictedEntityRemove )
                , ( bp::arg("isbeingremoved"), bp::arg("predicted") ) );
        
        }
        { //::C_Beam::PointEntInit
        
            typedef void ( ::C_Beam::*PointEntInit_function_type )( ::Vector const &,::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "PointEntInit"
                , PointEntInit_function_type( &::C_Beam::PointEntInit )
                , ( bp::arg("start"), bp::arg("pEndEntity") ) );
        
        }
        { //::C_Beam::PointsInit
        
            typedef void ( ::C_Beam::*PointsInit_function_type )( ::Vector const &,::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "PointsInit"
                , PointsInit_function_type( &::C_Beam::PointsInit )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::C_Beam::Precache
        
            typedef void ( ::C_Beam::*Precache_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_Precache_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_Beam::Precache)
                , default_Precache_function_type(&C_Beam_wrapper::default_Precache) );
        
        }
        { //::C_Beam::RandomTargetname
        
            typedef ::C_BaseEntity * ( ::C_Beam::*RandomTargetname_function_type )( char const * ) ;
            
            C_Beam_exposer.def( 
                "RandomTargetname"
                , RandomTargetname_function_type( &::C_Beam::RandomTargetname )
                , ( bp::arg("szName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_Beam::RelinkBeam
        
            typedef void ( ::C_Beam::*RelinkBeam_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "RelinkBeam"
                , RelinkBeam_function_type( &::C_Beam::RelinkBeam ) );
        
        }
        { //::C_Beam::SetAbsEndPos
        
            typedef void ( ::C_Beam::*SetAbsEndPos_function_type )( ::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "SetAbsEndPos"
                , SetAbsEndPos_function_type( &::C_Beam::SetAbsEndPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::C_Beam::SetAbsStartPos
        
            typedef void ( ::C_Beam::*SetAbsStartPos_function_type )( ::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "SetAbsStartPos"
                , SetAbsStartPos_function_type( &::C_Beam::SetAbsStartPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::C_Beam::SetBeamFlag
        
            typedef void ( ::C_Beam::*SetBeamFlag_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetBeamFlag"
                , SetBeamFlag_function_type( &::C_Beam::SetBeamFlag )
                , ( bp::arg("flag") ) );
        
        }
        { //::C_Beam::SetBeamFlags
        
            typedef void ( ::C_Beam::*SetBeamFlags_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetBeamFlags"
                , SetBeamFlags_function_type( &::C_Beam::SetBeamFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_Beam::SetBrightness
        
            typedef void ( ::C_Beam::*SetBrightness_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetBrightness"
                , SetBrightness_function_type( &::C_Beam::SetBrightness )
                , ( bp::arg("brightness") ) );
        
        }
        { //::C_Beam::SetColor
        
            typedef void ( ::C_Beam::*SetColor_function_type )( int,int,int ) ;
            
            C_Beam_exposer.def( 
                "SetColor"
                , SetColor_function_type( &::C_Beam::SetColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::C_Beam::SetEndAttachment
        
            typedef void ( ::C_Beam::*SetEndAttachment_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetEndAttachment"
                , SetEndAttachment_function_type( &::C_Beam::SetEndAttachment )
                , ( bp::arg("attachment") ) );
        
        }
        { //::C_Beam::SetEndEntity
        
            typedef void ( ::C_Beam::*SetEndEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "SetEndEntity"
                , SetEndEntity_function_type( &::C_Beam::SetEndEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::C_Beam::SetEndPos
        
            typedef void ( ::C_Beam::*SetEndPos_function_type )( ::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "SetEndPos"
                , SetEndPos_function_type( &::C_Beam::SetEndPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::C_Beam::SetEndWidth
        
            typedef void ( ::C_Beam::*SetEndWidth_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetEndWidth"
                , SetEndWidth_function_type( &::C_Beam::SetEndWidth )
                , ( bp::arg("endWidth") ) );
        
        }
        { //::C_Beam::SetFadeLength
        
            typedef void ( ::C_Beam::*SetFadeLength_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetFadeLength"
                , SetFadeLength_function_type( &::C_Beam::SetFadeLength )
                , ( bp::arg("fadeLength") ) );
        
        }
        { //::C_Beam::SetFireTime
        
            typedef void ( ::C_Beam::*SetFireTime_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetFireTime"
                , SetFireTime_function_type( &::C_Beam::SetFireTime )
                , ( bp::arg("flFireTime") ) );
        
        }
        { //::C_Beam::SetFrame
        
            typedef void ( ::C_Beam::*SetFrame_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetFrame"
                , SetFrame_function_type( &::C_Beam::SetFrame )
                , ( bp::arg("frame") ) );
        
        }
        { //::C_Beam::SetFrameRate
        
            typedef void ( ::C_Beam::*SetFrameRate_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetFrameRate"
                , SetFrameRate_function_type( &::C_Beam::SetFrameRate )
                , ( bp::arg("flFrameRate") ) );
        
        }
        { //::C_Beam::SetHDRColorScale
        
            typedef void ( ::C_Beam::*SetHDRColorScale_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetHDRColorScale"
                , SetHDRColorScale_function_type( &::C_Beam::SetHDRColorScale )
                , ( bp::arg("flScale") ) );
        
        }
        { //::C_Beam::SetHaloScale
        
            typedef void ( ::C_Beam::*SetHaloScale_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetHaloScale"
                , SetHaloScale_function_type( &::C_Beam::SetHaloScale )
                , ( bp::arg("haloScale") ) );
        
        }
        { //::C_Beam::SetHaloTexture
        
            typedef void ( ::C_Beam::*SetHaloTexture_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetHaloTexture"
                , SetHaloTexture_function_type( &::C_Beam::SetHaloTexture )
                , ( bp::arg("spriteIndex") ) );
        
        }
        { //::C_Beam::SetModel
        
            typedef void ( ::C_Beam::*SetModel_function_type )( char const * ) ;
            
            C_Beam_exposer.def( 
                "SetModel"
                , SetModel_function_type( &::C_Beam::SetModel )
                , ( bp::arg("szModelName") ) );
        
        }
        { //::C_Beam::SetNoise
        
            typedef void ( ::C_Beam::*SetNoise_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetNoise"
                , SetNoise_function_type( &::C_Beam::SetNoise )
                , ( bp::arg("amplitude") ) );
        
        }
        { //::C_Beam::SetScrollRate
        
            typedef void ( ::C_Beam::*SetScrollRate_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetScrollRate"
                , SetScrollRate_function_type( &::C_Beam::SetScrollRate )
                , ( bp::arg("speed") ) );
        
        }
        { //::C_Beam::SetStartAttachment
        
            typedef void ( ::C_Beam::*SetStartAttachment_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetStartAttachment"
                , SetStartAttachment_function_type( &::C_Beam::SetStartAttachment )
                , ( bp::arg("attachment") ) );
        
        }
        { //::C_Beam::SetStartEntity
        
            typedef void ( ::C_Beam::*SetStartEntity_function_type )( ::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "SetStartEntity"
                , SetStartEntity_function_type( &::C_Beam::SetStartEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::C_Beam::SetStartPos
        
            typedef void ( ::C_Beam::*SetStartPos_function_type )( ::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "SetStartPos"
                , SetStartPos_function_type( &::C_Beam::SetStartPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::C_Beam::SetTexture
        
            typedef void ( ::C_Beam::*SetTexture_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetTexture"
                , SetTexture_function_type( &::C_Beam::SetTexture )
                , ( bp::arg("spriteIndex") ) );
        
        }
        { //::C_Beam::SetType
        
            typedef void ( ::C_Beam::*SetType_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "SetType"
                , SetType_function_type( &::C_Beam::SetType )
                , ( bp::arg("type") ) );
        
        }
        { //::C_Beam::SetWidth
        
            typedef void ( ::C_Beam::*SetWidth_function_type )( float ) ;
            
            C_Beam_exposer.def( 
                "SetWidth"
                , SetWidth_function_type( &::C_Beam::SetWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::C_Beam::ShouldReceiveProjectedTextures
        
            typedef bool ( ::C_Beam::*ShouldReceiveProjectedTextures_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "ShouldReceiveProjectedTextures"
                , ShouldReceiveProjectedTextures_function_type( &::C_Beam::ShouldReceiveProjectedTextures )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_Beam::Simulate
        
            typedef bool ( ::C_Beam::*Simulate_function_type )(  ) ;
            typedef bool ( C_Beam_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_Beam::Simulate)
                , default_Simulate_function_type(&C_Beam_wrapper::default_Simulate) );
        
        }
        { //::C_Beam::Spawn
        
            typedef void ( ::C_Beam::*Spawn_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_Beam::Spawn)
                , default_Spawn_function_type(&C_Beam_wrapper::default_Spawn) );
        
        }
        { //::C_Beam::SplineInit
        
            typedef void ( ::C_Beam::*SplineInit_function_type )( int,::C_BaseEntity * *,int * ) ;
            
            C_Beam_exposer.def( 
                "SplineInit"
                , SplineInit_function_type( &::C_Beam::SplineInit )
                , ( bp::arg("nNumEnts"), bp::arg("pEntList"), bp::arg("attachment") ) );
        
        }
        { //::C_Beam::TurnOff
        
            typedef void ( ::C_Beam::*TurnOff_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "TurnOff"
                , TurnOff_function_type( &::C_Beam::TurnOff ) );
        
        }
        { //::C_Beam::TurnOn
        
            typedef void ( ::C_Beam::*TurnOn_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "TurnOn"
                , TurnOn_function_type( &::C_Beam::TurnOn ) );
        
        }
        { //::C_Beam::WorldSpaceCenter
        
            typedef ::Vector const & ( ::C_Beam::*WorldSpaceCenter_function_type )(  ) const;
            
            C_Beam_exposer.def( 
                "WorldSpaceCenter"
                , WorldSpaceCenter_function_type( &::C_Beam::WorldSpaceCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_Activate_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_Beam_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_Beam_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_Beam_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_Beam_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_Beam_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_Beam_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_Beam_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_Beam_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_Beam_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_Beam_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_Beam_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_Beam_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_Beam_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_Beam_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_Beam_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseEntity::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_Beam_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseEntity::GetCollideType)
                , default_GetCollideType_function_type(&C_Beam_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_Beam_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_Beam_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_Beam_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_Beam_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_Beam_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_Beam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_Beam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_Beam_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_Beam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_Beam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_Beam_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_Beam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_Beam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_Beam_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_Beam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_Beam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::MakeTracer
        
            typedef void ( ::C_BaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_Beam_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_Beam_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_BaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&C_Beam_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_Beam_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_Beam_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_Beam_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseEntity::OnRestore
        
            typedef void ( ::C_BaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseEntity::OnRestore)
                , default_OnRestore_function_type(&C_Beam_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseEntity::PyNotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_Beam_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_Beam_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::PyNotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_Beam_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_Beam_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_Beam_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_Beam_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_Beam_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_Beam_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_Beam_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ShouldDraw
        
            typedef bool ( ::C_BaseEntity::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_Beam_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_BaseEntity::ShouldDraw)
                , default_ShouldDraw_function_type(&C_Beam_wrapper::default_ShouldDraw) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_Beam_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_Beam_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_Beam_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::UpdateOnRemove
        
            typedef void ( ::C_BaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_Beam_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_Beam_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_BaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_Beam_wrapper::default_UpdateOnRemove) );
        
        }
        C_Beam_exposer.staticmethod( "BeamCreate" );
        C_Beam_exposer.staticmethod( "BeamCreatePredictable" );
        C_Beam_exposer.staticmethod( "GetPyNetworkType" );
        C_Beam_exposer.add_property( "lifestate", &C_Beam_wrapper::m_lifeState_Get, &C_Beam_wrapper::m_lifeState_Set );
        C_Beam_exposer.add_property( "takedamage", &C_Beam_wrapper::m_takedamage_Get, &C_Beam_wrapper::m_takedamage_Set );
    }

}

