// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "soundinfo.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iclientvehicle.h"
#include "steam/steamclientpublic.h"
#include "view_shared.h"
#include "c_playerresource.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "beam_shared.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "c_wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_WarsWeapon_pypp.hpp"

namespace bp = boost::python;

struct C_WarsWeapon_wrapper : C_WarsWeapon, bp::wrapper< C_WarsWeapon > {

    C_WarsWeapon_wrapper( )
    : C_WarsWeapon( )
      , bp::wrapper< C_WarsWeapon >(){
        // null constructor
    
    }

    static boost::python::tuple GetShootOriginAndDirection( ::C_WarsWeapon & inst ){
        Vector vShootOrigin2;
        Vector vShootDirection2;
        inst.GetShootOriginAndDirection(vShootOrigin2, vShootDirection2);
        return bp::make_tuple( vShootOrigin2, vShootDirection2 );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_WarsWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_WarsWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_WarsWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_WarsWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void OnDataChanged( ::DataUpdateType_t type ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnDataChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnDataChanged( type ) of Class: C_WarsWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_WarsWeapon::OnDataChanged( type );
            }
        else
            this->C_WarsWeapon::OnDataChanged( type );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t type ) {
        C_WarsWeapon::OnDataChanged( type );
    }

    virtual void PrimaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PrimaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PrimaryAttack(  ) of Class: C_WarsWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PrimaryAttack = this->get_override( "PrimaryAttack" );
        if( func_PrimaryAttack.ptr() != Py_None )
            try {
                func_PrimaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_WarsWeapon::PrimaryAttack(  );
            }
        else
            this->C_WarsWeapon::PrimaryAttack(  );
    }
    
    void default_PrimaryAttack(  ) {
        C_WarsWeapon::PrimaryAttack( );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_WarsWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_WarsWeapon::ShouldDraw(  );
            }
        else
            return this->C_WarsWeapon::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_WarsWeapon::ShouldDraw( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Activate(  );
            }
        else
            this->C_BaseCombatWeapon::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseCombatWeapon::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::OnRestore(  );
            }
        else
            this->C_BaseCombatWeapon::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseCombatWeapon::OnRestore( );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Precache(  );
            }
        else
            this->C_BaseCombatWeapon::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseCombatWeapon::Precache( );
    }

    virtual void PyNotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyNotifyShouldTransmit( state ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyNotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::PyNotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::PyNotifyShouldTransmit( state );
    }

    virtual void PyOnNewModel(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnNewModel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnNewModel(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::PyOnNewModel(  );
            }
        else
            this->C_BaseAnimating::PyOnNewModel(  );
    }
    
    void default_OnNewModel(  ) {
        C_BaseAnimating::PyOnNewModel( );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual void SecondaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SecondaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SecondaryAttack(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SecondaryAttack = this->get_override( "SecondaryAttack" );
        if( func_SecondaryAttack.ptr() != Py_None )
            try {
                func_SecondaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::SecondaryAttack(  );
            }
        else
            this->C_BaseCombatWeapon::SecondaryAttack(  );
    }
    
    void default_SecondaryAttack(  ) {
        C_BaseCombatWeapon::SecondaryAttack( );
    }

    virtual bool Simulate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Simulate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Simulate(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::Simulate(  );
            }
        else
            return this->C_BaseAnimating::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_BaseAnimating::Simulate( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_BaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseCombatWeapon::Spawn(  );
            }
        else
            this->C_BaseCombatWeapon::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_BaseCombatWeapon::Spawn( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
#if defined(_WIN32) // POSIX: TODO
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_WarsWeapon::GetClientClass();
#endif // _WIN32
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
        if( pClientClass )
            return pClientClass;
        return C_WarsWeapon::GetClientClass();
    }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: C_WarsWeapon\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->C_WarsWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->C_WarsWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return C_WarsWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

    float m_flNextPrimaryAttack_Get() {
       return m_flNextPrimaryAttack;
    }

    void m_flNextPrimaryAttack_Set(float val) {
       m_flNextPrimaryAttack = val;
    }

    float m_flNextSecondaryAttack_Get() {
       return m_flNextSecondaryAttack;
    }

    void m_flNextSecondaryAttack_Set(float val) {
       m_flNextSecondaryAttack = val;
    }

    float m_flTimeWeaponIdle_Get() {
       return m_flTimeWeaponIdle;
    }

    void m_flTimeWeaponIdle_Set(float val) {
       m_flTimeWeaponIdle = val;
    }

    int m_iState_Get() {
       return m_iState;
    }

    void m_iState_Set(int val) {
       m_iState = val;
    }

    int m_iPrimaryAmmoType_Get() {
       return m_iPrimaryAmmoType;
    }

    void m_iPrimaryAmmoType_Set(int val) {
       m_iPrimaryAmmoType = val;
    }

    int m_iSecondaryAmmoType_Get() {
       return m_iSecondaryAmmoType;
    }

    void m_iSecondaryAmmoType_Set(int val) {
       m_iSecondaryAmmoType = val;
    }

    int m_iClip1_Get() {
       return m_iClip1;
    }

    void m_iClip1_Set(int val) {
       m_iClip1 = val;
    }

    int m_iClip2_Get() {
       return m_iClip2;
    }

    void m_iClip2_Set(int val) {
       m_iClip2 = val;
    }

};

void register_C_WarsWeapon_class(){

    { //::C_WarsWeapon
        typedef bp::class_< C_WarsWeapon_wrapper, bp::bases< C_BaseCombatWeapon >, boost::noncopyable > C_WarsWeapon_exposer_t;
        C_WarsWeapon_exposer_t C_WarsWeapon_exposer = C_WarsWeapon_exposer_t( "C_WarsWeapon", bp::init< >() );
        bp::scope C_WarsWeapon_scope( C_WarsWeapon_exposer );
        { //::C_WarsWeapon::DefaultDeploy
        
            typedef bool ( ::C_WarsWeapon::*DefaultDeploy_function_type )( char *,char *,int,char * ) ;
            
            C_WarsWeapon_exposer.def( 
                "DefaultDeploy"
                , DefaultDeploy_function_type( &::C_WarsWeapon::DefaultDeploy )
                , ( bp::arg("szViewModel"), bp::arg("szWeaponModel"), bp::arg("iActivity"), bp::arg("szAnimExt") ) );
        
        }
        { //::C_WarsWeapon::EnsureCorrectRenderingModel
        
            typedef void ( ::C_WarsWeapon::*EnsureCorrectRenderingModel_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "EnsureCorrectRenderingModel"
                , EnsureCorrectRenderingModel_function_type( &::C_WarsWeapon::EnsureCorrectRenderingModel ) );
        
        }
        { //::C_WarsWeapon::Equip
        
            typedef void ( ::C_WarsWeapon::*Equip_function_type )( ::C_BaseCombatCharacter * ) ;
            
            C_WarsWeapon_exposer.def( 
                "Equip"
                , Equip_function_type( &::C_WarsWeapon::Equip )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::C_WarsWeapon::GetCommander
        
            typedef ::C_HL2WarsPlayer * ( ::C_WarsWeapon::*GetCommander_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetCommander"
                , GetCommander_function_type( &::C_WarsWeapon::GetCommander )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_WarsWeapon::GetMaxBurst
        
            typedef int ( ::C_WarsWeapon::*GetMaxBurst_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetMaxBurst"
                , GetMaxBurst_function_type( &::C_WarsWeapon::GetMaxBurst ) );
        
        }
        { //::C_WarsWeapon::GetMaxRestTime
        
            typedef float ( ::C_WarsWeapon::*GetMaxRestTime_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetMaxRestTime"
                , GetMaxRestTime_function_type( &::C_WarsWeapon::GetMaxRestTime ) );
        
        }
        { //::C_WarsWeapon::GetMinBurst
        
            typedef int ( ::C_WarsWeapon::*GetMinBurst_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetMinBurst"
                , GetMinBurst_function_type( &::C_WarsWeapon::GetMinBurst ) );
        
        }
        { //::C_WarsWeapon::GetMinRestTime
        
            typedef float ( ::C_WarsWeapon::*GetMinRestTime_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetMinRestTime"
                , GetMinRestTime_function_type( &::C_WarsWeapon::GetMinRestTime ) );
        
        }
        { //::C_WarsWeapon::GetMuzzleAttachEntity
        
            typedef ::C_BaseEntity * ( ::C_WarsWeapon::*GetMuzzleAttachEntity_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetMuzzleAttachEntity"
                , GetMuzzleAttachEntity_function_type( &::C_WarsWeapon::GetMuzzleAttachEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_WarsWeapon::GetPredictionOwner
        
            typedef ::C_BasePlayer * ( ::C_WarsWeapon::*GetPredictionOwner_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetPredictionOwner"
                , GetPredictionOwner_function_type( &::C_WarsWeapon::GetPredictionOwner )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_WarsWeapon::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_WarsWeapon_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_WarsWeapon::GetPyNetworkType ) );
        
        }
        { //::C_WarsWeapon::GetShootOriginAndDirection
        
            typedef boost::python::tuple ( *GetShootOriginAndDirection_function_type )( ::C_WarsWeapon & );
            
            C_WarsWeapon_exposer.def( 
                "GetShootOriginAndDirection"
                , GetShootOriginAndDirection_function_type( &C_WarsWeapon_wrapper::GetShootOriginAndDirection )
                , ( bp::arg("inst") ) );
        
        }
        { //::C_WarsWeapon::GetShootPosition
        
            typedef bool ( ::C_WarsWeapon::*GetShootPosition_function_type )( ::Vector &,::QAngle & ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetShootPosition"
                , GetShootPosition_function_type( &::C_WarsWeapon::GetShootPosition )
                , ( bp::arg("vOrigin"), bp::arg("vAngles") ) );
        
        }
        { //::C_WarsWeapon::GetViewModelSequenceDuration
        
            typedef float ( ::C_WarsWeapon::*GetViewModelSequenceDuration_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetViewModelSequenceDuration"
                , GetViewModelSequenceDuration_function_type( &::C_WarsWeapon::GetViewModelSequenceDuration ) );
        
        }
        { //::C_WarsWeapon::IsActiveByLocalPlayer
        
            typedef bool ( ::C_WarsWeapon::*IsActiveByLocalPlayer_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "IsActiveByLocalPlayer"
                , IsActiveByLocalPlayer_function_type( &::C_WarsWeapon::IsActiveByLocalPlayer ) );
        
        }
        { //::C_WarsWeapon::IsCarriedByLocalPlayer
        
            typedef bool ( ::C_WarsWeapon::*IsCarriedByLocalPlayer_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "IsCarriedByLocalPlayer"
                , IsCarriedByLocalPlayer_function_type( &::C_WarsWeapon::IsCarriedByLocalPlayer ) );
        
        }
        { //::C_WarsWeapon::IsPredicted
        
            typedef bool ( ::C_WarsWeapon::*IsPredicted_function_type )(  ) const;
            
            C_WarsWeapon_exposer.def( 
                "IsPredicted"
                , IsPredicted_function_type( &::C_WarsWeapon::IsPredicted ) );
        
        }
        { //::C_WarsWeapon::IsViewModelSequenceFinished
        
            typedef bool ( ::C_WarsWeapon::*IsViewModelSequenceFinished_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "IsViewModelSequenceFinished"
                , IsViewModelSequenceFinished_function_type( &::C_WarsWeapon::IsViewModelSequenceFinished ) );
        
        }
        { //::C_WarsWeapon::IsWeaponVisible
        
            typedef bool ( ::C_WarsWeapon::*IsWeaponVisible_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "IsWeaponVisible"
                , IsWeaponVisible_function_type( &::C_WarsWeapon::IsWeaponVisible ) );
        
        }
        { //::C_WarsWeapon::MakeTracer
        
            typedef void ( ::C_WarsWeapon::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_WarsWeapon_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_WarsWeapon::MakeTracer)
                , default_MakeTracer_function_type(&C_WarsWeapon_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_WarsWeapon::OnDataChanged
        
            typedef void ( ::C_WarsWeapon::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_WarsWeapon_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_WarsWeapon::OnDataChanged)
                , default_OnDataChanged_function_type(&C_WarsWeapon_wrapper::default_OnDataChanged)
                , ( bp::arg("type") ) );
        
        }
        { //::C_WarsWeapon::Operator_FrameUpdate
        
            typedef void ( ::C_WarsWeapon::*Operator_FrameUpdate_function_type )( ::C_BaseCombatCharacter * ) ;
            
            C_WarsWeapon_exposer.def( 
                "Operator_FrameUpdate"
                , Operator_FrameUpdate_function_type( &::C_WarsWeapon::Operator_FrameUpdate )
                , ( bp::arg("pOperator") ) );
        
        }
        { //::C_WarsWeapon::PrimaryAttack
        
            typedef void ( ::C_WarsWeapon::*PrimaryAttack_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_PrimaryAttack_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "PrimaryAttack"
                , PrimaryAttack_function_type(&::C_WarsWeapon::PrimaryAttack)
                , default_PrimaryAttack_function_type(&C_WarsWeapon_wrapper::default_PrimaryAttack) );
        
        }
        { //::C_WarsWeapon::SendViewModelAnim
        
            typedef void ( ::C_WarsWeapon::*SendViewModelAnim_function_type )( int ) ;
            
            C_WarsWeapon_exposer.def( 
                "SendViewModelAnim"
                , SendViewModelAnim_function_type( &::C_WarsWeapon::SendViewModelAnim )
                , ( bp::arg("nSequence") ) );
        
        }
        { //::C_WarsWeapon::SetDormant
        
            typedef void ( ::C_WarsWeapon::*SetDormant_function_type )( bool ) ;
            
            C_WarsWeapon_exposer.def( 
                "SetDormant"
                , SetDormant_function_type( &::C_WarsWeapon::SetDormant )
                , ( bp::arg("bDormant") ) );
        
        }
        { //::C_WarsWeapon::SetViewModel
        
            typedef void ( ::C_WarsWeapon::*SetViewModel_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "SetViewModel"
                , SetViewModel_function_type( &::C_WarsWeapon::SetViewModel ) );
        
        }
        { //::C_WarsWeapon::SetWeaponVisible
        
            typedef void ( ::C_WarsWeapon::*SetWeaponVisible_function_type )( bool ) ;
            
            C_WarsWeapon_exposer.def( 
                "SetWeaponVisible"
                , SetWeaponVisible_function_type( &::C_WarsWeapon::SetWeaponVisible )
                , ( bp::arg("visible") ) );
        
        }
        { //::C_WarsWeapon::ShouldDraw
        
            typedef bool ( ::C_WarsWeapon::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_WarsWeapon::ShouldDraw)
                , default_ShouldDraw_function_type(&C_WarsWeapon_wrapper::default_ShouldDraw) );
        
        }
        { //::C_WarsWeapon::ShouldPredict
        
            typedef bool ( ::C_WarsWeapon::*ShouldPredict_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "ShouldPredict"
                , ShouldPredict_function_type( &::C_WarsWeapon::ShouldPredict ) );
        
        }
        { //::C_WarsWeapon::WeaponSound
        
            typedef void ( ::C_WarsWeapon::*WeaponSound_function_type )( ::WeaponSound_t,float ) ;
            
            C_WarsWeapon_exposer.def( 
                "WeaponSound"
                , WeaponSound_function_type( &::C_WarsWeapon::WeaponSound )
                , ( bp::arg("sound_type"), bp::arg("soundtime")=0.0f ) );
        
        }
        C_WarsWeapon_exposer.def_readwrite( "enableburst", &C_WarsWeapon::m_bEnableBurst );
        C_WarsWeapon_exposer.def_readwrite( "firerate", &C_WarsWeapon::m_fFireRate );
        C_WarsWeapon_exposer.def_readwrite( "maxbulletrange", &C_WarsWeapon::m_fMaxBulletRange );
        C_WarsWeapon_exposer.def_readwrite( "maxresttime", &C_WarsWeapon::m_fMaxRestTime );
        C_WarsWeapon_exposer.def_readwrite( "minresttime", &C_WarsWeapon::m_fMinRestTime );
        C_WarsWeapon_exposer.def_readwrite( "overrideammodamage", &C_WarsWeapon::m_fOverrideAmmoDamage );
        C_WarsWeapon_exposer.def_readwrite( "maxburst", &C_WarsWeapon::m_iMaxBurst );
        C_WarsWeapon_exposer.def_readwrite( "minburst", &C_WarsWeapon::m_iMinBurst );
        C_WarsWeapon_exposer.def_readwrite( "burstshotsremaining", &C_WarsWeapon::m_nBurstShotsRemaining );
        C_WarsWeapon_exposer.def_readwrite( "bulletspread", &C_WarsWeapon::m_vBulletSpread );
        C_WarsWeapon_exposer.def_readwrite( "tracercolor", &C_WarsWeapon::m_vTracerColor );
        { //::C_BaseCombatWeapon::Activate
        
            typedef void ( ::C_BaseCombatWeapon::*Activate_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_Activate_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseCombatWeapon::Activate)
                , default_Activate_function_type(&C_WarsWeapon_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_WarsWeapon_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_WarsWeapon_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_WarsWeapon_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_WarsWeapon_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_WarsWeapon_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_WarsWeapon_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_WarsWeapon_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_WarsWeapon_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_WarsWeapon_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_WarsWeapon_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_WarsWeapon_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseAnimating::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseAnimating::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_WarsWeapon_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseAnimating::GetCollideType)
                , default_GetCollideType_function_type(&C_WarsWeapon_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_WarsWeapon_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_WarsWeapon_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_WarsWeapon_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_WarsWeapon_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_WarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_WarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_WarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_WarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_WarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_WarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_WarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_WarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_WarsWeapon_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_WarsWeapon_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseCombatWeapon::OnRestore
        
            typedef void ( ::C_BaseCombatWeapon::*OnRestore_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseCombatWeapon::OnRestore)
                , default_OnRestore_function_type(&C_WarsWeapon_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseCombatWeapon::Precache
        
            typedef void ( ::C_BaseCombatWeapon::*Precache_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_Precache_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseCombatWeapon::Precache)
                , default_Precache_function_type(&C_WarsWeapon_wrapper::default_Precache) );
        
        }
        { //::C_BaseEntity::PyNotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_WarsWeapon_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::PyNotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_WarsWeapon_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseAnimating::PyOnNewModel
        
            typedef void ( ::C_BaseAnimating::*OnNewModel_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_OnNewModel_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type(&::C_BaseAnimating::PyOnNewModel)
                , default_OnNewModel_function_type(&C_WarsWeapon_wrapper::default_OnNewModel) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_WarsWeapon_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_WarsWeapon_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_WarsWeapon_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_WarsWeapon_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_WarsWeapon_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseCombatWeapon::SecondaryAttack
        
            typedef void ( ::C_BaseCombatWeapon::*SecondaryAttack_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_SecondaryAttack_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "SecondaryAttack"
                , SecondaryAttack_function_type(&::C_BaseCombatWeapon::SecondaryAttack)
                , default_SecondaryAttack_function_type(&C_WarsWeapon_wrapper::default_SecondaryAttack) );
        
        }
        { //::C_BaseAnimating::Simulate
        
            typedef bool ( ::C_BaseAnimating::*Simulate_function_type )(  ) ;
            typedef bool ( C_WarsWeapon_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_BaseAnimating::Simulate)
                , default_Simulate_function_type(&C_WarsWeapon_wrapper::default_Simulate) );
        
        }
        { //::C_BaseCombatWeapon::Spawn
        
            typedef void ( ::C_BaseCombatWeapon::*Spawn_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_BaseCombatWeapon::Spawn)
                , default_Spawn_function_type(&C_WarsWeapon_wrapper::default_Spawn) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_WarsWeapon_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_WarsWeapon_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::UpdateOnRemove
        
            typedef void ( ::C_BaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_WarsWeapon_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_WarsWeapon_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_BaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_WarsWeapon_wrapper::default_UpdateOnRemove) );
        
        }
        C_WarsWeapon_exposer.staticmethod( "GetPyNetworkType" );
        { //property "primaryattackactivity"[fget=::C_WarsWeapon::GetPrimaryAttackActivity, fset=::C_WarsWeapon::SetPrimaryAttackActivity]
        
            typedef ::Activity ( ::C_WarsWeapon::*fget )(  ) ;
            typedef void ( ::C_WarsWeapon::*fset )( ::Activity ) ;
            
            C_WarsWeapon_exposer.add_property( 
                "primaryattackactivity"
                , fget( &::C_WarsWeapon::GetPrimaryAttackActivity )
                , fset( &::C_WarsWeapon::SetPrimaryAttackActivity ) );
        
        }
        { //property "secondaryattackactivity"[fget=::C_WarsWeapon::GetSecondaryAttackActivity, fset=::C_WarsWeapon::SetSecondaryAttackActivity]
        
            typedef ::Activity ( ::C_WarsWeapon::*fget )(  ) ;
            typedef void ( ::C_WarsWeapon::*fset )( ::Activity ) ;
            
            C_WarsWeapon_exposer.add_property( 
                "secondaryattackactivity"
                , fget( &::C_WarsWeapon::GetSecondaryAttackActivity )
                , fset( &::C_WarsWeapon::SetSecondaryAttackActivity ) );
        
        }
        { //::C_WarsWeapon::TestCollision
            
                typedef bool ( ::C_WarsWeapon::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( C_WarsWeapon_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                C_WarsWeapon_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::C_WarsWeapon::TestCollision)
                    , default_TestCollision_function_type(&C_WarsWeapon_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
        C_WarsWeapon_exposer.add_property("nextprimaryattack", 
           &C_WarsWeapon_wrapper::m_flNextPrimaryAttack_Get,
           &C_WarsWeapon_wrapper::m_flNextPrimaryAttack_Set );
        C_WarsWeapon_exposer.add_property("nextsecondaryattack", 
           &C_WarsWeapon_wrapper::m_flNextSecondaryAttack_Get,
           &C_WarsWeapon_wrapper::m_flNextSecondaryAttack_Set );
        C_WarsWeapon_exposer.add_property("timeweaponidle", 
           &C_WarsWeapon_wrapper::m_flTimeWeaponIdle_Get,
           &C_WarsWeapon_wrapper::m_flTimeWeaponIdle_Set );
        C_WarsWeapon_exposer.add_property("state", 
           &C_WarsWeapon_wrapper::m_iState_Get,
           &C_WarsWeapon_wrapper::m_iState_Set );
        C_WarsWeapon_exposer.add_property("primaryammotype", 
           &C_WarsWeapon_wrapper::m_iPrimaryAmmoType_Get,
           &C_WarsWeapon_wrapper::m_iPrimaryAmmoType_Set );
        C_WarsWeapon_exposer.add_property("secondaryammotype", 
           &C_WarsWeapon_wrapper::m_iSecondaryAmmoType_Get,
           &C_WarsWeapon_wrapper::m_iSecondaryAmmoType_Set );
        C_WarsWeapon_exposer.add_property("clip1", 
           &C_WarsWeapon_wrapper::m_iClip1_Get,
           &C_WarsWeapon_wrapper::m_iClip1_Set );
        C_WarsWeapon_exposer.add_property("clip2", 
           &C_WarsWeapon_wrapper::m_iClip2_Get,
           &C_WarsWeapon_wrapper::m_iClip2_Set );
    }

}

