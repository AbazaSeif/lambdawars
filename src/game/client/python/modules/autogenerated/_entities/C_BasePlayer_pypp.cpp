// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__array_1.pypp.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "videocfg/videocfg.h"
#include "cbase.h"
#include "takedamageinfo.h"
#include "c_baseanimating.h"
#include "c_baseanimatingoverlay.h"
#include "c_baseflex.h"
#include "c_basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "c_baseplayer.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "c_playerresource.h"
#include "sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "c_wars_weapon.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "srcpy_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "srcpy_converters_ents.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_BasePlayer_pypp.hpp"

namespace bp = boost::python;

struct C_BasePlayer_wrapper : C_BasePlayer, bp::wrapper< C_BasePlayer > {

    C_BasePlayer_wrapper( )
    : C_BasePlayer( )
      , bp::wrapper< C_BasePlayer >(){
        // null constructor
    
    }

    static boost::python::tuple CalcView( ::C_BasePlayer & inst, ::Vector & eyeOrigin, ::QAngle & eyeAngles ){
        float zNear2;
        float zFar2;
        float fov2;
        inst.CalcView(eyeOrigin, eyeAngles, zNear2, zFar2, fov2);
        return bp::make_tuple( zNear2, zFar2, fov2 );
    }

    static ::CUserCmd * get_m_pCurrentCommand(C_BasePlayer const & inst ){
        return inst.m_pCurrentCommand;
    }
    
    static void set_m_pCurrentCommand( C_BasePlayer & inst, ::CUserCmd * new_value ){ 
        inst.m_pCurrentCommand = new_value;
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 32>
    pyplusplus_m_szAnimExtension_wrapper( ::C_BasePlayer & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 32>( inst.m_szAnimExtension );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Precache(  );
            }
        else
            this->C_BaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseEntity::Precache( );
    }

    virtual void PyNotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyNotifyShouldTransmit( state ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyNotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::PyNotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::PyNotifyShouldTransmit( state );
    }

    virtual void PyOnNewModel(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnNewModel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnNewModel(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::PyOnNewModel(  );
            }
        else
            this->C_BaseAnimating::PyOnNewModel(  );
    }
    
    void default_OnNewModel(  ) {
        C_BaseAnimating::PyOnNewModel( );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual ClientClass* GetClientClass() {
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_BasePlayer::GetClientClass();
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>("pyClientClass", GetPyInstance(), NULL, true);
        if( pClientClass )
            return pClientClass;
        return C_BasePlayer::GetClientClass();
    }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: C_BasePlayer\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->C_BasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->C_BasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return C_BasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

};

void register_C_BasePlayer_class(){

    { //::C_BasePlayer
        typedef bp::class_< C_BasePlayer_wrapper, bp::bases< C_BaseCombatCharacter >, boost::noncopyable > C_BasePlayer_exposer_t;
        C_BasePlayer_exposer_t C_BasePlayer_exposer = C_BasePlayer_exposer_t( "C_BasePlayer", bp::no_init );
        bp::scope C_BasePlayer_scope( C_BasePlayer_exposer );
        C_BasePlayer_exposer.def( bp::init< >() );
        { //::C_BasePlayer::AbortReload
        
            typedef void ( ::C_BasePlayer::*AbortReload_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "AbortReload"
                , AbortReload_function_type( &::C_BasePlayer::AbortReload ) );
        
        }
        { //::C_BasePlayer::AddSplitScreenPlayer
        
            typedef void ( ::C_BasePlayer::*AddSplitScreenPlayer_function_type )( ::C_BasePlayer * ) ;
            
            C_BasePlayer_exposer.def( 
                "AddSplitScreenPlayer"
                , AddSplitScreenPlayer_function_type( &::C_BasePlayer::AddSplitScreenPlayer )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BasePlayer::AddToPlayerSimulationList
        
            typedef void ( ::C_BasePlayer::*AddToPlayerSimulationList_function_type )( ::C_BaseEntity * ) ;
            
            C_BasePlayer_exposer.def( 
                "AddToPlayerSimulationList"
                , AddToPlayerSimulationList_function_type( &::C_BasePlayer::AddToPlayerSimulationList )
                , ( bp::arg("other") ) );
        
        }
        { //::C_BasePlayer::AudioStateIsUnderwater
        
            typedef bool ( ::C_BasePlayer::*AudioStateIsUnderwater_function_type )( ::Vector ) ;
            
            C_BasePlayer_exposer.def( 
                "AudioStateIsUnderwater"
                , AudioStateIsUnderwater_function_type( &::C_BasePlayer::AudioStateIsUnderwater )
                , ( bp::arg("vecMainViewOrigin") ) );
        
        }
        { //::C_BasePlayer::CacheVehicleView
        
            typedef void ( ::C_BasePlayer::*CacheVehicleView_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "CacheVehicleView"
                , CacheVehicleView_function_type( &::C_BasePlayer::CacheVehicleView ) );
        
        }
        { //::C_BasePlayer::CalcRoll
        
            typedef float ( ::C_BasePlayer::*CalcRoll_function_type )( ::QAngle const &,::Vector const &,float,float ) ;
            
            C_BasePlayer_exposer.def( 
                "CalcRoll"
                , CalcRoll_function_type( &::C_BasePlayer::CalcRoll )
                , ( bp::arg("angles"), bp::arg("velocity"), bp::arg("rollangle"), bp::arg("rollspeed") ) );
        
        }
        { //::C_BasePlayer::CalcView
        
            typedef boost::python::tuple ( *CalcView_function_type )( ::C_BasePlayer &,::Vector &,::QAngle & );
            
            C_BasePlayer_exposer.def( 
                "CalcView"
                , CalcView_function_type( &C_BasePlayer_wrapper::CalcView )
                , ( bp::arg("inst"), bp::arg("eyeOrigin"), bp::arg("eyeAngles") ) );
        
        }
        { //::C_BasePlayer::CalcViewBob
        
            typedef void ( ::C_BasePlayer::*CalcViewBob_function_type )( ::Vector & ) ;
            
            C_BasePlayer_exposer.def( 
                "CalcViewBob"
                , CalcViewBob_function_type( &::C_BasePlayer::CalcViewBob )
                , ( bp::arg("eyeOrigin") ) );
        
        }
        { //::C_BasePlayer::CalcViewModelView
        
            typedef void ( ::C_BasePlayer::*CalcViewModelView_function_type )( ::Vector const &,::QAngle const & ) ;
            
            C_BasePlayer_exposer.def( 
                "CalcViewModelView"
                , CalcViewModelView_function_type( &::C_BasePlayer::CalcViewModelView )
                , ( bp::arg("eyeOrigin"), bp::arg("eyeAngles") ) );
        
        }
        { //::C_BasePlayer::CalcViewRoll
        
            typedef void ( ::C_BasePlayer::*CalcViewRoll_function_type )( ::QAngle & ) ;
            
            C_BasePlayer_exposer.def( 
                "CalcViewRoll"
                , CalcViewRoll_function_type( &::C_BasePlayer::CalcViewRoll )
                , ( bp::arg("eyeAngles") ) );
        
        }
        { //::C_BasePlayer::CanSetSoundMixer
        
            typedef bool ( ::C_BasePlayer::*CanSetSoundMixer_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "CanSetSoundMixer"
                , CanSetSoundMixer_function_type( &::C_BasePlayer::CanSetSoundMixer ) );
        
        }
        { //::C_BasePlayer::CastsFlashlightShadows
        
            typedef bool ( ::C_BasePlayer::*CastsFlashlightShadows_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "CastsFlashlightShadows"
                , CastsFlashlightShadows_function_type( &::C_BasePlayer::CastsFlashlightShadows ) );
        
        }
        { //::C_BasePlayer::CheckForLocalPlayer
        
            typedef void ( ::C_BasePlayer::*CheckForLocalPlayer_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "CheckForLocalPlayer"
                , CheckForLocalPlayer_function_type( &::C_BasePlayer::CheckForLocalPlayer )
                , ( bp::arg("nSplitScreenSlot") ) );
        
        }
        { //::C_BasePlayer::Classify
        
            typedef ::Class_T ( ::C_BasePlayer::*Classify_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Classify"
                , Classify_function_type( &::C_BasePlayer::Classify ) );
        
        }
        { //::C_BasePlayer::ClearPlayerSimulationList
        
            typedef void ( ::C_BasePlayer::*ClearPlayerSimulationList_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ClearPlayerSimulationList"
                , ClearPlayerSimulationList_function_type( &::C_BasePlayer::ClearPlayerSimulationList ) );
        
        }
        { //::C_BasePlayer::ClearZoomOwner
        
            typedef void ( ::C_BasePlayer::*ClearZoomOwner_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ClearZoomOwner"
                , ClearZoomOwner_function_type( &::C_BasePlayer::ClearZoomOwner ) );
        
        }
        { //::C_BasePlayer::CreateWaterEffects
        
            typedef void ( ::C_BasePlayer::*CreateWaterEffects_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "CreateWaterEffects"
                , CreateWaterEffects_function_type( &::C_BasePlayer::CreateWaterEffects ) );
        
        }
        { //::C_BasePlayer::CurrentCommandNumber
        
            typedef int ( ::C_BasePlayer::*CurrentCommandNumber_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "CurrentCommandNumber"
                , CurrentCommandNumber_function_type( &::C_BasePlayer::CurrentCommandNumber ) );
        
        }
        { //::C_BasePlayer::DoMuzzleFlash
        
            typedef void ( ::C_BasePlayer::*DoMuzzleFlash_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "DoMuzzleFlash"
                , DoMuzzleFlash_function_type( &::C_BasePlayer::DoMuzzleFlash ) );
        
        }
        { //::C_BasePlayer::DrawModel
        
            typedef int ( ::C_BasePlayer::*DrawModel_function_type )( int,::RenderableInstance_t const & ) ;
            
            C_BasePlayer_exposer.def( 
                "DrawModel"
                , DrawModel_function_type( &::C_BasePlayer::DrawModel )
                , ( bp::arg("flags"), bp::arg("instance") ) );
        
        }
        { //::C_BasePlayer::DrawOverriddenViewmodel
        
            typedef int ( ::C_BasePlayer::*DrawOverriddenViewmodel_function_type )( ::C_BaseViewModel *,int,::RenderableInstance_t const & ) ;
            
            C_BasePlayer_exposer.def( 
                "DrawOverriddenViewmodel"
                , DrawOverriddenViewmodel_function_type( &::C_BasePlayer::DrawOverriddenViewmodel )
                , ( bp::arg("pViewmodel"), bp::arg("flags"), bp::arg("instance") ) );
        
        }
        { //::C_BasePlayer::ExitLadder
        
            typedef void ( ::C_BasePlayer::*ExitLadder_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ExitLadder"
                , ExitLadder_function_type( &::C_BasePlayer::ExitLadder ) );
        
        }
        { //::C_BasePlayer::EyeAngles
        
            typedef ::QAngle const & ( ::C_BasePlayer::*EyeAngles_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::C_BasePlayer::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::EyePosition
        
            typedef ::Vector ( ::C_BasePlayer::*EyePosition_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::C_BasePlayer::EyePosition ) );
        
        }
        { //::C_BasePlayer::EyePositionAndVectors
        
            typedef void ( ::C_BasePlayer::*EyePositionAndVectors_function_type )( ::Vector *,::Vector *,::Vector *,::Vector * ) ;
            
            C_BasePlayer_exposer.def( 
                "EyePositionAndVectors"
                , EyePositionAndVectors_function_type( &::C_BasePlayer::EyePositionAndVectors )
                , ( bp::arg("pPosition"), bp::arg("pForward"), bp::arg("pRight"), bp::arg("pUp") ) );
        
        }
        { //::C_BasePlayer::EyeVectors
        
            typedef void ( ::C_BasePlayer::*EyeVectors_function_type )( ::Vector *,::Vector *,::Vector * ) ;
            
            C_BasePlayer_exposer.def( 
                "EyeVectors"
                , EyeVectors_function_type( &::C_BasePlayer::EyeVectors )
                , ( bp::arg("pForward"), bp::arg("pRight")=bp::object(), bp::arg("pUp")=bp::object() ) );
        
        }
        { //::C_BasePlayer::FindUseEntity
        
            typedef ::C_BaseEntity * ( ::C_BasePlayer::*FindUseEntity_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "FindUseEntity"
                , FindUseEntity_function_type( &::C_BasePlayer::FindUseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::Flashlight
        
            typedef void ( ::C_BasePlayer::*Flashlight_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Flashlight"
                , Flashlight_function_type( &::C_BasePlayer::Flashlight ) );
        
        }
        { //::C_BasePlayer::FogControllerChanged
        
            typedef void ( ::C_BasePlayer::*FogControllerChanged_function_type )( bool ) ;
            
            C_BasePlayer_exposer.def( 
                "FogControllerChanged"
                , FogControllerChanged_function_type( &::C_BasePlayer::FogControllerChanged )
                , ( bp::arg("bSnap") ) );
        
        }
        { //::C_BasePlayer::ForceButtons
        
            typedef void ( ::C_BasePlayer::*ForceButtons_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "ForceButtons"
                , ForceButtons_function_type( &::C_BasePlayer::ForceButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::C_BasePlayer::GetActiveWeapon
        
            typedef ::C_BaseCombatWeapon * ( ::C_BasePlayer::*GetActiveWeapon_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetActiveWeapon"
                , GetActiveWeapon_function_type( &::C_BasePlayer::GetActiveWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetActiveWeaponForSelection
        
            typedef ::C_BaseCombatWeapon * ( ::C_BasePlayer::*GetActiveWeaponForSelection_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetActiveWeaponForSelection"
                , GetActiveWeaponForSelection_function_type( &::C_BasePlayer::GetActiveWeaponForSelection )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetAutoaimVector
        
            typedef ::Vector ( ::C_BasePlayer::*GetAutoaimVector_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "GetAutoaimVector"
                , GetAutoaimVector_function_type( &::C_BasePlayer::GetAutoaimVector )
                , ( bp::arg("flScale") ) );
        
        }
        { //::C_BasePlayer::GetBonusChallenge
        
            typedef int ( ::C_BasePlayer::*GetBonusChallenge_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetBonusChallenge"
                , GetBonusChallenge_function_type( &::C_BasePlayer::GetBonusChallenge ) );
        
        }
        { //::C_BasePlayer::GetBonusProgress
        
            typedef int ( ::C_BasePlayer::*GetBonusProgress_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetBonusProgress"
                , GetBonusProgress_function_type( &::C_BasePlayer::GetBonusProgress ) );
        
        }
        { //::C_BasePlayer::GetDeathTime
        
            typedef float ( ::C_BasePlayer::*GetDeathTime_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetDeathTime"
                , GetDeathTime_function_type( &::C_BasePlayer::GetDeathTime ) );
        
        }
        { //::C_BasePlayer::GetDefaultAnimSpeed
        
            typedef float ( ::C_BasePlayer::*GetDefaultAnimSpeed_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetDefaultAnimSpeed"
                , GetDefaultAnimSpeed_function_type( &::C_BasePlayer::GetDefaultAnimSpeed ) );
        
        }
        { //::C_BasePlayer::GetDefaultFOV
        
            typedef int ( ::C_BasePlayer::*GetDefaultFOV_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetDefaultFOV"
                , GetDefaultFOV_function_type( &::C_BasePlayer::GetDefaultFOV ) );
        
        }
        { //::C_BasePlayer::GetEFNoInterpParity
        
            typedef int ( ::C_BasePlayer::*GetEFNoInterpParity_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetEFNoInterpParity"
                , GetEFNoInterpParity_function_type( &::C_BasePlayer::GetEFNoInterpParity ) );
        
        }
        { //::C_BasePlayer::GetFOV
        
            typedef float ( ::C_BasePlayer::*GetFOV_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFOV"
                , GetFOV_function_type( &::C_BasePlayer::GetFOV ) );
        
        }
        { //::C_BasePlayer::GetFOVDistanceAdjustFactor
        
            typedef float ( ::C_BasePlayer::*GetFOVDistanceAdjustFactor_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetFOVDistanceAdjustFactor"
                , GetFOVDistanceAdjustFactor_function_type( &::C_BasePlayer::GetFOVDistanceAdjustFactor ) );
        
        }
        { //::C_BasePlayer::GetFOVTime
        
            typedef float ( ::C_BasePlayer::*GetFOVTime_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetFOVTime"
                , GetFOVTime_function_type( &::C_BasePlayer::GetFOVTime ) );
        
        }
        { //::C_BasePlayer::GetFinalPredictedTime
        
            typedef float ( ::C_BasePlayer::*GetFinalPredictedTime_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFinalPredictedTime"
                , GetFinalPredictedTime_function_type( &::C_BasePlayer::GetFinalPredictedTime ) );
        
        }
        { //::C_BasePlayer::GetFlashlightFOV
        
            typedef float ( ::C_BasePlayer::*GetFlashlightFOV_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFlashlightFOV"
                , GetFlashlightFOV_function_type( &::C_BasePlayer::GetFlashlightFOV ) );
        
        }
        { //::C_BasePlayer::GetFlashlightFarZ
        
            typedef float ( ::C_BasePlayer::*GetFlashlightFarZ_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFlashlightFarZ"
                , GetFlashlightFarZ_function_type( &::C_BasePlayer::GetFlashlightFarZ ) );
        
        }
        { //::C_BasePlayer::GetFlashlightLinearAtten
        
            typedef float ( ::C_BasePlayer::*GetFlashlightLinearAtten_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFlashlightLinearAtten"
                , GetFlashlightLinearAtten_function_type( &::C_BasePlayer::GetFlashlightLinearAtten ) );
        
        }
        { //::C_BasePlayer::GetFlashlightOffset
        
            typedef void ( ::C_BasePlayer::*GetFlashlightOffset_function_type )( ::Vector const &,::Vector const &,::Vector const &,::Vector * ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFlashlightOffset"
                , GetFlashlightOffset_function_type( &::C_BasePlayer::GetFlashlightOffset )
                , ( bp::arg("vecForward"), bp::arg("vecRight"), bp::arg("vecUp"), bp::arg("pVecOffset") ) );
        
        }
        { //::C_BasePlayer::GetFlashlightTextureName
        
            typedef char const * ( ::C_BasePlayer::*GetFlashlightTextureName_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetFlashlightTextureName"
                , GetFlashlightTextureName_function_type( &::C_BasePlayer::GetFlashlightTextureName ) );
        
        }
        { //::C_BasePlayer::GetFogParams
        
            typedef ::fogparams_t * ( ::C_BasePlayer::*GetFogParams_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetFogParams"
                , GetFogParams_function_type( &::C_BasePlayer::GetFogParams )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetImpulse
        
            typedef int ( ::C_BasePlayer::*GetImpulse_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetImpulse"
                , GetImpulse_function_type( &::C_BasePlayer::GetImpulse ) );
        
        }
        { //::C_BasePlayer::GetLadderNormal
        
            typedef ::Vector const & ( ::C_BasePlayer::*GetLadderNormal_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetLadderNormal"
                , GetLadderNormal_function_type( &::C_BasePlayer::GetLadderNormal )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::GetLadderSurface
        
            typedef ::surfacedata_t * ( ::C_BasePlayer::*GetLadderSurface_function_type )( ::Vector const & ) ;
            
            C_BasePlayer_exposer.def( 
                "GetLadderSurface"
                , GetLadderSurface_function_type( &::C_BasePlayer::GetLadderSurface )
                , ( bp::arg("origin") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetLadderSurfaceProps
        
            typedef int ( ::C_BasePlayer::*GetLadderSurfaceProps_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetLadderSurfaceProps"
                , GetLadderSurfaceProps_function_type( &::C_BasePlayer::GetLadderSurfaceProps ) );
        
        }
        { //::C_BasePlayer::GetLaggedMovementValue
        
            typedef float ( ::C_BasePlayer::*GetLaggedMovementValue_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetLaggedMovementValue"
                , GetLaggedMovementValue_function_type( &::C_BasePlayer::GetLaggedMovementValue ) );
        
        }
        { //::C_BasePlayer::GetLastKnownPlaceName
        
            typedef char const * ( ::C_BasePlayer::*GetLastKnownPlaceName_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetLastKnownPlaceName"
                , GetLastKnownPlaceName_function_type( &::C_BasePlayer::GetLastKnownPlaceName ) );
        
        }
        { //::C_BasePlayer::GetLastWeapon
        
            typedef ::C_BaseCombatWeapon * ( ::C_BasePlayer::*GetLastWeapon_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetLastWeapon"
                , GetLastWeapon_function_type( &::C_BasePlayer::GetLastWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetLocalPlayer
        
            typedef ::C_BasePlayer * ( *GetLocalPlayer_function_type )( int );
            
            C_BasePlayer_exposer.def( 
                "GetLocalPlayer"
                , GetLocalPlayer_function_type( &::C_BasePlayer::GetLocalPlayer )
                , ( bp::arg("nSlot")=(int)(-0x000000001) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetMinFOV
        
            typedef float ( ::C_BasePlayer::*GetMinFOV_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetMinFOV"
                , GetMinFOV_function_type( &::C_BasePlayer::GetMinFOV ) );
        
        }
        { //::C_BasePlayer::GetObserverMode
        
            typedef int ( ::C_BasePlayer::*GetObserverMode_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetObserverMode"
                , GetObserverMode_function_type( &::C_BasePlayer::GetObserverMode ) );
        
        }
        { //::C_BasePlayer::GetObserverTarget
        
            typedef ::C_BaseEntity * ( ::C_BasePlayer::*GetObserverTarget_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetObserverTarget"
                , GetObserverTarget_function_type( &::C_BasePlayer::GetObserverTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetOffset_m_Local
        
            typedef int ( *GetOffset_m_Local_function_type )(  );
            
            C_BasePlayer_exposer.def( 
                "GetOffset_m_Local"
                , GetOffset_m_Local_function_type( &::C_BasePlayer::GetOffset_m_Local ) );
        
        }
        { //::C_BasePlayer::GetPlayerFog
        
            typedef ::fogplayerparams_t const & ( ::C_BasePlayer::*GetPlayerFog_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetPlayerFog"
                , GetPlayerFog_function_type( &::C_BasePlayer::GetPlayerFog )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::GetPlayerMaxs
        
            typedef ::Vector const ( ::C_BasePlayer::*GetPlayerMaxs_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetPlayerMaxs"
                , GetPlayerMaxs_function_type( &::C_BasePlayer::GetPlayerMaxs ) );
        
        }
        { //::C_BasePlayer::GetPlayerMins
        
            typedef ::Vector const ( ::C_BasePlayer::*GetPlayerMins_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetPlayerMins"
                , GetPlayerMins_function_type( &::C_BasePlayer::GetPlayerMins ) );
        
        }
        { //::C_BasePlayer::GetPlayerName
        
            typedef char const * ( ::C_BasePlayer::*GetPlayerName_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetPlayerName"
                , GetPlayerName_function_type( &::C_BasePlayer::GetPlayerName ) );
        
        }
        { //::C_BasePlayer::GetPlayerRenderMode
        
            typedef ::PlayerRenderMode_t ( ::C_BasePlayer::*GetPlayerRenderMode_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "GetPlayerRenderMode"
                , GetPlayerRenderMode_function_type( &::C_BasePlayer::GetPlayerRenderMode )
                , ( bp::arg("nSlot") ) );
        
        }
        { //::C_BasePlayer::GetPredictionErrorSmoothingVector
        
            typedef void ( ::C_BasePlayer::*GetPredictionErrorSmoothingVector_function_type )( ::Vector & ) ;
            
            C_BasePlayer_exposer.def( 
                "GetPredictionErrorSmoothingVector"
                , GetPredictionErrorSmoothingVector_function_type( &::C_BasePlayer::GetPredictionErrorSmoothingVector )
                , ( bp::arg("vOffset") ) );
        
        }
        { //::C_BasePlayer::GetPredictionOwner
        
            typedef ::C_BasePlayer * ( ::C_BasePlayer::*GetPredictionOwner_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetPredictionOwner"
                , GetPredictionOwner_function_type( &::C_BasePlayer::GetPredictionOwner )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetPreviouslyPredictedOrigin
        
            typedef ::Vector const & ( ::C_BasePlayer::*GetPreviouslyPredictedOrigin_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetPreviouslyPredictedOrigin"
                , GetPreviouslyPredictedOrigin_function_type( &::C_BasePlayer::GetPreviouslyPredictedOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::GetPunchAngle
        
            typedef ::QAngle const & ( ::C_BasePlayer::*GetPunchAngle_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetPunchAngle"
                , GetPunchAngle_function_type( &::C_BasePlayer::GetPunchAngle )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_BasePlayer_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_BasePlayer::GetPyNetworkType ) );
        
        }
        { //::C_BasePlayer::GetRagdollInitBoneArrays
        
            typedef void ( ::C_BasePlayer::*GetRagdollInitBoneArrays_function_type )( ::matrix3x4a_t *,::matrix3x4a_t *,::matrix3x4a_t *,float ) ;
            
            C_BasePlayer_exposer.def( 
                "GetRagdollInitBoneArrays"
                , GetRagdollInitBoneArrays_function_type( &::C_BasePlayer::GetRagdollInitBoneArrays )
                , ( bp::arg("pDeltaBones0"), bp::arg("pDeltaBones1"), bp::arg("pCurrentBones"), bp::arg("boneDt") ) );
        
        }
        { //::C_BasePlayer::GetRenderedWeaponModel
        
            typedef ::C_BaseAnimating * ( ::C_BasePlayer::*GetRenderedWeaponModel_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetRenderedWeaponModel"
                , GetRenderedWeaponModel_function_type( &::C_BasePlayer::GetRenderedWeaponModel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetRepresentativeRagdoll
        
            typedef ::IRagdoll * ( ::C_BasePlayer::*GetRepresentativeRagdoll_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetRepresentativeRagdoll"
                , GetRepresentativeRagdoll_function_type( &::C_BasePlayer::GetRepresentativeRagdoll )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetSplitScreenPlayerSlot
        
            typedef int ( ::C_BasePlayer::*GetSplitScreenPlayerSlot_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetSplitScreenPlayerSlot"
                , GetSplitScreenPlayerSlot_function_type( &::C_BasePlayer::GetSplitScreenPlayerSlot ) );
        
        }
        { //::C_BasePlayer::GetSplitScreenSlotForPlayer
        
            typedef int ( *GetSplitScreenSlotForPlayer_function_type )( ::C_BaseEntity * );
            
            C_BasePlayer_exposer.def( 
                "GetSplitScreenSlotForPlayer"
                , GetSplitScreenSlotForPlayer_function_type( &::C_BasePlayer::GetSplitScreenSlotForPlayer )
                , ( bp::arg("pl") ) );
        
        }
        { //::C_BasePlayer::GetStepSoundVelocities
        
            typedef void ( ::C_BasePlayer::*GetStepSoundVelocities_function_type )( float *,float * ) ;
            
            C_BasePlayer_exposer.def( 
                "GetStepSoundVelocities"
                , GetStepSoundVelocities_function_type( &::C_BasePlayer::GetStepSoundVelocities )
                , ( bp::arg("velwalk"), bp::arg("velrun") ) );
        
        }
        { //::C_BasePlayer::GetSwimSoundTime
        
            typedef float ( ::C_BasePlayer::*GetSwimSoundTime_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetSwimSoundTime"
                , GetSwimSoundTime_function_type( &::C_BasePlayer::GetSwimSoundTime ) );
        
        }
        { //::C_BasePlayer::GetTimeBase
        
            typedef float ( ::C_BasePlayer::*GetTimeBase_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetTimeBase"
                , GetTimeBase_function_type( &::C_BasePlayer::GetTimeBase ) );
        
        }
        { //::C_BasePlayer::GetToolRecordingState
        
            typedef void ( ::C_BasePlayer::*GetToolRecordingState_function_type )( ::KeyValues * ) ;
            
            C_BasePlayer_exposer.def( 
                "GetToolRecordingState"
                , GetToolRecordingState_function_type( &::C_BasePlayer::GetToolRecordingState )
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BasePlayer::GetTracerType
        
            typedef char const * ( ::C_BasePlayer::*GetTracerType_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type( &::C_BasePlayer::GetTracerType ) );
        
        }
        { //::C_BasePlayer::GetUseEntity
        
            typedef ::C_BaseEntity * ( ::C_BasePlayer::*GetUseEntity_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetUseEntity"
                , GetUseEntity_function_type( &::C_BasePlayer::GetUseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetUserID
        
            typedef int ( ::C_BasePlayer::*GetUserID_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetUserID"
                , GetUserID_function_type( &::C_BasePlayer::GetUserID ) );
        
        }
        { //::C_BasePlayer::GetViewModel
        
            typedef ::C_BaseViewModel * ( ::C_BasePlayer::*GetViewModel_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "GetViewModel"
                , GetViewModel_function_type( &::C_BasePlayer::GetViewModel )
                , ( bp::arg("viewmodelindex")=(int)(0) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BasePlayer::GetWaterJumpTime
        
            typedef float ( ::C_BasePlayer::*GetWaterJumpTime_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "GetWaterJumpTime"
                , GetWaterJumpTime_function_type( &::C_BasePlayer::GetWaterJumpTime ) );
        
        }
        { //::C_BasePlayer::HasAnyLocalPlayer
        
            typedef bool ( *HasAnyLocalPlayer_function_type )(  );
            
            C_BasePlayer_exposer.def( 
                "HasAnyLocalPlayer"
                , HasAnyLocalPlayer_function_type( &::C_BasePlayer::HasAnyLocalPlayer ) );
        
        }
        { //::C_BasePlayer::HintMessage
        
            typedef bool ( ::C_BasePlayer::*HintMessage_function_type )( int,bool,bool ) ;
            
            C_BasePlayer_exposer.def( 
                "HintMessage"
                , HintMessage_function_type( &::C_BasePlayer::HintMessage )
                , ( bp::arg("hint"), bp::arg("bForce")=(bool)(false), bp::arg("bOnlyIfClear")=(bool)(false) ) );
        
        }
        { //::C_BasePlayer::HintMessage
        
            typedef void ( ::C_BasePlayer::*HintMessage_function_type )( char const * ) ;
            
            C_BasePlayer_exposer.def( 
                "HintMessage"
                , HintMessage_function_type( &::C_BasePlayer::HintMessage )
                , ( bp::arg("pMessage") ) );
        
        }
        { //::C_BasePlayer::IncrementEFNoInterpParity
        
            typedef void ( ::C_BasePlayer::*IncrementEFNoInterpParity_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IncrementEFNoInterpParity"
                , IncrementEFNoInterpParity_function_type( &::C_BasePlayer::IncrementEFNoInterpParity ) );
        
        }
        { //::C_BasePlayer::IsAllowedToSwitchWeapons
        
            typedef bool ( ::C_BasePlayer::*IsAllowedToSwitchWeapons_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsAllowedToSwitchWeapons"
                , IsAllowedToSwitchWeapons_function_type( &::C_BasePlayer::IsAllowedToSwitchWeapons ) );
        
        }
        { //::C_BasePlayer::IsBot
        
            typedef bool ( ::C_BasePlayer::*IsBot_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsBot"
                , IsBot_function_type( &::C_BasePlayer::IsBot ) );
        
        }
        { //::C_BasePlayer::IsHLTV
        
            typedef bool ( ::C_BasePlayer::*IsHLTV_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsHLTV"
                , IsHLTV_function_type( &::C_BasePlayer::IsHLTV ) );
        
        }
        { //::C_BasePlayer::IsInAVehicle
        
            typedef bool ( ::C_BasePlayer::*IsInAVehicle_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsInAVehicle"
                , IsInAVehicle_function_type( &::C_BasePlayer::IsInAVehicle ) );
        
        }
        { //::C_BasePlayer::IsInVGuiInputMode
        
            typedef bool ( ::C_BasePlayer::*IsInVGuiInputMode_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsInVGuiInputMode"
                , IsInVGuiInputMode_function_type( &::C_BasePlayer::IsInVGuiInputMode ) );
        
        }
        { //::C_BasePlayer::IsInViewModelVGuiInputMode
        
            typedef bool ( ::C_BasePlayer::*IsInViewModelVGuiInputMode_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsInViewModelVGuiInputMode"
                , IsInViewModelVGuiInputMode_function_type( &::C_BasePlayer::IsInViewModelVGuiInputMode ) );
        
        }
        { //::C_BasePlayer::IsLocalPlayer
        
            typedef bool ( *IsLocalPlayer_function_type )( ::C_BaseEntity const * );
            
            C_BasePlayer_exposer.def( 
                "IsLocalPlayer"
                , IsLocalPlayer_function_type( &::C_BasePlayer::IsLocalPlayer )
                , ( bp::arg("pl") ) );
        
        }
        { //::C_BasePlayer::IsLocalPlayer
        
            typedef bool ( ::C_BasePlayer::*IsLocalPlayer_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsLocalPlayer"
                , IsLocalPlayer_function_type( &::C_BasePlayer::IsLocalPlayer ) );
        
        }
        { //::C_BasePlayer::IsObserver
        
            typedef bool ( ::C_BasePlayer::*IsObserver_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsObserver"
                , IsObserver_function_type( &::C_BasePlayer::IsObserver ) );
        
        }
        { //::C_BasePlayer::IsOverridingViewmodel
        
            typedef bool ( ::C_BasePlayer::*IsOverridingViewmodel_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsOverridingViewmodel"
                , IsOverridingViewmodel_function_type( &::C_BasePlayer::IsOverridingViewmodel ) );
        
        }
        { //::C_BasePlayer::IsPlayer
        
            typedef bool ( ::C_BasePlayer::*IsPlayer_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsPlayer"
                , IsPlayer_function_type( &::C_BasePlayer::IsPlayer ) );
        
        }
        { //::C_BasePlayer::IsPlayerDead
        
            typedef bool ( ::C_BasePlayer::*IsPlayerDead_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsPlayerDead"
                , IsPlayerDead_function_type( &::C_BasePlayer::IsPlayerDead ) );
        
        }
        { //::C_BasePlayer::IsPlayerUnderwater
        
            typedef bool ( ::C_BasePlayer::*IsPlayerUnderwater_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsPlayerUnderwater"
                , IsPlayerUnderwater_function_type( &::C_BasePlayer::IsPlayerUnderwater ) );
        
        }
        { //::C_BasePlayer::IsPoisoned
        
            typedef bool ( ::C_BasePlayer::*IsPoisoned_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsPoisoned"
                , IsPoisoned_function_type( &::C_BasePlayer::IsPoisoned ) );
        
        }
        { //::C_BasePlayer::IsSplitScreenPartner
        
            typedef bool ( ::C_BasePlayer::*IsSplitScreenPartner_function_type )( ::C_BasePlayer * ) ;
            
            C_BasePlayer_exposer.def( 
                "IsSplitScreenPartner"
                , IsSplitScreenPartner_function_type( &::C_BasePlayer::IsSplitScreenPartner )
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::C_BasePlayer::IsSplitScreenPlayer
        
            typedef bool ( ::C_BasePlayer::*IsSplitScreenPlayer_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "IsSplitScreenPlayer"
                , IsSplitScreenPlayer_function_type( &::C_BasePlayer::IsSplitScreenPlayer ) );
        
        }
        { //::C_BasePlayer::IsSuitEquipped
        
            typedef bool ( ::C_BasePlayer::*IsSuitEquipped_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsSuitEquipped"
                , IsSuitEquipped_function_type( &::C_BasePlayer::IsSuitEquipped ) );
        
        }
        { //::C_BasePlayer::IsUseableEntity
        
            typedef bool ( ::C_BasePlayer::*IsUseableEntity_function_type )( ::C_BaseEntity *,unsigned int ) ;
            
            C_BasePlayer_exposer.def( 
                "IsUseableEntity"
                , IsUseableEntity_function_type( &::C_BasePlayer::IsUseableEntity )
                , ( bp::arg("pEntity"), bp::arg("requiredCaps") ) );
        
        }
        { //::C_BasePlayer::IsZoomed
        
            typedef bool ( ::C_BasePlayer::*IsZoomed_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "IsZoomed"
                , IsZoomed_function_type( &::C_BasePlayer::IsZoomed ) );
        
        }
        { //::C_BasePlayer::ItemPostFrame
        
            typedef void ( ::C_BasePlayer::*ItemPostFrame_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ItemPostFrame"
                , ItemPostFrame_function_type( &::C_BasePlayer::ItemPostFrame ) );
        
        }
        { //::C_BasePlayer::ItemPreFrame
        
            typedef void ( ::C_BasePlayer::*ItemPreFrame_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ItemPreFrame"
                , ItemPreFrame_function_type( &::C_BasePlayer::ItemPreFrame ) );
        
        }
        { //::C_BasePlayer::LeaveVehicle
        
            typedef void ( ::C_BasePlayer::*LeaveVehicle_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "LeaveVehicle"
                , LeaveVehicle_function_type( &::C_BasePlayer::LeaveVehicle ) );
        
        }
        { //::C_BasePlayer::LocalEyeAngles
        
            typedef ::QAngle const & ( ::C_BasePlayer::*LocalEyeAngles_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::C_BasePlayer::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_BasePlayer::MakeTracer
        
            typedef void ( ::C_BasePlayer::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_BasePlayer_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type( &::C_BasePlayer::MakeTracer )
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BasePlayer::MaxSpeed
        
            typedef float ( ::C_BasePlayer::*MaxSpeed_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::C_BasePlayer::MaxSpeed ) );
        
        }
        { //::C_BasePlayer::NotePredictionError
        
            typedef void ( ::C_BasePlayer::*NotePredictionError_function_type )( ::Vector const & ) ;
            
            C_BasePlayer_exposer.def( 
                "NotePredictionError"
                , NotePredictionError_function_type( &::C_BasePlayer::NotePredictionError )
                , ( bp::arg("vDelta") ) );
        
        }
        { //::C_BasePlayer::OnAchievementAchieved
        
            typedef void ( ::C_BasePlayer::*OnAchievementAchieved_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "OnAchievementAchieved"
                , OnAchievementAchieved_function_type( &::C_BasePlayer::OnAchievementAchieved )
                , ( bp::arg("iAchievement") ) );
        
        }
        { //::C_BasePlayer::OnDataChanged
        
            typedef void ( ::C_BasePlayer::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_BasePlayer_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type( &::C_BasePlayer::OnDataChanged )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BasePlayer::OnPreDataChanged
        
            typedef void ( ::C_BasePlayer::*OnPreDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_BasePlayer_exposer.def( 
                "OnPreDataChanged"
                , OnPreDataChanged_function_type( &::C_BasePlayer::OnPreDataChanged )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BasePlayer::OnRestore
        
            typedef void ( ::C_BasePlayer::*OnRestore_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "OnRestore"
                , OnRestore_function_type( &::C_BasePlayer::OnRestore ) );
        
        }
        { //::C_BasePlayer::PhysicsSimulate
        
            typedef void ( ::C_BasePlayer::*PhysicsSimulate_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "PhysicsSimulate"
                , PhysicsSimulate_function_type( &::C_BasePlayer::PhysicsSimulate ) );
        
        }
        { //::C_BasePlayer::PhysicsSolidMaskForEntity
        
            typedef unsigned int ( ::C_BasePlayer::*PhysicsSolidMaskForEntity_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "PhysicsSolidMaskForEntity"
                , PhysicsSolidMaskForEntity_function_type( &::C_BasePlayer::PhysicsSolidMaskForEntity ) );
        
        }
        { //::C_BasePlayer::PlayPlayerJingle
        
            typedef void ( ::C_BasePlayer::*PlayPlayerJingle_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "PlayPlayerJingle"
                , PlayPlayerJingle_function_type( &::C_BasePlayer::PlayPlayerJingle ) );
        
        }
        { //::C_BasePlayer::PlayStepSound
        
            typedef void ( ::C_BasePlayer::*PlayStepSound_function_type )( ::Vector &,::surfacedata_t *,float,bool ) ;
            
            C_BasePlayer_exposer.def( 
                "PlayStepSound"
                , PlayStepSound_function_type( &::C_BasePlayer::PlayStepSound )
                , ( bp::arg("vecOrigin"), bp::arg("psurface"), bp::arg("fvol"), bp::arg("force") ) );
        
        }
        { //::C_BasePlayer::PlayerUse
        
            typedef void ( ::C_BasePlayer::*PlayerUse_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "PlayerUse"
                , PlayerUse_function_type( &::C_BasePlayer::PlayerUse ) );
        
        }
        { //::C_BasePlayer::PostDataUpdate
        
            typedef void ( ::C_BasePlayer::*PostDataUpdate_function_type )( ::DataUpdateType_t ) ;
            
            C_BasePlayer_exposer.def( 
                "PostDataUpdate"
                , PostDataUpdate_function_type( &::C_BasePlayer::PostDataUpdate )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BasePlayer::PostThink
        
            typedef void ( ::C_BasePlayer::*PostThink_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "PostThink"
                , PostThink_function_type( &::C_BasePlayer::PostThink ) );
        
        }
        { //::C_BasePlayer::PreDataUpdate
        
            typedef void ( ::C_BasePlayer::*PreDataUpdate_function_type )( ::DataUpdateType_t ) ;
            
            C_BasePlayer_exposer.def( 
                "PreDataUpdate"
                , PreDataUpdate_function_type( &::C_BasePlayer::PreDataUpdate )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BasePlayer::PreRender
        
            typedef bool ( ::C_BasePlayer::*PreRender_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "PreRender"
                , PreRender_function_type( &::C_BasePlayer::PreRender )
                , ( bp::arg("nSplitScreenPlayerSlot") ) );
        
        }
        { //::C_BasePlayer::PreThink
        
            typedef void ( ::C_BasePlayer::*PreThink_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "PreThink"
                , PreThink_function_type( &::C_BasePlayer::PreThink ) );
        
        }
        { //::C_BasePlayer::RecvProxy_LocalOriginXY
        
            typedef void ( *RecvProxy_LocalOriginXY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_LocalOriginXY"
                , RecvProxy_LocalOriginXY_function_type( &::C_BasePlayer::RecvProxy_LocalOriginXY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_LocalOriginZ
        
            typedef void ( *RecvProxy_LocalOriginZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_LocalOriginZ"
                , RecvProxy_LocalOriginZ_function_type( &::C_BasePlayer::RecvProxy_LocalOriginZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_LocalVelocityX
        
            typedef void ( *RecvProxy_LocalVelocityX_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_LocalVelocityX"
                , RecvProxy_LocalVelocityX_function_type( &::C_BasePlayer::RecvProxy_LocalVelocityX )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_LocalVelocityY
        
            typedef void ( *RecvProxy_LocalVelocityY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_LocalVelocityY"
                , RecvProxy_LocalVelocityY_function_type( &::C_BasePlayer::RecvProxy_LocalVelocityY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_LocalVelocityZ
        
            typedef void ( *RecvProxy_LocalVelocityZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_LocalVelocityZ"
                , RecvProxy_LocalVelocityZ_function_type( &::C_BasePlayer::RecvProxy_LocalVelocityZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_NonLocalCellOriginXY
        
            typedef void ( *RecvProxy_NonLocalCellOriginXY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_NonLocalCellOriginXY"
                , RecvProxy_NonLocalCellOriginXY_function_type( &::C_BasePlayer::RecvProxy_NonLocalCellOriginXY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_NonLocalCellOriginZ
        
            typedef void ( *RecvProxy_NonLocalCellOriginZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_NonLocalCellOriginZ"
                , RecvProxy_NonLocalCellOriginZ_function_type( &::C_BasePlayer::RecvProxy_NonLocalCellOriginZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_NonLocalOriginXY
        
            typedef void ( *RecvProxy_NonLocalOriginXY_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_NonLocalOriginXY"
                , RecvProxy_NonLocalOriginXY_function_type( &::C_BasePlayer::RecvProxy_NonLocalOriginXY )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_NonLocalOriginZ
        
            typedef void ( *RecvProxy_NonLocalOriginZ_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_NonLocalOriginZ"
                , RecvProxy_NonLocalOriginZ_function_type( &::C_BasePlayer::RecvProxy_NonLocalOriginZ )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_ObserverMode
        
            typedef void ( *RecvProxy_ObserverMode_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_ObserverMode"
                , RecvProxy_ObserverMode_function_type( &::C_BasePlayer::RecvProxy_ObserverMode )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RecvProxy_ObserverTarget
        
            typedef void ( *RecvProxy_ObserverTarget_function_type )( ::CRecvProxyData const *,void *,void * );
            
            C_BasePlayer_exposer.def( 
                "RecvProxy_ObserverTarget"
                , RecvProxy_ObserverTarget_function_type( &::C_BasePlayer::RecvProxy_ObserverTarget )
                , ( bp::arg("pData"), bp::arg("pStruct"), bp::arg("pOut") ) );
        
        }
        { //::C_BasePlayer::RemoveFromPlayerSimulationList
        
            typedef void ( ::C_BasePlayer::*RemoveFromPlayerSimulationList_function_type )( ::C_BaseEntity * ) ;
            
            C_BasePlayer_exposer.def( 
                "RemoveFromPlayerSimulationList"
                , RemoveFromPlayerSimulationList_function_type( &::C_BasePlayer::RemoveFromPlayerSimulationList )
                , ( bp::arg("ent") ) );
        
        }
        { //::C_BasePlayer::RemoveSplitScreenPlayer
        
            typedef void ( ::C_BasePlayer::*RemoveSplitScreenPlayer_function_type )( ::C_BasePlayer * ) ;
            
            C_BasePlayer_exposer.def( 
                "RemoveSplitScreenPlayer"
                , RemoveSplitScreenPlayer_function_type( &::C_BasePlayer::RemoveSplitScreenPlayer )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BasePlayer::ResetAutoaim
        
            typedef void ( ::C_BasePlayer::*ResetAutoaim_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ResetAutoaim"
                , ResetAutoaim_function_type( &::C_BasePlayer::ResetAutoaim ) );
        
        }
        { //::C_BasePlayer::ResetObserverMode
        
            typedef void ( ::C_BasePlayer::*ResetObserverMode_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ResetObserverMode"
                , ResetObserverMode_function_type( &::C_BasePlayer::ResetObserverMode ) );
        
        }
        { //::C_BasePlayer::SelectItem
        
            typedef void ( ::C_BasePlayer::*SelectItem_function_type )( char const *,int ) ;
            
            C_BasePlayer_exposer.def( 
                "SelectItem"
                , SelectItem_function_type( &::C_BasePlayer::SelectItem )
                , ( bp::arg("pstr"), bp::arg("iSubType")=(int)(0) ) );
        
        }
        { //::C_BasePlayer::SelectLastItem
        
            typedef void ( ::C_BasePlayer::*SelectLastItem_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "SelectLastItem"
                , SelectLastItem_function_type( &::C_BasePlayer::SelectLastItem ) );
        
        }
        { //::C_BasePlayer::SetAnimation
        
            typedef void ( ::C_BasePlayer::*SetAnimation_function_type )( ::PLAYER_ANIM ) ;
            
            C_BasePlayer_exposer.def( 
                "SetAnimation"
                , SetAnimation_function_type( &::C_BasePlayer::SetAnimation )
                , ( bp::arg("playerAnim") ) );
        
        }
        { //::C_BasePlayer::SetAnimationExtension
        
            typedef void ( ::C_BasePlayer::*SetAnimationExtension_function_type )( char const * ) ;
            
            C_BasePlayer_exposer.def( 
                "SetAnimationExtension"
                , SetAnimationExtension_function_type( &::C_BasePlayer::SetAnimationExtension )
                , ( bp::arg("pExtension") ) );
        
        }
        { //::C_BasePlayer::SetFOV
        
            typedef bool ( ::C_BasePlayer::*SetFOV_function_type )( ::C_BaseEntity *,int,float,int ) ;
            
            C_BasePlayer_exposer.def( 
                "SetFOV"
                , SetFOV_function_type( &::C_BasePlayer::SetFOV )
                , ( bp::arg("pRequester"), bp::arg("FOV"), bp::arg("zoomRate"), bp::arg("iZoomStart")=(int)(0) ) );
        
        }
        { //::C_BasePlayer::SetLadderNormal
        
            typedef void ( ::C_BasePlayer::*SetLadderNormal_function_type )( ::Vector ) ;
            
            C_BasePlayer_exposer.def( 
                "SetLadderNormal"
                , SetLadderNormal_function_type( &::C_BasePlayer::SetLadderNormal )
                , ( bp::arg("vecLadderNormal") ) );
        
        }
        { //::C_BasePlayer::SetMaxSpeed
        
            typedef void ( ::C_BasePlayer::*SetMaxSpeed_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "SetMaxSpeed"
                , SetMaxSpeed_function_type( &::C_BasePlayer::SetMaxSpeed )
                , ( bp::arg("flMaxSpeed") ) );
        
        }
        { //::C_BasePlayer::SetObserverTarget
        
            typedef void ( ::C_BasePlayer::*SetObserverTarget_function_type )( ::EHANDLE ) ;
            
            C_BasePlayer_exposer.def( 
                "SetObserverTarget"
                , SetObserverTarget_function_type( &::C_BasePlayer::SetObserverTarget )
                , ( bp::arg("hObserverTarget") ) );
        
        }
        { //::C_BasePlayer::SetOldPlayerZ
        
            typedef void ( ::C_BasePlayer::*SetOldPlayerZ_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "SetOldPlayerZ"
                , SetOldPlayerZ_function_type( &::C_BasePlayer::SetOldPlayerZ )
                , ( bp::arg("flOld") ) );
        
        }
        { //::C_BasePlayer::SetPlayerUnderwater
        
            typedef void ( ::C_BasePlayer::*SetPlayerUnderwater_function_type )( bool ) ;
            
            C_BasePlayer_exposer.def( 
                "SetPlayerUnderwater"
                , SetPlayerUnderwater_function_type( &::C_BasePlayer::SetPlayerUnderwater )
                , ( bp::arg("state") ) );
        
        }
        { //::C_BasePlayer::SetPreviouslyPredictedOrigin
        
            typedef void ( ::C_BasePlayer::*SetPreviouslyPredictedOrigin_function_type )( ::Vector const & ) ;
            
            C_BasePlayer_exposer.def( 
                "SetPreviouslyPredictedOrigin"
                , SetPreviouslyPredictedOrigin_function_type( &::C_BasePlayer::SetPreviouslyPredictedOrigin )
                , ( bp::arg("vecAbsOrigin") ) );
        
        }
        { //::C_BasePlayer::SetPunchAngle
        
            typedef void ( ::C_BasePlayer::*SetPunchAngle_function_type )( ::QAngle const & ) ;
            
            C_BasePlayer_exposer.def( 
                "SetPunchAngle"
                , SetPunchAngle_function_type( &::C_BasePlayer::SetPunchAngle )
                , ( bp::arg("angle") ) );
        
        }
        { //::C_BasePlayer::SetRemoteSplitScreenPlayerViewsAreLocalPlayer
        
            typedef void ( *SetRemoteSplitScreenPlayerViewsAreLocalPlayer_function_type )( bool );
            
            C_BasePlayer_exposer.def( 
                "SetRemoteSplitScreenPlayerViewsAreLocalPlayer"
                , SetRemoteSplitScreenPlayerViewsAreLocalPlayer_function_type( &::C_BasePlayer::SetRemoteSplitScreenPlayerViewsAreLocalPlayer )
                , ( bp::arg("bSet") ) );
        
        }
        { //::C_BasePlayer::SetStepSoundTime
        
            typedef void ( ::C_BasePlayer::*SetStepSoundTime_function_type )( ::stepsoundtimes_t,bool ) ;
            
            C_BasePlayer_exposer.def( 
                "SetStepSoundTime"
                , SetStepSoundTime_function_type( &::C_BasePlayer::SetStepSoundTime )
                , ( bp::arg("iStepSoundTime"), bp::arg("bWalking") ) );
        
        }
        { //::C_BasePlayer::SetSuitUpdate
        
            typedef void ( ::C_BasePlayer::*SetSuitUpdate_function_type )( char *,int,int ) ;
            
            C_BasePlayer_exposer.def( 
                "SetSuitUpdate"
                , SetSuitUpdate_function_type( &::C_BasePlayer::SetSuitUpdate )
                , ( bp::arg("name"), bp::arg("fgroup"), bp::arg("iNoRepeat") ) );
        
        }
        { //::C_BasePlayer::SetSwimSoundTime
        
            typedef void ( ::C_BasePlayer::*SetSwimSoundTime_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "SetSwimSoundTime"
                , SetSwimSoundTime_function_type( &::C_BasePlayer::SetSwimSoundTime )
                , ( bp::arg("flSwimSoundTime") ) );
        
        }
        { //::C_BasePlayer::SetVehicleRole
        
            typedef void ( ::C_BasePlayer::*SetVehicleRole_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "SetVehicleRole"
                , SetVehicleRole_function_type( &::C_BasePlayer::SetVehicleRole )
                , ( bp::arg("nRole") ) );
        
        }
        { //::C_BasePlayer::SetWaterJumpTime
        
            typedef void ( ::C_BasePlayer::*SetWaterJumpTime_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "SetWaterJumpTime"
                , SetWaterJumpTime_function_type( &::C_BasePlayer::SetWaterJumpTime )
                , ( bp::arg("flWaterJumpTime") ) );
        
        }
        { //::C_BasePlayer::ShadowCastType
        
            typedef ::ShadowType_t ( ::C_BasePlayer::*ShadowCastType_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShadowCastType"
                , ShadowCastType_function_type( &::C_BasePlayer::ShadowCastType ) );
        
        }
        { //::C_BasePlayer::SharedSpawn
        
            typedef void ( ::C_BasePlayer::*SharedSpawn_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "SharedSpawn"
                , SharedSpawn_function_type( &::C_BasePlayer::SharedSpawn ) );
        
        }
        { //::C_BasePlayer::ShouldDraw
        
            typedef bool ( ::C_BasePlayer::*ShouldDraw_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type( &::C_BasePlayer::ShouldDraw ) );
        
        }
        { //::C_BasePlayer::ShouldDrawLocalPlayer
        
            typedef bool ( ::C_BasePlayer::*ShouldDrawLocalPlayer_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldDrawLocalPlayer"
                , ShouldDrawLocalPlayer_function_type( &::C_BasePlayer::ShouldDrawLocalPlayer ) );
        
        }
        { //::C_BasePlayer::ShouldInterpolate
        
            typedef bool ( ::C_BasePlayer::*ShouldInterpolate_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldInterpolate"
                , ShouldInterpolate_function_type( &::C_BasePlayer::ShouldInterpolate ) );
        
        }
        { //::C_BasePlayer::ShouldPredict
        
            typedef bool ( ::C_BasePlayer::*ShouldPredict_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldPredict"
                , ShouldPredict_function_type( &::C_BasePlayer::ShouldPredict ) );
        
        }
        { //::C_BasePlayer::ShouldReceiveProjectedTextures
        
            typedef bool ( ::C_BasePlayer::*ShouldReceiveProjectedTextures_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldReceiveProjectedTextures"
                , ShouldReceiveProjectedTextures_function_type( &::C_BasePlayer::ShouldReceiveProjectedTextures )
                , ( bp::arg("flags") ) );
        
        }
        { //::C_BasePlayer::ShouldRegenerateOriginFromCellBits
        
            typedef bool ( ::C_BasePlayer::*ShouldRegenerateOriginFromCellBits_function_type )(  ) const;
            
            C_BasePlayer_exposer.def( 
                "ShouldRegenerateOriginFromCellBits"
                , ShouldRegenerateOriginFromCellBits_function_type( &::C_BasePlayer::ShouldRegenerateOriginFromCellBits ) );
        
        }
        { //::C_BasePlayer::ShouldShowHints
        
            typedef bool ( ::C_BasePlayer::*ShouldShowHints_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ShouldShowHints"
                , ShouldShowHints_function_type( &::C_BasePlayer::ShouldShowHints ) );
        
        }
        { //::C_BasePlayer::Simulate
        
            typedef bool ( ::C_BasePlayer::*Simulate_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Simulate"
                , Simulate_function_type( &::C_BasePlayer::Simulate ) );
        
        }
        { //::C_BasePlayer::SimulatePlayerSimulatedEntities
        
            typedef void ( ::C_BasePlayer::*SimulatePlayerSimulatedEntities_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "SimulatePlayerSimulatedEntities"
                , SimulatePlayerSimulatedEntities_function_type( &::C_BasePlayer::SimulatePlayerSimulatedEntities ) );
        
        }
        { //::C_BasePlayer::SmoothViewOnStairs
        
            typedef void ( ::C_BasePlayer::*SmoothViewOnStairs_function_type )( ::Vector & ) ;
            
            C_BasePlayer_exposer.def( 
                "SmoothViewOnStairs"
                , SmoothViewOnStairs_function_type( &::C_BasePlayer::SmoothViewOnStairs )
                , ( bp::arg("eyeOrigin") ) );
        
        }
        { //::C_BasePlayer::Spawn
        
            typedef void ( ::C_BasePlayer::*Spawn_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Spawn"
                , Spawn_function_type( &::C_BasePlayer::Spawn ) );
        
        }
        { //::C_BasePlayer::TeamChange
        
            typedef void ( ::C_BasePlayer::*TeamChange_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "TeamChange"
                , TeamChange_function_type( &::C_BasePlayer::TeamChange )
                , ( bp::arg("iNewTeam") ) );
        
        }
        { //::C_BasePlayer::ThirdPersonSwitch
        
            typedef void ( ::C_BasePlayer::*ThirdPersonSwitch_function_type )( bool ) ;
            
            C_BasePlayer_exposer.def( 
                "ThirdPersonSwitch"
                , ThirdPersonSwitch_function_type( &::C_BasePlayer::ThirdPersonSwitch )
                , ( bp::arg("bThirdperson") ) );
        
        }
        { //::C_BasePlayer::TurnOffFlashlight
        
            typedef void ( ::C_BasePlayer::*TurnOffFlashlight_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "TurnOffFlashlight"
                , TurnOffFlashlight_function_type( &::C_BasePlayer::TurnOffFlashlight ) );
        
        }
        { //::C_BasePlayer::UnforceButtons
        
            typedef void ( ::C_BasePlayer::*UnforceButtons_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "UnforceButtons"
                , UnforceButtons_function_type( &::C_BasePlayer::UnforceButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::C_BasePlayer::UpdateButtonState
        
            typedef void ( ::C_BasePlayer::*UpdateButtonState_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateButtonState"
                , UpdateButtonState_function_type( &::C_BasePlayer::UpdateButtonState )
                , ( bp::arg("nUserCmdButtonMask") ) );
        
        }
        { //::C_BasePlayer::UpdateClientData
        
            typedef void ( ::C_BasePlayer::*UpdateClientData_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateClientData"
                , UpdateClientData_function_type( &::C_BasePlayer::UpdateClientData ) );
        
        }
        { //::C_BasePlayer::UpdateCollisionBounds
        
            typedef void ( ::C_BasePlayer::*UpdateCollisionBounds_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateCollisionBounds"
                , UpdateCollisionBounds_function_type( &::C_BasePlayer::UpdateCollisionBounds ) );
        
        }
        { //::C_BasePlayer::UpdateFlashlight
        
            typedef void ( ::C_BasePlayer::*UpdateFlashlight_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateFlashlight"
                , UpdateFlashlight_function_type( &::C_BasePlayer::UpdateFlashlight ) );
        
        }
        { //::C_BasePlayer::UpdateFogBlend
        
            typedef void ( ::C_BasePlayer::*UpdateFogBlend_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateFogBlend"
                , UpdateFogBlend_function_type( &::C_BasePlayer::UpdateFogBlend ) );
        
        }
        { //::C_BasePlayer::UpdateFogController
        
            typedef void ( ::C_BasePlayer::*UpdateFogController_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateFogController"
                , UpdateFogController_function_type( &::C_BasePlayer::UpdateFogController ) );
        
        }
        { //::C_BasePlayer::UpdateStepSound
        
            typedef void ( ::C_BasePlayer::*UpdateStepSound_function_type )( ::surfacedata_t *,::Vector const &,::Vector const & ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateStepSound"
                , UpdateStepSound_function_type( &::C_BasePlayer::UpdateStepSound )
                , ( bp::arg("psurface"), bp::arg("vecOrigin"), bp::arg("vecVelocity") ) );
        
        }
        { //::C_BasePlayer::UpdateUnderwaterState
        
            typedef void ( ::C_BasePlayer::*UpdateUnderwaterState_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateUnderwaterState"
                , UpdateUnderwaterState_function_type( &::C_BasePlayer::UpdateUnderwaterState ) );
        
        }
        { //::C_BasePlayer::UsingStandardWeaponsInVehicle
        
            typedef bool ( ::C_BasePlayer::*UsingStandardWeaponsInVehicle_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UsingStandardWeaponsInVehicle"
                , UsingStandardWeaponsInVehicle_function_type( &::C_BasePlayer::UsingStandardWeaponsInVehicle ) );
        
        }
        { //::C_BasePlayer::ViewPunch
        
            typedef void ( ::C_BasePlayer::*ViewPunch_function_type )( ::QAngle const & ) ;
            
            C_BasePlayer_exposer.def( 
                "ViewPunch"
                , ViewPunch_function_type( &::C_BasePlayer::ViewPunch )
                , ( bp::arg("angleOffset") ) );
        
        }
        { //::C_BasePlayer::ViewPunchReset
        
            typedef void ( ::C_BasePlayer::*ViewPunchReset_function_type )( float ) ;
            
            C_BasePlayer_exposer.def( 
                "ViewPunchReset"
                , ViewPunchReset_function_type( &::C_BasePlayer::ViewPunchReset )
                , ( bp::arg("tolerance")=0 ) );
        
        }
        { //::C_BasePlayer::Weapon_CanUse
        
            typedef bool ( ::C_BasePlayer::*Weapon_CanUse_function_type )( ::C_BaseCombatWeapon * ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_CanUse"
                , Weapon_CanUse_function_type( &::C_BasePlayer::Weapon_CanUse )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::C_BasePlayer::Weapon_DropPrimary
        
            typedef void ( ::C_BasePlayer::*Weapon_DropPrimary_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_DropPrimary"
                , Weapon_DropPrimary_function_type( &::C_BasePlayer::Weapon_DropPrimary ) );
        
        }
        { //::C_BasePlayer::Weapon_SetLast
        
            typedef void ( ::C_BasePlayer::*Weapon_SetLast_function_type )( ::C_BaseCombatWeapon * ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_SetLast"
                , Weapon_SetLast_function_type( &::C_BasePlayer::Weapon_SetLast )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::C_BasePlayer::Weapon_ShootPosition
        
            typedef ::Vector ( ::C_BasePlayer::*Weapon_ShootPosition_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_ShootPosition"
                , Weapon_ShootPosition_function_type( &::C_BasePlayer::Weapon_ShootPosition ) );
        
        }
        { //::C_BasePlayer::Weapon_ShouldSelectItem
        
            typedef bool ( ::C_BasePlayer::*Weapon_ShouldSelectItem_function_type )( ::C_BaseCombatWeapon * ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_ShouldSelectItem"
                , Weapon_ShouldSelectItem_function_type( &::C_BasePlayer::Weapon_ShouldSelectItem )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::C_BasePlayer::Weapon_ShouldSetLast
        
            typedef bool ( ::C_BasePlayer::*Weapon_ShouldSetLast_function_type )( ::C_BaseCombatWeapon *,::C_BaseCombatWeapon * ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_ShouldSetLast"
                , Weapon_ShouldSetLast_function_type( &::C_BasePlayer::Weapon_ShouldSetLast )
                , ( bp::arg("pOldWeapon"), bp::arg("pNewWeapon") ) );
        
        }
        { //::C_BasePlayer::Weapon_Switch
        
            typedef bool ( ::C_BasePlayer::*Weapon_Switch_function_type )( ::C_BaseCombatWeapon *,int ) ;
            
            C_BasePlayer_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type( &::C_BasePlayer::Weapon_Switch )
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        C_BasePlayer_exposer.def_readwrite( "m_Local", &C_BasePlayer::m_Local );
        C_BasePlayer_exposer.def_readwrite( "m_StuckLast", &C_BasePlayer::m_StuckLast );
        C_BasePlayer_exposer.def_readwrite( "m_afButtonForced", &C_BasePlayer::m_afButtonForced );
        C_BasePlayer_exposer.def_readwrite( "buttonslast", &C_BasePlayer::m_afButtonLast );
        C_BasePlayer_exposer.def_readwrite( "buttonspressed", &C_BasePlayer::m_afButtonPressed );
        C_BasePlayer_exposer.def_readwrite( "buttonsreleased", &C_BasePlayer::m_afButtonReleased );
        C_BasePlayer_exposer.def_readwrite( "m_bConstraintPastRadius", &C_BasePlayer::m_bConstraintPastRadius );
        C_BasePlayer_exposer.def_readwrite( "m_fOnTarget", &C_BasePlayer::m_fOnTarget );
        C_BasePlayer_exposer.def_readwrite( "m_flConstraintRadius", &C_BasePlayer::m_flConstraintRadius );
        C_BasePlayer_exposer.def_readwrite( "m_flConstraintSpeedFactor", &C_BasePlayer::m_flConstraintSpeedFactor );
        C_BasePlayer_exposer.def_readwrite( "m_flConstraintWidth", &C_BasePlayer::m_flConstraintWidth );
        C_BasePlayer_exposer.def_readwrite( "m_flFOVTime", &C_BasePlayer::m_flFOVTime );
        C_BasePlayer_exposer.def_readwrite( "m_hConstraintEntity", &C_BasePlayer::m_hConstraintEntity );
        C_BasePlayer_exposer.def_readwrite( "m_hTonemapController", &C_BasePlayer::m_hTonemapController );
        C_BasePlayer_exposer.def_readwrite( "m_hViewEntity", &C_BasePlayer::m_hViewEntity );
        C_BasePlayer_exposer.def_readwrite( "m_hZoomOwner", &C_BasePlayer::m_hZoomOwner );
        C_BasePlayer_exposer.def_readwrite( "m_iDefaultFOV", &C_BasePlayer::m_iDefaultFOV );
        C_BasePlayer_exposer.def_readwrite( "m_iFOV", &C_BasePlayer::m_iFOV );
        C_BasePlayer_exposer.def_readwrite( "m_iFOVStart", &C_BasePlayer::m_iFOVStart );
        C_BasePlayer_exposer.def_readwrite( "buttons", &C_BasePlayer::m_nButtons );
        C_BasePlayer_exposer.add_property( "m_pCurrentCommand"
                    , bp::make_function( (::CUserCmd * (*)( ::C_BasePlayer const & ))(&C_BasePlayer_wrapper::get_m_pCurrentCommand), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::C_BasePlayer &,::CUserCmd * ))(&C_BasePlayer_wrapper::set_m_pCurrentCommand), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        pyplusplus::containers::static_sized::register_array_1< char, 32 >( "__array_1_char_32" );
        { //C_BasePlayer::m_szAnimExtension [variable], type=char[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 32> ( *array_wrapper_creator )( ::C_BasePlayer & );
            
            C_BasePlayer_exposer.add_property( "m_szAnimExtension"
                , bp::make_function( array_wrapper_creator(&C_BasePlayer_wrapper::pyplusplus_m_szAnimExtension_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        C_BasePlayer_exposer.def_readwrite( "m_vecConstraintCenter", &C_BasePlayer::m_vecConstraintCenter );
        C_BasePlayer_exposer.def_readwrite( "m_vecFlashlightForward", &C_BasePlayer::m_vecFlashlightForward );
        C_BasePlayer_exposer.def_readwrite( "m_vecFlashlightOrigin", &C_BasePlayer::m_vecFlashlightOrigin );
        C_BasePlayer_exposer.def_readwrite( "m_vecFlashlightRight", &C_BasePlayer::m_vecFlashlightRight );
        C_BasePlayer_exposer.def_readwrite( "m_vecFlashlightUp", &C_BasePlayer::m_vecFlashlightUp );
        C_BasePlayer_exposer.def_readwrite( "pl", &C_BasePlayer::pl );
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_BasePlayer_wrapper::*default_Activate_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_BasePlayer_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_BasePlayer_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BasePlayer_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_BasePlayer_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_BasePlayer_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_BasePlayer_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_BasePlayer_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_BasePlayer_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_BasePlayer_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_BasePlayer_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_BasePlayer_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_BasePlayer_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_BasePlayer_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_BasePlayer_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BasePlayer_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BasePlayer_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_BasePlayer_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseAnimating::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseAnimating::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_BasePlayer_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseAnimating::GetCollideType)
                , default_GetCollideType_function_type(&C_BasePlayer_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_BasePlayer_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_BasePlayer_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_BasePlayer_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_BasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_BasePlayer_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_BasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_BasePlayer_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_BasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_BasePlayer_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_BasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_BasePlayer_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_BasePlayer_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_BasePlayer_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseEntity::Precache
        
            typedef void ( ::C_BaseEntity::*Precache_function_type )(  ) ;
            typedef void ( C_BasePlayer_wrapper::*default_Precache_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseEntity::Precache)
                , default_Precache_function_type(&C_BasePlayer_wrapper::default_Precache) );
        
        }
        { //::C_BaseEntity::PyNotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_BasePlayer_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_BasePlayer_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::PyNotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_BasePlayer_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseAnimating::PyOnNewModel
        
            typedef void ( ::C_BaseAnimating::*OnNewModel_function_type )(  ) ;
            typedef void ( C_BasePlayer_wrapper::*default_OnNewModel_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type(&::C_BaseAnimating::PyOnNewModel)
                , default_OnNewModel_function_type(&C_BasePlayer_wrapper::default_OnNewModel) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_BasePlayer_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_BasePlayer_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_BasePlayer_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_BasePlayer_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BasePlayer_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_BasePlayer_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BasePlayer_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BasePlayer_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_BasePlayer_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::UpdateOnRemove
        
            typedef void ( ::C_BaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_BasePlayer_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_BasePlayer_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_BaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_BasePlayer_wrapper::default_UpdateOnRemove) );
        
        }
        C_BasePlayer_exposer.staticmethod( "GetLocalPlayer" );
        C_BasePlayer_exposer.staticmethod( "GetOffset_m_Local" );
        C_BasePlayer_exposer.staticmethod( "GetPyNetworkType" );
        C_BasePlayer_exposer.staticmethod( "GetSplitScreenSlotForPlayer" );
        C_BasePlayer_exposer.staticmethod( "HasAnyLocalPlayer" );
        C_BasePlayer_exposer.staticmethod( "IsLocalPlayer" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_LocalOriginXY" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_LocalOriginZ" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_LocalVelocityX" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_LocalVelocityY" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_LocalVelocityZ" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_NonLocalCellOriginXY" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_NonLocalCellOriginZ" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_NonLocalOriginXY" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_NonLocalOriginZ" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_ObserverMode" );
        C_BasePlayer_exposer.staticmethod( "RecvProxy_ObserverTarget" );
        C_BasePlayer_exposer.staticmethod( "SetRemoteSplitScreenPlayerViewsAreLocalPlayer" );
        { //::C_BasePlayer::TestCollision
            
                typedef bool ( ::C_BasePlayer::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( C_BasePlayer_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                C_BasePlayer_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::C_BasePlayer::TestCollision)
                    , default_TestCollision_function_type(&C_BasePlayer_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

