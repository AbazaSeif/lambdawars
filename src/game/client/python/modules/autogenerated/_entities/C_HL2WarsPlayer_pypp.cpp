// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "videocfg/videocfg.h"
#include "cbase.h"
#include "takedamageinfo.h"
#include "c_baseanimating.h"
#include "c_baseanimatingoverlay.h"
#include "c_baseflex.h"
#include "c_basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "c_baseplayer.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "c_playerresource.h"
#include "sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "c_wars_weapon.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "srcpy_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "srcpy_converters_ents.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_HL2WarsPlayer_pypp.hpp"

namespace bp = boost::python;

struct C_HL2WarsPlayer_wrapper : C_HL2WarsPlayer, bp::wrapper< C_HL2WarsPlayer > {

    C_HL2WarsPlayer_wrapper( )
    : C_HL2WarsPlayer( )
      , bp::wrapper< C_HL2WarsPlayer >(){
        // null constructor
    
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::ClientThink(  );
            }
        else
            this->C_HL2WarsPlayer::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_HL2WarsPlayer::ClientThink( );
    }

    static boost::python::tuple GetSelectedUnitTypeRange( ::C_HL2WarsPlayer & inst ){
        int iMin2;
        int iMax2;
        inst.GetSelectedUnitTypeRange(iMin2, iMax2);
        return bp::make_tuple( iMin2, iMax2 );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_HL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_HL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnDataChanged( ::DataUpdateType_t updateType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnDataChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnDataChanged( updateType ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( updateType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnDataChanged( updateType );
            }
        else
            this->C_HL2WarsPlayer::OnDataChanged( updateType );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t updateType ) {
        C_HL2WarsPlayer::OnDataChanged( updateType );
    }

    virtual void OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonDoublePressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonDoublePressed( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonDoublePressed = this->get_override( "OnLeftMouseButtonDoublePressed" );
        if( func_OnLeftMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
    }

    virtual void OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonPressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonPressed( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonPressed = this->get_override( "OnLeftMouseButtonPressed" );
        if( func_OnLeftMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
    }

    virtual void OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonReleased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonReleased( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonReleased = this->get_override( "OnLeftMouseButtonReleased" );
        if( func_OnLeftMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
    }

    virtual void OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonDoublePressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonDoublePressed( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonDoublePressed = this->get_override( "OnRightMouseButtonDoublePressed" );
        if( func_OnRightMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
    }

    virtual void OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonPressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonPressed( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonPressed = this->get_override( "OnRightMouseButtonPressed" );
        if( func_OnRightMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
    }

    virtual void OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonReleased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonReleased( boost::ref(data) ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonReleased = this->get_override( "OnRightMouseButtonReleased" );
        if( func_OnRightMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnRightMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
            }
        else
            this->C_HL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        C_HL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::Spawn(  );
            }
        else
            this->C_HL2WarsPlayer::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_HL2WarsPlayer::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_HL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_HL2WarsPlayer::UpdateOnRemove(  );
            }
        else
            this->C_HL2WarsPlayer::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_HL2WarsPlayer::UpdateOnRemove( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnRestore(  );
            }
        else
            this->C_BaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseEntity::OnRestore( );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Precache(  );
            }
        else
            this->C_BaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseEntity::Precache( );
    }

    virtual void PyNotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyNotifyShouldTransmit( state ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyNotifyShouldTransmit( state );
            }
        else
            this->C_BaseEntity::PyNotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseEntity::PyNotifyShouldTransmit( state );
    }

    virtual void PyOnNewModel(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnNewModel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnNewModel(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::PyOnNewModel(  );
            }
        else
            this->C_BaseAnimating::PyOnNewModel(  );
    }
    
    void default_OnNewModel(  ) {
        C_BaseAnimating::PyOnNewModel( );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::ShouldDraw(  );
            }
        else
            return this->C_BaseEntity::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseEntity::ShouldDraw( );
    }

    virtual bool Simulate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Simulate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Simulate(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::Simulate(  );
            }
        else
            return this->C_BaseAnimating::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_BaseAnimating::Simulate( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual ClientClass* GetClientClass() {
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_HL2WarsPlayer::GetClientClass();
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>("pyClientClass", GetPyInstance(), NULL, true);
        if( pClientClass )
            return pClientClass;
        return C_HL2WarsPlayer::GetClientClass();
    }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: C_HL2WarsPlayer\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->C_HL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->C_HL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return C_HL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

};

void register_C_HL2WarsPlayer_class(){

    { //::C_HL2WarsPlayer
        typedef bp::class_< C_HL2WarsPlayer_wrapper, bp::bases< C_BasePlayer >, boost::noncopyable > C_HL2WarsPlayer_exposer_t;
        C_HL2WarsPlayer_exposer_t C_HL2WarsPlayer_exposer = C_HL2WarsPlayer_exposer_t( "C_HL2WarsPlayer", bp::no_init );
        bp::scope C_HL2WarsPlayer_scope( C_HL2WarsPlayer_exposer );
        C_HL2WarsPlayer_exposer.def( bp::init< >() );
        { //::C_HL2WarsPlayer::AddActiveAbility
        
            typedef void ( ::C_HL2WarsPlayer::*AddActiveAbility_function_type )( ::boost::python::object ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "AddActiveAbility"
                , AddActiveAbility_function_type( &::C_HL2WarsPlayer::AddActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::C_HL2WarsPlayer::AddToGroup
        
            typedef void ( ::C_HL2WarsPlayer::*AddToGroup_function_type )( int,::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "AddToGroup"
                , AddToGroup_function_type( &::C_HL2WarsPlayer::AddToGroup )
                , ( bp::arg("group"), bp::arg("pUnit") ) );
        
        }
        { //::C_HL2WarsPlayer::AddUnit
        
            typedef void ( ::C_HL2WarsPlayer::*AddUnit_function_type )( ::C_BaseEntity *,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "AddUnit"
                , AddUnit_function_type( &::C_HL2WarsPlayer::AddUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::C_HL2WarsPlayer::CalculateHeight
        
            typedef void ( ::C_HL2WarsPlayer::*CalculateHeight_function_type )( ::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CalculateHeight"
                , CalculateHeight_function_type( &::C_HL2WarsPlayer::CalculateHeight )
                , ( bp::arg("vPosition") ) );
        
        }
        { //::C_HL2WarsPlayer::CalculateMouseData
        
            typedef void ( ::C_HL2WarsPlayer::*CalculateMouseData_function_type )( ::Vector const &,::Vector const &,::Vector const &,::MouseTraceData_t & ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "CalculateMouseData"
                , CalculateMouseData_function_type( &::C_HL2WarsPlayer::CalculateMouseData )
                , ( bp::arg("vMouseAim"), bp::arg("vPos"), bp::arg("vCamOffset"), bp::arg("mousedata") ) );
        
        }
        { //::C_HL2WarsPlayer::CamCalculateGroupOrigin
        
            typedef ::Vector ( ::C_HL2WarsPlayer::*CamCalculateGroupOrigin_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CamCalculateGroupOrigin"
                , CamCalculateGroupOrigin_function_type( &::C_HL2WarsPlayer::CamCalculateGroupOrigin ) );
        
        }
        { //::C_HL2WarsPlayer::CamFollowEntity
        
            typedef void ( ::C_HL2WarsPlayer::*CamFollowEntity_function_type )( ::C_BaseEntity *,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CamFollowEntity"
                , CamFollowEntity_function_type( &::C_HL2WarsPlayer::CamFollowEntity )
                , ( bp::arg("pEnt"), bp::arg("forced")=(bool)(false) ) );
        
        }
        { //::C_HL2WarsPlayer::CamFollowRelease
        
            typedef void ( ::C_HL2WarsPlayer::*CamFollowRelease_function_type )( bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CamFollowRelease"
                , CamFollowRelease_function_type( &::C_HL2WarsPlayer::CamFollowRelease )
                , ( bp::arg("forced")=(bool)(false) ) );
        
        }
        { //::C_HL2WarsPlayer::ChangeFaction
        
            typedef void ( ::C_HL2WarsPlayer::*ChangeFaction_function_type )( char const * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ChangeFaction"
                , ChangeFaction_function_type( &::C_HL2WarsPlayer::ChangeFaction )
                , ( bp::arg("faction") ) );
        
        }
        { //::C_HL2WarsPlayer::CleanupGroups
        
            typedef void ( ::C_HL2WarsPlayer::*CleanupGroups_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CleanupGroups"
                , CleanupGroups_function_type( &::C_HL2WarsPlayer::CleanupGroups ) );
        
        }
        { //::C_HL2WarsPlayer::ClearActiveAbilities
        
            typedef void ( ::C_HL2WarsPlayer::*ClearActiveAbilities_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ClearActiveAbilities"
                , ClearActiveAbilities_function_type( &::C_HL2WarsPlayer::ClearActiveAbilities ) );
        
        }
        { //::C_HL2WarsPlayer::ClearGroup
        
            typedef void ( ::C_HL2WarsPlayer::*ClearGroup_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ClearGroup"
                , ClearGroup_function_type( &::C_HL2WarsPlayer::ClearGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::C_HL2WarsPlayer::ClearMouse
        
            typedef void ( ::C_HL2WarsPlayer::*ClearMouse_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ClearMouse"
                , ClearMouse_function_type( &::C_HL2WarsPlayer::ClearMouse ) );
        
        }
        { //::C_HL2WarsPlayer::ClearSelection
        
            typedef void ( ::C_HL2WarsPlayer::*ClearSelection_function_type )( bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ClearSelection"
                , ClearSelection_function_type( &::C_HL2WarsPlayer::ClearSelection )
                , ( bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::C_HL2WarsPlayer::ClientThink
        
            typedef void ( ::C_HL2WarsPlayer::*ClientThink_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_HL2WarsPlayer::ClientThink)
                , default_ClientThink_function_type(&C_HL2WarsPlayer_wrapper::default_ClientThink) );
        
        }
        { //::C_HL2WarsPlayer::CountGroup
        
            typedef int ( ::C_HL2WarsPlayer::*CountGroup_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CountGroup"
                , CountGroup_function_type( &::C_HL2WarsPlayer::CountGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::C_HL2WarsPlayer::CountUnits
        
            typedef int ( ::C_HL2WarsPlayer::*CountUnits_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CountUnits"
                , CountUnits_function_type( &::C_HL2WarsPlayer::CountUnits ) );
        
        }
        { //::C_HL2WarsPlayer::EyePosition
        
            typedef ::Vector ( ::C_HL2WarsPlayer::*EyePosition_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::C_HL2WarsPlayer::EyePosition ) );
        
        }
        { //::C_HL2WarsPlayer::FindUnit
        
            typedef int ( ::C_HL2WarsPlayer::*FindUnit_function_type )( ::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "FindUnit"
                , FindUnit_function_type( &::C_HL2WarsPlayer::FindUnit )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::C_HL2WarsPlayer::ForceShowMouse
        
            typedef bool ( ::C_HL2WarsPlayer::*ForceShowMouse_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ForceShowMouse"
                , ForceShowMouse_function_type( &::C_HL2WarsPlayer::ForceShowMouse ) );
        
        }
        { //::C_HL2WarsPlayer::GetActiveWeapon
        
            typedef ::C_BaseCombatWeapon * ( ::C_HL2WarsPlayer::*GetActiveWeapon_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetActiveWeapon"
                , GetActiveWeapon_function_type( &::C_HL2WarsPlayer::GetActiveWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetBoxSelection
        
            typedef void ( ::C_HL2WarsPlayer::*GetBoxSelection_function_type )( int,int,int,int,::CUtlVector< CHandle< C_BaseEntity >, CUtlMemory< CHandle< C_BaseEntity >, int > > &,char const * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetBoxSelection"
                , GetBoxSelection_function_type( &::C_HL2WarsPlayer::GetBoxSelection )
                , ( bp::arg("iXMin"), bp::arg("iYMin"), bp::arg("iXMax"), bp::arg("iYMax"), bp::arg("selection"), bp::arg("pUnitType")=bp::object() ) );
        
        }
        { //::C_HL2WarsPlayer::GetCamAcceleration
        
            typedef float ( ::C_HL2WarsPlayer::*GetCamAcceleration_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamAcceleration"
                , GetCamAcceleration_function_type( &::C_HL2WarsPlayer::GetCamAcceleration ) );
        
        }
        { //::C_HL2WarsPlayer::GetCamFriction
        
            typedef float ( ::C_HL2WarsPlayer::*GetCamFriction_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamFriction"
                , GetCamFriction_function_type( &::C_HL2WarsPlayer::GetCamFriction ) );
        
        }
        { //::C_HL2WarsPlayer::GetCamGroundPos
        
            typedef ::Vector const & ( ::C_HL2WarsPlayer::*GetCamGroundPos_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamGroundPos"
                , GetCamGroundPos_function_type( &::C_HL2WarsPlayer::GetCamGroundPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetCamLimits
        
            typedef ::Vector const & ( ::C_HL2WarsPlayer::*GetCamLimits_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamLimits"
                , GetCamLimits_function_type( &::C_HL2WarsPlayer::GetCamLimits )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetCamMaxHeight
        
            typedef float ( ::C_HL2WarsPlayer::*GetCamMaxHeight_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamMaxHeight"
                , GetCamMaxHeight_function_type( &::C_HL2WarsPlayer::GetCamMaxHeight ) );
        
        }
        { //::C_HL2WarsPlayer::GetCamSpeed
        
            typedef float ( ::C_HL2WarsPlayer::*GetCamSpeed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamSpeed"
                , GetCamSpeed_function_type( &::C_HL2WarsPlayer::GetCamSpeed ) );
        
        }
        { //::C_HL2WarsPlayer::GetCamStopSpeed
        
            typedef float ( ::C_HL2WarsPlayer::*GetCamStopSpeed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCamStopSpeed"
                , GetCamStopSpeed_function_type( &::C_HL2WarsPlayer::GetCamStopSpeed ) );
        
        }
        { //::C_HL2WarsPlayer::GetCameraOffset
        
            typedef ::Vector const & ( ::C_HL2WarsPlayer::*GetCameraOffset_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCameraOffset"
                , GetCameraOffset_function_type( &::C_HL2WarsPlayer::GetCameraOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetControlledUnit
        
            typedef ::C_BaseEntity * ( ::C_HL2WarsPlayer::*GetControlledUnit_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetControlledUnit"
                , GetControlledUnit_function_type( &::C_HL2WarsPlayer::GetControlledUnit )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetFaction
        
            typedef char const * ( ::C_HL2WarsPlayer::*GetFaction_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetFaction"
                , GetFaction_function_type( &::C_HL2WarsPlayer::GetFaction ) );
        
        }
        { //::C_HL2WarsPlayer::GetGroup
        
            typedef ::CUtlVector< CHandle< C_BaseEntity >, CUtlMemory< CHandle< C_BaseEntity >, int > > const & ( ::C_HL2WarsPlayer::*GetGroup_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetGroup"
                , GetGroup_function_type( &::C_HL2WarsPlayer::GetGroup )
                , ( bp::arg("group") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetGroupNumber
        
            typedef int ( ::C_HL2WarsPlayer::*GetGroupNumber_function_type )( ::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetGroupNumber"
                , GetGroupNumber_function_type( &::C_HL2WarsPlayer::GetGroupNumber )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::C_HL2WarsPlayer::GetGroupUnit
        
            typedef ::C_BaseEntity * ( ::C_HL2WarsPlayer::*GetGroupUnit_function_type )( int,int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetGroupUnit"
                , GetGroupUnit_function_type( &::C_HL2WarsPlayer::GetGroupUnit )
                , ( bp::arg("group"), bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetLocalHL2WarsPlayer
        
            typedef ::C_HL2WarsPlayer * ( *GetLocalHL2WarsPlayer_function_type )( int );
            
            C_HL2WarsPlayer_exposer.def( 
                "GetLocalHL2WarsPlayer"
                , GetLocalHL2WarsPlayer_function_type( &::C_HL2WarsPlayer::GetLocalHL2WarsPlayer )
                , ( bp::arg("nSlot")=(int)(-0x000000001) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseAim
        
            typedef ::Vector const & ( ::C_HL2WarsPlayer::*GetMouseAim_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseAim"
                , GetMouseAim_function_type( &::C_HL2WarsPlayer::GetMouseAim )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseCapture
        
            typedef ::C_BaseEntity * ( ::C_HL2WarsPlayer::*GetMouseCapture_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseCapture"
                , GetMouseCapture_function_type( &::C_HL2WarsPlayer::GetMouseCapture )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseData
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseData_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseData"
                , GetMouseData_function_type( &::C_HL2WarsPlayer::GetMouseData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataLeftDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataLeftDoublePressed_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftDoublePressed"
                , GetMouseDataLeftDoublePressed_function_type( &::C_HL2WarsPlayer::GetMouseDataLeftDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataLeftPressed
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataLeftPressed_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftPressed"
                , GetMouseDataLeftPressed_function_type( &::C_HL2WarsPlayer::GetMouseDataLeftPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataLeftReleased
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataLeftReleased_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftReleased"
                , GetMouseDataLeftReleased_function_type( &::C_HL2WarsPlayer::GetMouseDataLeftReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataRightDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataRightDoublePressed_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataRightDoublePressed"
                , GetMouseDataRightDoublePressed_function_type( &::C_HL2WarsPlayer::GetMouseDataRightDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataRightPressed
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataRightPressed_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataRightPressed"
                , GetMouseDataRightPressed_function_type( &::C_HL2WarsPlayer::GetMouseDataRightPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetMouseDataRightReleased
        
            typedef ::MouseTraceData_t const & ( ::C_HL2WarsPlayer::*GetMouseDataRightReleased_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetMouseDataRightReleased"
                , GetMouseDataRightReleased_function_type( &::C_HL2WarsPlayer::GetMouseDataRightReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::C_HL2WarsPlayer::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_HL2WarsPlayer_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_HL2WarsPlayer::GetPyNetworkType ) );
        
        }
        { //::C_HL2WarsPlayer::GetSelectedUnitType
        
            typedef char const * ( ::C_HL2WarsPlayer::*GetSelectedUnitType_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetSelectedUnitType"
                , GetSelectedUnitType_function_type( &::C_HL2WarsPlayer::GetSelectedUnitType ) );
        
        }
        { //::C_HL2WarsPlayer::GetSelectedUnitTypeRange
        
            typedef boost::python::tuple ( *GetSelectedUnitTypeRange_function_type )( ::C_HL2WarsPlayer & );
            
            C_HL2WarsPlayer_exposer.def( 
                "GetSelectedUnitTypeRange"
                , GetSelectedUnitTypeRange_function_type( &C_HL2WarsPlayer_wrapper::GetSelectedUnitTypeRange )
                , ( bp::arg("inst") ) );
        
        }
        { //::C_HL2WarsPlayer::GetSelection
        
            typedef ::boost::python::list ( ::C_HL2WarsPlayer::*GetSelection_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetSelection"
                , GetSelection_function_type( &::C_HL2WarsPlayer::GetSelection ) );
        
        }
        { //::C_HL2WarsPlayer::GetSingleActiveAbility
        
            typedef ::boost::python::object ( ::C_HL2WarsPlayer::*GetSingleActiveAbility_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetSingleActiveAbility"
                , GetSingleActiveAbility_function_type( &::C_HL2WarsPlayer::GetSingleActiveAbility ) );
        
        }
        { //::C_HL2WarsPlayer::GetUnit
        
            typedef ::C_BaseEntity * ( ::C_HL2WarsPlayer::*GetUnit_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetUnit"
                , GetUnit_function_type( &::C_HL2WarsPlayer::GetUnit )
                , ( bp::arg("idx") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::GetWeapon
        
            typedef ::C_BaseCombatWeapon * ( ::C_HL2WarsPlayer::*GetWeapon_function_type )( int ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetWeapon"
                , GetWeapon_function_type( &::C_HL2WarsPlayer::GetWeapon )
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_HL2WarsPlayer::IsActiveAbility
        
            typedef bool ( ::C_HL2WarsPlayer::*IsActiveAbility_function_type )( ::boost::python::object ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsActiveAbility"
                , IsActiveAbility_function_type( &::C_HL2WarsPlayer::IsActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::C_HL2WarsPlayer::IsLeftDoublePressed
        
            typedef bool ( ::C_HL2WarsPlayer::*IsLeftDoublePressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsLeftDoublePressed"
                , IsLeftDoublePressed_function_type( &::C_HL2WarsPlayer::IsLeftDoublePressed ) );
        
        }
        { //::C_HL2WarsPlayer::IsLeftPressed
        
            typedef bool ( ::C_HL2WarsPlayer::*IsLeftPressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsLeftPressed"
                , IsLeftPressed_function_type( &::C_HL2WarsPlayer::IsLeftPressed ) );
        
        }
        { //::C_HL2WarsPlayer::IsRightDoublePressed
        
            typedef bool ( ::C_HL2WarsPlayer::*IsRightDoublePressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsRightDoublePressed"
                , IsRightDoublePressed_function_type( &::C_HL2WarsPlayer::IsRightDoublePressed ) );
        
        }
        { //::C_HL2WarsPlayer::IsRightPressed
        
            typedef bool ( ::C_HL2WarsPlayer::*IsRightPressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsRightPressed"
                , IsRightPressed_function_type( &::C_HL2WarsPlayer::IsRightPressed ) );
        
        }
        { //::C_HL2WarsPlayer::IsStrategicModeOn
        
            typedef bool ( ::C_HL2WarsPlayer::*IsStrategicModeOn_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "IsStrategicModeOn"
                , IsStrategicModeOn_function_type( &::C_HL2WarsPlayer::IsStrategicModeOn ) );
        
        }
        { //::C_HL2WarsPlayer::MakeCurrentSelectionGroup
        
            typedef void ( ::C_HL2WarsPlayer::*MakeCurrentSelectionGroup_function_type )( int,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "MakeCurrentSelectionGroup"
                , MakeCurrentSelectionGroup_function_type( &::C_HL2WarsPlayer::MakeCurrentSelectionGroup )
                , ( bp::arg("group"), bp::arg("bClearGroup") ) );
        
        }
        { //::C_HL2WarsPlayer::MinimapClick
        
            typedef void ( ::C_HL2WarsPlayer::*MinimapClick_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "MinimapClick"
                , MinimapClick_function_type( &::C_HL2WarsPlayer::MinimapClick )
                , ( bp::arg("mousedata") ) );
        
        }
        { //::C_HL2WarsPlayer::OnChangeOwnerNumber
        
            typedef void ( ::C_HL2WarsPlayer::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_HL2WarsPlayer::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_HL2WarsPlayer_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_HL2WarsPlayer::OnDataChanged
        
            typedef void ( ::C_HL2WarsPlayer::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_HL2WarsPlayer::OnDataChanged)
                , default_OnDataChanged_function_type(&C_HL2WarsPlayer_wrapper::default_OnDataChanged)
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_HL2WarsPlayer::OnLeftMouseButtonDoublePressed
        
            typedef void ( ::C_HL2WarsPlayer::*OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonDoublePressed"
                , OnLeftMouseButtonDoublePressed_function_type(&::C_HL2WarsPlayer::OnLeftMouseButtonDoublePressed)
                , default_OnLeftMouseButtonDoublePressed_function_type(&C_HL2WarsPlayer_wrapper::default_OnLeftMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnLeftMouseButtonPressed
        
            typedef void ( ::C_HL2WarsPlayer::*OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonPressed"
                , OnLeftMouseButtonPressed_function_type(&::C_HL2WarsPlayer::OnLeftMouseButtonPressed)
                , default_OnLeftMouseButtonPressed_function_type(&C_HL2WarsPlayer_wrapper::default_OnLeftMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnLeftMouseButtonReleased
        
            typedef void ( ::C_HL2WarsPlayer::*OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonReleased"
                , OnLeftMouseButtonReleased_function_type(&::C_HL2WarsPlayer::OnLeftMouseButtonReleased)
                , default_OnLeftMouseButtonReleased_function_type(&C_HL2WarsPlayer_wrapper::default_OnLeftMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnRightMouseButtonDoublePressed
        
            typedef void ( ::C_HL2WarsPlayer::*OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonDoublePressed"
                , OnRightMouseButtonDoublePressed_function_type(&::C_HL2WarsPlayer::OnRightMouseButtonDoublePressed)
                , default_OnRightMouseButtonDoublePressed_function_type(&C_HL2WarsPlayer_wrapper::default_OnRightMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnRightMouseButtonPressed
        
            typedef void ( ::C_HL2WarsPlayer::*OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonPressed"
                , OnRightMouseButtonPressed_function_type(&::C_HL2WarsPlayer::OnRightMouseButtonPressed)
                , default_OnRightMouseButtonPressed_function_type(&C_HL2WarsPlayer_wrapper::default_OnRightMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnRightMouseButtonReleased
        
            typedef void ( ::C_HL2WarsPlayer::*OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonReleased"
                , OnRightMouseButtonReleased_function_type(&::C_HL2WarsPlayer::OnRightMouseButtonReleased)
                , default_OnRightMouseButtonReleased_function_type(&C_HL2WarsPlayer_wrapper::default_OnRightMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::C_HL2WarsPlayer::OnSelectionChanged
        
            typedef void ( ::C_HL2WarsPlayer::*OnSelectionChanged_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnSelectionChanged"
                , OnSelectionChanged_function_type( &::C_HL2WarsPlayer::OnSelectionChanged ) );
        
        }
        { //::C_HL2WarsPlayer::OrderUnits
        
            typedef void ( ::C_HL2WarsPlayer::*OrderUnits_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OrderUnits"
                , OrderUnits_function_type( &::C_HL2WarsPlayer::OrderUnits ) );
        
        }
        { //::C_HL2WarsPlayer::PostDataUpdate
        
            typedef void ( ::C_HL2WarsPlayer::*PostDataUpdate_function_type )( ::DataUpdateType_t ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "PostDataUpdate"
                , PostDataUpdate_function_type( &::C_HL2WarsPlayer::PostDataUpdate )
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_HL2WarsPlayer::PyCamFollowGroup
        
            typedef void ( ::C_HL2WarsPlayer::*CamFollowGroup_function_type )( ::boost::python::list,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CamFollowGroup"
                , CamFollowGroup_function_type( &::C_HL2WarsPlayer::PyCamFollowGroup )
                , ( bp::arg("entities"), bp::arg("forced")=(bool)(false) ) );
        
        }
        { //::C_HL2WarsPlayer::PyMakeSelection
        
            typedef void ( ::C_HL2WarsPlayer::*MakeSelection_function_type )( ::boost::python::list ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "MakeSelection"
                , MakeSelection_function_type( &::C_HL2WarsPlayer::PyMakeSelection )
                , ( bp::arg("selection") ) );
        
        }
        { //::C_HL2WarsPlayer::RemoveActiveAbility
        
            typedef void ( ::C_HL2WarsPlayer::*RemoveActiveAbility_function_type )( ::boost::python::object ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "RemoveActiveAbility"
                , RemoveActiveAbility_function_type( &::C_HL2WarsPlayer::RemoveActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::C_HL2WarsPlayer::RemoveUnit
        
            typedef void ( ::C_HL2WarsPlayer::*RemoveUnit_function_type )( int,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::C_HL2WarsPlayer::RemoveUnit )
                , ( bp::arg("idx"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::C_HL2WarsPlayer::RemoveUnit
        
            typedef void ( ::C_HL2WarsPlayer::*RemoveUnit_function_type )( ::C_BaseEntity *,bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::C_HL2WarsPlayer::RemoveUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::C_HL2WarsPlayer::ScheduleSelectionChangedSignal
        
            typedef void ( ::C_HL2WarsPlayer::*ScheduleSelectionChangedSignal_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ScheduleSelectionChangedSignal"
                , ScheduleSelectionChangedSignal_function_type( &::C_HL2WarsPlayer::ScheduleSelectionChangedSignal ) );
        
        }
        { //::C_HL2WarsPlayer::SelectAllUnitsOfTypeInScreen
        
            typedef void ( ::C_HL2WarsPlayer::*SelectAllUnitsOfTypeInScreen_function_type )( char const * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SelectAllUnitsOfTypeInScreen"
                , SelectAllUnitsOfTypeInScreen_function_type( &::C_HL2WarsPlayer::SelectAllUnitsOfTypeInScreen )
                , ( bp::arg("pUnitType") ) );
        
        }
        { //::C_HL2WarsPlayer::SelectBox
        
            typedef void ( ::C_HL2WarsPlayer::*SelectBox_function_type )( int,int,int,int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SelectBox"
                , SelectBox_function_type( &::C_HL2WarsPlayer::SelectBox )
                , ( bp::arg("xmin"), bp::arg("ymin"), bp::arg("xmax"), bp::arg("ymax") ) );
        
        }
        { //::C_HL2WarsPlayer::SelectGroup
        
            typedef void ( ::C_HL2WarsPlayer::*SelectGroup_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SelectGroup"
                , SelectGroup_function_type( &::C_HL2WarsPlayer::SelectGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::C_HL2WarsPlayer::SetCamLimits
        
            typedef void ( ::C_HL2WarsPlayer::*SetCamLimits_function_type )( ::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetCamLimits"
                , SetCamLimits_function_type( &::C_HL2WarsPlayer::SetCamLimits )
                , ( bp::arg("limits") ) );
        
        }
        { //::C_HL2WarsPlayer::SetCameraOffset
        
            typedef void ( ::C_HL2WarsPlayer::*SetCameraOffset_function_type )( ::Vector & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetCameraOffset"
                , SetCameraOffset_function_type( &::C_HL2WarsPlayer::SetCameraOffset )
                , ( bp::arg("offs") ) );
        
        }
        { //::C_HL2WarsPlayer::SetDirectMove
        
            typedef void ( ::C_HL2WarsPlayer::*SetDirectMove_function_type )( ::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetDirectMove"
                , SetDirectMove_function_type( &::C_HL2WarsPlayer::SetDirectMove )
                , ( bp::arg("vPos") ) );
        
        }
        { //::C_HL2WarsPlayer::SetForceShowMouse
        
            typedef void ( ::C_HL2WarsPlayer::*SetForceShowMouse_function_type )( bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetForceShowMouse"
                , SetForceShowMouse_function_type( &::C_HL2WarsPlayer::SetForceShowMouse )
                , ( bp::arg("bForce") ) );
        
        }
        { //::C_HL2WarsPlayer::SetMouseCapture
        
            typedef void ( ::C_HL2WarsPlayer::*SetMouseCapture_function_type )( ::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetMouseCapture"
                , SetMouseCapture_function_type( &::C_HL2WarsPlayer::SetMouseCapture )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::C_HL2WarsPlayer::SetScrollTimeOut
        
            typedef void ( ::C_HL2WarsPlayer::*SetScrollTimeOut_function_type )( bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetScrollTimeOut"
                , SetScrollTimeOut_function_type( &::C_HL2WarsPlayer::SetScrollTimeOut )
                , ( bp::arg("forward") ) );
        
        }
        { //::C_HL2WarsPlayer::SetSelectedUnitType
        
            typedef void ( ::C_HL2WarsPlayer::*SetSelectedUnitType_function_type )( char const * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetSelectedUnitType"
                , SetSelectedUnitType_function_type( &::C_HL2WarsPlayer::SetSelectedUnitType )
                , ( bp::arg("pUnitType") ) );
        
        }
        { //::C_HL2WarsPlayer::SetSingleActiveAbility
        
            typedef void ( ::C_HL2WarsPlayer::*SetSingleActiveAbility_function_type )( ::boost::python::object ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SetSingleActiveAbility"
                , SetSingleActiveAbility_function_type( &::C_HL2WarsPlayer::SetSingleActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::C_HL2WarsPlayer::ShouldRegenerateOriginFromCellBits
        
            typedef bool ( ::C_HL2WarsPlayer::*ShouldRegenerateOriginFromCellBits_function_type )(  ) const;
            
            C_HL2WarsPlayer_exposer.def( 
                "ShouldRegenerateOriginFromCellBits"
                , ShouldRegenerateOriginFromCellBits_function_type( &::C_HL2WarsPlayer::ShouldRegenerateOriginFromCellBits ) );
        
        }
        { //::C_HL2WarsPlayer::SimulateOrderUnits
        
            typedef void ( ::C_HL2WarsPlayer::*SimulateOrderUnits_function_type )( ::MouseTraceData_t const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SimulateOrderUnits"
                , SimulateOrderUnits_function_type( &::C_HL2WarsPlayer::SimulateOrderUnits )
                , ( bp::arg("mousedata") ) );
        
        }
        { //::C_HL2WarsPlayer::SnapCameraTo
        
            typedef void ( ::C_HL2WarsPlayer::*SnapCameraTo_function_type )( ::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "SnapCameraTo"
                , SnapCameraTo_function_type( &::C_HL2WarsPlayer::SnapCameraTo )
                , ( bp::arg("vPos") ) );
        
        }
        { //::C_HL2WarsPlayer::Spawn
        
            typedef void ( ::C_HL2WarsPlayer::*Spawn_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_HL2WarsPlayer::Spawn)
                , default_Spawn_function_type(&C_HL2WarsPlayer_wrapper::default_Spawn) );
        
        }
        { //::C_HL2WarsPlayer::StopDirectMove
        
            typedef void ( ::C_HL2WarsPlayer::*StopDirectMove_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "StopDirectMove"
                , StopDirectMove_function_type( &::C_HL2WarsPlayer::StopDirectMove ) );
        
        }
        { //::C_HL2WarsPlayer::ThirdPersonSwitch
        
            typedef void ( ::C_HL2WarsPlayer::*ThirdPersonSwitch_function_type )( bool ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ThirdPersonSwitch"
                , ThirdPersonSwitch_function_type( &::C_HL2WarsPlayer::ThirdPersonSwitch )
                , ( bp::arg("bThirdperson") ) );
        
        }
        { //::C_HL2WarsPlayer::UpdateButtonState
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateButtonState_function_type )( int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateButtonState"
                , UpdateButtonState_function_type( &::C_HL2WarsPlayer::UpdateButtonState )
                , ( bp::arg("nUserCmdButtonMask") ) );
        
        }
        { //::C_HL2WarsPlayer::UpdateCameraMode
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateCameraMode_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateCameraMode"
                , UpdateCameraMode_function_type( &::C_HL2WarsPlayer::UpdateCameraMode ) );
        
        }
        { //::C_HL2WarsPlayer::UpdateMouseData
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateMouseData_function_type )( ::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateMouseData"
                , UpdateMouseData_function_type( &::C_HL2WarsPlayer::UpdateMouseData )
                , ( bp::arg("vMouseAim") ) );
        
        }
        { //::C_HL2WarsPlayer::UpdateOnRemove
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_HL2WarsPlayer::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_HL2WarsPlayer_wrapper::default_UpdateOnRemove) );
        
        }
        { //::C_HL2WarsPlayer::UpdateSelectedUnitType
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateSelectedUnitType_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateSelectedUnitType"
                , UpdateSelectedUnitType_function_type( &::C_HL2WarsPlayer::UpdateSelectedUnitType ) );
        
        }
        { //::C_HL2WarsPlayer::UpdateSelection
        
            typedef void ( ::C_HL2WarsPlayer::*UpdateSelection_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "UpdateSelection"
                , UpdateSelection_function_type( &::C_HL2WarsPlayer::UpdateSelection ) );
        
        }
        { //::C_HL2WarsPlayer::WasLeftDoublePressed
        
            typedef bool ( ::C_HL2WarsPlayer::*WasLeftDoublePressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "WasLeftDoublePressed"
                , WasLeftDoublePressed_function_type( &::C_HL2WarsPlayer::WasLeftDoublePressed ) );
        
        }
        { //::C_HL2WarsPlayer::WasRightDoublePressed
        
            typedef bool ( ::C_HL2WarsPlayer::*WasRightDoublePressed_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "WasRightDoublePressed"
                , WasRightDoublePressed_function_type( &::C_HL2WarsPlayer::WasRightDoublePressed ) );
        
        }
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_Activate_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_HL2WarsPlayer_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_HL2WarsPlayer_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_HL2WarsPlayer_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_HL2WarsPlayer_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_HL2WarsPlayer_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_HL2WarsPlayer_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_HL2WarsPlayer_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseAnimating::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseAnimating::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_HL2WarsPlayer_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseAnimating::GetCollideType)
                , default_GetCollideType_function_type(&C_HL2WarsPlayer_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_HL2WarsPlayer_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_HL2WarsPlayer_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_HL2WarsPlayer_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_HL2WarsPlayer_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_HL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_HL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_HL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_HL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::MakeTracer
        
            typedef void ( ::C_BaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_BaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&C_HL2WarsPlayer_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BaseEntity::OnRestore
        
            typedef void ( ::C_BaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseEntity::OnRestore)
                , default_OnRestore_function_type(&C_HL2WarsPlayer_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseEntity::Precache
        
            typedef void ( ::C_BaseEntity::*Precache_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_Precache_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseEntity::Precache)
                , default_Precache_function_type(&C_HL2WarsPlayer_wrapper::default_Precache) );
        
        }
        { //::C_BaseEntity::PyNotifyShouldTransmit
        
            typedef void ( ::C_BaseEntity::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseEntity::PyNotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_HL2WarsPlayer_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseAnimating::PyOnNewModel
        
            typedef void ( ::C_BaseAnimating::*OnNewModel_function_type )(  ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_OnNewModel_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type(&::C_BaseAnimating::PyOnNewModel)
                , default_OnNewModel_function_type(&C_HL2WarsPlayer_wrapper::default_OnNewModel) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_HL2WarsPlayer_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_HL2WarsPlayer_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_HL2WarsPlayer_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ShouldDraw
        
            typedef bool ( ::C_BaseEntity::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_BaseEntity::ShouldDraw)
                , default_ShouldDraw_function_type(&C_HL2WarsPlayer_wrapper::default_ShouldDraw) );
        
        }
        { //::C_BaseAnimating::Simulate
        
            typedef bool ( ::C_BaseAnimating::*Simulate_function_type )(  ) ;
            typedef bool ( C_HL2WarsPlayer_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_BaseAnimating::Simulate)
                , default_Simulate_function_type(&C_HL2WarsPlayer_wrapper::default_Simulate) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_HL2WarsPlayer_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_HL2WarsPlayer_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_HL2WarsPlayer_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        C_HL2WarsPlayer_exposer.staticmethod( "GetLocalHL2WarsPlayer" );
        C_HL2WarsPlayer_exposer.staticmethod( "GetPyNetworkType" );
        { //property "unit"[fget=::C_HL2WarsPlayer::GetControlledUnit]
        
            typedef ::C_BaseEntity * ( ::C_HL2WarsPlayer::*fget )(  ) const;
            
            C_HL2WarsPlayer_exposer.add_property( 
                "unit"
                , bp::make_function( 
                      fget( &::C_HL2WarsPlayer::GetControlledUnit )
                    , bp::return_value_policy< bp::return_by_value >() )  );
        
        }
        { //::C_HL2WarsPlayer::TestCollision
            
                typedef bool ( ::C_HL2WarsPlayer::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( C_HL2WarsPlayer_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                C_HL2WarsPlayer_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::C_HL2WarsPlayer::TestCollision)
                    , default_TestCollision_function_type(&C_HL2WarsPlayer_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

