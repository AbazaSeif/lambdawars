// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "takedamageinfo.h"
#include "c_ai_basenpc.h"
#include "c_basetoggle.h"
#include "c_triggers.h"
#include "soundinfo.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iclientvehicle.h"
#include "steam/steamclientpublic.h"
#include "view_shared.h"
#include "c_playerresource.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "c_smoke_trail.h"
#include "beam_shared.h"
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "c_wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "C_BaseGrenade_pypp.hpp"

namespace bp = boost::python;

struct C_BaseGrenade_wrapper : C_BaseGrenade, bp::wrapper< C_BaseGrenade > {

    C_BaseGrenade_wrapper( )
    : C_BaseGrenade( )
      , bp::wrapper< C_BaseGrenade >(){
        // null constructor
    
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: C_BaseGrenade\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseGrenade::Precache(  );
            }
        else
            this->C_BaseGrenade::Precache(  );
    }
    
    void default_Precache(  ) {
        C_BaseGrenade::Precache( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::Activate(  );
            }
        else
            this->C_BaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        C_BaseEntity::Activate( );
    }

    void AddToEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::AddToEntityList( listId );
    }

    virtual void ClientThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientThink(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientThink = this->get_override( "ClientThink" );
        if( func_ClientThink.ptr() != Py_None )
            try {
                func_ClientThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ClientThink(  );
            }
        else
            this->C_BaseEntity::ClientThink(  );
    }
    
    void default_ClientThink(  ) {
        C_BaseEntity::ClientThink( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
            }
        else
            this->C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pVecWorldMins, ::Vector * pVecWorldMaxs ) {
        C_BaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pVecWorldMins), boost::python::ptr(pVecWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::CreateVPhysics(  );
            }
        else
            return this->C_BaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return C_BaseEntity::CreateVPhysics( );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        C_BaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void EndTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual ::CollideType_t GetCollideType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCollideType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCollideType(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCollideType = this->get_override( "GetCollideType" );
        if( func_GetCollideType.ptr() != Py_None )
            try {
                return func_GetCollideType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::GetCollideType(  );
            }
        else
            return this->C_BaseAnimating::GetCollideType(  );
    }
    
    ::CollideType_t default_GetCollideType(  ) {
        return C_BaseAnimating::GetCollideType( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetIMouse(  );
            }
        else
            return this->C_BaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return C_BaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::GetTracerType(  );
            }
        else
            return this->C_BaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return C_BaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return C_BaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return C_BaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return C_BaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return C_BaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        C_BaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "NotifyShouldTransmit: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling NotifyShouldTransmit( state ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_NotifyShouldTransmit = this->get_override( "NotifyShouldTransmit" );
        if( func_NotifyShouldTransmit.ptr() != Py_None )
            try {
                func_NotifyShouldTransmit( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::NotifyShouldTransmit( state );
            }
        else
            this->C_BaseAnimating::NotifyShouldTransmit( state );
    }
    
    void default_NotifyShouldTransmit( ::ShouldTransmitState_t state ) {
        C_BaseAnimating::NotifyShouldTransmit( state );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        C_BaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnDataChanged( ::DataUpdateType_t updateType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnDataChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnDataChanged( updateType ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnDataChanged = this->get_override( "OnDataChanged" );
        if( func_OnDataChanged.ptr() != Py_None )
            try {
                func_OnDataChanged( updateType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::OnDataChanged( updateType );
            }
        else
            this->C_BaseAnimating::OnDataChanged( updateType );
    }
    
    void default_OnDataChanged( ::DataUpdateType_t updateType ) {
        C_BaseAnimating::OnDataChanged( updateType );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::OnRestore(  );
            }
        else
            this->C_BaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        C_BaseEntity::OnRestore( );
    }

    virtual void PyOnNewModel(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnNewModel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnNewModel(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseAnimating::PyOnNewModel(  );
            }
        else
            this->C_BaseAnimating::PyOnNewModel(  );
    }
    
    void default_OnNewModel(  ) {
        C_BaseAnimating::PyOnNewModel( );
    }

    virtual void PyReceiveMessage( ::boost::python::list msg ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReceiveMessage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyReceiveMessage( msg ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReceiveMessage = this->get_override( "ReceiveMessage" );
        if( func_ReceiveMessage.ptr() != Py_None )
            try {
                func_ReceiveMessage( msg );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::PyReceiveMessage( msg );
            }
        else
            this->C_BaseEntity::PyReceiveMessage( msg );
    }
    
    void default_ReceiveMessage( ::boost::python::list msg ) {
        C_BaseEntity::PyReceiveMessage( msg );
    }

    void RemoveFromEntityList( ::entity_list_ids_t listId ){
        C_BaseEntity::RemoveFromEntityList( listId );
    }

    virtual bool ShouldDraw(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDraw: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDraw(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDraw = this->get_override( "ShouldDraw" );
        if( func_ShouldDraw.ptr() != Py_None )
            try {
                return func_ShouldDraw(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseEntity::ShouldDraw(  );
            }
        else
            return this->C_BaseEntity::ShouldDraw(  );
    }
    
    bool default_ShouldDraw(  ) {
        return C_BaseEntity::ShouldDraw( );
    }

    virtual bool Simulate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Simulate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Simulate(  ) of Class: C_BaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Simulate = this->get_override( "Simulate" );
        if( func_Simulate.ptr() != Py_None )
            try {
                return func_Simulate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_BaseAnimating::Simulate(  );
            }
        else
            return this->C_BaseAnimating::Simulate(  );
    }
    
    bool default_Simulate(  ) {
        return C_BaseAnimating::Simulate( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: C_BaseFlex\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseFlex::Spawn(  );
            }
        else
            this->C_BaseFlex::Spawn(  );
    }
    
    void default_Spawn(  ) {
        C_BaseFlex::Spawn( );
    }

    virtual void StartTouch( ::C_BaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::C_BaseEntity * pOther ) {
        C_BaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: C_BaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_BaseEntity::UpdateOnRemove(  );
            }
        else
            this->C_BaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        C_BaseEntity::UpdateOnRemove( );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ClientClass* GetClientClass() {
#if defined(_WIN32) // POSIX: TODO
        if( GetCurrentThreadId() != g_hPythonThreadID )
            return C_BaseGrenade::GetClientClass();
#endif // _WIN32
        ClientClass *pClientClass = SrcPySystem()->Get<ClientClass *>( "pyClientClass", GetPyInstance(), NULL, true );
        if( pClientClass )
            return pClientClass;
        return C_BaseGrenade::GetClientClass();
    }

    int m_lifeState_Get() { return m_lifeState; }

    void m_lifeState_Set( int val ) { m_lifeState = val; }

    int m_takedamage_Get() { return m_takedamage; }

    void m_takedamage_Set( int val ) { m_takedamage = val; }

};

void register_C_BaseGrenade_class(){

    { //::C_BaseGrenade
        typedef bp::class_< C_BaseGrenade_wrapper, bp::bases< C_BaseCombatCharacter >, boost::noncopyable > C_BaseGrenade_exposer_t;
        C_BaseGrenade_exposer_t C_BaseGrenade_exposer = C_BaseGrenade_exposer_t( "C_BaseGrenade", bp::init< >() );
        bp::scope C_BaseGrenade_scope( C_BaseGrenade_exposer );
        { //::C_BaseGrenade::BloodColor
        
            typedef int ( ::C_BaseGrenade::*BloodColor_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "BloodColor"
                , BloodColor_function_type( &::C_BaseGrenade::BloodColor ) );
        
        }
        { //::C_BaseGrenade::BounceSound
        
            typedef void ( ::C_BaseGrenade::*BounceSound_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "BounceSound"
                , BounceSound_function_type( &::C_BaseGrenade::BounceSound ) );
        
        }
        { //::C_BaseGrenade::BounceTouch
        
            typedef void ( ::C_BaseGrenade::*BounceTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseGrenade_exposer.def( 
                "BounceTouch"
                , BounceTouch_function_type( &::C_BaseGrenade::BounceTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseGrenade::DangerSoundThink
        
            typedef void ( ::C_BaseGrenade::*DangerSoundThink_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "DangerSoundThink"
                , DangerSoundThink_function_type( &::C_BaseGrenade::DangerSoundThink ) );
        
        }
        { //::C_BaseGrenade::Detonate
        
            typedef void ( ::C_BaseGrenade::*Detonate_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Detonate"
                , Detonate_function_type( &::C_BaseGrenade::Detonate ) );
        
        }
        { //::C_BaseGrenade::DetonateUse
        
            typedef void ( ::C_BaseGrenade::*DetonateUse_function_type )( ::C_BaseEntity *,::C_BaseEntity *,::USE_TYPE,float ) ;
            
            C_BaseGrenade_exposer.def( 
                "DetonateUse"
                , DetonateUse_function_type( &::C_BaseGrenade::DetonateUse )
                , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) );
        
        }
        { //::C_BaseGrenade::Event_Killed
        
            typedef void ( ::C_BaseGrenade::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            C_BaseGrenade_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type( &::C_BaseGrenade::Event_Killed )
                , ( bp::arg("info") ) );
        
        }
        { //::C_BaseGrenade::Explode
        
            typedef void ( ::C_BaseGrenade::*Explode_function_type )( ::trace_t *,int ) ;
            
            C_BaseGrenade_exposer.def( 
                "Explode"
                , Explode_function_type( &::C_BaseGrenade::Explode )
                , ( bp::arg("pTrace"), bp::arg("bitsDamageType") ) );
        
        }
        { //::C_BaseGrenade::ExplodeTouch
        
            typedef void ( ::C_BaseGrenade::*ExplodeTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseGrenade_exposer.def( 
                "ExplodeTouch"
                , ExplodeTouch_function_type( &::C_BaseGrenade::ExplodeTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseGrenade::GetBlastForce
        
            typedef ::Vector ( ::C_BaseGrenade::*GetBlastForce_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetBlastForce"
                , GetBlastForce_function_type( &::C_BaseGrenade::GetBlastForce ) );
        
        }
        { //::C_BaseGrenade::GetOriginalThrower
        
            typedef ::C_BaseEntity * ( ::C_BaseGrenade::*GetOriginalThrower_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetOriginalThrower"
                , GetOriginalThrower_function_type( &::C_BaseGrenade::GetOriginalThrower )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseGrenade::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            C_BaseGrenade_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::C_BaseGrenade::GetPyNetworkType ) );
        
        }
        { //::C_BaseGrenade::GetShakeAmplitude
        
            typedef float ( ::C_BaseGrenade::*GetShakeAmplitude_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetShakeAmplitude"
                , GetShakeAmplitude_function_type( &::C_BaseGrenade::GetShakeAmplitude ) );
        
        }
        { //::C_BaseGrenade::GetShakeRadius
        
            typedef float ( ::C_BaseGrenade::*GetShakeRadius_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetShakeRadius"
                , GetShakeRadius_function_type( &::C_BaseGrenade::GetShakeRadius ) );
        
        }
        { //::C_BaseGrenade::GetThrower
        
            typedef ::C_BaseCombatCharacter * ( ::C_BaseGrenade::*GetThrower_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetThrower"
                , GetThrower_function_type( &::C_BaseGrenade::GetThrower )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseGrenade::PreDetonate
        
            typedef void ( ::C_BaseGrenade::*PreDetonate_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "PreDetonate"
                , PreDetonate_function_type( &::C_BaseGrenade::PreDetonate ) );
        
        }
        { //::C_BaseGrenade::Precache
        
            typedef void ( ::C_BaseGrenade::*Precache_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_Precache_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Precache"
                , Precache_function_type(&::C_BaseGrenade::Precache)
                , default_Precache_function_type(&C_BaseGrenade_wrapper::default_Precache) );
        
        }
        { //::C_BaseGrenade::SetBounceSound
        
            typedef void ( ::C_BaseGrenade::*SetBounceSound_function_type )( char const * ) ;
            
            C_BaseGrenade_exposer.def( 
                "SetBounceSound"
                , SetBounceSound_function_type( &::C_BaseGrenade::SetBounceSound )
                , ( bp::arg("pszBounceSound") ) );
        
        }
        { //::C_BaseGrenade::SetThrower
        
            typedef void ( ::C_BaseGrenade::*SetThrower_function_type )( ::C_BaseCombatCharacter * ) ;
            
            C_BaseGrenade_exposer.def( 
                "SetThrower"
                , SetThrower_function_type( &::C_BaseGrenade::SetThrower )
                , ( bp::arg("pThrower") ) );
        
        }
        { //::C_BaseGrenade::SlideTouch
        
            typedef void ( ::C_BaseGrenade::*SlideTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseGrenade_exposer.def( 
                "SlideTouch"
                , SlideTouch_function_type( &::C_BaseGrenade::SlideTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseGrenade::Smoke
        
            typedef void ( ::C_BaseGrenade::*Smoke_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Smoke"
                , Smoke_function_type( &::C_BaseGrenade::Smoke ) );
        
        }
        { //::C_BaseGrenade::TumbleThink
        
            typedef void ( ::C_BaseGrenade::*TumbleThink_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "TumbleThink"
                , TumbleThink_function_type( &::C_BaseGrenade::TumbleThink ) );
        
        }
        { //::C_BaseEntity::Activate
        
            typedef void ( ::C_BaseEntity::*Activate_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_Activate_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Activate"
                , Activate_function_type(&::C_BaseEntity::Activate)
                , default_Activate_function_type(&C_BaseGrenade_wrapper::default_Activate) );
        
        }
        { //::C_BaseEntity::AddToEntityList
        
            typedef void ( C_BaseGrenade_wrapper::*AddToEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BaseGrenade_exposer.def( 
                "AddToEntityList"
                , AddToEntityList_function_type( &C_BaseGrenade_wrapper::AddToEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ClientThink
        
            typedef void ( ::C_BaseEntity::*ClientThink_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_ClientThink_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "ClientThink"
                , ClientThink_function_type(&::C_BaseEntity::ClientThink)
                , default_ClientThink_function_type(&C_BaseGrenade_wrapper::default_ClientThink) );
        
        }
        { //::C_BaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::C_BaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            C_BaseGrenade_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::C_BaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&C_BaseGrenade_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::C_BaseEntity::CreateVPhysics
        
            typedef bool ( ::C_BaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::C_BaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&C_BaseGrenade_wrapper::default_CreateVPhysics) );
        
        }
        { //::C_BaseEntity::DoImpactEffect
        
            typedef void ( ::C_BaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            C_BaseGrenade_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::C_BaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&C_BaseGrenade_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::C_BaseEntity::EndTouch
        
            typedef void ( ::C_BaseEntity::*EndTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_EndTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseGrenade_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::C_BaseEntity::EndTouch)
                , default_EndTouch_function_type(&C_BaseGrenade_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseAnimating::GetCollideType
        
            typedef ::CollideType_t ( ::C_BaseAnimating::*GetCollideType_function_type )(  ) ;
            typedef ::CollideType_t ( C_BaseGrenade_wrapper::*default_GetCollideType_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetCollideType"
                , GetCollideType_function_type(&::C_BaseAnimating::GetCollideType)
                , default_GetCollideType_function_type(&C_BaseGrenade_wrapper::default_GetCollideType) );
        
        }
        { //::C_BaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::C_BaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( C_BaseGrenade_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::C_BaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&C_BaseGrenade_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::C_BaseEntity::GetTracerType
        
            typedef char const * ( ::C_BaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( C_BaseGrenade_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::C_BaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&C_BaseGrenade_wrapper::default_GetTracerType) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            C_BaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            C_BaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            C_BaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::C_BaseEntity::KeyValue
        
            typedef bool ( ::C_BaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            C_BaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::C_BaseEntity::KeyValue)
                , default_KeyValue_function_type(&C_BaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::C_BaseEntity::MakeTracer
        
            typedef void ( ::C_BaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            C_BaseGrenade_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::C_BaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&C_BaseGrenade_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::C_BaseAnimating::NotifyShouldTransmit
        
            typedef void ( ::C_BaseAnimating::*NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_NotifyShouldTransmit_function_type )( ::ShouldTransmitState_t ) ;
            
            C_BaseGrenade_exposer.def( 
                "NotifyShouldTransmit"
                , NotifyShouldTransmit_function_type(&::C_BaseAnimating::NotifyShouldTransmit)
                , default_NotifyShouldTransmit_function_type(&C_BaseGrenade_wrapper::default_NotifyShouldTransmit)
                , ( bp::arg("state") ) );
        
        }
        { //::C_BaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::C_BaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            C_BaseGrenade_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::C_BaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&C_BaseGrenade_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::C_BaseAnimating::OnDataChanged
        
            typedef void ( ::C_BaseAnimating::*OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_OnDataChanged_function_type )( ::DataUpdateType_t ) ;
            
            C_BaseGrenade_exposer.def( 
                "OnDataChanged"
                , OnDataChanged_function_type(&::C_BaseAnimating::OnDataChanged)
                , default_OnDataChanged_function_type(&C_BaseGrenade_wrapper::default_OnDataChanged)
                , ( bp::arg("updateType") ) );
        
        }
        { //::C_BaseEntity::OnRestore
        
            typedef void ( ::C_BaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_OnRestore_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::C_BaseEntity::OnRestore)
                , default_OnRestore_function_type(&C_BaseGrenade_wrapper::default_OnRestore) );
        
        }
        { //::C_BaseAnimating::PyOnNewModel
        
            typedef void ( ::C_BaseAnimating::*OnNewModel_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_OnNewModel_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type(&::C_BaseAnimating::PyOnNewModel)
                , default_OnNewModel_function_type(&C_BaseGrenade_wrapper::default_OnNewModel) );
        
        }
        { //::C_BaseEntity::PyReceiveMessage
        
            typedef void ( ::C_BaseEntity::*ReceiveMessage_function_type )( ::boost::python::list ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_ReceiveMessage_function_type )( ::boost::python::list ) ;
            
            C_BaseGrenade_exposer.def( 
                "ReceiveMessage"
                , ReceiveMessage_function_type(&::C_BaseEntity::PyReceiveMessage)
                , default_ReceiveMessage_function_type(&C_BaseGrenade_wrapper::default_ReceiveMessage)
                , ( bp::arg("msg") ) );
        
        }
        { //::C_BaseEntity::RemoveFromEntityList
        
            typedef void ( C_BaseGrenade_wrapper::*RemoveFromEntityList_function_type )( ::entity_list_ids_t ) ;
            
            C_BaseGrenade_exposer.def( 
                "RemoveFromEntityList"
                , RemoveFromEntityList_function_type( &C_BaseGrenade_wrapper::RemoveFromEntityList )
                , ( bp::arg("listId") ) );
        
        }
        { //::C_BaseEntity::ShouldDraw
        
            typedef bool ( ::C_BaseEntity::*ShouldDraw_function_type )(  ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_ShouldDraw_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type(&::C_BaseEntity::ShouldDraw)
                , default_ShouldDraw_function_type(&C_BaseGrenade_wrapper::default_ShouldDraw) );
        
        }
        { //::C_BaseAnimating::Simulate
        
            typedef bool ( ::C_BaseAnimating::*Simulate_function_type )(  ) ;
            typedef bool ( C_BaseGrenade_wrapper::*default_Simulate_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Simulate"
                , Simulate_function_type(&::C_BaseAnimating::Simulate)
                , default_Simulate_function_type(&C_BaseGrenade_wrapper::default_Simulate) );
        
        }
        { //::C_BaseFlex::Spawn
        
            typedef void ( ::C_BaseFlex::*Spawn_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_Spawn_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::C_BaseFlex::Spawn)
                , default_Spawn_function_type(&C_BaseGrenade_wrapper::default_Spawn) );
        
        }
        { //::C_BaseEntity::StartTouch
        
            typedef void ( ::C_BaseEntity::*StartTouch_function_type )( ::C_BaseEntity * ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_StartTouch_function_type )( ::C_BaseEntity * ) ;
            
            C_BaseGrenade_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::C_BaseEntity::StartTouch)
                , default_StartTouch_function_type(&C_BaseGrenade_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::C_BaseEntity::UpdateOnRemove
        
            typedef void ( ::C_BaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( C_BaseGrenade_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            C_BaseGrenade_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::C_BaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&C_BaseGrenade_wrapper::default_UpdateOnRemove) );
        
        }
        C_BaseGrenade_exposer.staticmethod( "GetPyNetworkType" );
        { //property "damage"[fget=::C_BaseGrenade::GetDamage, fset=::C_BaseGrenade::SetDamage]
        
            typedef float ( ::C_BaseGrenade::*fget )(  ) ;
            typedef void ( ::C_BaseGrenade::*fset )( float ) ;
            
            C_BaseGrenade_exposer.add_property( 
                "damage"
                , fget( &::C_BaseGrenade::GetDamage )
                , fset( &::C_BaseGrenade::SetDamage ) );
        
        }
        { //property "damageradius"[fget=::C_BaseGrenade::GetDamageRadius, fset=::C_BaseGrenade::SetDamageRadius]
        
            typedef float ( ::C_BaseGrenade::*fget )(  ) ;
            typedef void ( ::C_BaseGrenade::*fset )( float ) ;
            
            C_BaseGrenade_exposer.add_property( 
                "damageradius"
                , fget( &::C_BaseGrenade::GetDamageRadius )
                , fset( &::C_BaseGrenade::SetDamageRadius ) );
        
        }
        C_BaseGrenade_exposer.add_property( "lifestate", &C_BaseGrenade_wrapper::m_lifeState_Get, &C_BaseGrenade_wrapper::m_lifeState_Set );
        C_BaseGrenade_exposer.add_property( "takedamage", &C_BaseGrenade_wrapper::m_takedamage_Get, &C_BaseGrenade_wrapper::m_takedamage_Set );
    }

}

