// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "npcevent.h"

#include "srcpy_entities.h"

#include "bone_setup.h"

#include "baseprojectile.h"

#include "basegrenade_shared.h"

#include "takedamageinfo.h"

#include "c_ai_basenpc.h"

#include "c_basetoggle.h"

#include "c_triggers.h"

#include "soundinfo.h"

#include "saverestore.h"

#include "vcollide_parse.h"

#include "iclientvehicle.h"

#include "steam/steamclientpublic.h"

#include "view_shared.h"

#include "c_playerresource.h"

#include "c_breakableprop.h"

#include "nav_area.h"

#include "Sprite.h"

#include "SpriteTrail.h"

#include "c_smoke_trail.h"

#include "beam_shared.h"

#include "c_hl2wars_player.h"

#include "unit_base_shared.h"

#include "wars_func_unit.h"

#include "hl2wars_player_shared.h"

#include "wars_mapboundary.h"

#include "srcpy_util.h"

#include "c_wars_weapon.h"

#include "wars_flora.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

#include "../../game/client/python/modules/autogenerated/_entities/CBaseHandle_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/CWarsFlora_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseAnimatingOverlay_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseAnimating_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseCombatCharacter_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseCombatWeapon_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseEntity_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseFlex_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseFuncMapBoundary_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseGrenade_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseParticleEntity_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BasePlayer_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseProjectile_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseToggle_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseTrigger_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_Beam_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BreakableProp_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_FuncBrush_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_FuncUnit_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_HL2WarsPlayer_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_PlayerResource_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_RocketTrail_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_SmokeTrail_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_SpriteTrail_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_Sprite_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_UnitBase_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_WarsWeapon_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/DeadEntity_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IClientEntity_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IClientUnknown_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IHandleEntity_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/PyHandle_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/_entities_enumerations_pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/_entities_free_functions_pypp.hpp"

namespace bp = boost::python;

struct handle_to_IHandleEntity
{
    handle_to_IHandleEntity()
    {
        bp::converter::registry::insert(
            &extract_IHandleEntity, 
            bp::type_id<IHandleEntity>()
            );
    }

    static void* extract_IHandleEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseEntity > C_BaseEntityHANDLE;

struct ptr_C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity *, ptr_C_BaseEntity_to_handle>
{
    static PyObject* convert(C_BaseEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity, C_BaseEntity_to_handle>
{
    static PyObject* convert(const C_BaseEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseEntity
{
    handle_to_C_BaseEntity()
    {
        bp::converter::registry::insert(
            &extract_C_BaseEntity, 
            bp::type_id<C_BaseEntity>()
            );
    }

    static void* extract_C_BaseEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimating > C_BaseAnimatingHANDLE;

struct ptr_C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating *, ptr_C_BaseAnimating_to_handle>
{
    static PyObject* convert(C_BaseAnimating *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating, C_BaseAnimating_to_handle>
{
    static PyObject* convert(const C_BaseAnimating &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimating
{
    handle_to_C_BaseAnimating()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimating, 
            bp::type_id<C_BaseAnimating>()
            );
    }

    static void* extract_C_BaseAnimating(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimatingOverlay > C_BaseAnimatingOverlayHANDLE;

struct ptr_C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay *, ptr_C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(C_BaseAnimatingOverlay *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay, C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(const C_BaseAnimatingOverlay &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimatingOverlay
{
    handle_to_C_BaseAnimatingOverlay()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimatingOverlay, 
            bp::type_id<C_BaseAnimatingOverlay>()
            );
    }

    static void* extract_C_BaseAnimatingOverlay(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseFlex > C_BaseFlexHANDLE;

struct ptr_C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex *, ptr_C_BaseFlex_to_handle>
{
    static PyObject* convert(C_BaseFlex *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex, C_BaseFlex_to_handle>
{
    static PyObject* convert(const C_BaseFlex &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseFlex
{
    handle_to_C_BaseFlex()
    {
        bp::converter::registry::insert(
            &extract_C_BaseFlex, 
            bp::type_id<C_BaseFlex>()
            );
    }

    static void* extract_C_BaseFlex(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatCharacter > C_BaseCombatCharacterHANDLE;

struct ptr_C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter *, ptr_C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(C_BaseCombatCharacter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter, C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(const C_BaseCombatCharacter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatCharacter
{
    handle_to_C_BaseCombatCharacter()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatCharacter, 
            bp::type_id<C_BaseCombatCharacter>()
            );
    }

    static void* extract_C_BaseCombatCharacter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatWeapon > C_BaseCombatWeaponHANDLE;

struct ptr_C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon *, ptr_C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(C_BaseCombatWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon, C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(const C_BaseCombatWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatWeapon
{
    handle_to_C_BaseCombatWeapon()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatWeapon, 
            bp::type_id<C_BaseCombatWeapon>()
            );
    }

    static void* extract_C_BaseCombatWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseProjectile > C_BaseProjectileHANDLE;

struct ptr_C_BaseProjectile_to_handle : bp::to_python_converter<C_BaseProjectile *, ptr_C_BaseProjectile_to_handle>
{
    static PyObject* convert(C_BaseProjectile *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseProjectile_to_handle : bp::to_python_converter<C_BaseProjectile, C_BaseProjectile_to_handle>
{
    static PyObject* convert(const C_BaseProjectile &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseProjectile
{
    handle_to_C_BaseProjectile()
    {
        bp::converter::registry::insert(
            &extract_C_BaseProjectile, 
            bp::type_id<C_BaseProjectile>()
            );
    }

    static void* extract_C_BaseProjectile(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseGrenade > C_BaseGrenadeHANDLE;

struct ptr_C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade *, ptr_C_BaseGrenade_to_handle>
{
    static PyObject* convert(C_BaseGrenade *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade, C_BaseGrenade_to_handle>
{
    static PyObject* convert(const C_BaseGrenade &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseGrenade
{
    handle_to_C_BaseGrenade()
    {
        bp::converter::registry::insert(
            &extract_C_BaseGrenade, 
            bp::type_id<C_BaseGrenade>()
            );
    }

    static void* extract_C_BaseGrenade(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BasePlayer > C_BasePlayerHANDLE;

struct ptr_C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer *, ptr_C_BasePlayer_to_handle>
{
    static PyObject* convert(C_BasePlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer, C_BasePlayer_to_handle>
{
    static PyObject* convert(const C_BasePlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BasePlayer
{
    handle_to_C_BasePlayer()
    {
        bp::converter::registry::insert(
            &extract_C_BasePlayer, 
            bp::type_id<C_BasePlayer>()
            );
    }

    static void* extract_C_BasePlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_PlayerResource > C_PlayerResourceHANDLE;

struct ptr_C_PlayerResource_to_handle : bp::to_python_converter<C_PlayerResource *, ptr_C_PlayerResource_to_handle>
{
    static PyObject* convert(C_PlayerResource *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_PlayerResource_to_handle : bp::to_python_converter<C_PlayerResource, C_PlayerResource_to_handle>
{
    static PyObject* convert(const C_PlayerResource &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_PlayerResource
{
    handle_to_C_PlayerResource()
    {
        bp::converter::registry::insert(
            &extract_C_PlayerResource, 
            bp::type_id<C_PlayerResource>()
            );
    }

    static void* extract_C_PlayerResource(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BreakableProp > C_BreakablePropHANDLE;

struct ptr_C_BreakableProp_to_handle : bp::to_python_converter<C_BreakableProp *, ptr_C_BreakableProp_to_handle>
{
    static PyObject* convert(C_BreakableProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BreakableProp_to_handle : bp::to_python_converter<C_BreakableProp, C_BreakableProp_to_handle>
{
    static PyObject* convert(const C_BreakableProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BreakableProp
{
    handle_to_C_BreakableProp()
    {
        bp::converter::registry::insert(
            &extract_C_BreakableProp, 
            bp::type_id<C_BreakableProp>()
            );
    }

    static void* extract_C_BreakableProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseToggle > C_BaseToggleHANDLE;

struct ptr_C_BaseToggle_to_handle : bp::to_python_converter<C_BaseToggle *, ptr_C_BaseToggle_to_handle>
{
    static PyObject* convert(C_BaseToggle *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseToggle_to_handle : bp::to_python_converter<C_BaseToggle, C_BaseToggle_to_handle>
{
    static PyObject* convert(const C_BaseToggle &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseToggle
{
    handle_to_C_BaseToggle()
    {
        bp::converter::registry::insert(
            &extract_C_BaseToggle, 
            bp::type_id<C_BaseToggle>()
            );
    }

    static void* extract_C_BaseToggle(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseTrigger > C_BaseTriggerHANDLE;

struct ptr_C_BaseTrigger_to_handle : bp::to_python_converter<C_BaseTrigger *, ptr_C_BaseTrigger_to_handle>
{
    static PyObject* convert(C_BaseTrigger *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseTrigger_to_handle : bp::to_python_converter<C_BaseTrigger, C_BaseTrigger_to_handle>
{
    static PyObject* convert(const C_BaseTrigger &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseTrigger
{
    handle_to_C_BaseTrigger()
    {
        bp::converter::registry::insert(
            &extract_C_BaseTrigger, 
            bp::type_id<C_BaseTrigger>()
            );
    }

    static void* extract_C_BaseTrigger(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_FuncBrush > C_FuncBrushHANDLE;

struct ptr_C_FuncBrush_to_handle : bp::to_python_converter<C_FuncBrush *, ptr_C_FuncBrush_to_handle>
{
    static PyObject* convert(C_FuncBrush *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_FuncBrush_to_handle : bp::to_python_converter<C_FuncBrush, C_FuncBrush_to_handle>
{
    static PyObject* convert(const C_FuncBrush &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_FuncBrush
{
    handle_to_C_FuncBrush()
    {
        bp::converter::registry::insert(
            &extract_C_FuncBrush, 
            bp::type_id<C_FuncBrush>()
            );
    }

    static void* extract_C_FuncBrush(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_Sprite > C_SpriteHANDLE;

struct ptr_C_Sprite_to_handle : bp::to_python_converter<C_Sprite *, ptr_C_Sprite_to_handle>
{
    static PyObject* convert(C_Sprite *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_Sprite_to_handle : bp::to_python_converter<C_Sprite, C_Sprite_to_handle>
{
    static PyObject* convert(const C_Sprite &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_Sprite
{
    handle_to_C_Sprite()
    {
        bp::converter::registry::insert(
            &extract_C_Sprite, 
            bp::type_id<C_Sprite>()
            );
    }

    static void* extract_C_Sprite(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_SpriteTrail > C_SpriteTrailHANDLE;

struct ptr_C_SpriteTrail_to_handle : bp::to_python_converter<C_SpriteTrail *, ptr_C_SpriteTrail_to_handle>
{
    static PyObject* convert(C_SpriteTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_SpriteTrail_to_handle : bp::to_python_converter<C_SpriteTrail, C_SpriteTrail_to_handle>
{
    static PyObject* convert(const C_SpriteTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_SpriteTrail
{
    handle_to_C_SpriteTrail()
    {
        bp::converter::registry::insert(
            &extract_C_SpriteTrail, 
            bp::type_id<C_SpriteTrail>()
            );
    }

    static void* extract_C_SpriteTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseParticleEntity > C_BaseParticleEntityHANDLE;

struct ptr_C_BaseParticleEntity_to_handle : bp::to_python_converter<C_BaseParticleEntity *, ptr_C_BaseParticleEntity_to_handle>
{
    static PyObject* convert(C_BaseParticleEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseParticleEntity_to_handle : bp::to_python_converter<C_BaseParticleEntity, C_BaseParticleEntity_to_handle>
{
    static PyObject* convert(const C_BaseParticleEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseParticleEntity
{
    handle_to_C_BaseParticleEntity()
    {
        bp::converter::registry::insert(
            &extract_C_BaseParticleEntity, 
            bp::type_id<C_BaseParticleEntity>()
            );
    }

    static void* extract_C_BaseParticleEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_SmokeTrail > C_SmokeTrailHANDLE;

struct ptr_C_SmokeTrail_to_handle : bp::to_python_converter<C_SmokeTrail *, ptr_C_SmokeTrail_to_handle>
{
    static PyObject* convert(C_SmokeTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_SmokeTrail_to_handle : bp::to_python_converter<C_SmokeTrail, C_SmokeTrail_to_handle>
{
    static PyObject* convert(const C_SmokeTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_SmokeTrail
{
    handle_to_C_SmokeTrail()
    {
        bp::converter::registry::insert(
            &extract_C_SmokeTrail, 
            bp::type_id<C_SmokeTrail>()
            );
    }

    static void* extract_C_SmokeTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_RocketTrail > C_RocketTrailHANDLE;

struct ptr_C_RocketTrail_to_handle : bp::to_python_converter<C_RocketTrail *, ptr_C_RocketTrail_to_handle>
{
    static PyObject* convert(C_RocketTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_RocketTrail_to_handle : bp::to_python_converter<C_RocketTrail, C_RocketTrail_to_handle>
{
    static PyObject* convert(const C_RocketTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_RocketTrail
{
    handle_to_C_RocketTrail()
    {
        bp::converter::registry::insert(
            &extract_C_RocketTrail, 
            bp::type_id<C_RocketTrail>()
            );
    }

    static void* extract_C_RocketTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_Beam > C_BeamHANDLE;

struct ptr_C_Beam_to_handle : bp::to_python_converter<C_Beam *, ptr_C_Beam_to_handle>
{
    static PyObject* convert(C_Beam *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_Beam_to_handle : bp::to_python_converter<C_Beam, C_Beam_to_handle>
{
    static PyObject* convert(const C_Beam &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_Beam
{
    handle_to_C_Beam()
    {
        bp::converter::registry::insert(
            &extract_C_Beam, 
            bp::type_id<C_Beam>()
            );
    }

    static void* extract_C_Beam(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_HL2WarsPlayer > C_HL2WarsPlayerHANDLE;

struct ptr_C_HL2WarsPlayer_to_handle : bp::to_python_converter<C_HL2WarsPlayer *, ptr_C_HL2WarsPlayer_to_handle>
{
    static PyObject* convert(C_HL2WarsPlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_HL2WarsPlayer_to_handle : bp::to_python_converter<C_HL2WarsPlayer, C_HL2WarsPlayer_to_handle>
{
    static PyObject* convert(const C_HL2WarsPlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_HL2WarsPlayer
{
    handle_to_C_HL2WarsPlayer()
    {
        bp::converter::registry::insert(
            &extract_C_HL2WarsPlayer, 
            bp::type_id<C_HL2WarsPlayer>()
            );
    }

    static void* extract_C_HL2WarsPlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_UnitBase > C_UnitBaseHANDLE;

struct ptr_C_UnitBase_to_handle : bp::to_python_converter<C_UnitBase *, ptr_C_UnitBase_to_handle>
{
    static PyObject* convert(C_UnitBase *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_UnitBase_to_handle : bp::to_python_converter<C_UnitBase, C_UnitBase_to_handle>
{
    static PyObject* convert(const C_UnitBase &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_UnitBase
{
    handle_to_C_UnitBase()
    {
        bp::converter::registry::insert(
            &extract_C_UnitBase, 
            bp::type_id<C_UnitBase>()
            );
    }

    static void* extract_C_UnitBase(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_FuncUnit > C_FuncUnitHANDLE;

struct ptr_C_FuncUnit_to_handle : bp::to_python_converter<C_FuncUnit *, ptr_C_FuncUnit_to_handle>
{
    static PyObject* convert(C_FuncUnit *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_FuncUnit_to_handle : bp::to_python_converter<C_FuncUnit, C_FuncUnit_to_handle>
{
    static PyObject* convert(const C_FuncUnit &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_FuncUnit
{
    handle_to_C_FuncUnit()
    {
        bp::converter::registry::insert(
            &extract_C_FuncUnit, 
            bp::type_id<C_FuncUnit>()
            );
    }

    static void* extract_C_FuncUnit(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_WarsWeapon > C_WarsWeaponHANDLE;

struct ptr_C_WarsWeapon_to_handle : bp::to_python_converter<C_WarsWeapon *, ptr_C_WarsWeapon_to_handle>
{
    static PyObject* convert(C_WarsWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_WarsWeapon_to_handle : bp::to_python_converter<C_WarsWeapon, C_WarsWeapon_to_handle>
{
    static PyObject* convert(const C_WarsWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_WarsWeapon
{
    handle_to_C_WarsWeapon()
    {
        bp::converter::registry::insert(
            &extract_C_WarsWeapon, 
            bp::type_id<C_WarsWeapon>()
            );
    }

    static void* extract_C_WarsWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseFuncMapBoundary > C_BaseFuncMapBoundaryHANDLE;

struct ptr_C_BaseFuncMapBoundary_to_handle : bp::to_python_converter<C_BaseFuncMapBoundary *, ptr_C_BaseFuncMapBoundary_to_handle>
{
    static PyObject* convert(C_BaseFuncMapBoundary *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseFuncMapBoundary_to_handle : bp::to_python_converter<C_BaseFuncMapBoundary, C_BaseFuncMapBoundary_to_handle>
{
    static PyObject* convert(const C_BaseFuncMapBoundary &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseFuncMapBoundary
{
    handle_to_C_BaseFuncMapBoundary()
    {
        bp::converter::registry::insert(
            &extract_C_BaseFuncMapBoundary, 
            bp::type_id<C_BaseFuncMapBoundary>()
            );
    }

    static void* extract_C_BaseFuncMapBoundary(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle< CWarsFlora > CWarsFloraHANDLE;

struct ptr_CWarsFlora_to_handle : bp::to_python_converter<CWarsFlora *, ptr_CWarsFlora_to_handle>
{
    static PyObject* convert(CWarsFlora *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CWarsFlora_to_handle : bp::to_python_converter<CWarsFlora, CWarsFlora_to_handle>
{
    static PyObject* convert(const CWarsFlora &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CWarsFlora
{
    handle_to_CWarsFlora()
    {
        bp::converter::registry::insert(
            &extract_CWarsFlora, 
            bp::type_id<CWarsFlora>()
            );
    }

    static void* extract_CWarsFlora(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

C_PlayerResource *wrap_PlayerResource( void )
{
	return g_PR;
}

BOOST_PYTHON_MODULE(_entities){
    _entities_register_enumerations();

    bp::docstring_options doc_options( true, true, false );

    register_CBaseHandle_class();

    register_IHandleEntity_class();

    register_IClientUnknown_class();

    register_IClientEntity_class();

    register_C_BaseEntity_class();

    register_C_BaseAnimating_class();

    register_CWarsFlora_class();

    register_C_BaseAnimatingOverlay_class();

    register_C_BaseFlex_class();

    register_C_BaseCombatCharacter_class();

    register_C_BaseCombatWeapon_class();

    register_C_BaseFuncMapBoundary_class();

    register_C_BaseProjectile_class();

    register_C_BaseGrenade_class();

    register_C_BaseParticleEntity_class();

    register_C_BasePlayer_class();

    register_C_BaseToggle_class();

    register_C_BaseTrigger_class();

    register_C_Beam_class();

    register_C_BreakableProp_class();

    register_C_FuncBrush_class();

    register_C_UnitBase_class();

    register_C_FuncUnit_class();

    register_C_HL2WarsPlayer_class();

    register_C_PlayerResource_class();

    register_C_RocketTrail_class();

    register_C_SmokeTrail_class();

    register_C_Sprite_class();

    register_C_SpriteTrail_class();

    register_C_WarsWeapon_class();

    register_DeadEntity_class();

    register_PyHandle_class();

    handle_to_IHandleEntity();

    { //::C_BaseEntityHANDLE
        typedef bp::class_< C_BaseEntityHANDLE, bp::bases< CBaseHandle > > C_BaseEntityHANDLE_exposer_t;
        C_BaseEntityHANDLE_exposer_t C_BaseEntityHANDLE_exposer = C_BaseEntityHANDLE_exposer_t( "C_BaseEntityHANDLE", bp::init< >() );
        C_BaseEntityHANDLE_exposer.def( bp::init< C_BaseEntity * >(( bp::arg("pVal") )) );
        C_BaseEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseEntityHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseEntityHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseEntityHANDLE::Cmp
        
            typedef bool ( ::C_BaseEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseEntityHANDLE::Cmp )
            );
        
        }
        { //::C_BaseEntityHANDLE::NonZero
        
            typedef bool ( ::C_BaseEntityHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseEntityHANDLE::NonZero )
            );
        }
        { //::C_BaseEntityHANDLE::Bool
        
            typedef bool ( ::C_BaseEntityHANDLE::*Bool_function_type )( ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseEntityHANDLE::Bool )
            );
        }
        { //::C_BaseEntityHANDLE::Set
        
            typedef void ( ::C_BaseEntityHANDLE::*Set_function_type )( C_BaseEntity * ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseEntityHANDLE::Set )
            );
        
        }
        { //::C_BaseEntityHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseEntityHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseEntityHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseEntityHANDLE_exposer.def( bp::self != bp::self );
        C_BaseEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseEntity_to_handle();

    C_BaseEntity_to_handle();

    handle_to_C_BaseEntity();

    { //::C_BaseAnimatingHANDLE
        typedef bp::class_< C_BaseAnimatingHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingHANDLE_exposer_t;
        C_BaseAnimatingHANDLE_exposer_t C_BaseAnimatingHANDLE_exposer = C_BaseAnimatingHANDLE_exposer_t( "C_BaseAnimatingHANDLE", bp::init< >() );
        C_BaseAnimatingHANDLE_exposer.def( bp::init< C_BaseAnimating * >(( bp::arg("pVal") )) );
        C_BaseAnimatingHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseAnimatingHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseAnimatingHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseAnimatingHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::Cmp
        
            typedef bool ( ::C_BaseAnimatingHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseAnimatingHANDLE::Cmp )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::NonZero
        
            typedef bool ( ::C_BaseAnimatingHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseAnimatingHANDLE::NonZero )
            );
        }
        { //::C_BaseAnimatingHANDLE::Bool
        
            typedef bool ( ::C_BaseAnimatingHANDLE::*Bool_function_type )( ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseAnimatingHANDLE::Bool )
            );
        }
        { //::C_BaseAnimatingHANDLE::Set
        
            typedef void ( ::C_BaseAnimatingHANDLE::*Set_function_type )( C_BaseAnimating * ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseAnimatingHANDLE::Set )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseAnimatingHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseAnimatingHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseAnimatingHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseAnimatingHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseAnimatingHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseAnimatingHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseAnimatingHANDLE_exposer.def( bp::self != bp::self );
        C_BaseAnimatingHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseAnimating_to_handle();

    C_BaseAnimating_to_handle();

    handle_to_C_BaseAnimating();

    { //::C_BaseAnimatingOverlayHANDLE
        typedef bp::class_< C_BaseAnimatingOverlayHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingOverlayHANDLE_exposer_t;
        C_BaseAnimatingOverlayHANDLE_exposer_t C_BaseAnimatingOverlayHANDLE_exposer = C_BaseAnimatingOverlayHANDLE_exposer_t( "C_BaseAnimatingOverlayHANDLE", bp::init< >() );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< C_BaseAnimatingOverlay * >(( bp::arg("pVal") )) );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseAnimatingOverlayHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseAnimatingOverlayHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseAnimatingOverlayHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::Cmp
        
            typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseAnimatingOverlayHANDLE::Cmp )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::NonZero
        
            typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseAnimatingOverlayHANDLE::NonZero )
            );
        }
        { //::C_BaseAnimatingOverlayHANDLE::Bool
        
            typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*Bool_function_type )( ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseAnimatingOverlayHANDLE::Bool )
            );
        }
        { //::C_BaseAnimatingOverlayHANDLE::Set
        
            typedef void ( ::C_BaseAnimatingOverlayHANDLE::*Set_function_type )( C_BaseAnimatingOverlay * ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseAnimatingOverlayHANDLE::Set )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseAnimatingOverlayHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseAnimatingOverlayHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseAnimatingOverlayHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseAnimatingOverlayHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self != bp::self );
        C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseAnimatingOverlay_to_handle();

    C_BaseAnimatingOverlay_to_handle();

    handle_to_C_BaseAnimatingOverlay();

    { //::C_BaseFlexHANDLE
        typedef bp::class_< C_BaseFlexHANDLE, bp::bases< CBaseHandle > > C_BaseFlexHANDLE_exposer_t;
        C_BaseFlexHANDLE_exposer_t C_BaseFlexHANDLE_exposer = C_BaseFlexHANDLE_exposer_t( "C_BaseFlexHANDLE", bp::init< >() );
        C_BaseFlexHANDLE_exposer.def( bp::init< C_BaseFlex * >(( bp::arg("pVal") )) );
        C_BaseFlexHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseFlexHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseFlexHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseFlexHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseFlexHANDLE::Cmp
        
            typedef bool ( ::C_BaseFlexHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseFlexHANDLE::Cmp )
            );
        
        }
        { //::C_BaseFlexHANDLE::NonZero
        
            typedef bool ( ::C_BaseFlexHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseFlexHANDLE::NonZero )
            );
        }
        { //::C_BaseFlexHANDLE::Bool
        
            typedef bool ( ::C_BaseFlexHANDLE::*Bool_function_type )( ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseFlexHANDLE::Bool )
            );
        }
        { //::C_BaseFlexHANDLE::Set
        
            typedef void ( ::C_BaseFlexHANDLE::*Set_function_type )( C_BaseFlex * ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseFlexHANDLE::Set )
            );
        
        }
        { //::C_BaseFlexHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseFlexHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseFlexHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseFlexHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseFlexHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseFlexHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseFlexHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseFlexHANDLE_exposer.def( bp::self != bp::self );
        C_BaseFlexHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseFlex_to_handle();

    C_BaseFlex_to_handle();

    handle_to_C_BaseFlex();

    { //::C_BaseCombatCharacterHANDLE
        typedef bp::class_< C_BaseCombatCharacterHANDLE, bp::bases< CBaseHandle > > C_BaseCombatCharacterHANDLE_exposer_t;
        C_BaseCombatCharacterHANDLE_exposer_t C_BaseCombatCharacterHANDLE_exposer = C_BaseCombatCharacterHANDLE_exposer_t( "C_BaseCombatCharacterHANDLE", bp::init< >() );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::init< C_BaseCombatCharacter * >(( bp::arg("pVal") )) );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseCombatCharacterHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseCombatCharacterHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseCombatCharacterHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::Cmp
        
            typedef bool ( ::C_BaseCombatCharacterHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseCombatCharacterHANDLE::Cmp )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::NonZero
        
            typedef bool ( ::C_BaseCombatCharacterHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseCombatCharacterHANDLE::NonZero )
            );
        }
        { //::C_BaseCombatCharacterHANDLE::Bool
        
            typedef bool ( ::C_BaseCombatCharacterHANDLE::*Bool_function_type )( ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseCombatCharacterHANDLE::Bool )
            );
        }
        { //::C_BaseCombatCharacterHANDLE::Set
        
            typedef void ( ::C_BaseCombatCharacterHANDLE::*Set_function_type )( C_BaseCombatCharacter * ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseCombatCharacterHANDLE::Set )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseCombatCharacterHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseCombatCharacterHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseCombatCharacterHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseCombatCharacterHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseCombatCharacterHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseCombatCharacterHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseCombatCharacterHANDLE_exposer.def( bp::self != bp::self );
        C_BaseCombatCharacterHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseCombatCharacter_to_handle();

    C_BaseCombatCharacter_to_handle();

    handle_to_C_BaseCombatCharacter();

    { //::C_BaseCombatWeaponHANDLE
        typedef bp::class_< C_BaseCombatWeaponHANDLE, bp::bases< CBaseHandle > > C_BaseCombatWeaponHANDLE_exposer_t;
        C_BaseCombatWeaponHANDLE_exposer_t C_BaseCombatWeaponHANDLE_exposer = C_BaseCombatWeaponHANDLE_exposer_t( "C_BaseCombatWeaponHANDLE", bp::init< >() );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::init< C_BaseCombatWeapon * >(( bp::arg("pVal") )) );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseCombatWeaponHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseCombatWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseCombatWeaponHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::Cmp
        
            typedef bool ( ::C_BaseCombatWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseCombatWeaponHANDLE::Cmp )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::NonZero
        
            typedef bool ( ::C_BaseCombatWeaponHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseCombatWeaponHANDLE::NonZero )
            );
        }
        { //::C_BaseCombatWeaponHANDLE::Bool
        
            typedef bool ( ::C_BaseCombatWeaponHANDLE::*Bool_function_type )( ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseCombatWeaponHANDLE::Bool )
            );
        }
        { //::C_BaseCombatWeaponHANDLE::Set
        
            typedef void ( ::C_BaseCombatWeaponHANDLE::*Set_function_type )( C_BaseCombatWeapon * ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseCombatWeaponHANDLE::Set )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseCombatWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseCombatWeaponHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseCombatWeaponHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseCombatWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseCombatWeaponHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseCombatWeaponHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseCombatWeaponHANDLE_exposer.def( bp::self != bp::self );
        C_BaseCombatWeaponHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseCombatWeapon_to_handle();

    C_BaseCombatWeapon_to_handle();

    handle_to_C_BaseCombatWeapon();

    { //::C_BaseProjectileHANDLE
        typedef bp::class_< C_BaseProjectileHANDLE, bp::bases< CBaseHandle > > C_BaseProjectileHANDLE_exposer_t;
        C_BaseProjectileHANDLE_exposer_t C_BaseProjectileHANDLE_exposer = C_BaseProjectileHANDLE_exposer_t( "C_BaseProjectileHANDLE", bp::init< >() );
        C_BaseProjectileHANDLE_exposer.def( bp::init< C_BaseProjectile * >(( bp::arg("pVal") )) );
        C_BaseProjectileHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseProjectileHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseProjectileHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseProjectileHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseProjectileHANDLE::Cmp
        
            typedef bool ( ::C_BaseProjectileHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseProjectileHANDLE::Cmp )
            );
        
        }
        { //::C_BaseProjectileHANDLE::NonZero
        
            typedef bool ( ::C_BaseProjectileHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseProjectileHANDLE::NonZero )
            );
        }
        { //::C_BaseProjectileHANDLE::Bool
        
            typedef bool ( ::C_BaseProjectileHANDLE::*Bool_function_type )( ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseProjectileHANDLE::Bool )
            );
        }
        { //::C_BaseProjectileHANDLE::Set
        
            typedef void ( ::C_BaseProjectileHANDLE::*Set_function_type )( C_BaseProjectile * ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseProjectileHANDLE::Set )
            );
        
        }
        { //::C_BaseProjectileHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseProjectileHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseProjectileHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseProjectileHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseProjectileHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseProjectileHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseProjectileHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseProjectileHANDLE_exposer.def( bp::self != bp::self );
        C_BaseProjectileHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseProjectile_to_handle();

    C_BaseProjectile_to_handle();

    handle_to_C_BaseProjectile();

    { //::C_BaseGrenadeHANDLE
        typedef bp::class_< C_BaseGrenadeHANDLE, bp::bases< CBaseHandle > > C_BaseGrenadeHANDLE_exposer_t;
        C_BaseGrenadeHANDLE_exposer_t C_BaseGrenadeHANDLE_exposer = C_BaseGrenadeHANDLE_exposer_t( "C_BaseGrenadeHANDLE", bp::init< >() );
        C_BaseGrenadeHANDLE_exposer.def( bp::init< C_BaseGrenade * >(( bp::arg("pVal") )) );
        C_BaseGrenadeHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseGrenadeHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseGrenadeHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseGrenadeHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::Cmp
        
            typedef bool ( ::C_BaseGrenadeHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseGrenadeHANDLE::Cmp )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::NonZero
        
            typedef bool ( ::C_BaseGrenadeHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseGrenadeHANDLE::NonZero )
            );
        }
        { //::C_BaseGrenadeHANDLE::Bool
        
            typedef bool ( ::C_BaseGrenadeHANDLE::*Bool_function_type )( ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseGrenadeHANDLE::Bool )
            );
        }
        { //::C_BaseGrenadeHANDLE::Set
        
            typedef void ( ::C_BaseGrenadeHANDLE::*Set_function_type )( C_BaseGrenade * ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseGrenadeHANDLE::Set )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseGrenadeHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseGrenadeHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseGrenadeHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseGrenadeHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseGrenadeHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseGrenadeHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseGrenadeHANDLE_exposer.def( bp::self != bp::self );
        C_BaseGrenadeHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseGrenade_to_handle();

    C_BaseGrenade_to_handle();

    handle_to_C_BaseGrenade();

    { //::C_BasePlayerHANDLE
        typedef bp::class_< C_BasePlayerHANDLE, bp::bases< CBaseHandle > > C_BasePlayerHANDLE_exposer_t;
        C_BasePlayerHANDLE_exposer_t C_BasePlayerHANDLE_exposer = C_BasePlayerHANDLE_exposer_t( "C_BasePlayerHANDLE", bp::init< >() );
        C_BasePlayerHANDLE_exposer.def( bp::init< C_BasePlayer * >(( bp::arg("pVal") )) );
        C_BasePlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BasePlayerHANDLE::GetAttr
        
            typedef bp::object ( ::C_BasePlayerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BasePlayerHANDLE::GetAttr )
            );
        
        }
        { //::C_BasePlayerHANDLE::Cmp
        
            typedef bool ( ::C_BasePlayerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BasePlayerHANDLE::Cmp )
            );
        
        }
        { //::C_BasePlayerHANDLE::NonZero
        
            typedef bool ( ::C_BasePlayerHANDLE::*NonZero_function_type )( ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BasePlayerHANDLE::NonZero )
            );
        }
        { //::C_BasePlayerHANDLE::Bool
        
            typedef bool ( ::C_BasePlayerHANDLE::*Bool_function_type )( ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BasePlayerHANDLE::Bool )
            );
        }
        { //::C_BasePlayerHANDLE::Set
        
            typedef void ( ::C_BasePlayerHANDLE::*Set_function_type )( C_BasePlayer * ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BasePlayerHANDLE::Set )
            );
        
        }
        { //::C_BasePlayerHANDLE::GetSerialNumber
        
            typedef int ( ::C_BasePlayerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BasePlayerHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BasePlayerHANDLE::GetEntryIndex
        
            typedef int ( ::C_BasePlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BasePlayerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BasePlayerHANDLE::GetEntryIndex )
            );
        
        }
        C_BasePlayerHANDLE_exposer.def( bp::self != bp::self );
        C_BasePlayerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BasePlayer_to_handle();

    C_BasePlayer_to_handle();

    handle_to_C_BasePlayer();

    { //::C_PlayerResourceHANDLE
        typedef bp::class_< C_PlayerResourceHANDLE, bp::bases< CBaseHandle > > C_PlayerResourceHANDLE_exposer_t;
        C_PlayerResourceHANDLE_exposer_t C_PlayerResourceHANDLE_exposer = C_PlayerResourceHANDLE_exposer_t( "C_PlayerResourceHANDLE", bp::init< >() );
        C_PlayerResourceHANDLE_exposer.def( bp::init< C_PlayerResource * >(( bp::arg("pVal") )) );
        C_PlayerResourceHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_PlayerResourceHANDLE::GetAttr
        
            typedef bp::object ( ::C_PlayerResourceHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_PlayerResourceHANDLE::GetAttr )
            );
        
        }
        { //::C_PlayerResourceHANDLE::Cmp
        
            typedef bool ( ::C_PlayerResourceHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_PlayerResourceHANDLE::Cmp )
            );
        
        }
        { //::C_PlayerResourceHANDLE::NonZero
        
            typedef bool ( ::C_PlayerResourceHANDLE::*NonZero_function_type )( ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_PlayerResourceHANDLE::NonZero )
            );
        }
        { //::C_PlayerResourceHANDLE::Bool
        
            typedef bool ( ::C_PlayerResourceHANDLE::*Bool_function_type )( ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_PlayerResourceHANDLE::Bool )
            );
        }
        { //::C_PlayerResourceHANDLE::Set
        
            typedef void ( ::C_PlayerResourceHANDLE::*Set_function_type )( C_PlayerResource * ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_PlayerResourceHANDLE::Set )
            );
        
        }
        { //::C_PlayerResourceHANDLE::GetSerialNumber
        
            typedef int ( ::C_PlayerResourceHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_PlayerResourceHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_PlayerResourceHANDLE::GetEntryIndex
        
            typedef int ( ::C_PlayerResourceHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_PlayerResourceHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_PlayerResourceHANDLE::GetEntryIndex )
            );
        
        }
        C_PlayerResourceHANDLE_exposer.def( bp::self != bp::self );
        C_PlayerResourceHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_PlayerResource_to_handle();

    C_PlayerResource_to_handle();

    handle_to_C_PlayerResource();

    { //::C_BreakablePropHANDLE
        typedef bp::class_< C_BreakablePropHANDLE, bp::bases< CBaseHandle > > C_BreakablePropHANDLE_exposer_t;
        C_BreakablePropHANDLE_exposer_t C_BreakablePropHANDLE_exposer = C_BreakablePropHANDLE_exposer_t( "C_BreakablePropHANDLE", bp::init< >() );
        C_BreakablePropHANDLE_exposer.def( bp::init< C_BreakableProp * >(( bp::arg("pVal") )) );
        C_BreakablePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BreakablePropHANDLE::GetAttr
        
            typedef bp::object ( ::C_BreakablePropHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BreakablePropHANDLE::GetAttr )
            );
        
        }
        { //::C_BreakablePropHANDLE::Cmp
        
            typedef bool ( ::C_BreakablePropHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BreakablePropHANDLE::Cmp )
            );
        
        }
        { //::C_BreakablePropHANDLE::NonZero
        
            typedef bool ( ::C_BreakablePropHANDLE::*NonZero_function_type )( ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BreakablePropHANDLE::NonZero )
            );
        }
        { //::C_BreakablePropHANDLE::Bool
        
            typedef bool ( ::C_BreakablePropHANDLE::*Bool_function_type )( ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BreakablePropHANDLE::Bool )
            );
        }
        { //::C_BreakablePropHANDLE::Set
        
            typedef void ( ::C_BreakablePropHANDLE::*Set_function_type )( C_BreakableProp * ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BreakablePropHANDLE::Set )
            );
        
        }
        { //::C_BreakablePropHANDLE::GetSerialNumber
        
            typedef int ( ::C_BreakablePropHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BreakablePropHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BreakablePropHANDLE::GetEntryIndex
        
            typedef int ( ::C_BreakablePropHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BreakablePropHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BreakablePropHANDLE::GetEntryIndex )
            );
        
        }
        C_BreakablePropHANDLE_exposer.def( bp::self != bp::self );
        C_BreakablePropHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BreakableProp_to_handle();

    C_BreakableProp_to_handle();

    handle_to_C_BreakableProp();

    { //::C_BaseToggleHANDLE
        typedef bp::class_< C_BaseToggleHANDLE, bp::bases< CBaseHandle > > C_BaseToggleHANDLE_exposer_t;
        C_BaseToggleHANDLE_exposer_t C_BaseToggleHANDLE_exposer = C_BaseToggleHANDLE_exposer_t( "C_BaseToggleHANDLE", bp::init< >() );
        C_BaseToggleHANDLE_exposer.def( bp::init< C_BaseToggle * >(( bp::arg("pVal") )) );
        C_BaseToggleHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseToggleHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseToggleHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseToggleHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseToggleHANDLE::Cmp
        
            typedef bool ( ::C_BaseToggleHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseToggleHANDLE::Cmp )
            );
        
        }
        { //::C_BaseToggleHANDLE::NonZero
        
            typedef bool ( ::C_BaseToggleHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseToggleHANDLE::NonZero )
            );
        }
        { //::C_BaseToggleHANDLE::Bool
        
            typedef bool ( ::C_BaseToggleHANDLE::*Bool_function_type )( ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseToggleHANDLE::Bool )
            );
        }
        { //::C_BaseToggleHANDLE::Set
        
            typedef void ( ::C_BaseToggleHANDLE::*Set_function_type )( C_BaseToggle * ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseToggleHANDLE::Set )
            );
        
        }
        { //::C_BaseToggleHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseToggleHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseToggleHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseToggleHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseToggleHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseToggleHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseToggleHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseToggleHANDLE_exposer.def( bp::self != bp::self );
        C_BaseToggleHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseToggle_to_handle();

    C_BaseToggle_to_handle();

    handle_to_C_BaseToggle();

    { //::C_BaseTriggerHANDLE
        typedef bp::class_< C_BaseTriggerHANDLE, bp::bases< CBaseHandle > > C_BaseTriggerHANDLE_exposer_t;
        C_BaseTriggerHANDLE_exposer_t C_BaseTriggerHANDLE_exposer = C_BaseTriggerHANDLE_exposer_t( "C_BaseTriggerHANDLE", bp::init< >() );
        C_BaseTriggerHANDLE_exposer.def( bp::init< C_BaseTrigger * >(( bp::arg("pVal") )) );
        C_BaseTriggerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseTriggerHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseTriggerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseTriggerHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseTriggerHANDLE::Cmp
        
            typedef bool ( ::C_BaseTriggerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseTriggerHANDLE::Cmp )
            );
        
        }
        { //::C_BaseTriggerHANDLE::NonZero
        
            typedef bool ( ::C_BaseTriggerHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseTriggerHANDLE::NonZero )
            );
        }
        { //::C_BaseTriggerHANDLE::Bool
        
            typedef bool ( ::C_BaseTriggerHANDLE::*Bool_function_type )( ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseTriggerHANDLE::Bool )
            );
        }
        { //::C_BaseTriggerHANDLE::Set
        
            typedef void ( ::C_BaseTriggerHANDLE::*Set_function_type )( C_BaseTrigger * ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseTriggerHANDLE::Set )
            );
        
        }
        { //::C_BaseTriggerHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseTriggerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseTriggerHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseTriggerHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseTriggerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseTriggerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseTriggerHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseTriggerHANDLE_exposer.def( bp::self != bp::self );
        C_BaseTriggerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseTrigger_to_handle();

    C_BaseTrigger_to_handle();

    handle_to_C_BaseTrigger();

    { //::C_FuncBrushHANDLE
        typedef bp::class_< C_FuncBrushHANDLE, bp::bases< CBaseHandle > > C_FuncBrushHANDLE_exposer_t;
        C_FuncBrushHANDLE_exposer_t C_FuncBrushHANDLE_exposer = C_FuncBrushHANDLE_exposer_t( "C_FuncBrushHANDLE", bp::init< >() );
        C_FuncBrushHANDLE_exposer.def( bp::init< C_FuncBrush * >(( bp::arg("pVal") )) );
        C_FuncBrushHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_FuncBrushHANDLE::GetAttr
        
            typedef bp::object ( ::C_FuncBrushHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_FuncBrushHANDLE::GetAttr )
            );
        
        }
        { //::C_FuncBrushHANDLE::Cmp
        
            typedef bool ( ::C_FuncBrushHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_FuncBrushHANDLE::Cmp )
            );
        
        }
        { //::C_FuncBrushHANDLE::NonZero
        
            typedef bool ( ::C_FuncBrushHANDLE::*NonZero_function_type )( ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_FuncBrushHANDLE::NonZero )
            );
        }
        { //::C_FuncBrushHANDLE::Bool
        
            typedef bool ( ::C_FuncBrushHANDLE::*Bool_function_type )( ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_FuncBrushHANDLE::Bool )
            );
        }
        { //::C_FuncBrushHANDLE::Set
        
            typedef void ( ::C_FuncBrushHANDLE::*Set_function_type )( C_FuncBrush * ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_FuncBrushHANDLE::Set )
            );
        
        }
        { //::C_FuncBrushHANDLE::GetSerialNumber
        
            typedef int ( ::C_FuncBrushHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_FuncBrushHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_FuncBrushHANDLE::GetEntryIndex
        
            typedef int ( ::C_FuncBrushHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_FuncBrushHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_FuncBrushHANDLE::GetEntryIndex )
            );
        
        }
        C_FuncBrushHANDLE_exposer.def( bp::self != bp::self );
        C_FuncBrushHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_FuncBrush_to_handle();

    C_FuncBrush_to_handle();

    handle_to_C_FuncBrush();

    { //::C_SpriteHANDLE
        typedef bp::class_< C_SpriteHANDLE, bp::bases< CBaseHandle > > C_SpriteHANDLE_exposer_t;
        C_SpriteHANDLE_exposer_t C_SpriteHANDLE_exposer = C_SpriteHANDLE_exposer_t( "C_SpriteHANDLE", bp::init< >() );
        C_SpriteHANDLE_exposer.def( bp::init< C_Sprite * >(( bp::arg("pVal") )) );
        C_SpriteHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_SpriteHANDLE::GetAttr
        
            typedef bp::object ( ::C_SpriteHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_SpriteHANDLE::GetAttr )
            );
        
        }
        { //::C_SpriteHANDLE::Cmp
        
            typedef bool ( ::C_SpriteHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_SpriteHANDLE::Cmp )
            );
        
        }
        { //::C_SpriteHANDLE::NonZero
        
            typedef bool ( ::C_SpriteHANDLE::*NonZero_function_type )( ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_SpriteHANDLE::NonZero )
            );
        }
        { //::C_SpriteHANDLE::Bool
        
            typedef bool ( ::C_SpriteHANDLE::*Bool_function_type )( ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_SpriteHANDLE::Bool )
            );
        }
        { //::C_SpriteHANDLE::Set
        
            typedef void ( ::C_SpriteHANDLE::*Set_function_type )( C_Sprite * ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_SpriteHANDLE::Set )
            );
        
        }
        { //::C_SpriteHANDLE::GetSerialNumber
        
            typedef int ( ::C_SpriteHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_SpriteHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_SpriteHANDLE::GetEntryIndex
        
            typedef int ( ::C_SpriteHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_SpriteHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_SpriteHANDLE::GetEntryIndex )
            );
        
        }
        C_SpriteHANDLE_exposer.def( bp::self != bp::self );
        C_SpriteHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_Sprite_to_handle();

    C_Sprite_to_handle();

    handle_to_C_Sprite();

    { //::C_SpriteTrailHANDLE
        typedef bp::class_< C_SpriteTrailHANDLE, bp::bases< CBaseHandle > > C_SpriteTrailHANDLE_exposer_t;
        C_SpriteTrailHANDLE_exposer_t C_SpriteTrailHANDLE_exposer = C_SpriteTrailHANDLE_exposer_t( "C_SpriteTrailHANDLE", bp::init< >() );
        C_SpriteTrailHANDLE_exposer.def( bp::init< C_SpriteTrail * >(( bp::arg("pVal") )) );
        C_SpriteTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_SpriteTrailHANDLE::GetAttr
        
            typedef bp::object ( ::C_SpriteTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_SpriteTrailHANDLE::GetAttr )
            );
        
        }
        { //::C_SpriteTrailHANDLE::Cmp
        
            typedef bool ( ::C_SpriteTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_SpriteTrailHANDLE::Cmp )
            );
        
        }
        { //::C_SpriteTrailHANDLE::NonZero
        
            typedef bool ( ::C_SpriteTrailHANDLE::*NonZero_function_type )( ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_SpriteTrailHANDLE::NonZero )
            );
        }
        { //::C_SpriteTrailHANDLE::Bool
        
            typedef bool ( ::C_SpriteTrailHANDLE::*Bool_function_type )( ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_SpriteTrailHANDLE::Bool )
            );
        }
        { //::C_SpriteTrailHANDLE::Set
        
            typedef void ( ::C_SpriteTrailHANDLE::*Set_function_type )( C_SpriteTrail * ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_SpriteTrailHANDLE::Set )
            );
        
        }
        { //::C_SpriteTrailHANDLE::GetSerialNumber
        
            typedef int ( ::C_SpriteTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_SpriteTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_SpriteTrailHANDLE::GetEntryIndex
        
            typedef int ( ::C_SpriteTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_SpriteTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_SpriteTrailHANDLE::GetEntryIndex )
            );
        
        }
        C_SpriteTrailHANDLE_exposer.def( bp::self != bp::self );
        C_SpriteTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_SpriteTrail_to_handle();

    C_SpriteTrail_to_handle();

    handle_to_C_SpriteTrail();

    { //::C_BaseParticleEntityHANDLE
        typedef bp::class_< C_BaseParticleEntityHANDLE, bp::bases< CBaseHandle > > C_BaseParticleEntityHANDLE_exposer_t;
        C_BaseParticleEntityHANDLE_exposer_t C_BaseParticleEntityHANDLE_exposer = C_BaseParticleEntityHANDLE_exposer_t( "C_BaseParticleEntityHANDLE", bp::init< >() );
        C_BaseParticleEntityHANDLE_exposer.def( bp::init< C_BaseParticleEntity * >(( bp::arg("pVal") )) );
        C_BaseParticleEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseParticleEntityHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseParticleEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseParticleEntityHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseParticleEntityHANDLE::Cmp
        
            typedef bool ( ::C_BaseParticleEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseParticleEntityHANDLE::Cmp )
            );
        
        }
        { //::C_BaseParticleEntityHANDLE::NonZero
        
            typedef bool ( ::C_BaseParticleEntityHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseParticleEntityHANDLE::NonZero )
            );
        }
        { //::C_BaseParticleEntityHANDLE::Bool
        
            typedef bool ( ::C_BaseParticleEntityHANDLE::*Bool_function_type )( ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseParticleEntityHANDLE::Bool )
            );
        }
        { //::C_BaseParticleEntityHANDLE::Set
        
            typedef void ( ::C_BaseParticleEntityHANDLE::*Set_function_type )( C_BaseParticleEntity * ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseParticleEntityHANDLE::Set )
            );
        
        }
        { //::C_BaseParticleEntityHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseParticleEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseParticleEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseParticleEntityHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseParticleEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseParticleEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseParticleEntityHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseParticleEntityHANDLE_exposer.def( bp::self != bp::self );
        C_BaseParticleEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseParticleEntity_to_handle();

    C_BaseParticleEntity_to_handle();

    handle_to_C_BaseParticleEntity();

    { //::C_SmokeTrailHANDLE
        typedef bp::class_< C_SmokeTrailHANDLE, bp::bases< CBaseHandle > > C_SmokeTrailHANDLE_exposer_t;
        C_SmokeTrailHANDLE_exposer_t C_SmokeTrailHANDLE_exposer = C_SmokeTrailHANDLE_exposer_t( "C_SmokeTrailHANDLE", bp::init< >() );
        C_SmokeTrailHANDLE_exposer.def( bp::init< C_SmokeTrail * >(( bp::arg("pVal") )) );
        C_SmokeTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_SmokeTrailHANDLE::GetAttr
        
            typedef bp::object ( ::C_SmokeTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_SmokeTrailHANDLE::GetAttr )
            );
        
        }
        { //::C_SmokeTrailHANDLE::Cmp
        
            typedef bool ( ::C_SmokeTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_SmokeTrailHANDLE::Cmp )
            );
        
        }
        { //::C_SmokeTrailHANDLE::NonZero
        
            typedef bool ( ::C_SmokeTrailHANDLE::*NonZero_function_type )( ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_SmokeTrailHANDLE::NonZero )
            );
        }
        { //::C_SmokeTrailHANDLE::Bool
        
            typedef bool ( ::C_SmokeTrailHANDLE::*Bool_function_type )( ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_SmokeTrailHANDLE::Bool )
            );
        }
        { //::C_SmokeTrailHANDLE::Set
        
            typedef void ( ::C_SmokeTrailHANDLE::*Set_function_type )( C_SmokeTrail * ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_SmokeTrailHANDLE::Set )
            );
        
        }
        { //::C_SmokeTrailHANDLE::GetSerialNumber
        
            typedef int ( ::C_SmokeTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_SmokeTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_SmokeTrailHANDLE::GetEntryIndex
        
            typedef int ( ::C_SmokeTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_SmokeTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_SmokeTrailHANDLE::GetEntryIndex )
            );
        
        }
        C_SmokeTrailHANDLE_exposer.def( bp::self != bp::self );
        C_SmokeTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_SmokeTrail_to_handle();

    C_SmokeTrail_to_handle();

    handle_to_C_SmokeTrail();

    { //::C_RocketTrailHANDLE
        typedef bp::class_< C_RocketTrailHANDLE, bp::bases< CBaseHandle > > C_RocketTrailHANDLE_exposer_t;
        C_RocketTrailHANDLE_exposer_t C_RocketTrailHANDLE_exposer = C_RocketTrailHANDLE_exposer_t( "C_RocketTrailHANDLE", bp::init< >() );
        C_RocketTrailHANDLE_exposer.def( bp::init< C_RocketTrail * >(( bp::arg("pVal") )) );
        C_RocketTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_RocketTrailHANDLE::GetAttr
        
            typedef bp::object ( ::C_RocketTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_RocketTrailHANDLE::GetAttr )
            );
        
        }
        { //::C_RocketTrailHANDLE::Cmp
        
            typedef bool ( ::C_RocketTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_RocketTrailHANDLE::Cmp )
            );
        
        }
        { //::C_RocketTrailHANDLE::NonZero
        
            typedef bool ( ::C_RocketTrailHANDLE::*NonZero_function_type )( ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_RocketTrailHANDLE::NonZero )
            );
        }
        { //::C_RocketTrailHANDLE::Bool
        
            typedef bool ( ::C_RocketTrailHANDLE::*Bool_function_type )( ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_RocketTrailHANDLE::Bool )
            );
        }
        { //::C_RocketTrailHANDLE::Set
        
            typedef void ( ::C_RocketTrailHANDLE::*Set_function_type )( C_RocketTrail * ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_RocketTrailHANDLE::Set )
            );
        
        }
        { //::C_RocketTrailHANDLE::GetSerialNumber
        
            typedef int ( ::C_RocketTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_RocketTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_RocketTrailHANDLE::GetEntryIndex
        
            typedef int ( ::C_RocketTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_RocketTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_RocketTrailHANDLE::GetEntryIndex )
            );
        
        }
        C_RocketTrailHANDLE_exposer.def( bp::self != bp::self );
        C_RocketTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_RocketTrail_to_handle();

    C_RocketTrail_to_handle();

    handle_to_C_RocketTrail();

    { //::C_BeamHANDLE
        typedef bp::class_< C_BeamHANDLE, bp::bases< CBaseHandle > > C_BeamHANDLE_exposer_t;
        C_BeamHANDLE_exposer_t C_BeamHANDLE_exposer = C_BeamHANDLE_exposer_t( "C_BeamHANDLE", bp::init< >() );
        C_BeamHANDLE_exposer.def( bp::init< C_Beam * >(( bp::arg("pVal") )) );
        C_BeamHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BeamHANDLE::GetAttr
        
            typedef bp::object ( ::C_BeamHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BeamHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BeamHANDLE::GetAttr )
            );
        
        }
        { //::C_BeamHANDLE::Cmp
        
            typedef bool ( ::C_BeamHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BeamHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BeamHANDLE::Cmp )
            );
        
        }
        { //::C_BeamHANDLE::NonZero
        
            typedef bool ( ::C_BeamHANDLE::*NonZero_function_type )( ) const;
            
            C_BeamHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BeamHANDLE::NonZero )
            );
        }
        { //::C_BeamHANDLE::Bool
        
            typedef bool ( ::C_BeamHANDLE::*Bool_function_type )( ) const;
            
            C_BeamHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BeamHANDLE::Bool )
            );
        }
        { //::C_BeamHANDLE::Set
        
            typedef void ( ::C_BeamHANDLE::*Set_function_type )( C_Beam * ) const;
            
            C_BeamHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BeamHANDLE::Set )
            );
        
        }
        { //::C_BeamHANDLE::GetSerialNumber
        
            typedef int ( ::C_BeamHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BeamHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BeamHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BeamHANDLE::GetEntryIndex
        
            typedef int ( ::C_BeamHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BeamHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BeamHANDLE::GetEntryIndex )
            );
        
        }
        C_BeamHANDLE_exposer.def( bp::self != bp::self );
        C_BeamHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_Beam_to_handle();

    C_Beam_to_handle();

    handle_to_C_Beam();

    { //::C_HL2WarsPlayerHANDLE
        typedef bp::class_< C_HL2WarsPlayerHANDLE, bp::bases< CBaseHandle > > C_HL2WarsPlayerHANDLE_exposer_t;
        C_HL2WarsPlayerHANDLE_exposer_t C_HL2WarsPlayerHANDLE_exposer = C_HL2WarsPlayerHANDLE_exposer_t( "C_HL2WarsPlayerHANDLE", bp::init< >() );
        C_HL2WarsPlayerHANDLE_exposer.def( bp::init< C_HL2WarsPlayer * >(( bp::arg("pVal") )) );
        C_HL2WarsPlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_HL2WarsPlayerHANDLE::GetAttr
        
            typedef bp::object ( ::C_HL2WarsPlayerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_HL2WarsPlayerHANDLE::GetAttr )
            );
        
        }
        { //::C_HL2WarsPlayerHANDLE::Cmp
        
            typedef bool ( ::C_HL2WarsPlayerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_HL2WarsPlayerHANDLE::Cmp )
            );
        
        }
        { //::C_HL2WarsPlayerHANDLE::NonZero
        
            typedef bool ( ::C_HL2WarsPlayerHANDLE::*NonZero_function_type )( ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_HL2WarsPlayerHANDLE::NonZero )
            );
        }
        { //::C_HL2WarsPlayerHANDLE::Bool
        
            typedef bool ( ::C_HL2WarsPlayerHANDLE::*Bool_function_type )( ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_HL2WarsPlayerHANDLE::Bool )
            );
        }
        { //::C_HL2WarsPlayerHANDLE::Set
        
            typedef void ( ::C_HL2WarsPlayerHANDLE::*Set_function_type )( C_HL2WarsPlayer * ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_HL2WarsPlayerHANDLE::Set )
            );
        
        }
        { //::C_HL2WarsPlayerHANDLE::GetSerialNumber
        
            typedef int ( ::C_HL2WarsPlayerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_HL2WarsPlayerHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_HL2WarsPlayerHANDLE::GetEntryIndex
        
            typedef int ( ::C_HL2WarsPlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_HL2WarsPlayerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_HL2WarsPlayerHANDLE::GetEntryIndex )
            );
        
        }
        C_HL2WarsPlayerHANDLE_exposer.def( bp::self != bp::self );
        C_HL2WarsPlayerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_HL2WarsPlayer_to_handle();

    C_HL2WarsPlayer_to_handle();

    handle_to_C_HL2WarsPlayer();

    { //::C_UnitBaseHANDLE
        typedef bp::class_< C_UnitBaseHANDLE, bp::bases< CBaseHandle > > C_UnitBaseHANDLE_exposer_t;
        C_UnitBaseHANDLE_exposer_t C_UnitBaseHANDLE_exposer = C_UnitBaseHANDLE_exposer_t( "C_UnitBaseHANDLE", bp::init< >() );
        C_UnitBaseHANDLE_exposer.def( bp::init< C_UnitBase * >(( bp::arg("pVal") )) );
        C_UnitBaseHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_UnitBaseHANDLE::GetAttr
        
            typedef bp::object ( ::C_UnitBaseHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_UnitBaseHANDLE::GetAttr )
            );
        
        }
        { //::C_UnitBaseHANDLE::Cmp
        
            typedef bool ( ::C_UnitBaseHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_UnitBaseHANDLE::Cmp )
            );
        
        }
        { //::C_UnitBaseHANDLE::NonZero
        
            typedef bool ( ::C_UnitBaseHANDLE::*NonZero_function_type )( ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_UnitBaseHANDLE::NonZero )
            );
        }
        { //::C_UnitBaseHANDLE::Bool
        
            typedef bool ( ::C_UnitBaseHANDLE::*Bool_function_type )( ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_UnitBaseHANDLE::Bool )
            );
        }
        { //::C_UnitBaseHANDLE::Set
        
            typedef void ( ::C_UnitBaseHANDLE::*Set_function_type )( C_UnitBase * ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_UnitBaseHANDLE::Set )
            );
        
        }
        { //::C_UnitBaseHANDLE::GetSerialNumber
        
            typedef int ( ::C_UnitBaseHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_UnitBaseHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_UnitBaseHANDLE::GetEntryIndex
        
            typedef int ( ::C_UnitBaseHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_UnitBaseHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_UnitBaseHANDLE::GetEntryIndex )
            );
        
        }
        C_UnitBaseHANDLE_exposer.def( bp::self != bp::self );
        C_UnitBaseHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_UnitBase_to_handle();

    C_UnitBase_to_handle();

    handle_to_C_UnitBase();

    { //::C_FuncUnitHANDLE
        typedef bp::class_< C_FuncUnitHANDLE, bp::bases< CBaseHandle > > C_FuncUnitHANDLE_exposer_t;
        C_FuncUnitHANDLE_exposer_t C_FuncUnitHANDLE_exposer = C_FuncUnitHANDLE_exposer_t( "C_FuncUnitHANDLE", bp::init< >() );
        C_FuncUnitHANDLE_exposer.def( bp::init< C_FuncUnit * >(( bp::arg("pVal") )) );
        C_FuncUnitHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_FuncUnitHANDLE::GetAttr
        
            typedef bp::object ( ::C_FuncUnitHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_FuncUnitHANDLE::GetAttr )
            );
        
        }
        { //::C_FuncUnitHANDLE::Cmp
        
            typedef bool ( ::C_FuncUnitHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_FuncUnitHANDLE::Cmp )
            );
        
        }
        { //::C_FuncUnitHANDLE::NonZero
        
            typedef bool ( ::C_FuncUnitHANDLE::*NonZero_function_type )( ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_FuncUnitHANDLE::NonZero )
            );
        }
        { //::C_FuncUnitHANDLE::Bool
        
            typedef bool ( ::C_FuncUnitHANDLE::*Bool_function_type )( ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_FuncUnitHANDLE::Bool )
            );
        }
        { //::C_FuncUnitHANDLE::Set
        
            typedef void ( ::C_FuncUnitHANDLE::*Set_function_type )( C_FuncUnit * ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_FuncUnitHANDLE::Set )
            );
        
        }
        { //::C_FuncUnitHANDLE::GetSerialNumber
        
            typedef int ( ::C_FuncUnitHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_FuncUnitHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_FuncUnitHANDLE::GetEntryIndex
        
            typedef int ( ::C_FuncUnitHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_FuncUnitHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_FuncUnitHANDLE::GetEntryIndex )
            );
        
        }
        C_FuncUnitHANDLE_exposer.def( bp::self != bp::self );
        C_FuncUnitHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_FuncUnit_to_handle();

    C_FuncUnit_to_handle();

    handle_to_C_FuncUnit();

    { //::C_WarsWeaponHANDLE
        typedef bp::class_< C_WarsWeaponHANDLE, bp::bases< CBaseHandle > > C_WarsWeaponHANDLE_exposer_t;
        C_WarsWeaponHANDLE_exposer_t C_WarsWeaponHANDLE_exposer = C_WarsWeaponHANDLE_exposer_t( "C_WarsWeaponHANDLE", bp::init< >() );
        C_WarsWeaponHANDLE_exposer.def( bp::init< C_WarsWeapon * >(( bp::arg("pVal") )) );
        C_WarsWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_WarsWeaponHANDLE::GetAttr
        
            typedef bp::object ( ::C_WarsWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_WarsWeaponHANDLE::GetAttr )
            );
        
        }
        { //::C_WarsWeaponHANDLE::Cmp
        
            typedef bool ( ::C_WarsWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_WarsWeaponHANDLE::Cmp )
            );
        
        }
        { //::C_WarsWeaponHANDLE::NonZero
        
            typedef bool ( ::C_WarsWeaponHANDLE::*NonZero_function_type )( ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_WarsWeaponHANDLE::NonZero )
            );
        }
        { //::C_WarsWeaponHANDLE::Bool
        
            typedef bool ( ::C_WarsWeaponHANDLE::*Bool_function_type )( ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_WarsWeaponHANDLE::Bool )
            );
        }
        { //::C_WarsWeaponHANDLE::Set
        
            typedef void ( ::C_WarsWeaponHANDLE::*Set_function_type )( C_WarsWeapon * ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_WarsWeaponHANDLE::Set )
            );
        
        }
        { //::C_WarsWeaponHANDLE::GetSerialNumber
        
            typedef int ( ::C_WarsWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_WarsWeaponHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_WarsWeaponHANDLE::GetEntryIndex
        
            typedef int ( ::C_WarsWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_WarsWeaponHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_WarsWeaponHANDLE::GetEntryIndex )
            );
        
        }
        C_WarsWeaponHANDLE_exposer.def( bp::self != bp::self );
        C_WarsWeaponHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_WarsWeapon_to_handle();

    C_WarsWeapon_to_handle();

    handle_to_C_WarsWeapon();

    { //::C_BaseFuncMapBoundaryHANDLE
        typedef bp::class_< C_BaseFuncMapBoundaryHANDLE, bp::bases< CBaseHandle > > C_BaseFuncMapBoundaryHANDLE_exposer_t;
        C_BaseFuncMapBoundaryHANDLE_exposer_t C_BaseFuncMapBoundaryHANDLE_exposer = C_BaseFuncMapBoundaryHANDLE_exposer_t( "C_BaseFuncMapBoundaryHANDLE", bp::init< >() );
        C_BaseFuncMapBoundaryHANDLE_exposer.def( bp::init< C_BaseFuncMapBoundary * >(( bp::arg("pVal") )) );
        C_BaseFuncMapBoundaryHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::C_BaseFuncMapBoundaryHANDLE::GetAttr
        
            typedef bp::object ( ::C_BaseFuncMapBoundaryHANDLE::*GetAttr_function_type )( const char * ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::C_BaseFuncMapBoundaryHANDLE::GetAttr )
            );
        
        }
        { //::C_BaseFuncMapBoundaryHANDLE::Cmp
        
            typedef bool ( ::C_BaseFuncMapBoundaryHANDLE::*Cmp_function_type )( bp::object ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::C_BaseFuncMapBoundaryHANDLE::Cmp )
            );
        
        }
        { //::C_BaseFuncMapBoundaryHANDLE::NonZero
        
            typedef bool ( ::C_BaseFuncMapBoundaryHANDLE::*NonZero_function_type )( ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::C_BaseFuncMapBoundaryHANDLE::NonZero )
            );
        }
        { //::C_BaseFuncMapBoundaryHANDLE::Bool
        
            typedef bool ( ::C_BaseFuncMapBoundaryHANDLE::*Bool_function_type )( ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::C_BaseFuncMapBoundaryHANDLE::Bool )
            );
        }
        { //::C_BaseFuncMapBoundaryHANDLE::Set
        
            typedef void ( ::C_BaseFuncMapBoundaryHANDLE::*Set_function_type )( C_BaseFuncMapBoundary * ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::C_BaseFuncMapBoundaryHANDLE::Set )
            );
        
        }
        { //::C_BaseFuncMapBoundaryHANDLE::GetSerialNumber
        
            typedef int ( ::C_BaseFuncMapBoundaryHANDLE::*GetSerialNumber_function_type )( ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::C_BaseFuncMapBoundaryHANDLE::GetSerialNumber )
            );
        
        }
        { //::C_BaseFuncMapBoundaryHANDLE::GetEntryIndex
        
            typedef int ( ::C_BaseFuncMapBoundaryHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            C_BaseFuncMapBoundaryHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::C_BaseFuncMapBoundaryHANDLE::GetEntryIndex )
            );
        
        }
        C_BaseFuncMapBoundaryHANDLE_exposer.def( bp::self != bp::self );
        C_BaseFuncMapBoundaryHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_C_BaseFuncMapBoundary_to_handle();

    C_BaseFuncMapBoundary_to_handle();

    handle_to_C_BaseFuncMapBoundary();

    { //::CWarsFloraHANDLE
        typedef bp::class_< CWarsFloraHANDLE, bp::bases< CBaseHandle > > CWarsFloraHANDLE_exposer_t;
        CWarsFloraHANDLE_exposer_t CWarsFloraHANDLE_exposer = CWarsFloraHANDLE_exposer_t( "CWarsFloraHANDLE", bp::init< >() );
        CWarsFloraHANDLE_exposer.def( bp::init< CWarsFlora * >(( bp::arg("pVal") )) );
        CWarsFloraHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CWarsFloraHANDLE::GetAttr
        
            typedef bp::object ( ::CWarsFloraHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CWarsFloraHANDLE::GetAttr )
            );
        
        }
        { //::CWarsFloraHANDLE::Cmp
        
            typedef bool ( ::CWarsFloraHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CWarsFloraHANDLE::Cmp )
            );
        
        }
        { //::CWarsFloraHANDLE::NonZero
        
            typedef bool ( ::CWarsFloraHANDLE::*NonZero_function_type )( ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CWarsFloraHANDLE::NonZero )
            );
        }
        { //::CWarsFloraHANDLE::Bool
        
            typedef bool ( ::CWarsFloraHANDLE::*Bool_function_type )( ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "__bool__"
                , Bool_function_type( &::CWarsFloraHANDLE::Bool )
            );
        }
        { //::CWarsFloraHANDLE::Set
        
            typedef void ( ::CWarsFloraHANDLE::*Set_function_type )( CWarsFlora * ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CWarsFloraHANDLE::Set )
            );
        
        }
        { //::CWarsFloraHANDLE::GetSerialNumber
        
            typedef int ( ::CWarsFloraHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CWarsFloraHANDLE::GetSerialNumber )
            );
        
        }
        { //::CWarsFloraHANDLE::GetEntryIndex
        
            typedef int ( ::CWarsFloraHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CWarsFloraHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CWarsFloraHANDLE::GetEntryIndex )
            );
        
        }
        CWarsFloraHANDLE_exposer.def( bp::self != bp::self );
        CWarsFloraHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CWarsFlora_to_handle();

    CWarsFlora_to_handle();

    handle_to_CWarsFlora();

    bp::scope().attr( "CLIENT_THINK_ALWAYS" ) = CLIENT_THINK_ALWAYS;

    bp::scope().attr( "CLIENT_THINK_NEVER" ) = CLIENT_THINK_NEVER;

    bp::def( "PlayerResource", wrap_PlayerResource, bp::return_value_policy< bp::return_by_value >() );

    bp::scope().attr( "PLAYER_MAX_GROUPS" ) = PLAYER_MAX_GROUPS;

    _entities_register_free_functions();
}


