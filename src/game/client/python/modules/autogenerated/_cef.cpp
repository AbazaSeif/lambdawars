// This file has been generated by Py++.

#include "cbase.h"



#include "boost/python.hpp"

#include "videocfg/videocfg.h"

#include "cbase.h"

#include "src_cef.h"

#include "src_cef_browser.h"

#include "src_cef_python.h"

#include "include/cef_v8.h"

#include "include/cef_process_message.h"

#include "src_cef_js.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct SrcCefBrowser_wrapper : SrcCefBrowser, bp::wrapper< SrcCefBrowser > {

    SrcCefBrowser_wrapper(SrcCefBrowser const & arg )
    : SrcCefBrowser( arg )
      , bp::wrapper< SrcCefBrowser >(){
        // copy constructor
        
    }

    SrcCefBrowser_wrapper(char const * name, char const * url="" )
    : SrcCefBrowser( name, url )
      , bp::wrapper< SrcCefBrowser >(){
        // constructor
    
    }

    virtual void Focus(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Focus: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Focus(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Focus = this->get_override( "Focus" );
        if( func_Focus.ptr() != Py_None )
            try {
                func_Focus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::Focus(  );
            }
        else
            this->SrcCefBrowser::Focus(  );
    }
    
    void default_Focus(  ) {
        SrcCefBrowser::Focus( );
    }

    virtual void InvalidateLayout(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "InvalidateLayout: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling InvalidateLayout(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::InvalidateLayout(  );
            }
        else
            this->SrcCefBrowser::InvalidateLayout(  );
    }
    
    void default_InvalidateLayout(  ) {
        SrcCefBrowser::InvalidateLayout( );
    }

    virtual bool IsLoading(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsLoading: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsLoading(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsLoading = this->get_override( "IsLoading" );
        if( func_IsLoading.ptr() != Py_None )
            try {
                return func_IsLoading(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->SrcCefBrowser::IsLoading(  );
            }
        else
            return this->SrcCefBrowser::IsLoading(  );
    }
    
    bool default_IsLoading(  ) {
        return SrcCefBrowser::IsLoading( );
    }

    virtual bool IsVisible(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsVisible: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsVisible(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsVisible = this->get_override( "IsVisible" );
        if( func_IsVisible.ptr() != Py_None )
            try {
                return func_IsVisible(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->SrcCefBrowser::IsVisible(  );
            }
        else
            return this->SrcCefBrowser::IsVisible(  );
    }
    
    bool default_IsVisible(  ) {
        return SrcCefBrowser::IsVisible( );
    }

    virtual int KeyInput( int down, ::ButtonCode_t keynum, char const * pszCurrentBinding ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyInput: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyInput( down, keynum, pszCurrentBinding ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyInput = this->get_override( "KeyInput" );
        if( func_KeyInput.ptr() != Py_None )
            try {
                return func_KeyInput( down, keynum, pszCurrentBinding );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->SrcCefBrowser::KeyInput( down, keynum, pszCurrentBinding );
            }
        else
            return this->SrcCefBrowser::KeyInput( down, keynum, pszCurrentBinding );
    }
    
    int default_KeyInput( int down, ::ButtonCode_t keynum, char const * pszCurrentBinding ) {
        return SrcCefBrowser::KeyInput( down, keynum, pszCurrentBinding );
    }

    virtual void LoadURL( char const * url ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "LoadURL: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling LoadURL( url ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_LoadURL = this->get_override( "LoadURL" );
        if( func_LoadURL.ptr() != Py_None )
            try {
                func_LoadURL( url );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::LoadURL( url );
            }
        else
            this->SrcCefBrowser::LoadURL( url );
    }
    
    void default_LoadURL( char const * url ) {
        SrcCefBrowser::LoadURL( url );
    }

    virtual void OnAfterCreated(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnAfterCreated: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnAfterCreated(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnAfterCreated = this->get_override( "OnAfterCreated" );
        if( func_OnAfterCreated.ptr() != Py_None )
            try {
                func_OnAfterCreated(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::OnAfterCreated(  );
            }
        else
            this->SrcCefBrowser::OnAfterCreated(  );
    }
    
    void default_OnAfterCreated(  ) {
        SrcCefBrowser::OnAfterCreated( );
    }

    virtual void OnContextCreated(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnContextCreated: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnContextCreated(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnContextCreated = this->get_override( "OnContextCreated" );
        if( func_OnContextCreated.ptr() != Py_None )
            try {
                func_OnContextCreated(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::OnContextCreated(  );
            }
        else
            this->SrcCefBrowser::OnContextCreated(  );
    }
    
    void default_OnContextCreated(  ) {
        SrcCefBrowser::OnContextCreated( );
    }

    virtual void OnThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnThink(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::OnThink(  );
            }
        else
            this->SrcCefBrowser::OnThink(  );
    }
    
    void default_OnThink(  ) {
        SrcCefBrowser::OnThink( );
    }

    virtual void PerformLayout(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PerformLayout: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PerformLayout(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::PerformLayout(  );
            }
        else
            this->SrcCefBrowser::PerformLayout(  );
    }
    
    void default_PerformLayout(  ) {
        SrcCefBrowser::PerformLayout( );
    }

    virtual void PyOnLoadEnd( ::boost::python::object frame, int httpStatusCode ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLoadEnd: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnLoadEnd( frame, httpStatusCode ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLoadEnd = this->get_override( "OnLoadEnd" );
        if( func_OnLoadEnd.ptr() != Py_None )
            try {
                func_OnLoadEnd( frame, httpStatusCode );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::PyOnLoadEnd( frame, httpStatusCode );
            }
        else
            this->SrcCefBrowser::PyOnLoadEnd( frame, httpStatusCode );
    }
    
    void default_OnLoadEnd( ::boost::python::object frame, int httpStatusCode ) {
        SrcCefBrowser::PyOnLoadEnd( frame, httpStatusCode );
    }

    virtual void PyOnLoadError( ::boost::python::object frame, int errorCode, wchar_t const * errorText, wchar_t const * failedUrl ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLoadError: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnLoadError( frame, errorCode, errorText, failedUrl ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLoadError = this->get_override( "OnLoadError" );
        if( func_OnLoadError.ptr() != Py_None )
            try {
                func_OnLoadError( frame, errorCode, errorText, failedUrl );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::PyOnLoadError( frame, errorCode, errorText, failedUrl );
            }
        else
            this->SrcCefBrowser::PyOnLoadError( frame, errorCode, errorText, failedUrl );
    }
    
    void default_OnLoadError( ::boost::python::object frame, int errorCode, wchar_t const * errorText, wchar_t const * failedUrl ) {
        SrcCefBrowser::PyOnLoadError( frame, errorCode, errorText, failedUrl );
    }

    virtual void PyOnLoadStart( ::boost::python::object frame ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLoadStart: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnLoadStart( frame ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLoadStart = this->get_override( "OnLoadStart" );
        if( func_OnLoadStart.ptr() != Py_None )
            try {
                func_OnLoadStart( frame );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::PyOnLoadStart( frame );
            }
        else
            this->SrcCefBrowser::PyOnLoadStart( frame );
    }
    
    void default_OnLoadStart( ::boost::python::object frame ) {
        SrcCefBrowser::PyOnLoadStart( frame );
    }

    virtual void PyOnMethodCall( int identifier, ::boost::python::object methodargs, ::boost::python::object callbackid ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnMethodCall: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnMethodCall( identifier, methodargs, callbackid ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnMethodCall = this->get_override( "OnMethodCall" );
        if( func_OnMethodCall.ptr() != Py_None )
            try {
                func_OnMethodCall( identifier, methodargs, callbackid );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::PyOnMethodCall( identifier, methodargs, callbackid );
            }
        else
            this->SrcCefBrowser::PyOnMethodCall( identifier, methodargs, callbackid );
    }
    
    void default_OnMethodCall( int identifier, ::boost::python::object methodargs, ::boost::python::object callbackid ) {
        SrcCefBrowser::PyOnMethodCall( identifier, methodargs, callbackid );
    }

    virtual void Reload(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Reload: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Reload(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Reload = this->get_override( "Reload" );
        if( func_Reload.ptr() != Py_None )
            try {
                func_Reload(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::Reload(  );
            }
        else
            this->SrcCefBrowser::Reload(  );
    }
    
    void default_Reload(  ) {
        SrcCefBrowser::Reload( );
    }

    virtual void ReloadIgnoreCache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ReloadIgnoreCache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ReloadIgnoreCache(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ReloadIgnoreCache = this->get_override( "ReloadIgnoreCache" );
        if( func_ReloadIgnoreCache.ptr() != Py_None )
            try {
                func_ReloadIgnoreCache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::ReloadIgnoreCache(  );
            }
        else
            this->SrcCefBrowser::ReloadIgnoreCache(  );
    }
    
    void default_ReloadIgnoreCache(  ) {
        SrcCefBrowser::ReloadIgnoreCache( );
    }

    virtual void SetPos( int x, int y ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetPos: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetPos( x, y ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetPos = this->get_override( "SetPos" );
        if( func_SetPos.ptr() != Py_None )
            try {
                func_SetPos( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::SetPos( x, y );
            }
        else
            this->SrcCefBrowser::SetPos( x, y );
    }
    
    void default_SetPos( int x, int y ) {
        SrcCefBrowser::SetPos( x, y );
    }

    virtual void SetSize( int wide, int tall ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetSize: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetSize( wide, tall ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetSize = this->get_override( "SetSize" );
        if( func_SetSize.ptr() != Py_None )
            try {
                func_SetSize( wide, tall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::SetSize( wide, tall );
            }
        else
            this->SrcCefBrowser::SetSize( wide, tall );
    }
    
    void default_SetSize( int wide, int tall ) {
        SrcCefBrowser::SetSize( wide, tall );
    }

    virtual void SetVisible( bool state ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetVisible: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetVisible( state ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::SetVisible( state );
            }
        else
            this->SrcCefBrowser::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        SrcCefBrowser::SetVisible( state );
    }

    virtual void SetZPos( int z ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetZPos: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetZPos( z ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetZPos = this->get_override( "SetZPos" );
        if( func_SetZPos.ptr() != Py_None )
            try {
                func_SetZPos( z );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::SetZPos( z );
            }
        else
            this->SrcCefBrowser::SetZPos( z );
    }
    
    void default_SetZPos( int z ) {
        SrcCefBrowser::SetZPos( z );
    }

    virtual void StopLoad(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoad: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoad(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoad = this->get_override( "StopLoad" );
        if( func_StopLoad.ptr() != Py_None )
            try {
                func_StopLoad(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::StopLoad(  );
            }
        else
            this->SrcCefBrowser::StopLoad(  );
    }
    
    void default_StopLoad(  ) {
        SrcCefBrowser::StopLoad( );
    }

    virtual void Unfocus(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Unfocus: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Unfocus(  ) of Class: SrcCefBrowser\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Unfocus = this->get_override( "Unfocus" );
        if( func_Unfocus.ptr() != Py_None )
            try {
                func_Unfocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SrcCefBrowser::Unfocus(  );
            }
        else
            this->SrcCefBrowser::Unfocus(  );
    }
    
    void default_Unfocus(  ) {
        SrcCefBrowser::Unfocus( );
    }

};

BOOST_PYTHON_MODULE(_cef){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< CCefSystem, boost::noncopyable >( "CCefSystem", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "SetFocus"
            , (void ( ::CCefSystem::* )( bool ) )( &::CCefSystem::SetFocus )
            , ( bp::arg("focus") ) );

    { //::PyCefFrame
        typedef bp::class_< PyCefFrame > CefFrame_exposer_t;
        CefFrame_exposer_t CefFrame_exposer = CefFrame_exposer_t( "CefFrame", bp::no_init );
        bp::scope CefFrame_scope( CefFrame_exposer );
        CefFrame_exposer.def( bp::init< CefRefPtr< CefFrame > >(( bp::arg("frame") )) );
        bp::implicitly_convertible< CefRefPtr< CefFrame >, PyCefFrame >();
    }

    { //::PyJSObject
        typedef bp::class_< PyJSObject > JSObject_exposer_t;
        JSObject_exposer_t JSObject_exposer = JSObject_exposer_t( "JSObject", bp::no_init );
        bp::scope JSObject_scope( JSObject_exposer );
        JSObject_exposer.def( bp::init< CefRefPtr< JSObject > >(( bp::arg("object") )) );
        bp::implicitly_convertible< CefRefPtr< JSObject >, PyJSObject >();
        { //property "identifier"[fget=::PyJSObject::GetIdentifier]
        
            typedef int ( ::PyJSObject::*fget )(  ) ;
            
            JSObject_exposer.add_property( 
                "identifier"
                , fget( &::PyJSObject::GetIdentifier ) );
        
        }
        { //property "name"[fget=::PyJSObject::GetName]
        
            typedef ::boost::python::object ( ::PyJSObject::*fget )(  ) ;
            
            JSObject_exposer.add_property( 
                "name"
                , fget( &::PyJSObject::GetName ) );
        
        }
    }

    { //::SrcCefBrowser
        typedef bp::class_< SrcCefBrowser_wrapper > SrcCefBrowser_exposer_t;
        SrcCefBrowser_exposer_t SrcCefBrowser_exposer = SrcCefBrowser_exposer_t( "SrcCefBrowser", bp::init< char const *, bp::optional< char const * > >(( bp::arg("name"), bp::arg("url")="" )) );
        bp::scope SrcCefBrowser_scope( SrcCefBrowser_exposer );
        bp::implicitly_convertible< char const *, SrcCefBrowser >();
        { //::SrcCefBrowser::Destroy
        
            typedef void ( ::SrcCefBrowser::*Destroy_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::SrcCefBrowser::Destroy ) );
        
        }
        { //::SrcCefBrowser::ExecuteJavaScript
        
            typedef void ( ::SrcCefBrowser::*ExecuteJavaScript_function_type )( char const *,char const *,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "ExecuteJavaScript"
                , ExecuteJavaScript_function_type( &::SrcCefBrowser::ExecuteJavaScript )
                , ( bp::arg("code"), bp::arg("script_url"), bp::arg("start_line")=(int)(0) ) );
        
        }
        { //::SrcCefBrowser::Focus
        
            typedef void ( ::SrcCefBrowser::*Focus_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_Focus_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "Focus"
                , Focus_function_type(&::SrcCefBrowser::Focus)
                , default_Focus_function_type(&SrcCefBrowser_wrapper::default_Focus) );
        
        }
        { //::SrcCefBrowser::GetAlphaAt
        
            typedef int ( ::SrcCefBrowser::*GetAlphaAt_function_type )( int,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetAlphaAt"
                , GetAlphaAt_function_type( &::SrcCefBrowser::GetAlphaAt )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::SrcCefBrowser::GetCursor
        
            typedef ::vgui::HCursor ( ::SrcCefBrowser::*GetCursor_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetCursor"
                , GetCursor_function_type( &::SrcCefBrowser::GetCursor ) );
        
        }
        { //::SrcCefBrowser::GetName
        
            typedef char const * ( ::SrcCefBrowser::*GetName_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetName"
                , GetName_function_type( &::SrcCefBrowser::GetName ) );
        
        }
        { //::SrcCefBrowser::GetPassMouseTruIfAlphaZero
        
            typedef bool ( ::SrcCefBrowser::*GetPassMouseTruIfAlphaZero_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetPassMouseTruIfAlphaZero"
                , GetPassMouseTruIfAlphaZero_function_type( &::SrcCefBrowser::GetPassMouseTruIfAlphaZero ) );
        
        }
        { //::SrcCefBrowser::GetUseMouseCapture
        
            typedef bool ( ::SrcCefBrowser::*GetUseMouseCapture_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetUseMouseCapture"
                , GetUseMouseCapture_function_type( &::SrcCefBrowser::GetUseMouseCapture ) );
        
        }
        { //::SrcCefBrowser::InvalidateLayout
        
            typedef void ( ::SrcCefBrowser::*InvalidateLayout_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_InvalidateLayout_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "InvalidateLayout"
                , InvalidateLayout_function_type(&::SrcCefBrowser::InvalidateLayout)
                , default_InvalidateLayout_function_type(&SrcCefBrowser_wrapper::default_InvalidateLayout) );
        
        }
        { //::SrcCefBrowser::IsAlphaZeroAt
        
            typedef bool ( ::SrcCefBrowser::*IsAlphaZeroAt_function_type )( int,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsAlphaZeroAt"
                , IsAlphaZeroAt_function_type( &::SrcCefBrowser::IsAlphaZeroAt )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::SrcCefBrowser::IsGameInputEnabled
        
            typedef bool ( ::SrcCefBrowser::*IsGameInputEnabled_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsGameInputEnabled"
                , IsGameInputEnabled_function_type( &::SrcCefBrowser::IsGameInputEnabled ) );
        
        }
        { //::SrcCefBrowser::IsKeyBoardInputEnabled
        
            typedef bool ( ::SrcCefBrowser::*IsKeyBoardInputEnabled_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsKeyBoardInputEnabled"
                , IsKeyBoardInputEnabled_function_type( &::SrcCefBrowser::IsKeyBoardInputEnabled ) );
        
        }
        { //::SrcCefBrowser::IsLoading
        
            typedef bool ( ::SrcCefBrowser::*IsLoading_function_type )(  ) ;
            typedef bool ( SrcCefBrowser_wrapper::*default_IsLoading_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsLoading"
                , IsLoading_function_type(&::SrcCefBrowser::IsLoading)
                , default_IsLoading_function_type(&SrcCefBrowser_wrapper::default_IsLoading) );
        
        }
        { //::SrcCefBrowser::IsMouseInputEnabled
        
            typedef bool ( ::SrcCefBrowser::*IsMouseInputEnabled_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsMouseInputEnabled"
                , IsMouseInputEnabled_function_type( &::SrcCefBrowser::IsMouseInputEnabled ) );
        
        }
        { //::SrcCefBrowser::IsValid
        
            typedef bool ( ::SrcCefBrowser::*IsValid_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::SrcCefBrowser::IsValid ) );
        
        }
        { //::SrcCefBrowser::IsVisible
        
            typedef bool ( ::SrcCefBrowser::*IsVisible_function_type )(  ) ;
            typedef bool ( SrcCefBrowser_wrapper::*default_IsVisible_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "IsVisible"
                , IsVisible_function_type(&::SrcCefBrowser::IsVisible)
                , default_IsVisible_function_type(&SrcCefBrowser_wrapper::default_IsVisible) );
        
        }
        { //::SrcCefBrowser::KeyInput
        
            typedef int ( ::SrcCefBrowser::*KeyInput_function_type )( int,::ButtonCode_t,char const * ) ;
            typedef int ( SrcCefBrowser_wrapper::*default_KeyInput_function_type )( int,::ButtonCode_t,char const * ) ;
            
            SrcCefBrowser_exposer.def( 
                "KeyInput"
                , KeyInput_function_type(&::SrcCefBrowser::KeyInput)
                , default_KeyInput_function_type(&SrcCefBrowser_wrapper::default_KeyInput)
                , ( bp::arg("down"), bp::arg("keynum"), bp::arg("pszCurrentBinding") ) );
        
        }
        { //::SrcCefBrowser::LoadURL
        
            typedef void ( ::SrcCefBrowser::*LoadURL_function_type )( char const * ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_LoadURL_function_type )( char const * ) ;
            
            SrcCefBrowser_exposer.def( 
                "LoadURL"
                , LoadURL_function_type(&::SrcCefBrowser::LoadURL)
                , default_LoadURL_function_type(&SrcCefBrowser_wrapper::default_LoadURL)
                , ( bp::arg("url") ) );
        
        }
        { //::SrcCefBrowser::OnAfterCreated
        
            typedef void ( ::SrcCefBrowser::*OnAfterCreated_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnAfterCreated_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnAfterCreated"
                , OnAfterCreated_function_type(&::SrcCefBrowser::OnAfterCreated)
                , default_OnAfterCreated_function_type(&SrcCefBrowser_wrapper::default_OnAfterCreated) );
        
        }
        { //::SrcCefBrowser::OnContextCreated
        
            typedef void ( ::SrcCefBrowser::*OnContextCreated_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnContextCreated_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnContextCreated"
                , OnContextCreated_function_type(&::SrcCefBrowser::OnContextCreated)
                , default_OnContextCreated_function_type(&SrcCefBrowser_wrapper::default_OnContextCreated) );
        
        }
        { //::SrcCefBrowser::OnThink
        
            typedef void ( ::SrcCefBrowser::*OnThink_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnThink_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnThink"
                , OnThink_function_type(&::SrcCefBrowser::OnThink)
                , default_OnThink_function_type(&SrcCefBrowser_wrapper::default_OnThink) );
        
        }
        { //::SrcCefBrowser::PerformLayout
        
            typedef void ( ::SrcCefBrowser::*PerformLayout_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_PerformLayout_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type(&::SrcCefBrowser::PerformLayout)
                , default_PerformLayout_function_type(&SrcCefBrowser_wrapper::default_PerformLayout) );
        
        }
        { //::SrcCefBrowser::Ping
        
            typedef void ( ::SrcCefBrowser::*Ping_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "Ping"
                , Ping_function_type( &::SrcCefBrowser::Ping ) );
        
        }
        { //::SrcCefBrowser::PyCreateFunction
        
            typedef ::boost::python::object ( ::SrcCefBrowser::*CreateFunction_function_type )( char const *,::PyJSObject *,bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "CreateFunction"
                , CreateFunction_function_type( &::SrcCefBrowser::PyCreateFunction )
                , ( bp::arg("name"), bp::arg("pPyObject")=bp::object(), bp::arg("hascallback")=(bool)(false) ) );
        
        }
        { //::SrcCefBrowser::PyCreateGlobalObject
        
            typedef ::boost::python::object ( ::SrcCefBrowser::*CreateGlobalObject_function_type )( char const * ) ;
            
            SrcCefBrowser_exposer.def( 
                "CreateGlobalObject"
                , CreateGlobalObject_function_type( &::SrcCefBrowser::PyCreateGlobalObject )
                , ( bp::arg("name") ) );
        
        }
        { //::SrcCefBrowser::PyExecuteJavaScriptWithResult
        
            typedef ::boost::python::object ( ::SrcCefBrowser::*ExecuteJavaScriptWithResult_function_type )( char const *,char const *,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "ExecuteJavaScriptWithResult"
                , ExecuteJavaScriptWithResult_function_type( &::SrcCefBrowser::PyExecuteJavaScriptWithResult )
                , ( bp::arg("code"), bp::arg("script_url"), bp::arg("start_line")=(int)(0) ) );
        
        }
        { //::SrcCefBrowser::PyGetMainFrame
        
            typedef ::boost::python::object ( ::SrcCefBrowser::*GetMainFrame_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "GetMainFrame"
                , GetMainFrame_function_type( &::SrcCefBrowser::PyGetMainFrame ) );
        
        }
        { //::SrcCefBrowser::PyInvoke
        
            typedef void ( ::SrcCefBrowser::*Invoke_function_type )( ::PyJSObject *,char const *,::boost::python::list ) ;
            
            SrcCefBrowser_exposer.def( 
                "Invoke"
                , Invoke_function_type( &::SrcCefBrowser::PyInvoke )
                , ( bp::arg("object"), bp::arg("methodname"), bp::arg("methodargs")=boost::python::list() ) );
        
        }
        { //::SrcCefBrowser::PyInvokeWithResult
        
            typedef ::boost::python::object ( ::SrcCefBrowser::*InvokeWithResult_function_type )( ::PyJSObject *,char const *,::boost::python::list ) ;
            
            SrcCefBrowser_exposer.def( 
                "InvokeWithResult"
                , InvokeWithResult_function_type( &::SrcCefBrowser::PyInvokeWithResult )
                , ( bp::arg("object"), bp::arg("methodname"), bp::arg("methodargs") ) );
        
        }
        { //::SrcCefBrowser::PyOnLoadEnd
        
            typedef void ( ::SrcCefBrowser::*OnLoadEnd_function_type )( ::boost::python::object,int ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnLoadEnd_function_type )( ::boost::python::object,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnLoadEnd"
                , OnLoadEnd_function_type(&::SrcCefBrowser::PyOnLoadEnd)
                , default_OnLoadEnd_function_type(&SrcCefBrowser_wrapper::default_OnLoadEnd)
                , ( bp::arg("frame"), bp::arg("httpStatusCode") ) );
        
        }
        { //::SrcCefBrowser::PyOnLoadError
        
            typedef void ( ::SrcCefBrowser::*OnLoadError_function_type )( ::boost::python::object,int,wchar_t const *,wchar_t const * ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnLoadError_function_type )( ::boost::python::object,int,wchar_t const *,wchar_t const * ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnLoadError"
                , OnLoadError_function_type(&::SrcCefBrowser::PyOnLoadError)
                , default_OnLoadError_function_type(&SrcCefBrowser_wrapper::default_OnLoadError)
                , ( bp::arg("frame"), bp::arg("errorCode"), bp::arg("errorText"), bp::arg("failedUrl") ) );
        
        }
        { //::SrcCefBrowser::PyOnLoadStart
        
            typedef void ( ::SrcCefBrowser::*OnLoadStart_function_type )( ::boost::python::object ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnLoadStart_function_type )( ::boost::python::object ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnLoadStart"
                , OnLoadStart_function_type(&::SrcCefBrowser::PyOnLoadStart)
                , default_OnLoadStart_function_type(&SrcCefBrowser_wrapper::default_OnLoadStart)
                , ( bp::arg("frame") ) );
        
        }
        { //::SrcCefBrowser::PyOnMethodCall
        
            typedef void ( ::SrcCefBrowser::*OnMethodCall_function_type )( int,::boost::python::object,::boost::python::object ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_OnMethodCall_function_type )( int,::boost::python::object,::boost::python::object ) ;
            
            SrcCefBrowser_exposer.def( 
                "OnMethodCall"
                , OnMethodCall_function_type(&::SrcCefBrowser::PyOnMethodCall)
                , default_OnMethodCall_function_type(&SrcCefBrowser_wrapper::default_OnMethodCall)
                , ( bp::arg("identifier"), bp::arg("methodargs"), bp::arg("callbackid") ) );
        
        }
        { //::SrcCefBrowser::PySendCallback
        
            typedef void ( ::SrcCefBrowser::*SendCallback_function_type )( ::boost::python::object,::boost::python::list ) ;
            
            SrcCefBrowser_exposer.def( 
                "SendCallback"
                , SendCallback_function_type( &::SrcCefBrowser::PySendCallback )
                , ( bp::arg("callbackid"), bp::arg("methodargs") ) );
        
        }
        { //::SrcCefBrowser::Reload
        
            typedef void ( ::SrcCefBrowser::*Reload_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_Reload_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "Reload"
                , Reload_function_type(&::SrcCefBrowser::Reload)
                , default_Reload_function_type(&SrcCefBrowser_wrapper::default_Reload) );
        
        }
        { //::SrcCefBrowser::ReloadIgnoreCache
        
            typedef void ( ::SrcCefBrowser::*ReloadIgnoreCache_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_ReloadIgnoreCache_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "ReloadIgnoreCache"
                , ReloadIgnoreCache_function_type(&::SrcCefBrowser::ReloadIgnoreCache)
                , default_ReloadIgnoreCache_function_type(&SrcCefBrowser_wrapper::default_ReloadIgnoreCache) );
        
        }
        { //::SrcCefBrowser::SetCursor
        
            typedef void ( ::SrcCefBrowser::*SetCursor_function_type )( ::vgui::HCursor ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetCursor"
                , SetCursor_function_type( &::SrcCefBrowser::SetCursor )
                , ( bp::arg("cursor") ) );
        
        }
        { //::SrcCefBrowser::SetGameInputEnabled
        
            typedef void ( ::SrcCefBrowser::*SetGameInputEnabled_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetGameInputEnabled"
                , SetGameInputEnabled_function_type( &::SrcCefBrowser::SetGameInputEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::SrcCefBrowser::SetKeyBoardInputEnabled
        
            typedef void ( ::SrcCefBrowser::*SetKeyBoardInputEnabled_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type( &::SrcCefBrowser::SetKeyBoardInputEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::SrcCefBrowser::SetMouseInputEnabled
        
            typedef void ( ::SrcCefBrowser::*SetMouseInputEnabled_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type( &::SrcCefBrowser::SetMouseInputEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::SrcCefBrowser::SetPassMouseTruIfAlphaZero
        
            typedef void ( ::SrcCefBrowser::*SetPassMouseTruIfAlphaZero_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetPassMouseTruIfAlphaZero"
                , SetPassMouseTruIfAlphaZero_function_type( &::SrcCefBrowser::SetPassMouseTruIfAlphaZero )
                , ( bp::arg("passtruifzero") ) );
        
        }
        { //::SrcCefBrowser::SetPos
        
            typedef void ( ::SrcCefBrowser::*SetPos_function_type )( int,int ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_SetPos_function_type )( int,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetPos"
                , SetPos_function_type(&::SrcCefBrowser::SetPos)
                , default_SetPos_function_type(&SrcCefBrowser_wrapper::default_SetPos)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::SrcCefBrowser::SetSize
        
            typedef void ( ::SrcCefBrowser::*SetSize_function_type )( int,int ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_SetSize_function_type )( int,int ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetSize"
                , SetSize_function_type(&::SrcCefBrowser::SetSize)
                , default_SetSize_function_type(&SrcCefBrowser_wrapper::default_SetSize)
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::SrcCefBrowser::SetUseMouseCapture
        
            typedef void ( ::SrcCefBrowser::*SetUseMouseCapture_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetUseMouseCapture"
                , SetUseMouseCapture_function_type( &::SrcCefBrowser::SetUseMouseCapture )
                , ( bp::arg("usemousecapture") ) );
        
        }
        { //::SrcCefBrowser::SetVisible
        
            typedef void ( ::SrcCefBrowser::*SetVisible_function_type )( bool ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_SetVisible_function_type )( bool ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetVisible"
                , SetVisible_function_type(&::SrcCefBrowser::SetVisible)
                , default_SetVisible_function_type(&SrcCefBrowser_wrapper::default_SetVisible)
                , ( bp::arg("state") ) );
        
        }
        { //::SrcCefBrowser::SetZPos
        
            typedef void ( ::SrcCefBrowser::*SetZPos_function_type )( int ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_SetZPos_function_type )( int ) ;
            
            SrcCefBrowser_exposer.def( 
                "SetZPos"
                , SetZPos_function_type(&::SrcCefBrowser::SetZPos)
                , default_SetZPos_function_type(&SrcCefBrowser_wrapper::default_SetZPos)
                , ( bp::arg("z") ) );
        
        }
        { //::SrcCefBrowser::StopLoad
        
            typedef void ( ::SrcCefBrowser::*StopLoad_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_StopLoad_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "StopLoad"
                , StopLoad_function_type(&::SrcCefBrowser::StopLoad)
                , default_StopLoad_function_type(&SrcCefBrowser_wrapper::default_StopLoad) );
        
        }
        { //::SrcCefBrowser::Unfocus
        
            typedef void ( ::SrcCefBrowser::*Unfocus_function_type )(  ) ;
            typedef void ( SrcCefBrowser_wrapper::*default_Unfocus_function_type )(  ) ;
            
            SrcCefBrowser_exposer.def( 
                "Unfocus"
                , Unfocus_function_type(&::SrcCefBrowser::Unfocus)
                , default_Unfocus_function_type(&SrcCefBrowser_wrapper::default_Unfocus) );
        
        }
    }

    { //::CEFSystem
    
        typedef ::CCefSystem & ( *CEFSystem_function_type )(  );
        
        bp::def( 
            "CEFSystem"
            , CEFSystem_function_type( &::CEFSystem )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }
}
