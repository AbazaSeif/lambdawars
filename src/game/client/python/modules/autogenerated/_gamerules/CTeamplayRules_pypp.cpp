// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "gamerules.h"
#include "multiplay_gamerules.h"
#include "singleplay_gamerules.h"
#include "teamplay_gamerules.h"
#include "srcpy_gamerules.h"
#include "ammodef.h"
#include "takedamageinfo.h"
#include "hl2wars_gamerules.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CTeamplayRules_pypp.hpp"

namespace bp = boost::python;

struct C_TeamplayRules_wrapper : C_TeamplayRules, bp::wrapper< C_TeamplayRules > {

    C_TeamplayRules_wrapper()
    : C_TeamplayRules()
      , bp::wrapper< C_TeamplayRules >(){
        // null constructor
        
    }

    virtual int GetCaptureValueForPlayer( ::C_BasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, GetCaptureValueForPlayer )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, GetCaptureValueForPlayer )
        bp::override func_GetCaptureValueForPlayer = this->get_override( "GetCaptureValueForPlayer" );
        if( func_GetCaptureValueForPlayer.ptr() != Py_None )
            try {
                return func_GetCaptureValueForPlayer( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_TeamplayRules::GetCaptureValueForPlayer( pPlayer );
            }
        else
            return this->C_TeamplayRules::GetCaptureValueForPlayer( pPlayer );
    }
    
    int default_GetCaptureValueForPlayer( ::C_BasePlayer * pPlayer ) {
        return C_TeamplayRules::GetCaptureValueForPlayer( pPlayer );
    }

    virtual bool PlayerMayBlockPoint( ::C_BasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, PlayerMayBlockPoint )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, PlayerMayBlockPoint )
        bp::override func_PlayerMayBlockPoint = this->get_override( "PlayerMayBlockPoint" );
        if( func_PlayerMayBlockPoint.ptr() != Py_None )
            try {
                return func_PlayerMayBlockPoint( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), iPointIndex, pszReason, iMaxReasonLength );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_TeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
            }
        else
            return this->C_TeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }
    
    bool default_PlayerMayBlockPoint( ::C_BasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        return C_TeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }

    virtual bool PlayerMayCapturePoint( ::C_BasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, PlayerMayCapturePoint )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, PlayerMayCapturePoint )
        bp::override func_PlayerMayCapturePoint = this->get_override( "PlayerMayCapturePoint" );
        if( func_PlayerMayCapturePoint.ptr() != Py_None )
            try {
                return func_PlayerMayCapturePoint( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), iPointIndex, pszReason, iMaxReasonLength );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_TeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
            }
        else
            return this->C_TeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }
    
    bool default_PlayerMayCapturePoint( ::C_BasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        return C_TeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }

    virtual bool PointsMayBeCaptured(  ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, PointsMayBeCaptured )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, PointsMayBeCaptured )
        bp::override func_PointsMayBeCaptured = this->get_override( "PointsMayBeCaptured" );
        if( func_PointsMayBeCaptured.ptr() != Py_None )
            try {
                return func_PointsMayBeCaptured(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_TeamplayRules::PointsMayBeCaptured(  );
            }
        else
            return this->C_TeamplayRules::PointsMayBeCaptured(  );
    }
    
    bool default_PointsMayBeCaptured(  ) {
        return C_TeamplayRules::PointsMayBeCaptured( );
    }

    virtual void SetLastCapPointChanged( int iIndex ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, SetLastCapPointChanged )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, SetLastCapPointChanged )
        bp::override func_SetLastCapPointChanged = this->get_override( "SetLastCapPointChanged" );
        if( func_SetLastCapPointChanged.ptr() != Py_None )
            try {
                func_SetLastCapPointChanged( iIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_TeamplayRules::SetLastCapPointChanged( iIndex );
            }
        else
            this->C_TeamplayRules::SetLastCapPointChanged( iIndex );
    }
    
    void default_SetLastCapPointChanged( int iIndex ) {
        C_TeamplayRules::SetLastCapPointChanged( iIndex );
    }

    virtual bool TeamMayCapturePoint( int iTeam, int iPointIndex ) {
        PY_OVERRIDE_CHECK( C_TeamplayRules, TeamMayCapturePoint )
        PY_OVERRIDE_LOG( _gamerules, C_TeamplayRules, TeamMayCapturePoint )
        bp::override func_TeamMayCapturePoint = this->get_override( "TeamMayCapturePoint" );
        if( func_TeamMayCapturePoint.ptr() != Py_None )
            try {
                return func_TeamMayCapturePoint( iTeam, iPointIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_TeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
            }
        else
            return this->C_TeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
    }
    
    bool default_TeamMayCapturePoint( int iTeam, int iPointIndex ) {
        return C_TeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
    }

    virtual void ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        PY_OVERRIDE_CHECK( C_GameRules, ClientCommandKeyValues )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, ClientCommandKeyValues )
        bp::override func_ClientCommandKeyValues = this->get_override( "ClientCommandKeyValues" );
        if( func_ClientCommandKeyValues.ptr() != Py_None )
            try {
                func_ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_GameRules::ClientCommandKeyValues( pEntity, pKeyValues );
            }
        else
            this->C_GameRules::ClientCommandKeyValues( pEntity, pKeyValues );
    }
    
    void default_ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        C_GameRules::ClientCommandKeyValues( pEntity, pKeyValues );
    }

    virtual int Damage_GetNoPhysicsForce(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_GetNoPhysicsForce )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_GetNoPhysicsForce )
        bp::override func_Damage_GetNoPhysicsForce = this->get_override( "Damage_GetNoPhysicsForce" );
        if( func_Damage_GetNoPhysicsForce.ptr() != Py_None )
            try {
                return func_Damage_GetNoPhysicsForce(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_GetNoPhysicsForce(  );
            }
        else
            return this->C_MultiplayRules::Damage_GetNoPhysicsForce(  );
    }
    
    int default_Damage_GetNoPhysicsForce(  ) {
        return C_MultiplayRules::Damage_GetNoPhysicsForce( );
    }

    virtual int Damage_GetShouldGibCorpse(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_GetShouldGibCorpse )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_GetShouldGibCorpse )
        bp::override func_Damage_GetShouldGibCorpse = this->get_override( "Damage_GetShouldGibCorpse" );
        if( func_Damage_GetShouldGibCorpse.ptr() != Py_None )
            try {
                return func_Damage_GetShouldGibCorpse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_GetShouldGibCorpse(  );
            }
        else
            return this->C_MultiplayRules::Damage_GetShouldGibCorpse(  );
    }
    
    int default_Damage_GetShouldGibCorpse(  ) {
        return C_MultiplayRules::Damage_GetShouldGibCorpse( );
    }

    virtual int Damage_GetShouldNotBleed(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_GetShouldNotBleed )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_GetShouldNotBleed )
        bp::override func_Damage_GetShouldNotBleed = this->get_override( "Damage_GetShouldNotBleed" );
        if( func_Damage_GetShouldNotBleed.ptr() != Py_None )
            try {
                return func_Damage_GetShouldNotBleed(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_GetShouldNotBleed(  );
            }
        else
            return this->C_MultiplayRules::Damage_GetShouldNotBleed(  );
    }
    
    int default_Damage_GetShouldNotBleed(  ) {
        return C_MultiplayRules::Damage_GetShouldNotBleed( );
    }

    virtual int Damage_GetShowOnHud(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_GetShowOnHud )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_GetShowOnHud )
        bp::override func_Damage_GetShowOnHud = this->get_override( "Damage_GetShowOnHud" );
        if( func_Damage_GetShowOnHud.ptr() != Py_None )
            try {
                return func_Damage_GetShowOnHud(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_GetShowOnHud(  );
            }
        else
            return this->C_MultiplayRules::Damage_GetShowOnHud(  );
    }
    
    int default_Damage_GetShowOnHud(  ) {
        return C_MultiplayRules::Damage_GetShowOnHud( );
    }

    virtual int Damage_GetTimeBased(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_GetTimeBased )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_GetTimeBased )
        bp::override func_Damage_GetTimeBased = this->get_override( "Damage_GetTimeBased" );
        if( func_Damage_GetTimeBased.ptr() != Py_None )
            try {
                return func_Damage_GetTimeBased(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_GetTimeBased(  );
            }
        else
            return this->C_MultiplayRules::Damage_GetTimeBased(  );
    }
    
    int default_Damage_GetTimeBased(  ) {
        return C_MultiplayRules::Damage_GetTimeBased( );
    }

    virtual bool Damage_IsTimeBased( int iDmgType ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_IsTimeBased )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_IsTimeBased )
        bp::override func_Damage_IsTimeBased = this->get_override( "Damage_IsTimeBased" );
        if( func_Damage_IsTimeBased.ptr() != Py_None )
            try {
                return func_Damage_IsTimeBased( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_IsTimeBased( iDmgType );
            }
        else
            return this->C_MultiplayRules::Damage_IsTimeBased( iDmgType );
    }
    
    bool default_Damage_IsTimeBased( int iDmgType ) {
        return C_MultiplayRules::Damage_IsTimeBased( iDmgType );
    }

    virtual bool Damage_NoPhysicsForce( int iDmgType ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_NoPhysicsForce )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_NoPhysicsForce )
        bp::override func_Damage_NoPhysicsForce = this->get_override( "Damage_NoPhysicsForce" );
        if( func_Damage_NoPhysicsForce.ptr() != Py_None )
            try {
                return func_Damage_NoPhysicsForce( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_NoPhysicsForce( iDmgType );
            }
        else
            return this->C_MultiplayRules::Damage_NoPhysicsForce( iDmgType );
    }
    
    bool default_Damage_NoPhysicsForce( int iDmgType ) {
        return C_MultiplayRules::Damage_NoPhysicsForce( iDmgType );
    }

    virtual bool Damage_ShouldGibCorpse( int iDmgType ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_ShouldGibCorpse )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_ShouldGibCorpse )
        bp::override func_Damage_ShouldGibCorpse = this->get_override( "Damage_ShouldGibCorpse" );
        if( func_Damage_ShouldGibCorpse.ptr() != Py_None )
            try {
                return func_Damage_ShouldGibCorpse( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_ShouldGibCorpse( iDmgType );
            }
        else
            return this->C_MultiplayRules::Damage_ShouldGibCorpse( iDmgType );
    }
    
    bool default_Damage_ShouldGibCorpse( int iDmgType ) {
        return C_MultiplayRules::Damage_ShouldGibCorpse( iDmgType );
    }

    virtual bool Damage_ShouldNotBleed( int iDmgType ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_ShouldNotBleed )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_ShouldNotBleed )
        bp::override func_Damage_ShouldNotBleed = this->get_override( "Damage_ShouldNotBleed" );
        if( func_Damage_ShouldNotBleed.ptr() != Py_None )
            try {
                return func_Damage_ShouldNotBleed( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_ShouldNotBleed( iDmgType );
            }
        else
            return this->C_MultiplayRules::Damage_ShouldNotBleed( iDmgType );
    }
    
    bool default_Damage_ShouldNotBleed( int iDmgType ) {
        return C_MultiplayRules::Damage_ShouldNotBleed( iDmgType );
    }

    virtual bool Damage_ShowOnHUD( int iDmgType ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, Damage_ShowOnHUD )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, Damage_ShowOnHUD )
        bp::override func_Damage_ShowOnHUD = this->get_override( "Damage_ShowOnHUD" );
        if( func_Damage_ShowOnHUD.ptr() != Py_None )
            try {
                return func_Damage_ShowOnHUD( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::Damage_ShowOnHUD( iDmgType );
            }
        else
            return this->C_MultiplayRules::Damage_ShowOnHUD( iDmgType );
    }
    
    bool default_Damage_ShowOnHUD( int iDmgType ) {
        return C_MultiplayRules::Damage_ShowOnHUD( iDmgType );
    }

    virtual int DefaultFOV(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, DefaultFOV )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, DefaultFOV )
        bp::override func_DefaultFOV = this->get_override( "DefaultFOV" );
        if( func_DefaultFOV.ptr() != Py_None )
            try {
                return func_DefaultFOV(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::DefaultFOV(  );
            }
        else
            return this->C_GameRules::DefaultFOV(  );
    }
    
    int default_DefaultFOV(  ) {
        return C_GameRules::DefaultFOV( );
    }

    virtual bool ForceSplitScreenPlayersOnToSameTeam(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, ForceSplitScreenPlayersOnToSameTeam )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, ForceSplitScreenPlayersOnToSameTeam )
        bp::override func_ForceSplitScreenPlayersOnToSameTeam = this->get_override( "ForceSplitScreenPlayersOnToSameTeam" );
        if( func_ForceSplitScreenPlayersOnToSameTeam.ptr() != Py_None )
            try {
                return func_ForceSplitScreenPlayersOnToSameTeam(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::ForceSplitScreenPlayersOnToSameTeam(  );
            }
        else
            return this->C_GameRules::ForceSplitScreenPlayersOnToSameTeam(  );
    }
    
    bool default_ForceSplitScreenPlayersOnToSameTeam(  ) {
        return C_GameRules::ForceSplitScreenPlayersOnToSameTeam( );
    }

    virtual float GetDamageMultiplier(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, GetDamageMultiplier )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, GetDamageMultiplier )
        bp::override func_GetDamageMultiplier = this->get_override( "GetDamageMultiplier" );
        if( func_GetDamageMultiplier.ptr() != Py_None )
            try {
                return func_GetDamageMultiplier(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::GetDamageMultiplier(  );
            }
        else
            return this->C_GameRules::GetDamageMultiplier(  );
    }
    
    float default_GetDamageMultiplier(  ) {
        return C_GameRules::GetDamageMultiplier( );
    }

    virtual int GetGameType(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, GetGameType )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, GetGameType )
        bp::override func_GetGameType = this->get_override( "GetGameType" );
        if( func_GetGameType.ptr() != Py_None )
            try {
                return func_GetGameType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::GetGameType(  );
            }
        else
            return this->C_GameRules::GetGameType(  );
    }
    
    int default_GetGameType(  ) {
        return C_GameRules::GetGameType( );
    }

    virtual char const * GetGameTypeName(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, GetGameTypeName )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, GetGameTypeName )
        bp::override func_GetGameTypeName = this->get_override( "GetGameTypeName" );
        if( func_GetGameTypeName.ptr() != Py_None )
            try {
                return func_GetGameTypeName(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::GetGameTypeName(  );
            }
        else
            return this->C_GameRules::GetGameTypeName(  );
    }
    
    char const * default_GetGameTypeName(  ) {
        return C_GameRules::GetGameTypeName( );
    }

    virtual int GetMaxHumanPlayers(  ) const  {
        PY_OVERRIDE_CHECK( C_GameRules, GetMaxHumanPlayers )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, GetMaxHumanPlayers )
        bp::override func_GetMaxHumanPlayers = this->get_override( "GetMaxHumanPlayers" );
        if( func_GetMaxHumanPlayers.ptr() != Py_None )
            try {
                return func_GetMaxHumanPlayers(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::GetMaxHumanPlayers(  );
            }
        else
            return this->C_GameRules::GetMaxHumanPlayers(  );
    }
    
    int default_GetMaxHumanPlayers(  ) const  {
        return C_GameRules::GetMaxHumanPlayers( );
    }

    virtual ::C_BaseCombatWeapon * GetNextBestWeapon( ::C_BaseCombatCharacter * pPlayer, ::C_BaseCombatWeapon * pCurrentWeapon ) {
        PY_OVERRIDE_CHECK( C_GameRules, GetNextBestWeapon )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, GetNextBestWeapon )
        bp::override func_GetNextBestWeapon = this->get_override( "GetNextBestWeapon" );
        if( func_GetNextBestWeapon.ptr() != Py_None )
            try {
                return func_GetNextBestWeapon( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pCurrentWeapon ? pCurrentWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
            }
        else
            return this->C_GameRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
    }
    
    ::C_BaseCombatWeapon * default_GetNextBestWeapon( ::C_BaseCombatCharacter * pPlayer, ::C_BaseCombatWeapon * pCurrentWeapon ) {
        return C_GameRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
    }

    virtual bool InRoundRestart(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, InRoundRestart )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, InRoundRestart )
        bp::override func_InRoundRestart = this->get_override( "InRoundRestart" );
        if( func_InRoundRestart.ptr() != Py_None )
            try {
                return func_InRoundRestart(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::InRoundRestart(  );
            }
        else
            return this->C_GameRules::InRoundRestart(  );
    }
    
    bool default_InRoundRestart(  ) {
        return C_GameRules::InRoundRestart( );
    }

    virtual bool Init(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, Init )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, Init )
        bp::override func_Init = this->get_override( "Init" );
        if( func_Init.ptr() != Py_None )
            try {
                return func_Init(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::Init(  );
            }
        else
            return this->C_GameRules::Init(  );
    }
    
    bool default_Init(  ) {
        return C_GameRules::Init( );
    }

    virtual void InitGamerules(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, InitGamerules )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, InitGamerules )
        bp::override func_InitGamerules = this->get_override( "InitGamerules" );
        if( func_InitGamerules.ptr() != Py_None )
            try {
                func_InitGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_GameRules::InitGamerules(  );
            }
        else
            this->C_GameRules::InitGamerules(  );
    }
    
    void default_InitGamerules(  ) {
        C_GameRules::InitGamerules( );
    }

    virtual bool IsBonusChallengeTimeBased(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, IsBonusChallengeTimeBased )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, IsBonusChallengeTimeBased )
        bp::override func_IsBonusChallengeTimeBased = this->get_override( "IsBonusChallengeTimeBased" );
        if( func_IsBonusChallengeTimeBased.ptr() != Py_None )
            try {
                return func_IsBonusChallengeTimeBased(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::IsBonusChallengeTimeBased(  );
            }
        else
            return this->C_GameRules::IsBonusChallengeTimeBased(  );
    }
    
    bool default_IsBonusChallengeTimeBased(  ) {
        return C_GameRules::IsBonusChallengeTimeBased( );
    }

    virtual bool IsMultiplayer(  ) {
        PY_OVERRIDE_CHECK( C_MultiplayRules, IsMultiplayer )
        PY_OVERRIDE_LOG( _gamerules, C_MultiplayRules, IsMultiplayer )
        bp::override func_IsMultiplayer = this->get_override( "IsMultiplayer" );
        if( func_IsMultiplayer.ptr() != Py_None )
            try {
                return func_IsMultiplayer(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_MultiplayRules::IsMultiplayer(  );
            }
        else
            return this->C_MultiplayRules::IsMultiplayer(  );
    }
    
    bool default_IsMultiplayer(  ) {
        return C_MultiplayRules::IsMultiplayer( );
    }

    virtual bool IsTopDown(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, IsTopDown )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, IsTopDown )
        bp::override func_IsTopDown = this->get_override( "IsTopDown" );
        if( func_IsTopDown.ptr() != Py_None )
            try {
                return func_IsTopDown(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::IsTopDown(  );
            }
        else
            return this->C_GameRules::IsTopDown(  );
    }
    
    bool default_IsTopDown(  ) {
        return C_GameRules::IsTopDown( );
    }

    virtual char const * Name(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, Name )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, Name )
        bp::override func_Name = this->get_override( "Name" );
        if( func_Name.ptr() != Py_None )
            try {
                return func_Name(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::Name(  );
            }
        else
            return this->C_GameRules::Name(  );
    }
    
    char const * default_Name(  ) {
        return C_GameRules::Name( );
    }

    virtual void OnNavMeshLoad(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, OnNavMeshLoad )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, OnNavMeshLoad )
        bp::override func_OnNavMeshLoad = this->get_override( "OnNavMeshLoad" );
        if( func_OnNavMeshLoad.ptr() != Py_None )
            try {
                func_OnNavMeshLoad(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_GameRules::OnNavMeshLoad(  );
            }
        else
            this->C_GameRules::OnNavMeshLoad(  );
    }
    
    void default_OnNavMeshLoad(  ) {
        C_GameRules::OnNavMeshLoad( );
    }

    virtual void RegisterScriptFunctions(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, RegisterScriptFunctions )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, RegisterScriptFunctions )
        bp::override func_RegisterScriptFunctions = this->get_override( "RegisterScriptFunctions" );
        if( func_RegisterScriptFunctions.ptr() != Py_None )
            try {
                func_RegisterScriptFunctions(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_GameRules::RegisterScriptFunctions(  );
            }
        else
            this->C_GameRules::RegisterScriptFunctions(  );
    }
    
    void default_RegisterScriptFunctions(  ) {
        C_GameRules::RegisterScriptFunctions( );
    }

    virtual void ShutdownGamerules(  ) {
        PY_OVERRIDE_CHECK( C_GameRules, ShutdownGamerules )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, ShutdownGamerules )
        bp::override func_ShutdownGamerules = this->get_override( "ShutdownGamerules" );
        if( func_ShutdownGamerules.ptr() != Py_None )
            try {
                func_ShutdownGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->C_GameRules::ShutdownGamerules(  );
            }
        else
            this->C_GameRules::ShutdownGamerules(  );
    }
    
    void default_ShutdownGamerules(  ) {
        C_GameRules::ShutdownGamerules( );
    }

    virtual bool SwitchToNextBestWeapon( ::C_BaseCombatCharacter * pPlayer, ::C_BaseCombatWeapon * pCurrentWeapon ) {
        PY_OVERRIDE_CHECK( C_GameRules, SwitchToNextBestWeapon )
        PY_OVERRIDE_LOG( _gamerules, C_GameRules, SwitchToNextBestWeapon )
        bp::override func_SwitchToNextBestWeapon = this->get_override( "SwitchToNextBestWeapon" );
        if( func_SwitchToNextBestWeapon.ptr() != Py_None )
            try {
                return func_SwitchToNextBestWeapon( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pCurrentWeapon ? pCurrentWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->C_GameRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
            }
        else
            return this->C_GameRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
    }
    
    bool default_SwitchToNextBestWeapon( ::C_BaseCombatCharacter * pPlayer, ::C_BaseCombatWeapon * pCurrentWeapon ) {
        return C_GameRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

void register_CTeamplayRules_class(){

    bp::class_< C_TeamplayRules_wrapper, bp::bases< C_MultiplayRules >, boost::noncopyable >( "CTeamplayRules" )    
        .def( 
            "GetCaptureValueForPlayer"
            , (int ( ::C_TeamplayRules::* )( ::C_BasePlayer * ) )(&::C_TeamplayRules::GetCaptureValueForPlayer)
            , (int ( C_TeamplayRules_wrapper::* )( ::C_BasePlayer * ) )(&C_TeamplayRules_wrapper::default_GetCaptureValueForPlayer)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "PlayerMayBlockPoint"
            , (bool ( ::C_TeamplayRules::* )( ::C_BasePlayer *,int,char *,int ) )(&::C_TeamplayRules::PlayerMayBlockPoint)
            , (bool ( C_TeamplayRules_wrapper::* )( ::C_BasePlayer *,int,char *,int ) )(&C_TeamplayRules_wrapper::default_PlayerMayBlockPoint)
            , ( bp::arg("pPlayer"), bp::arg("iPointIndex"), bp::arg("pszReason")=bp::object(), bp::arg("iMaxReasonLength")=(int)(0) ) )    
        .def( 
            "PlayerMayCapturePoint"
            , (bool ( ::C_TeamplayRules::* )( ::C_BasePlayer *,int,char *,int ) )(&::C_TeamplayRules::PlayerMayCapturePoint)
            , (bool ( C_TeamplayRules_wrapper::* )( ::C_BasePlayer *,int,char *,int ) )(&C_TeamplayRules_wrapper::default_PlayerMayCapturePoint)
            , ( bp::arg("pPlayer"), bp::arg("iPointIndex"), bp::arg("pszReason")=bp::object(), bp::arg("iMaxReasonLength")=(int)(0) ) )    
        .def( 
            "PointsMayBeCaptured"
            , (bool ( ::C_TeamplayRules::* )(  ) )(&::C_TeamplayRules::PointsMayBeCaptured)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_PointsMayBeCaptured) )    
        .def( 
            "SetLastCapPointChanged"
            , (void ( ::C_TeamplayRules::* )( int ) )(&::C_TeamplayRules::SetLastCapPointChanged)
            , (void ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_SetLastCapPointChanged)
            , ( bp::arg("iIndex") ) )    
        .def( 
            "TeamMayCapturePoint"
            , (bool ( ::C_TeamplayRules::* )( int,int ) )(&::C_TeamplayRules::TeamMayCapturePoint)
            , (bool ( C_TeamplayRules_wrapper::* )( int,int ) )(&C_TeamplayRules_wrapper::default_TeamMayCapturePoint)
            , ( bp::arg("iTeam"), bp::arg("iPointIndex") ) )    
        .def( 
            "ClientCommandKeyValues"
            , (void ( ::C_GameRules::* )( ::edict_t *,::KeyValues * ) )(&::C_GameRules::ClientCommandKeyValues)
            , (void ( C_TeamplayRules_wrapper::* )( ::edict_t *,::KeyValues * ) )(&C_TeamplayRules_wrapper::default_ClientCommandKeyValues)
            , ( bp::arg("pEntity"), bp::arg("pKeyValues") ) )    
        .def( 
            "Damage_GetNoPhysicsForce"
            , (int ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::Damage_GetNoPhysicsForce)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Damage_GetNoPhysicsForce) )    
        .def( 
            "Damage_GetShouldGibCorpse"
            , (int ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::Damage_GetShouldGibCorpse)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Damage_GetShouldGibCorpse) )    
        .def( 
            "Damage_GetShouldNotBleed"
            , (int ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::Damage_GetShouldNotBleed)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Damage_GetShouldNotBleed) )    
        .def( 
            "Damage_GetShowOnHud"
            , (int ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::Damage_GetShowOnHud)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Damage_GetShowOnHud) )    
        .def( 
            "Damage_GetTimeBased"
            , (int ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::Damage_GetTimeBased)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Damage_GetTimeBased) )    
        .def( 
            "Damage_IsTimeBased"
            , (bool ( ::C_MultiplayRules::* )( int ) )(&::C_MultiplayRules::Damage_IsTimeBased)
            , (bool ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_Damage_IsTimeBased)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_NoPhysicsForce"
            , (bool ( ::C_MultiplayRules::* )( int ) )(&::C_MultiplayRules::Damage_NoPhysicsForce)
            , (bool ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_Damage_NoPhysicsForce)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShouldGibCorpse"
            , (bool ( ::C_MultiplayRules::* )( int ) )(&::C_MultiplayRules::Damage_ShouldGibCorpse)
            , (bool ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_Damage_ShouldGibCorpse)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShouldNotBleed"
            , (bool ( ::C_MultiplayRules::* )( int ) )(&::C_MultiplayRules::Damage_ShouldNotBleed)
            , (bool ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_Damage_ShouldNotBleed)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShowOnHUD"
            , (bool ( ::C_MultiplayRules::* )( int ) )(&::C_MultiplayRules::Damage_ShowOnHUD)
            , (bool ( C_TeamplayRules_wrapper::* )( int ) )(&C_TeamplayRules_wrapper::default_Damage_ShowOnHUD)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "DefaultFOV"
            , (int ( ::C_GameRules::* )(  ) )(&::C_GameRules::DefaultFOV)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_DefaultFOV) )    
        .def( 
            "ForceSplitScreenPlayersOnToSameTeam"
            , (bool ( ::C_GameRules::* )(  ) )(&::C_GameRules::ForceSplitScreenPlayersOnToSameTeam)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_ForceSplitScreenPlayersOnToSameTeam) )    
        .def( 
            "GetDamageMultiplier"
            , (float ( ::C_GameRules::* )(  ) )(&::C_GameRules::GetDamageMultiplier)
            , (float ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_GetDamageMultiplier) )    
        .def( 
            "GetGameType"
            , (int ( ::C_GameRules::* )(  ) )(&::C_GameRules::GetGameType)
            , (int ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_GetGameType) )    
        .def( 
            "GetGameTypeName"
            , (char const * ( ::C_GameRules::* )(  ) )(&::C_GameRules::GetGameTypeName)
            , (char const * ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_GetGameTypeName) )    
        .def( 
            "GetMaxHumanPlayers"
            , (int ( ::C_GameRules::* )(  ) const)(&::C_GameRules::GetMaxHumanPlayers)
            , (int ( C_TeamplayRules_wrapper::* )(  ) const)(&C_TeamplayRules_wrapper::default_GetMaxHumanPlayers) )    
        .def( 
            "GetNextBestWeapon"
            , (::C_BaseCombatWeapon * ( ::C_GameRules::* )( ::C_BaseCombatCharacter *,::C_BaseCombatWeapon * ) )(&::C_GameRules::GetNextBestWeapon)
            , (::C_BaseCombatWeapon * ( C_TeamplayRules_wrapper::* )( ::C_BaseCombatCharacter *,::C_BaseCombatWeapon * ) )(&C_TeamplayRules_wrapper::default_GetNextBestWeapon)
            , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetTopDownMovementAxis"
            , (::QAngle const & ( ::C_GameRules::* )(  ) )(&::C_GameRules::GetTopDownMovementAxis)
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "InRoundRestart"
            , (bool ( ::C_GameRules::* )(  ) )(&::C_GameRules::InRoundRestart)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_InRoundRestart) )    
        .def( 
            "Init"
            , (bool ( ::C_GameRules::* )(  ) )(&::C_GameRules::Init)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Init) )    
        .def( 
            "InitGamerules"
            , (void ( ::C_GameRules::* )(  ) )(&::C_GameRules::InitGamerules)
            , (void ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_InitGamerules) )    
        .def( 
            "IsBonusChallengeTimeBased"
            , (bool ( ::C_GameRules::* )(  ) )(&::C_GameRules::IsBonusChallengeTimeBased)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_IsBonusChallengeTimeBased) )    
        .def( 
            "IsMultiplayer"
            , (bool ( ::C_MultiplayRules::* )(  ) )(&::C_MultiplayRules::IsMultiplayer)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_IsMultiplayer) )    
        .def( 
            "IsTopDown"
            , (bool ( ::C_GameRules::* )(  ) )(&::C_GameRules::IsTopDown)
            , (bool ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_IsTopDown) )    
        .def( 
            "Name"
            , (char const * ( ::C_GameRules::* )(  ) )(&::C_GameRules::Name)
            , (char const * ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_Name) )    
        .def( 
            "OnNavMeshLoad"
            , (void ( ::C_GameRules::* )(  ) )(&::C_GameRules::OnNavMeshLoad)
            , (void ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_OnNavMeshLoad) )    
        .def( 
            "RegisterScriptFunctions"
            , (void ( ::C_GameRules::* )(  ) )(&::C_GameRules::RegisterScriptFunctions)
            , (void ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_RegisterScriptFunctions) )    
        .def( 
            "ShutdownGamerules"
            , (void ( ::C_GameRules::* )(  ) )(&::C_GameRules::ShutdownGamerules)
            , (void ( C_TeamplayRules_wrapper::* )(  ) )(&C_TeamplayRules_wrapper::default_ShutdownGamerules) )    
        .def( 
            "SwitchToNextBestWeapon"
            , (bool ( ::C_GameRules::* )( ::C_BaseCombatCharacter *,::C_BaseCombatWeapon * ) )(&::C_GameRules::SwitchToNextBestWeapon)
            , (bool ( C_TeamplayRules_wrapper::* )( ::C_BaseCombatCharacter *,::C_BaseCombatWeapon * ) )(&C_TeamplayRules_wrapper::default_SwitchToNextBestWeapon)
            , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") ) );

}

