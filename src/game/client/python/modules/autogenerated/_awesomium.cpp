// This file has been generated by Py++.

#include "cbase.h"



#include "boost/python.hpp"

#include "videocfg/videocfg.h"

#include "cbase.h"

#include "hl2wars/vgui/vgui_webview.h"

#include "Awesomium/WebCore.h"

#include "src_python.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct WebView_wrapper : WebView, bp::wrapper< WebView > {

    WebView_wrapper(WebView const & arg )
    : WebView( arg )
      , bp::wrapper< WebView >(){
        // copy constructor
        
    }

    WebView_wrapper(bool bCustomViewSize=false, ::vgui::Panel * pParent=0 )
    : WebView( bCustomViewSize, boost::python::ptr(pParent) )
      , bp::wrapper< WebView >(){
        // constructor
    
    }

    virtual ::vgui::HCursor GetCursor(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetCursor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetCursor(  ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetCursor = this->get_override( "GetCursor" );
        if( func_GetCursor.ptr() != Py_None )
            try {
                return func_GetCursor(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->WebView::GetCursor(  );
            }
        else
            return this->WebView::GetCursor(  );
    }
    
    ::vgui::HCursor default_GetCursor(  ) {
        return WebView::GetCursor( );
    }

    virtual void OnChangeFocus( ::Awesomium::WebView * caller, ::Awesomium::FocusedElementType focused_type ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeFocus: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeFocus( boost::python::ptr(caller), focused_type ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeFocus = this->get_override( "OnChangeFocus" );
        if( func_OnChangeFocus.ptr() != Py_None )
            try {
                func_OnChangeFocus( boost::python::ptr(caller), focused_type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->WebView::OnChangeFocus( boost::python::ptr(caller), focused_type );
            }
        else
            this->WebView::OnChangeFocus( boost::python::ptr(caller), focused_type );
    }
    
    void default_OnChangeFocus( ::Awesomium::WebView * caller, ::Awesomium::FocusedElementType focused_type ) {
        WebView::OnChangeFocus( boost::python::ptr(caller), focused_type );
    }

    virtual void OnSizeChanged( int newWide, int newTall ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSizeChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSizeChanged( newWide, newTall ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->WebView::OnSizeChanged( newWide, newTall );
            }
        else
            this->WebView::OnSizeChanged( newWide, newTall );
    }
    
    void default_OnSizeChanged( int newWide, int newTall ) {
        WebView::OnSizeChanged( newWide, newTall );
    }

    virtual void PerformLayout(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PerformLayout: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PerformLayout(  ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->WebView::PerformLayout(  );
            }
        else
            this->WebView::PerformLayout(  );
    }
    
    void default_PerformLayout(  ) {
        WebView::PerformLayout( );
    }

    virtual ::boost::python::object PyOnMethodCall( unsigned int remote_object_id, ::boost::python::object arg1, ::boost::python::object args ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnMethodCall: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PyOnMethodCall( remote_object_id, arg1, args ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnMethodCall = this->get_override( "OnMethodCall" );
        if( func_OnMethodCall.ptr() != Py_None )
            try {
                return func_OnMethodCall( remote_object_id, arg1, args );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->WebView::PyOnMethodCall( remote_object_id, arg1, args );
            }
        else
            return this->WebView::PyOnMethodCall( remote_object_id, arg1, args );
    }
    
    ::boost::python::object default_OnMethodCall( unsigned int remote_object_id, ::boost::python::object arg1, ::boost::python::object args ) {
        return WebView::PyOnMethodCall( remote_object_id, arg1, args );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetCursor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetCursor( cursor ) of Class: WebView\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->WebView::SetCursor( cursor );
            }
        else
            this->WebView::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        WebView::SetCursor( cursor );
    }

};

BOOST_PYTHON_MODULE(_awesomium){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< Awesomium::Cursor>("Cursor")
        .value("kCursor_Pointer", Awesomium::kCursor_Pointer)
        .value("kCursor_Cross", Awesomium::kCursor_Cross)
        .value("kCursor_Hand", Awesomium::kCursor_Hand)
        .value("kCursor_IBeam", Awesomium::kCursor_IBeam)
        .value("kCursor_Wait", Awesomium::kCursor_Wait)
        .value("kCursor_Help", Awesomium::kCursor_Help)
        .value("kCursor_EastResize", Awesomium::kCursor_EastResize)
        .value("kCursor_NorthResize", Awesomium::kCursor_NorthResize)
        .value("kCursor_NorthEastResize", Awesomium::kCursor_NorthEastResize)
        .value("kCursor_NorthWestResize", Awesomium::kCursor_NorthWestResize)
        .value("kCursor_SouthResize", Awesomium::kCursor_SouthResize)
        .value("kCursor_SouthEastResize", Awesomium::kCursor_SouthEastResize)
        .value("kCursor_SouthWestResize", Awesomium::kCursor_SouthWestResize)
        .value("kCursor_WestResize", Awesomium::kCursor_WestResize)
        .value("kCursor_NorthSouthResize", Awesomium::kCursor_NorthSouthResize)
        .value("kCursor_EastWestResize", Awesomium::kCursor_EastWestResize)
        .value("kCursor_NorthEastSouthWestResize", Awesomium::kCursor_NorthEastSouthWestResize)
        .value("kCursor_NorthWestSouthEastResize", Awesomium::kCursor_NorthWestSouthEastResize)
        .value("kCursor_ColumnResize", Awesomium::kCursor_ColumnResize)
        .value("kCursor_RowResize", Awesomium::kCursor_RowResize)
        .value("kCursor_MiddlePanning", Awesomium::kCursor_MiddlePanning)
        .value("kCursor_EastPanning", Awesomium::kCursor_EastPanning)
        .value("kCursor_NorthPanning", Awesomium::kCursor_NorthPanning)
        .value("kCursor_NorthEastPanning", Awesomium::kCursor_NorthEastPanning)
        .value("kCursor_NorthWestPanning", Awesomium::kCursor_NorthWestPanning)
        .value("kCursor_SouthPanning", Awesomium::kCursor_SouthPanning)
        .value("kCursor_SouthEastPanning", Awesomium::kCursor_SouthEastPanning)
        .value("kCursor_SouthWestPanning", Awesomium::kCursor_SouthWestPanning)
        .value("kCursor_WestPanning", Awesomium::kCursor_WestPanning)
        .value("kCursor_Move", Awesomium::kCursor_Move)
        .value("kCursor_VerticalText", Awesomium::kCursor_VerticalText)
        .value("kCursor_Cell", Awesomium::kCursor_Cell)
        .value("kCursor_ContextMenu", Awesomium::kCursor_ContextMenu)
        .value("kCursor_Alias", Awesomium::kCursor_Alias)
        .value("kCursor_Progress", Awesomium::kCursor_Progress)
        .value("kCursor_NoDrop", Awesomium::kCursor_NoDrop)
        .value("kCursor_Copy", Awesomium::kCursor_Copy)
        .value("kCursor_None", Awesomium::kCursor_None)
        .value("kCursor_NotAllowed", Awesomium::kCursor_NotAllowed)
        .value("kCursor_ZoomIn", Awesomium::kCursor_ZoomIn)
        .value("kCursor_ZoomOut", Awesomium::kCursor_ZoomOut)
        .value("kCursor_Grab", Awesomium::kCursor_Grab)
        .value("kCursor_Grabbing", Awesomium::kCursor_Grabbing)
        .value("kCursor_Custom", Awesomium::kCursor_Custom)
        .export_values()
        ;

    bp::enum_< Awesomium::FocusedElementType>("FocusedElementType")
        .value("kFocusedElementType_None", Awesomium::kFocusedElementType_None)
        .value("kFocusedElementType_Text", Awesomium::kFocusedElementType_Text)
        .value("kFocusedElementType_Link", Awesomium::kFocusedElementType_Link)
        .value("kFocusedElementType_Input", Awesomium::kFocusedElementType_Input)
        .value("kFocusedElementType_TextInput", Awesomium::kFocusedElementType_TextInput)
        .value("kFocusedElementType_EditableContent", Awesomium::kFocusedElementType_EditableContent)
        .value("kFocusedElementType_Plugin", Awesomium::kFocusedElementType_Plugin)
        .value("kFocusedElementType_Other", Awesomium::kFocusedElementType_Other)
        .export_values()
        ;

    bp::enum_< Awesomium::TerminationStatus>("TerminationStatus")
        .value("kTerminationStatus_Normal", Awesomium::kTerminationStatus_Normal)
        .value("kTerminationStatus_Abnormal", Awesomium::kTerminationStatus_Abnormal)
        .value("kTerminationStatus_Killed", Awesomium::kTerminationStatus_Killed)
        .value("kTerminationStatus_Crashed", Awesomium::kTerminationStatus_Crashed)
        .value("kTerminationStatus_StillRunning", Awesomium::kTerminationStatus_StillRunning)
        .export_values()
        ;

    { //::PyJSObject
        typedef bp::class_< PyJSObject > JSObject_exposer_t;
        JSObject_exposer_t JSObject_exposer = JSObject_exposer_t( "JSObject", bp::init< Awesomium::JSObject const & >(( bp::arg("object") )) );
        bp::scope JSObject_scope( JSObject_exposer );
        bp::implicitly_convertible< Awesomium::JSObject const &, PyJSObject >();
        { //::PyJSObject::Invoke
        
            typedef ::boost::python::object ( ::PyJSObject::*Invoke_function_type )( char const *,::boost::python::list ) ;
            
            JSObject_exposer.def( 
                "Invoke"
                , Invoke_function_type( &::PyJSObject::Invoke )
                , ( bp::arg("name"), bp::arg("args") ) );
        
        }
        { //::PyJSObject::SetCustomMethod
        
            typedef void ( ::PyJSObject::*SetCustomMethod_function_type )( char const *,bool ) ;
            
            JSObject_exposer.def( 
                "SetCustomMethod"
                , SetCustomMethod_function_type( &::PyJSObject::SetCustomMethod )
                , ( bp::arg("name"), bp::arg("has_return_value") ) );
        
        }
        { //::PyJSObject::remote_id
        
            typedef unsigned int ( ::PyJSObject::*remote_id_function_type )(  ) const;
            
            JSObject_exposer.def( 
                "remote_id"
                , remote_id_function_type( &::PyJSObject::remote_id ) );
        
        }
    }

    { //::WebView
        typedef bp::class_< WebView_wrapper > WebView_exposer_t;
        WebView_exposer_t WebView_exposer = WebView_exposer_t( "WebView", bp::init< bp::optional< bool, vgui::Panel * > >(( bp::arg("bCustomViewSize")=(bool)(false), bp::arg("pParent")=bp::object() )) );
        bp::scope WebView_scope( WebView_exposer );
        bp::implicitly_convertible< bool, WebView >();
        { //::WebView::Clear
        
            typedef void ( ::WebView::*Clear_function_type )(  ) ;
            
            WebView_exposer.def( 
                "Clear"
                , Clear_function_type( &::WebView::Clear ) );
        
        }
        { //::WebView::CreateGlobalJavascriptObject
        
            typedef ::boost::python::object ( ::WebView::*CreateGlobalJavascriptObject_function_type )( ::boost::python::object ) ;
            
            WebView_exposer.def( 
                "CreateGlobalJavascriptObject"
                , CreateGlobalJavascriptObject_function_type( &::WebView::CreateGlobalJavascriptObject )
                , ( bp::arg("name") ) );
        
        }
        { //::WebView::ExecuteJavascript
        
            typedef void ( ::WebView::*ExecuteJavascript_function_type )( ::boost::python::str,::boost::python::str ) ;
            
            WebView_exposer.def( 
                "ExecuteJavascript"
                , ExecuteJavascript_function_type( &::WebView::ExecuteJavascript )
                , ( bp::arg("script"), bp::arg("frame_xpath") ) );
        
        }
        { //::WebView::ExecuteJavascriptWithResult
        
            typedef ::boost::python::object ( ::WebView::*ExecuteJavascriptWithResult_function_type )( ::boost::python::str,::boost::python::str ) ;
            
            WebView_exposer.def( 
                "ExecuteJavascriptWithResult"
                , ExecuteJavascriptWithResult_function_type( &::WebView::ExecuteJavascriptWithResult )
                , ( bp::arg("script"), bp::arg("frame_xpath") ) );
        
        }
        { //::WebView::Focus
        
            typedef void ( ::WebView::*Focus_function_type )(  ) ;
            
            WebView_exposer.def( 
                "Focus"
                , Focus_function_type( &::WebView::Focus ) );
        
        }
        { //::WebView::GetAlphaAt
        
            typedef int ( ::WebView::*GetAlphaAt_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "GetAlphaAt"
                , GetAlphaAt_function_type( &::WebView::GetAlphaAt )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::WebView::GetCursor
        
            typedef ::vgui::HCursor ( ::WebView::*GetCursor_function_type )(  ) ;
            typedef ::vgui::HCursor ( WebView_wrapper::*default_GetCursor_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetCursor"
                , GetCursor_function_type(&::WebView::GetCursor)
                , default_GetCursor_function_type(&WebView_wrapper::default_GetCursor) );
        
        }
        { //::WebView::GetLoadListener
        
            typedef ::boost::python::object ( ::WebView::*GetLoadListener_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetLoadListener"
                , GetLoadListener_function_type( &::WebView::GetLoadListener ) );
        
        }
        { //::WebView::GetPassMouseTruIfAlphaZero
        
            typedef bool ( ::WebView::*GetPassMouseTruIfAlphaZero_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetPassMouseTruIfAlphaZero"
                , GetPassMouseTruIfAlphaZero_function_type( &::WebView::GetPassMouseTruIfAlphaZero ) );
        
        }
        { //::WebView::GetProcessListener
        
            typedef ::boost::python::object ( ::WebView::*GetProcessListener_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetProcessListener"
                , GetProcessListener_function_type( &::WebView::GetProcessListener ) );
        
        }
        { //::WebView::GetUseMouseCapture
        
            typedef bool ( ::WebView::*GetUseMouseCapture_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetUseMouseCapture"
                , GetUseMouseCapture_function_type( &::WebView::GetUseMouseCapture ) );
        
        }
        { //::WebView::GetViewListener
        
            typedef ::boost::python::object ( ::WebView::*GetViewListener_function_type )(  ) ;
            
            WebView_exposer.def( 
                "GetViewListener"
                , GetViewListener_function_type( &::WebView::GetViewListener ) );
        
        }
        { //::WebView::IsAlphaZeroAt
        
            typedef bool ( ::WebView::*IsAlphaZeroAt_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "IsAlphaZeroAt"
                , IsAlphaZeroAt_function_type( &::WebView::IsAlphaZeroAt )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::WebView::IsKeyBoardInputEnabled
        
            typedef bool ( ::WebView::*IsKeyBoardInputEnabled_function_type )(  ) ;
            
            WebView_exposer.def( 
                "IsKeyBoardInputEnabled"
                , IsKeyBoardInputEnabled_function_type( &::WebView::IsKeyBoardInputEnabled ) );
        
        }
        { //::WebView::IsMouseInputEnabled
        
            typedef bool ( ::WebView::*IsMouseInputEnabled_function_type )(  ) ;
            
            WebView_exposer.def( 
                "IsMouseInputEnabled"
                , IsMouseInputEnabled_function_type( &::WebView::IsMouseInputEnabled ) );
        
        }
        { //::WebView::IsValid
        
            typedef bool ( ::WebView::*IsValid_function_type )(  ) ;
            
            WebView_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::WebView::IsValid ) );
        
        }
        { //::WebView::IsVisible
        
            typedef bool ( ::WebView::*IsVisible_function_type )(  ) ;
            
            WebView_exposer.def( 
                "IsVisible"
                , IsVisible_function_type( &::WebView::IsVisible ) );
        
        }
        { //::WebView::LoadFile
        
            typedef void ( ::WebView::*LoadFile_function_type )( char const * ) ;
            
            WebView_exposer.def( 
                "LoadFile"
                , LoadFile_function_type( &::WebView::LoadFile )
                , ( bp::arg("filename") ) );
        
        }
        { //::WebView::LoadHTML
        
            typedef void ( ::WebView::*LoadHTML_function_type )( char const * ) ;
            
            WebView_exposer.def( 
                "LoadHTML"
                , LoadHTML_function_type( &::WebView::LoadHTML )
                , ( bp::arg("html") ) );
        
        }
        { //::WebView::LoadURL
        
            typedef void ( ::WebView::*LoadURL_function_type )( char const * ) ;
            
            WebView_exposer.def( 
                "LoadURL"
                , LoadURL_function_type( &::WebView::LoadURL )
                , ( bp::arg("url") ) );
        
        }
        { //::WebView::OnChangeFocus
        
            typedef void ( ::WebView::*OnChangeFocus_function_type )( ::Awesomium::WebView *,::Awesomium::FocusedElementType ) ;
            typedef void ( WebView_wrapper::*default_OnChangeFocus_function_type )( ::Awesomium::WebView *,::Awesomium::FocusedElementType ) ;
            
            WebView_exposer.def( 
                "OnChangeFocus"
                , OnChangeFocus_function_type(&::WebView::OnChangeFocus)
                , default_OnChangeFocus_function_type(&WebView_wrapper::default_OnChangeFocus)
                , ( bp::arg("caller"), bp::arg("focused_type") ) );
        
        }
        { //::WebView::OnSizeChanged
        
            typedef void ( ::WebView::*OnSizeChanged_function_type )( int,int ) ;
            typedef void ( WebView_wrapper::*default_OnSizeChanged_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "OnSizeChanged"
                , OnSizeChanged_function_type(&::WebView::OnSizeChanged)
                , default_OnSizeChanged_function_type(&WebView_wrapper::default_OnSizeChanged)
                , ( bp::arg("newWide"), bp::arg("newTall") ) );
        
        }
        { //::WebView::PerformLayout
        
            typedef void ( ::WebView::*PerformLayout_function_type )(  ) ;
            typedef void ( WebView_wrapper::*default_PerformLayout_function_type )(  ) ;
            
            WebView_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type(&::WebView::PerformLayout)
                , default_PerformLayout_function_type(&WebView_wrapper::default_PerformLayout) );
        
        }
        { //::WebView::PyOnMethodCall
        
            typedef ::boost::python::object ( ::WebView::*OnMethodCall_function_type )( unsigned int,::boost::python::object,::boost::python::object ) ;
            typedef ::boost::python::object ( WebView_wrapper::*default_OnMethodCall_function_type )( unsigned int,::boost::python::object,::boost::python::object ) ;
            
            WebView_exposer.def( 
                "OnMethodCall"
                , OnMethodCall_function_type(&::WebView::PyOnMethodCall)
                , default_OnMethodCall_function_type(&WebView_wrapper::default_OnMethodCall)
                , ( bp::arg("remote_object_id"), bp::arg("arg1"), bp::arg("args") ) );
        
        }
        { //::WebView::RebuildWebView
        
            typedef void ( ::WebView::*RebuildWebView_function_type )(  ) ;
            
            WebView_exposer.def( 
                "RebuildWebView"
                , RebuildWebView_function_type( &::WebView::RebuildWebView ) );
        
        }
        { //::WebView::Reload
        
            typedef void ( ::WebView::*Reload_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "Reload"
                , Reload_function_type( &::WebView::Reload )
                , ( bp::arg("ignore_cache") ) );
        
        }
        { //::WebView::SetCursor
        
            typedef void ( ::WebView::*SetCursor_function_type )( ::vgui::HCursor ) ;
            typedef void ( WebView_wrapper::*default_SetCursor_function_type )( ::vgui::HCursor ) ;
            
            WebView_exposer.def( 
                "SetCursor"
                , SetCursor_function_type(&::WebView::SetCursor)
                , default_SetCursor_function_type(&WebView_wrapper::default_SetCursor)
                , ( bp::arg("cursor") ) );
        
        }
        { //::WebView::SetKeyBoardInputEnabled
        
            typedef void ( ::WebView::*SetKeyBoardInputEnabled_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type( &::WebView::SetKeyBoardInputEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::WebView::SetLoadListener
        
            typedef void ( ::WebView::*SetLoadListener_function_type )( ::boost::python::object ) ;
            
            WebView_exposer.def( 
                "SetLoadListener"
                , SetLoadListener_function_type( &::WebView::SetLoadListener )
                , ( bp::arg("listener") ) );
        
        }
        { //::WebView::SetMouseInputEnabled
        
            typedef void ( ::WebView::*SetMouseInputEnabled_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type( &::WebView::SetMouseInputEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::WebView::SetPassMouseTruIfAlphaZero
        
            typedef void ( ::WebView::*SetPassMouseTruIfAlphaZero_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetPassMouseTruIfAlphaZero"
                , SetPassMouseTruIfAlphaZero_function_type( &::WebView::SetPassMouseTruIfAlphaZero )
                , ( bp::arg("passtruifzero") ) );
        
        }
        { //::WebView::SetPos
        
            typedef void ( ::WebView::*SetPos_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "SetPos"
                , SetPos_function_type( &::WebView::SetPos )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::WebView::SetProcessListener
        
            typedef void ( ::WebView::*SetProcessListener_function_type )( ::boost::python::object ) ;
            
            WebView_exposer.def( 
                "SetProcessListener"
                , SetProcessListener_function_type( &::WebView::SetProcessListener )
                , ( bp::arg("listener") ) );
        
        }
        { //::WebView::SetSize
        
            typedef void ( ::WebView::*SetSize_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "SetSize"
                , SetSize_function_type( &::WebView::SetSize )
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::WebView::SetTransparent
        
            typedef void ( ::WebView::*SetTransparent_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetTransparent"
                , SetTransparent_function_type( &::WebView::SetTransparent )
                , ( bp::arg("istransparent") ) );
        
        }
        { //::WebView::SetUseMouseCapture
        
            typedef void ( ::WebView::*SetUseMouseCapture_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetUseMouseCapture"
                , SetUseMouseCapture_function_type( &::WebView::SetUseMouseCapture )
                , ( bp::arg("usemousecapture") ) );
        
        }
        { //::WebView::SetViewListener
        
            typedef void ( ::WebView::*SetViewListener_function_type )( ::boost::python::object ) ;
            
            WebView_exposer.def( 
                "SetViewListener"
                , SetViewListener_function_type( &::WebView::SetViewListener )
                , ( bp::arg("listener") ) );
        
        }
        { //::WebView::SetVisible
        
            typedef void ( ::WebView::*SetVisible_function_type )( bool ) ;
            
            WebView_exposer.def( 
                "SetVisible"
                , SetVisible_function_type( &::WebView::SetVisible )
                , ( bp::arg("state") ) );
        
        }
        { //::WebView::SetWebViewSize
        
            typedef void ( ::WebView::*SetWebViewSize_function_type )( int,int ) ;
            
            WebView_exposer.def( 
                "SetWebViewSize"
                , SetWebViewSize_function_type( &::WebView::SetWebViewSize )
                , ( bp::arg("newWide"), bp::arg("newTall") ) );
        
        }
        { //::WebView::SetZPos
        
            typedef void ( ::WebView::*SetZPos_function_type )( int ) ;
            
            WebView_exposer.def( 
                "SetZPos"
                , SetZPos_function_type( &::WebView::SetZPos )
                , ( bp::arg("z") ) );
        
        }
        { //::WebView::Unfocus
        
            typedef void ( ::WebView::*Unfocus_function_type )(  ) ;
            
            WebView_exposer.def( 
                "Unfocus"
                , Unfocus_function_type( &::WebView::Unfocus ) );
        
        }
    }
}
