// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "gamerules.h"
#include "multiplay_gamerules.h"
#include "singleplay_gamerules.h"
#include "teamplay_gamerules.h"
#include "srcpy_gamerules.h"
#include "ammodef.h"
#include "items.h"
#include "hl2wars_gamerules.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CHL2WarsGameRules_pypp.hpp"

namespace bp = boost::python;

struct CHL2WarsGameRules_wrapper : CHL2WarsGameRules, bp::wrapper< CHL2WarsGameRules > {

    CHL2WarsGameRules_wrapper( )
    : CHL2WarsGameRules( )
      , bp::wrapper< CHL2WarsGameRules >(){
        // null constructor
    
    }

    virtual void ClientActive( ::CBasePlayer * client ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, ClientActive )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, ClientActive )
        bp::override func_ClientActive = this->get_override( "ClientActive" );
        if( func_ClientActive.ptr() != Py_None )
            try {
                func_ClientActive( client ? client->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::ClientActive( client );
            }
        else
            this->CHL2WarsGameRules::ClientActive( client );
    }
    
    void default_ClientActive( ::CBasePlayer * client ) {
        CHL2WarsGameRules::ClientActive( client );
    }

    virtual bool ClientCommand( ::CBaseEntity * edict, ::CCommand const & args ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, ClientCommand )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, ClientCommand )
        bp::override func_ClientCommand = this->get_override( "ClientCommand" );
        if( func_ClientCommand.ptr() != Py_None )
            try {
                return func_ClientCommand( edict ? edict->GetPyHandle() : boost::python::object(), boost::ref(args) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::ClientCommand( edict, args );
            }
        else
            return this->CHL2WarsGameRules::ClientCommand( edict, args );
    }
    
    bool default_ClientCommand( ::CBaseEntity * edict, ::CCommand const & args ) {
        return CHL2WarsGameRules::ClientCommand( edict, args );
    }

    virtual void CreateStandardEntities(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, CreateStandardEntities )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, CreateStandardEntities )
        bp::override func_CreateStandardEntities = this->get_override( "CreateStandardEntities" );
        if( func_CreateStandardEntities.ptr() != Py_None )
            try {
                func_CreateStandardEntities(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::CreateStandardEntities(  );
            }
        else
            this->CHL2WarsGameRules::CreateStandardEntities(  );
    }
    
    void default_CreateStandardEntities(  ) {
        CHL2WarsGameRules::CreateStandardEntities( );
    }

    virtual char const * GetChatFormat( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, GetChatFormat )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, GetChatFormat )
        bp::override func_GetChatFormat = this->get_override( "GetChatFormat" );
        if( func_GetChatFormat.ptr() != Py_None )
            try {
                return func_GetChatFormat( bTeamOnly, pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::GetChatFormat( bTeamOnly, pPlayer );
            }
        else
            return this->CHL2WarsGameRules::GetChatFormat( bTeamOnly, pPlayer );
    }
    
    char const * default_GetChatFormat( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CHL2WarsGameRules::GetChatFormat( bTeamOnly, pPlayer );
    }

    virtual char const * GetChatPrefix( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, GetChatPrefix )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, GetChatPrefix )
        bp::override func_GetChatPrefix = this->get_override( "GetChatPrefix" );
        if( func_GetChatPrefix.ptr() != Py_None )
            try {
                return func_GetChatPrefix( bTeamOnly, pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::GetChatPrefix( bTeamOnly, pPlayer );
            }
        else
            return this->CHL2WarsGameRules::GetChatPrefix( bTeamOnly, pPlayer );
    }
    
    char const * default_GetChatPrefix( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CHL2WarsGameRules::GetChatPrefix( bTeamOnly, pPlayer );
    }

    virtual char const * GetGameDescription(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, GetGameDescription )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, GetGameDescription )
        bp::override func_GetGameDescription = this->get_override( "GetGameDescription" );
        if( func_GetGameDescription.ptr() != Py_None )
            try {
                return func_GetGameDescription(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::GetGameDescription(  );
            }
        else
            return this->CHL2WarsGameRules::GetGameDescription(  );
    }
    
    char const * default_GetGameDescription(  ) {
        return CHL2WarsGameRules::GetGameDescription( );
    }

    virtual ::boost::python::api::object GetNextLevelName( bool bRandom=false ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, GetNextLevelName )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, GetNextLevelName )
        bp::override func_GetNextLevelName = this->get_override( "GetNextLevelName" );
        if( func_GetNextLevelName.ptr() != Py_None )
            try {
                return func_GetNextLevelName( bRandom );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::GetNextLevelName( bRandom );
            }
        else
            return this->CHL2WarsGameRules::GetNextLevelName( bRandom );
    }
    
    ::boost::python::api::object default_GetNextLevelName( bool bRandom=false ) {
        return CHL2WarsGameRules::GetNextLevelName( bRandom );
    }

    virtual char const * GetPlayerClassname(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, GetPlayerClassname )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, GetPlayerClassname )
        bp::override func_GetPlayerClassname = this->get_override( "GetPlayerClassname" );
        if( func_GetPlayerClassname.ptr() != Py_None )
            try {
                return func_GetPlayerClassname(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::GetPlayerClassname(  );
            }
        else
            return this->CHL2WarsGameRules::GetPlayerClassname(  );
    }
    
    char const * default_GetPlayerClassname(  ) {
        return CHL2WarsGameRules::GetPlayerClassname( );
    }

    virtual void InitGamerules(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, InitGamerules )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, InitGamerules )
        bp::override func_InitGamerules = this->get_override( "InitGamerules" );
        if( func_InitGamerules.ptr() != Py_None )
            try {
                func_InitGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::InitGamerules(  );
            }
        else
            this->CHL2WarsGameRules::InitGamerules(  );
    }
    
    void default_InitGamerules(  ) {
        CHL2WarsGameRules::InitGamerules( );
    }

    virtual bool IsTeamplay(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, IsTeamplay )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, IsTeamplay )
        bp::override func_IsTeamplay = this->get_override( "IsTeamplay" );
        if( func_IsTeamplay.ptr() != Py_None )
            try {
                return func_IsTeamplay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::IsTeamplay(  );
            }
        else
            return this->CHL2WarsGameRules::IsTeamplay(  );
    }
    
    bool default_IsTeamplay(  ) {
        return CHL2WarsGameRules::IsTeamplay( );
    }

    virtual void LevelShutdown(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, LevelShutdown )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, LevelShutdown )
        bp::override func_LevelShutdown = this->get_override( "LevelShutdown" );
        if( func_LevelShutdown.ptr() != Py_None )
            try {
                func_LevelShutdown(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::LevelShutdown(  );
            }
        else
            this->CHL2WarsGameRules::LevelShutdown(  );
    }
    
    void default_LevelShutdown(  ) {
        CHL2WarsGameRules::LevelShutdown( );
    }

    virtual void OnServerHibernating(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, OnServerHibernating )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, OnServerHibernating )
        bp::override func_OnServerHibernating = this->get_override( "OnServerHibernating" );
        if( func_OnServerHibernating.ptr() != Py_None )
            try {
                func_OnServerHibernating(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::OnServerHibernating(  );
            }
        else
            this->CHL2WarsGameRules::OnServerHibernating(  );
    }
    
    void default_OnServerHibernating(  ) {
        CHL2WarsGameRules::OnServerHibernating( );
    }

    virtual void PlayerChangedOwnerNumber( ::CBasePlayer * player, int oldownernumber, int newownernumber ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, PlayerChangedOwnerNumber )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, PlayerChangedOwnerNumber )
        bp::override func_PlayerChangedOwnerNumber = this->get_override( "PlayerChangedOwnerNumber" );
        if( func_PlayerChangedOwnerNumber.ptr() != Py_None )
            try {
                func_PlayerChangedOwnerNumber( player ? player->GetPyHandle() : boost::python::object(), oldownernumber, newownernumber );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::PlayerChangedOwnerNumber( player, oldownernumber, newownernumber );
            }
        else
            this->CHL2WarsGameRules::PlayerChangedOwnerNumber( player, oldownernumber, newownernumber );
    }
    
    void default_PlayerChangedOwnerNumber( ::CBasePlayer * player, int oldownernumber, int newownernumber ) {
        CHL2WarsGameRules::PlayerChangedOwnerNumber( player, oldownernumber, newownernumber );
    }

    virtual void PlayerSpawn( ::CBasePlayer * player ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, PlayerSpawn )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, PlayerSpawn )
        bp::override func_PlayerSpawn = this->get_override( "PlayerSpawn" );
        if( func_PlayerSpawn.ptr() != Py_None )
            try {
                func_PlayerSpawn( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::PlayerSpawn( player );
            }
        else
            this->CHL2WarsGameRules::PlayerSpawn( player );
    }
    
    void default_PlayerSpawn( ::CBasePlayer * player ) {
        CHL2WarsGameRules::PlayerSpawn( player );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, Precache )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::Precache(  );
            }
        else
            this->CHL2WarsGameRules::Precache(  );
    }
    
    void default_Precache(  ) {
        CHL2WarsGameRules::Precache( );
    }

    virtual bool PyClientConnected( int clientindex, char const * name, char const * address, char * reject, int maxrejectlen ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, PyClientConnected )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, PyClientConnected )
        bp::override func_ClientConnected = this->get_override( "ClientConnected" );
        if( func_ClientConnected.ptr() != Py_None )
            try {
                return func_ClientConnected( clientindex, name, address, reject, maxrejectlen );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsGameRules::PyClientConnected( clientindex, name, address, reject, maxrejectlen );
            }
        else
            return this->CHL2WarsGameRules::PyClientConnected( clientindex, name, address, reject, maxrejectlen );
    }
    
    bool default_ClientConnected( int clientindex, char const * name, char const * address, char * reject, int maxrejectlen ) {
        return CHL2WarsGameRules::PyClientConnected( clientindex, name, address, reject, maxrejectlen );
    }

    virtual void PyClientDisconnected( ::CBasePlayer * client ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, PyClientDisconnected )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, PyClientDisconnected )
        bp::override func_ClientDisconnected = this->get_override( "ClientDisconnected" );
        if( func_ClientDisconnected.ptr() != Py_None )
            try {
                func_ClientDisconnected( client ? client->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::PyClientDisconnected( client );
            }
        else
            this->CHL2WarsGameRules::PyClientDisconnected( client );
    }
    
    void default_ClientDisconnected( ::CBasePlayer * client ) {
        CHL2WarsGameRules::PyClientDisconnected( client );
    }

    virtual void ShutdownGamerules(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsGameRules, ShutdownGamerules )
        PY_OVERRIDE_LOG( _gamerules, CHL2WarsGameRules, ShutdownGamerules )
        bp::override func_ShutdownGamerules = this->get_override( "ShutdownGamerules" );
        if( func_ShutdownGamerules.ptr() != Py_None )
            try {
                func_ShutdownGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsGameRules::ShutdownGamerules(  );
            }
        else
            this->CHL2WarsGameRules::ShutdownGamerules(  );
    }
    
    void default_ShutdownGamerules(  ) {
        CHL2WarsGameRules::ShutdownGamerules( );
    }

    virtual char const * AIClassText( int classType ) {
        PY_OVERRIDE_CHECK( CGameRules, AIClassText )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, AIClassText )
        bp::override func_AIClassText = this->get_override( "AIClassText" );
        if( func_AIClassText.ptr() != Py_None )
            try {
                return func_AIClassText( classType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AIClassText( classType );
            }
        else
            return this->CGameRules::AIClassText( classType );
    }
    
    char const * default_AIClassText( int classType ) {
        return CGameRules::AIClassText( classType );
    }

    virtual float AdjustPlayerDamageInflicted( float damage ) {
        PY_OVERRIDE_CHECK( CGameRules, AdjustPlayerDamageInflicted )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, AdjustPlayerDamageInflicted )
        bp::override func_AdjustPlayerDamageInflicted = this->get_override( "AdjustPlayerDamageInflicted" );
        if( func_AdjustPlayerDamageInflicted.ptr() != Py_None )
            try {
                return func_AdjustPlayerDamageInflicted( damage );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AdjustPlayerDamageInflicted( damage );
            }
        else
            return this->CGameRules::AdjustPlayerDamageInflicted( damage );
    }
    
    float default_AdjustPlayerDamageInflicted( float damage ) {
        return CGameRules::AdjustPlayerDamageInflicted( damage );
    }

    virtual void AdjustPlayerDamageTaken( ::CTakeDamageInfo * pInfo ) {
        PY_OVERRIDE_CHECK( CGameRules, AdjustPlayerDamageTaken )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, AdjustPlayerDamageTaken )
        bp::override func_AdjustPlayerDamageTaken = this->get_override( "AdjustPlayerDamageTaken" );
        if( func_AdjustPlayerDamageTaken.ptr() != Py_None )
            try {
                func_AdjustPlayerDamageTaken( boost::python::ptr(pInfo) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::AdjustPlayerDamageTaken( pInfo );
            }
        else
            this->CGameRules::AdjustPlayerDamageTaken( pInfo );
    }
    
    void default_AdjustPlayerDamageTaken( ::CTakeDamageInfo * pInfo ) {
        CGameRules::AdjustPlayerDamageTaken( pInfo );
    }

    virtual bool AllowAutoTargetCrosshair(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, AllowAutoTargetCrosshair )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, AllowAutoTargetCrosshair )
        bp::override func_AllowAutoTargetCrosshair = this->get_override( "AllowAutoTargetCrosshair" );
        if( func_AllowAutoTargetCrosshair.ptr() != Py_None )
            try {
                return func_AllowAutoTargetCrosshair(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::AllowAutoTargetCrosshair(  );
            }
        else
            return this->CMultiplayRules::AllowAutoTargetCrosshair(  );
    }
    
    bool default_AllowAutoTargetCrosshair(  ) {
        return CMultiplayRules::AllowAutoTargetCrosshair( );
    }

    virtual bool AllowDamage( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, AllowDamage )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, AllowDamage )
        bp::override func_AllowDamage = this->get_override( "AllowDamage" );
        if( func_AllowDamage.ptr() != Py_None )
            try {
                return func_AllowDamage( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::AllowDamage( pVictim, info );
            }
        else
            return this->CMultiplayRules::AllowDamage( pVictim, info );
    }
    
    bool default_AllowDamage( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        return CMultiplayRules::AllowDamage( pVictim, info );
    }

    virtual bool AllowSoundscapes(  ) {
        PY_OVERRIDE_CHECK( CGameRules, AllowSoundscapes )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, AllowSoundscapes )
        bp::override func_AllowSoundscapes = this->get_override( "AllowSoundscapes" );
        if( func_AllowSoundscapes.ptr() != Py_None )
            try {
                return func_AllowSoundscapes(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AllowSoundscapes(  );
            }
        else
            return this->CGameRules::AllowSoundscapes(  );
    }
    
    bool default_AllowSoundscapes(  ) {
        return CGameRules::AllowSoundscapes( );
    }

    virtual bool CanEntityBeUsePushed( ::CBaseEntity * pEnt ) {
        PY_OVERRIDE_CHECK( CGameRules, CanEntityBeUsePushed )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, CanEntityBeUsePushed )
        bp::override func_CanEntityBeUsePushed = this->get_override( "CanEntityBeUsePushed" );
        if( func_CanEntityBeUsePushed.ptr() != Py_None )
            try {
                return func_CanEntityBeUsePushed( pEnt ? pEnt->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanEntityBeUsePushed( pEnt );
            }
        else
            return this->CGameRules::CanEntityBeUsePushed( pEnt );
    }
    
    bool default_CanEntityBeUsePushed( ::CBaseEntity * pEnt ) {
        return CGameRules::CanEntityBeUsePushed( pEnt );
    }

    virtual bool CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, int iAmmoIndex ) {
        PY_OVERRIDE_CHECK( CGameRules, CanHaveAmmo )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, CanHaveAmmo )
        bp::override func_CanHaveAmmo = this->get_override( "CanHaveAmmo" );
        if( func_CanHaveAmmo.ptr() != Py_None )
            try {
                return func_CanHaveAmmo( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), iAmmoIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanHaveAmmo( pPlayer, iAmmoIndex );
            }
        else
            return this->CGameRules::CanHaveAmmo( pPlayer, iAmmoIndex );
    }
    
    bool default_CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, int iAmmoIndex ) {
        return CGameRules::CanHaveAmmo( pPlayer, iAmmoIndex );
    }

    virtual bool CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, char const * szName ) {
        PY_OVERRIDE_CHECK( CGameRules, CanHaveAmmo )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, CanHaveAmmo )
        bp::override func_CanHaveAmmo = this->get_override( "CanHaveAmmo" );
        if( func_CanHaveAmmo.ptr() != Py_None )
            try {
                return func_CanHaveAmmo( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), szName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanHaveAmmo( pPlayer, szName );
            }
        else
            return this->CGameRules::CanHaveAmmo( pPlayer, szName );
    }
    
    bool default_CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, char const * szName ) {
        return CGameRules::CanHaveAmmo( pPlayer, szName );
    }

    virtual bool CanHaveItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, CanHaveItem )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, CanHaveItem )
        bp::override func_CanHaveItem = this->get_override( "CanHaveItem" );
        if( func_CanHaveItem.ptr() != Py_None )
            try {
                return func_CanHaveItem( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::CanHaveItem( pPlayer, pItem );
            }
        else
            return this->CMultiplayRules::CanHaveItem( pPlayer, pItem );
    }
    
    bool default_CanHaveItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        return CMultiplayRules::CanHaveItem( pPlayer, pItem );
    }

    virtual bool CanHavePlayerItem( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, CanHavePlayerItem )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, CanHavePlayerItem )
        bp::override func_CanHavePlayerItem = this->get_override( "CanHavePlayerItem" );
        if( func_CanHavePlayerItem.ptr() != Py_None )
            try {
                return func_CanHavePlayerItem( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::CanHavePlayerItem( pPlayer, pWeapon );
            }
        else
            return this->CMultiplayRules::CanHavePlayerItem( pPlayer, pWeapon );
    }
    
    bool default_CanHavePlayerItem( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::CanHavePlayerItem( pPlayer, pWeapon );
    }

    virtual void ChangePlayerTeam( ::CBasePlayer * pPlayer, char const * pTeamName, bool bKill, bool bGib ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, ChangePlayerTeam )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, ChangePlayerTeam )
        bp::override func_ChangePlayerTeam = this->get_override( "ChangePlayerTeam" );
        if( func_ChangePlayerTeam.ptr() != Py_None )
            try {
                func_ChangePlayerTeam( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pTeamName, bKill, bGib );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::ChangePlayerTeam( pPlayer, pTeamName, bKill, bGib );
            }
        else
            this->CTeamplayRules::ChangePlayerTeam( pPlayer, pTeamName, bKill, bGib );
    }
    
    void default_ChangePlayerTeam( ::CBasePlayer * pPlayer, char const * pTeamName, bool bKill, bool bGib ) {
        CTeamplayRules::ChangePlayerTeam( pPlayer, pTeamName, bKill, bGib );
    }

    virtual void CheckChatText( ::CBasePlayer * pPlayer, char * pText ) {
        PY_OVERRIDE_CHECK( CGameRules, CheckChatText )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, CheckChatText )
        bp::override func_CheckChatText = this->get_override( "CheckChatText" );
        if( func_CheckChatText.ptr() != Py_None )
            try {
                func_CheckChatText( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pText );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CheckChatText( pPlayer, pText );
            }
        else
            this->CGameRules::CheckChatText( pPlayer, pText );
    }
    
    void default_CheckChatText( ::CBasePlayer * pPlayer, char * pText ) {
        CGameRules::CheckChatText( pPlayer, pText );
    }

    virtual void ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        PY_OVERRIDE_CHECK( CGameRules, ClientCommandKeyValues )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, ClientCommandKeyValues )
        bp::override func_ClientCommandKeyValues = this->get_override( "ClientCommandKeyValues" );
        if( func_ClientCommandKeyValues.ptr() != Py_None )
            try {
                func_ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ClientCommandKeyValues( pEntity, pKeyValues );
            }
        else
            this->CGameRules::ClientCommandKeyValues( pEntity, pKeyValues );
    }
    
    void default_ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        CGameRules::ClientCommandKeyValues( pEntity, pKeyValues );
    }

    virtual void ClientSettingsChanged( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, ClientSettingsChanged )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, ClientSettingsChanged )
        bp::override func_ClientSettingsChanged = this->get_override( "ClientSettingsChanged" );
        if( func_ClientSettingsChanged.ptr() != Py_None )
            try {
                func_ClientSettingsChanged( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::ClientSettingsChanged( pPlayer );
            }
        else
            this->CTeamplayRules::ClientSettingsChanged( pPlayer );
    }
    
    void default_ClientSettingsChanged( ::CBasePlayer * pPlayer ) {
        CTeamplayRules::ClientSettingsChanged( pPlayer );
    }

    virtual void CreateCustomNetworkStringTables(  ) {
        PY_OVERRIDE_CHECK( CGameRules, CreateCustomNetworkStringTables )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, CreateCustomNetworkStringTables )
        bp::override func_CreateCustomNetworkStringTables = this->get_override( "CreateCustomNetworkStringTables" );
        if( func_CreateCustomNetworkStringTables.ptr() != Py_None )
            try {
                func_CreateCustomNetworkStringTables(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CreateCustomNetworkStringTables(  );
            }
        else
            this->CGameRules::CreateCustomNetworkStringTables(  );
    }
    
    void default_CreateCustomNetworkStringTables(  ) {
        CGameRules::CreateCustomNetworkStringTables( );
    }

    virtual int DeadPlayerAmmo( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, DeadPlayerAmmo )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, DeadPlayerAmmo )
        bp::override func_DeadPlayerAmmo = this->get_override( "DeadPlayerAmmo" );
        if( func_DeadPlayerAmmo.ptr() != Py_None )
            try {
                return func_DeadPlayerAmmo( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::DeadPlayerAmmo( pPlayer );
            }
        else
            return this->CMultiplayRules::DeadPlayerAmmo( pPlayer );
    }
    
    int default_DeadPlayerAmmo( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::DeadPlayerAmmo( pPlayer );
    }

    virtual int DeadPlayerWeapons( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, DeadPlayerWeapons )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, DeadPlayerWeapons )
        bp::override func_DeadPlayerWeapons = this->get_override( "DeadPlayerWeapons" );
        if( func_DeadPlayerWeapons.ptr() != Py_None )
            try {
                return func_DeadPlayerWeapons( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::DeadPlayerWeapons( pPlayer );
            }
        else
            return this->CMultiplayRules::DeadPlayerWeapons( pPlayer );
    }
    
    int default_DeadPlayerWeapons( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::DeadPlayerWeapons( pPlayer );
    }

    virtual void DeathNotice( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, DeathNotice )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::DeathNotice( pVictim, info );
            }
        else
            this->CTeamplayRules::DeathNotice( pVictim, info );
    }
    
    void default_DeathNotice( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        CTeamplayRules::DeathNotice( pVictim, info );
    }

    virtual int DefaultFOV(  ) {
        PY_OVERRIDE_CHECK( CGameRules, DefaultFOV )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, DefaultFOV )
        bp::override func_DefaultFOV = this->get_override( "DefaultFOV" );
        if( func_DefaultFOV.ptr() != Py_None )
            try {
                return func_DefaultFOV(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::DefaultFOV(  );
            }
        else
            return this->CGameRules::DefaultFOV(  );
    }
    
    int default_DefaultFOV(  ) {
        return CGameRules::DefaultFOV( );
    }

    virtual void EndMultiplayerGame(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, EndMultiplayerGame )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, EndMultiplayerGame )
        bp::override func_EndMultiplayerGame = this->get_override( "EndMultiplayerGame" );
        if( func_EndMultiplayerGame.ptr() != Py_None )
            try {
                func_EndMultiplayerGame(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::EndMultiplayerGame(  );
            }
        else
            this->CMultiplayRules::EndMultiplayerGame(  );
    }
    
    void default_EndMultiplayerGame(  ) {
        CMultiplayRules::EndMultiplayerGame( );
    }

    virtual bool FAllowNPCs(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FAllowNPCs )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FAllowNPCs )
        bp::override func_FAllowNPCs = this->get_override( "FAllowNPCs" );
        if( func_FAllowNPCs.ptr() != Py_None )
            try {
                return func_FAllowNPCs(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FAllowNPCs(  );
            }
        else
            return this->CMultiplayRules::FAllowNPCs(  );
    }
    
    bool default_FAllowNPCs(  ) {
        return CMultiplayRules::FAllowNPCs( );
    }

    virtual bool FPlayerCanRespawn( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FPlayerCanRespawn )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FPlayerCanRespawn )
        bp::override func_FPlayerCanRespawn = this->get_override( "FPlayerCanRespawn" );
        if( func_FPlayerCanRespawn.ptr() != Py_None )
            try {
                return func_FPlayerCanRespawn( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FPlayerCanRespawn( pPlayer );
            }
        else
            return this->CMultiplayRules::FPlayerCanRespawn( pPlayer );
    }
    
    bool default_FPlayerCanRespawn( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::FPlayerCanRespawn( pPlayer );
    }

    virtual bool FPlayerCanTakeDamage( ::CBasePlayer * pPlayer, ::CBaseEntity * pAttacker ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, FPlayerCanTakeDamage )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, FPlayerCanTakeDamage )
        bp::override func_FPlayerCanTakeDamage = this->get_override( "FPlayerCanTakeDamage" );
        if( func_FPlayerCanTakeDamage.ptr() != Py_None )
            try {
                return func_FPlayerCanTakeDamage( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pAttacker ? pAttacker->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::FPlayerCanTakeDamage( pPlayer, pAttacker );
            }
        else
            return this->CTeamplayRules::FPlayerCanTakeDamage( pPlayer, pAttacker );
    }
    
    bool default_FPlayerCanTakeDamage( ::CBasePlayer * pPlayer, ::CBaseEntity * pAttacker ) {
        return CTeamplayRules::FPlayerCanTakeDamage( pPlayer, pAttacker );
    }

    virtual bool FShouldSwitchWeapon( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FShouldSwitchWeapon )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FShouldSwitchWeapon )
        bp::override func_FShouldSwitchWeapon = this->get_override( "FShouldSwitchWeapon" );
        if( func_FShouldSwitchWeapon.ptr() != Py_None )
            try {
                return func_FShouldSwitchWeapon( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FShouldSwitchWeapon( pPlayer, pWeapon );
            }
        else
            return this->CMultiplayRules::FShouldSwitchWeapon( pPlayer, pWeapon );
    }
    
    bool default_FShouldSwitchWeapon( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::FShouldSwitchWeapon( pPlayer, pWeapon );
    }

    virtual float FlHEVChargerRechargeTime(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlHEVChargerRechargeTime )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlHEVChargerRechargeTime )
        bp::override func_FlHEVChargerRechargeTime = this->get_override( "FlHEVChargerRechargeTime" );
        if( func_FlHEVChargerRechargeTime.ptr() != Py_None )
            try {
                return func_FlHEVChargerRechargeTime(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlHEVChargerRechargeTime(  );
            }
        else
            return this->CMultiplayRules::FlHEVChargerRechargeTime(  );
    }
    
    float default_FlHEVChargerRechargeTime(  ) {
        return CMultiplayRules::FlHEVChargerRechargeTime( );
    }

    virtual float FlHealthChargerRechargeTime(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlHealthChargerRechargeTime )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlHealthChargerRechargeTime )
        bp::override func_FlHealthChargerRechargeTime = this->get_override( "FlHealthChargerRechargeTime" );
        if( func_FlHealthChargerRechargeTime.ptr() != Py_None )
            try {
                return func_FlHealthChargerRechargeTime(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlHealthChargerRechargeTime(  );
            }
        else
            return this->CMultiplayRules::FlHealthChargerRechargeTime(  );
    }
    
    float default_FlHealthChargerRechargeTime(  ) {
        return CMultiplayRules::FlHealthChargerRechargeTime( );
    }

    virtual float FlItemRespawnTime( ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlItemRespawnTime )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlItemRespawnTime )
        bp::override func_FlItemRespawnTime = this->get_override( "FlItemRespawnTime" );
        if( func_FlItemRespawnTime.ptr() != Py_None )
            try {
                return func_FlItemRespawnTime( pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlItemRespawnTime( pItem );
            }
        else
            return this->CMultiplayRules::FlItemRespawnTime( pItem );
    }
    
    float default_FlItemRespawnTime( ::CItem * pItem ) {
        return CMultiplayRules::FlItemRespawnTime( pItem );
    }

    virtual float FlPlayerFallDamage( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlPlayerFallDamage )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlPlayerFallDamage )
        bp::override func_FlPlayerFallDamage = this->get_override( "FlPlayerFallDamage" );
        if( func_FlPlayerFallDamage.ptr() != Py_None )
            try {
                return func_FlPlayerFallDamage( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlPlayerFallDamage( pPlayer );
            }
        else
            return this->CMultiplayRules::FlPlayerFallDamage( pPlayer );
    }
    
    float default_FlPlayerFallDamage( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::FlPlayerFallDamage( pPlayer );
    }

    virtual bool FlPlayerFallDeathDoesScreenFade( ::CBasePlayer * pl ) {
        PY_OVERRIDE_CHECK( CGameRules, FlPlayerFallDeathDoesScreenFade )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, FlPlayerFallDeathDoesScreenFade )
        bp::override func_FlPlayerFallDeathDoesScreenFade = this->get_override( "FlPlayerFallDeathDoesScreenFade" );
        if( func_FlPlayerFallDeathDoesScreenFade.ptr() != Py_None )
            try {
                return func_FlPlayerFallDeathDoesScreenFade( pl ? pl->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::FlPlayerFallDeathDoesScreenFade( pl );
            }
        else
            return this->CGameRules::FlPlayerFallDeathDoesScreenFade( pl );
    }
    
    bool default_FlPlayerFallDeathDoesScreenFade( ::CBasePlayer * pl ) {
        return CGameRules::FlPlayerFallDeathDoesScreenFade( pl );
    }

    virtual float FlPlayerSpawnTime( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlPlayerSpawnTime )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlPlayerSpawnTime )
        bp::override func_FlPlayerSpawnTime = this->get_override( "FlPlayerSpawnTime" );
        if( func_FlPlayerSpawnTime.ptr() != Py_None )
            try {
                return func_FlPlayerSpawnTime( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlPlayerSpawnTime( pPlayer );
            }
        else
            return this->CMultiplayRules::FlPlayerSpawnTime( pPlayer );
    }
    
    float default_FlPlayerSpawnTime( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::FlPlayerSpawnTime( pPlayer );
    }

    virtual float FlWeaponRespawnTime( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlWeaponRespawnTime )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlWeaponRespawnTime )
        bp::override func_FlWeaponRespawnTime = this->get_override( "FlWeaponRespawnTime" );
        if( func_FlWeaponRespawnTime.ptr() != Py_None )
            try {
                return func_FlWeaponRespawnTime( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlWeaponRespawnTime( pWeapon );
            }
        else
            return this->CMultiplayRules::FlWeaponRespawnTime( pWeapon );
    }
    
    float default_FlWeaponRespawnTime( ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::FlWeaponRespawnTime( pWeapon );
    }

    virtual float FlWeaponTryRespawn( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, FlWeaponTryRespawn )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, FlWeaponTryRespawn )
        bp::override func_FlWeaponTryRespawn = this->get_override( "FlWeaponTryRespawn" );
        if( func_FlWeaponTryRespawn.ptr() != Py_None )
            try {
                return func_FlWeaponTryRespawn( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::FlWeaponTryRespawn( pWeapon );
            }
        else
            return this->CMultiplayRules::FlWeaponTryRespawn( pWeapon );
    }
    
    float default_FlWeaponTryRespawn( ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::FlWeaponTryRespawn( pWeapon );
    }

    virtual float GetAmmoQuantityScale( int iAmmoIndex ) {
        PY_OVERRIDE_CHECK( CGameRules, GetAmmoQuantityScale )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetAmmoQuantityScale )
        bp::override func_GetAmmoQuantityScale = this->get_override( "GetAmmoQuantityScale" );
        if( func_GetAmmoQuantityScale.ptr() != Py_None )
            try {
                return func_GetAmmoQuantityScale( iAmmoIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetAmmoQuantityScale( iAmmoIndex );
            }
        else
            return this->CGameRules::GetAmmoQuantityScale( iAmmoIndex );
    }
    
    float default_GetAmmoQuantityScale( int iAmmoIndex ) {
        return CGameRules::GetAmmoQuantityScale( iAmmoIndex );
    }

    virtual int GetAutoAimMode(  ) {
        PY_OVERRIDE_CHECK( CGameRules, GetAutoAimMode )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetAutoAimMode )
        bp::override func_GetAutoAimMode = this->get_override( "GetAutoAimMode" );
        if( func_GetAutoAimMode.ptr() != Py_None )
            try {
                return func_GetAutoAimMode(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetAutoAimMode(  );
            }
        else
            return this->CGameRules::GetAutoAimMode(  );
    }
    
    int default_GetAutoAimMode(  ) {
        return CGameRules::GetAutoAimMode( );
    }

    virtual float GetAutoAimScale( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CGameRules, GetAutoAimScale )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetAutoAimScale )
        bp::override func_GetAutoAimScale = this->get_override( "GetAutoAimScale" );
        if( func_GetAutoAimScale.ptr() != Py_None )
            try {
                return func_GetAutoAimScale( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetAutoAimScale( pPlayer );
            }
        else
            return this->CGameRules::GetAutoAimScale( pPlayer );
    }
    
    float default_GetAutoAimScale( ::CBasePlayer * pPlayer ) {
        return CGameRules::GetAutoAimScale( pPlayer );
    }

    virtual int GetCaptureValueForPlayer( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, GetCaptureValueForPlayer )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, GetCaptureValueForPlayer )
        bp::override func_GetCaptureValueForPlayer = this->get_override( "GetCaptureValueForPlayer" );
        if( func_GetCaptureValueForPlayer.ptr() != Py_None )
            try {
                return func_GetCaptureValueForPlayer( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::GetCaptureValueForPlayer( pPlayer );
            }
        else
            return this->CTeamplayRules::GetCaptureValueForPlayer( pPlayer );
    }
    
    int default_GetCaptureValueForPlayer( ::CBasePlayer * pPlayer ) {
        return CTeamplayRules::GetCaptureValueForPlayer( pPlayer );
    }

    virtual char const * GetChatLocation( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CGameRules, GetChatLocation )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetChatLocation )
        bp::override func_GetChatLocation = this->get_override( "GetChatLocation" );
        if( func_GetChatLocation.ptr() != Py_None )
            try {
                return func_GetChatLocation( bTeamOnly, pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetChatLocation( bTeamOnly, pPlayer );
            }
        else
            return this->CGameRules::GetChatLocation( bTeamOnly, pPlayer );
    }
    
    char const * default_GetChatLocation( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CGameRules::GetChatLocation( bTeamOnly, pPlayer );
    }

    virtual char const * GetDamageCustomString( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CGameRules, GetDamageCustomString )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetDamageCustomString )
        bp::override func_GetDamageCustomString = this->get_override( "GetDamageCustomString" );
        if( func_GetDamageCustomString.ptr() != Py_None )
            try {
                return func_GetDamageCustomString( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetDamageCustomString( info );
            }
        else
            return this->CGameRules::GetDamageCustomString( info );
    }
    
    char const * default_GetDamageCustomString( ::CTakeDamageInfo const & info ) {
        return CGameRules::GetDamageCustomString( info );
    }

    virtual float GetDamageMultiplier(  ) {
        PY_OVERRIDE_CHECK( CGameRules, GetDamageMultiplier )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetDamageMultiplier )
        bp::override func_GetDamageMultiplier = this->get_override( "GetDamageMultiplier" );
        if( func_GetDamageMultiplier.ptr() != Py_None )
            try {
                return func_GetDamageMultiplier(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetDamageMultiplier(  );
            }
        else
            return this->CGameRules::GetDamageMultiplier(  );
    }
    
    float default_GetDamageMultiplier(  ) {
        return CGameRules::GetDamageMultiplier( );
    }

    virtual ::CBasePlayer * GetDeathScorer( ::CBaseEntity * pKiller, ::CBaseEntity * pInflictor, ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, GetDeathScorer )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, GetDeathScorer )
        bp::override func_GetDeathScorer = this->get_override( "GetDeathScorer" );
        if( func_GetDeathScorer.ptr() != Py_None )
            try {
                return func_GetDeathScorer( pKiller ? pKiller->GetPyHandle() : boost::python::object(), pInflictor ? pInflictor->GetPyHandle() : boost::python::object(), pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::GetDeathScorer( pKiller, pInflictor, pVictim );
            }
        else
            return this->CMultiplayRules::GetDeathScorer( pKiller, pInflictor, pVictim );
    }
    
    ::CBasePlayer * default_GetDeathScorer( ::CBaseEntity * pKiller, ::CBaseEntity * pInflictor, ::CBaseEntity * pVictim ) {
        return CMultiplayRules::GetDeathScorer( pKiller, pInflictor, pVictim );
    }

    virtual int GetGameType(  ) {
        PY_OVERRIDE_CHECK( CGameRules, GetGameType )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetGameType )
        bp::override func_GetGameType = this->get_override( "GetGameType" );
        if( func_GetGameType.ptr() != Py_None )
            try {
                return func_GetGameType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetGameType(  );
            }
        else
            return this->CGameRules::GetGameType(  );
    }
    
    int default_GetGameType(  ) {
        return CGameRules::GetGameType( );
    }

    virtual char const * GetGameTypeName(  ) {
        PY_OVERRIDE_CHECK( CGameRules, GetGameTypeName )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetGameTypeName )
        bp::override func_GetGameTypeName = this->get_override( "GetGameTypeName" );
        if( func_GetGameTypeName.ptr() != Py_None )
            try {
                return func_GetGameTypeName(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetGameTypeName(  );
            }
        else
            return this->CGameRules::GetGameTypeName(  );
    }
    
    char const * default_GetGameTypeName(  ) {
        return CGameRules::GetGameTypeName( );
    }

    virtual char const * GetIndexedTeamName( int teamIndex ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, GetIndexedTeamName )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, GetIndexedTeamName )
        bp::override func_GetIndexedTeamName = this->get_override( "GetIndexedTeamName" );
        if( func_GetIndexedTeamName.ptr() != Py_None )
            try {
                return func_GetIndexedTeamName( teamIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::GetIndexedTeamName( teamIndex );
            }
        else
            return this->CTeamplayRules::GetIndexedTeamName( teamIndex );
    }
    
    char const * default_GetIndexedTeamName( int teamIndex ) {
        return CTeamplayRules::GetIndexedTeamName( teamIndex );
    }

    virtual int GetMaxHumanPlayers(  ) const  {
        PY_OVERRIDE_CHECK( CGameRules, GetMaxHumanPlayers )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetMaxHumanPlayers )
        bp::override func_GetMaxHumanPlayers = this->get_override( "GetMaxHumanPlayers" );
        if( func_GetMaxHumanPlayers.ptr() != Py_None )
            try {
                return func_GetMaxHumanPlayers(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetMaxHumanPlayers(  );
            }
        else
            return this->CGameRules::GetMaxHumanPlayers(  );
    }
    
    int default_GetMaxHumanPlayers(  ) const  {
        return CGameRules::GetMaxHumanPlayers( );
    }

    virtual ::CBaseCombatWeapon * GetNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, GetNextBestWeapon )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, GetNextBestWeapon )
        bp::override func_GetNextBestWeapon = this->get_override( "GetNextBestWeapon" );
        if( func_GetNextBestWeapon.ptr() != Py_None )
            try {
                return func_GetNextBestWeapon( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pCurrentWeapon ? pCurrentWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
            }
        else
            return this->CMultiplayRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
    }
    
    ::CBaseCombatWeapon * default_GetNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        return CMultiplayRules::GetNextBestWeapon( pPlayer, pCurrentWeapon );
    }

    virtual ::CBaseEntity * GetPlayerSpawnSpot( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, GetPlayerSpawnSpot )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, GetPlayerSpawnSpot )
        bp::override func_GetPlayerSpawnSpot = this->get_override( "GetPlayerSpawnSpot" );
        if( func_GetPlayerSpawnSpot.ptr() != Py_None )
            try {
                return func_GetPlayerSpawnSpot( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::GetPlayerSpawnSpot( pPlayer );
            }
        else
            return this->CMultiplayRules::GetPlayerSpawnSpot( pPlayer );
    }
    
    ::CBaseEntity * default_GetPlayerSpawnSpot( ::CBasePlayer * pPlayer ) {
        return CMultiplayRules::GetPlayerSpawnSpot( pPlayer );
    }

    virtual int GetSkillLevel(  ) {
        PY_OVERRIDE_CHECK( CGameRules, GetSkillLevel )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, GetSkillLevel )
        bp::override func_GetSkillLevel = this->get_override( "GetSkillLevel" );
        if( func_GetSkillLevel.ptr() != Py_None )
            try {
                return func_GetSkillLevel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetSkillLevel(  );
            }
        else
            return this->CGameRules::GetSkillLevel(  );
    }
    
    int default_GetSkillLevel(  ) {
        return CGameRules::GetSkillLevel( );
    }

    virtual void GetTaggedConVarList( ::KeyValues * pCvarTagList ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, GetTaggedConVarList )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, GetTaggedConVarList )
        bp::override func_GetTaggedConVarList = this->get_override( "GetTaggedConVarList" );
        if( func_GetTaggedConVarList.ptr() != Py_None )
            try {
                func_GetTaggedConVarList( boost::python::ptr(pCvarTagList) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::GetTaggedConVarList( pCvarTagList );
            }
        else
            this->CMultiplayRules::GetTaggedConVarList( pCvarTagList );
    }
    
    void default_GetTaggedConVarList( ::KeyValues * pCvarTagList ) {
        CMultiplayRules::GetTaggedConVarList( pCvarTagList );
    }

    virtual char const * GetTeamID( ::CBaseEntity * pEntity ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, GetTeamID )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, GetTeamID )
        bp::override func_GetTeamID = this->get_override( "GetTeamID" );
        if( func_GetTeamID.ptr() != Py_None )
            try {
                return func_GetTeamID( pEntity ? pEntity->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::GetTeamID( pEntity );
            }
        else
            return this->CTeamplayRules::GetTeamID( pEntity );
    }
    
    char const * default_GetTeamID( ::CBaseEntity * pEntity ) {
        return CTeamplayRules::GetTeamID( pEntity );
    }

    virtual int GetTeamIndex( char const * pTeamName ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, GetTeamIndex )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, GetTeamIndex )
        bp::override func_GetTeamIndex = this->get_override( "GetTeamIndex" );
        if( func_GetTeamIndex.ptr() != Py_None )
            try {
                return func_GetTeamIndex( pTeamName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::GetTeamIndex( pTeamName );
            }
        else
            return this->CTeamplayRules::GetTeamIndex( pTeamName );
    }
    
    int default_GetTeamIndex( char const * pTeamName ) {
        return CTeamplayRules::GetTeamIndex( pTeamName );
    }

    virtual void HandleScrambleTeams(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, HandleScrambleTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, HandleScrambleTeams )
        bp::override func_HandleScrambleTeams = this->get_override( "HandleScrambleTeams" );
        if( func_HandleScrambleTeams.ptr() != Py_None )
            try {
                func_HandleScrambleTeams(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::HandleScrambleTeams(  );
            }
        else
            this->CTeamplayRules::HandleScrambleTeams(  );
    }
    
    void default_HandleScrambleTeams(  ) {
        CTeamplayRules::HandleScrambleTeams( );
    }

    virtual void HandleSwitchTeams(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, HandleSwitchTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, HandleSwitchTeams )
        bp::override func_HandleSwitchTeams = this->get_override( "HandleSwitchTeams" );
        if( func_HandleSwitchTeams.ptr() != Py_None )
            try {
                func_HandleSwitchTeams(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::HandleSwitchTeams(  );
            }
        else
            this->CTeamplayRules::HandleSwitchTeams(  );
    }
    
    void default_HandleSwitchTeams(  ) {
        CTeamplayRules::HandleSwitchTeams( );
    }

    virtual void HandleTimeLimitChange(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, HandleTimeLimitChange )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, HandleTimeLimitChange )
        bp::override func_HandleTimeLimitChange = this->get_override( "HandleTimeLimitChange" );
        if( func_HandleTimeLimitChange.ptr() != Py_None )
            try {
                func_HandleTimeLimitChange(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::HandleTimeLimitChange(  );
            }
        else
            this->CMultiplayRules::HandleTimeLimitChange(  );
    }
    
    void default_HandleTimeLimitChange(  ) {
        CMultiplayRules::HandleTimeLimitChange( );
    }

    virtual int IPointsForKill( ::CBasePlayer * pAttacker, ::CBasePlayer * pKilled ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, IPointsForKill )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, IPointsForKill )
        bp::override func_IPointsForKill = this->get_override( "IPointsForKill" );
        if( func_IPointsForKill.ptr() != Py_None )
            try {
                return func_IPointsForKill( pAttacker ? pAttacker->GetPyHandle() : boost::python::object(), pKilled ? pKilled->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::IPointsForKill( pAttacker, pKilled );
            }
        else
            return this->CTeamplayRules::IPointsForKill( pAttacker, pKilled );
    }
    
    int default_IPointsForKill( ::CBasePlayer * pAttacker, ::CBasePlayer * pKilled ) {
        return CTeamplayRules::IPointsForKill( pAttacker, pKilled );
    }

    virtual bool InRoundRestart(  ) {
        PY_OVERRIDE_CHECK( CGameRules, InRoundRestart )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, InRoundRestart )
        bp::override func_InRoundRestart = this->get_override( "InRoundRestart" );
        if( func_InRoundRestart.ptr() != Py_None )
            try {
                return func_InRoundRestart(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::InRoundRestart(  );
            }
        else
            return this->CGameRules::InRoundRestart(  );
    }
    
    bool default_InRoundRestart(  ) {
        return CGameRules::InRoundRestart( );
    }

    virtual bool Init(  ) {
        PY_OVERRIDE_CHECK( CGameRules, Init )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, Init )
        bp::override func_Init = this->get_override( "Init" );
        if( func_Init.ptr() != Py_None )
            try {
                return func_Init(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::Init(  );
            }
        else
            return this->CGameRules::Init(  );
    }
    
    bool default_Init(  ) {
        return CGameRules::Init( );
    }

    virtual void InitDefaultAIRelationships(  ) {
        PY_OVERRIDE_CHECK( CGameRules, InitDefaultAIRelationships )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, InitDefaultAIRelationships )
        bp::override func_InitDefaultAIRelationships = this->get_override( "InitDefaultAIRelationships" );
        if( func_InitDefaultAIRelationships.ptr() != Py_None )
            try {
                func_InitDefaultAIRelationships(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::InitDefaultAIRelationships(  );
            }
        else
            this->CGameRules::InitDefaultAIRelationships(  );
    }
    
    void default_InitDefaultAIRelationships(  ) {
        CGameRules::InitDefaultAIRelationships( );
    }

    virtual void InitHUD( ::CBasePlayer * pl ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, InitHUD )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, InitHUD )
        bp::override func_InitHUD = this->get_override( "InitHUD" );
        if( func_InitHUD.ptr() != Py_None )
            try {
                func_InitHUD( pl ? pl->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::InitHUD( pl );
            }
        else
            this->CTeamplayRules::InitHUD( pl );
    }
    
    void default_InitHUD( ::CBasePlayer * pl ) {
        CTeamplayRules::InitHUD( pl );
    }

    virtual bool IsAllowedToSpawn( ::CBaseEntity * pEntity ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, IsAllowedToSpawn )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, IsAllowedToSpawn )
        bp::override func_IsAllowedToSpawn = this->get_override( "IsAllowedToSpawn" );
        if( func_IsAllowedToSpawn.ptr() != Py_None )
            try {
                return func_IsAllowedToSpawn( pEntity ? pEntity->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::IsAllowedToSpawn( pEntity );
            }
        else
            return this->CMultiplayRules::IsAllowedToSpawn( pEntity );
    }
    
    bool default_IsAllowedToSpawn( ::CBaseEntity * pEntity ) {
        return CMultiplayRules::IsAllowedToSpawn( pEntity );
    }

    virtual bool IsCoOp(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, IsCoOp )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, IsCoOp )
        bp::override func_IsCoOp = this->get_override( "IsCoOp" );
        if( func_IsCoOp.ptr() != Py_None )
            try {
                return func_IsCoOp(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::IsCoOp(  );
            }
        else
            return this->CMultiplayRules::IsCoOp(  );
    }
    
    bool default_IsCoOp(  ) {
        return CMultiplayRules::IsCoOp( );
    }

    virtual bool IsDeathmatch(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, IsDeathmatch )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, IsDeathmatch )
        bp::override func_IsDeathmatch = this->get_override( "IsDeathmatch" );
        if( func_IsDeathmatch.ptr() != Py_None )
            try {
                return func_IsDeathmatch(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::IsDeathmatch(  );
            }
        else
            return this->CMultiplayRules::IsDeathmatch(  );
    }
    
    bool default_IsDeathmatch(  ) {
        return CMultiplayRules::IsDeathmatch( );
    }

    virtual bool IsMultiplayer(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, IsMultiplayer )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, IsMultiplayer )
        bp::override func_IsMultiplayer = this->get_override( "IsMultiplayer" );
        if( func_IsMultiplayer.ptr() != Py_None )
            try {
                return func_IsMultiplayer(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::IsMultiplayer(  );
            }
        else
            return this->CMultiplayRules::IsMultiplayer(  );
    }
    
    bool default_IsMultiplayer(  ) {
        return CMultiplayRules::IsMultiplayer( );
    }

    virtual bool IsSkillLevel( int iLevel ) {
        PY_OVERRIDE_CHECK( CGameRules, IsSkillLevel )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, IsSkillLevel )
        bp::override func_IsSkillLevel = this->get_override( "IsSkillLevel" );
        if( func_IsSkillLevel.ptr() != Py_None )
            try {
                return func_IsSkillLevel( iLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsSkillLevel( iLevel );
            }
        else
            return this->CGameRules::IsSkillLevel( iLevel );
    }
    
    bool default_IsSkillLevel( int iLevel ) {
        return CGameRules::IsSkillLevel( iLevel );
    }

    virtual bool IsSpawnPointValid( ::CBaseEntity * pSpot, ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CGameRules, IsSpawnPointValid )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, IsSpawnPointValid )
        bp::override func_IsSpawnPointValid = this->get_override( "IsSpawnPointValid" );
        if( func_IsSpawnPointValid.ptr() != Py_None )
            try {
                return func_IsSpawnPointValid( pSpot ? pSpot->GetPyHandle() : boost::python::object(), pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsSpawnPointValid( pSpot, pPlayer );
            }
        else
            return this->CGameRules::IsSpawnPointValid( pSpot, pPlayer );
    }
    
    bool default_IsSpawnPointValid( ::CBaseEntity * pSpot, ::CBasePlayer * pPlayer ) {
        return CGameRules::IsSpawnPointValid( pSpot, pPlayer );
    }

    virtual bool IsValidTeam( char const * pTeamName ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, IsValidTeam )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, IsValidTeam )
        bp::override func_IsValidTeam = this->get_override( "IsValidTeam" );
        if( func_IsValidTeam.ptr() != Py_None )
            try {
                return func_IsValidTeam( pTeamName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::IsValidTeam( pTeamName );
            }
        else
            return this->CTeamplayRules::IsValidTeam( pTeamName );
    }
    
    bool default_IsValidTeam( char const * pTeamName ) {
        return CTeamplayRules::IsValidTeam( pTeamName );
    }

    virtual int ItemShouldRespawn( ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, ItemShouldRespawn )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, ItemShouldRespawn )
        bp::override func_ItemShouldRespawn = this->get_override( "ItemShouldRespawn" );
        if( func_ItemShouldRespawn.ptr() != Py_None )
            try {
                return func_ItemShouldRespawn( pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::ItemShouldRespawn( pItem );
            }
        else
            return this->CMultiplayRules::ItemShouldRespawn( pItem );
    }
    
    int default_ItemShouldRespawn( ::CItem * pItem ) {
        return CMultiplayRules::ItemShouldRespawn( pItem );
    }

    virtual void MarkAchievement( ::IRecipientFilter & filter, char const * pchAchievementName ) {
        PY_OVERRIDE_CHECK( CGameRules, MarkAchievement )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, MarkAchievement )
        bp::override func_MarkAchievement = this->get_override( "MarkAchievement" );
        if( func_MarkAchievement.ptr() != Py_None )
            try {
                func_MarkAchievement( boost::ref(filter), pchAchievementName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::MarkAchievement( filter, pchAchievementName );
            }
        else
            this->CGameRules::MarkAchievement( filter, pchAchievementName );
    }
    
    void default_MarkAchievement( ::IRecipientFilter & filter, char const * pchAchievementName ) {
        CGameRules::MarkAchievement( filter, pchAchievementName );
    }

    virtual char const * Name(  ) {
        PY_OVERRIDE_CHECK( CGameRules, Name )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, Name )
        bp::override func_Name = this->get_override( "Name" );
        if( func_Name.ptr() != Py_None )
            try {
                return func_Name(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::Name(  );
            }
        else
            return this->CGameRules::Name(  );
    }
    
    char const * default_Name(  ) {
        return CGameRules::Name( );
    }

    virtual int NumEntityClasses(  ) const  {
        PY_OVERRIDE_CHECK( CGameRules, NumEntityClasses )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, NumEntityClasses )
        bp::override func_NumEntityClasses = this->get_override( "NumEntityClasses" );
        if( func_NumEntityClasses.ptr() != Py_None )
            try {
                return func_NumEntityClasses(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::NumEntityClasses(  );
            }
        else
            return this->CGameRules::NumEntityClasses(  );
    }
    
    int default_NumEntityClasses(  ) const  {
        return CGameRules::NumEntityClasses( );
    }

    virtual int NumFactions(  ) const  {
        PY_OVERRIDE_CHECK( CGameRules, NumFactions )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, NumFactions )
        bp::override func_NumFactions = this->get_override( "NumFactions" );
        if( func_NumFactions.ptr() != Py_None )
            try {
                return func_NumFactions(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::NumFactions(  );
            }
        else
            return this->CGameRules::NumFactions(  );
    }
    
    int default_NumFactions(  ) const  {
        return CGameRules::NumFactions( );
    }

    virtual void OnBeginChangeLevel( char const * nextMapName, ::KeyValues * saveData ) {
        PY_OVERRIDE_CHECK( CGameRules, OnBeginChangeLevel )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, OnBeginChangeLevel )
        bp::override func_OnBeginChangeLevel = this->get_override( "OnBeginChangeLevel" );
        if( func_OnBeginChangeLevel.ptr() != Py_None )
            try {
                func_OnBeginChangeLevel( nextMapName, boost::python::ptr(saveData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnBeginChangeLevel( nextMapName, saveData );
            }
        else
            this->CGameRules::OnBeginChangeLevel( nextMapName, saveData );
    }
    
    void default_OnBeginChangeLevel( char const * nextMapName, ::KeyValues * saveData ) {
        CGameRules::OnBeginChangeLevel( nextMapName, saveData );
    }

    virtual void OnNavMeshLoad(  ) {
        PY_OVERRIDE_CHECK( CGameRules, OnNavMeshLoad )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, OnNavMeshLoad )
        bp::override func_OnNavMeshLoad = this->get_override( "OnNavMeshLoad" );
        if( func_OnNavMeshLoad.ptr() != Py_None )
            try {
                func_OnNavMeshLoad(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnNavMeshLoad(  );
            }
        else
            this->CGameRules::OnNavMeshLoad(  );
    }
    
    void default_OnNavMeshLoad(  ) {
        CGameRules::OnNavMeshLoad( );
    }

    virtual void OnSkillLevelChanged( int iNewLevel ) {
        PY_OVERRIDE_CHECK( CGameRules, OnSkillLevelChanged )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, OnSkillLevelChanged )
        bp::override func_OnSkillLevelChanged = this->get_override( "OnSkillLevelChanged" );
        if( func_OnSkillLevelChanged.ptr() != Py_None )
            try {
                func_OnSkillLevelChanged( iNewLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnSkillLevelChanged( iNewLevel );
            }
        else
            this->CGameRules::OnSkillLevelChanged( iNewLevel );
    }
    
    void default_OnSkillLevelChanged( int iNewLevel ) {
        CGameRules::OnSkillLevelChanged( iNewLevel );
    }

    virtual bool PlayFootstepSounds( ::CBasePlayer * pl ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, PlayFootstepSounds )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, PlayFootstepSounds )
        bp::override func_PlayFootstepSounds = this->get_override( "PlayFootstepSounds" );
        if( func_PlayFootstepSounds.ptr() != Py_None )
            try {
                return func_PlayFootstepSounds( pl ? pl->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::PlayFootstepSounds( pl );
            }
        else
            return this->CMultiplayRules::PlayFootstepSounds( pl );
    }
    
    bool default_PlayFootstepSounds( ::CBasePlayer * pl ) {
        return CMultiplayRules::PlayFootstepSounds( pl );
    }

    virtual bool PlayTextureSounds(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, PlayTextureSounds )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, PlayTextureSounds )
        bp::override func_PlayTextureSounds = this->get_override( "PlayTextureSounds" );
        if( func_PlayTextureSounds.ptr() != Py_None )
            try {
                return func_PlayTextureSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::PlayTextureSounds(  );
            }
        else
            return this->CMultiplayRules::PlayTextureSounds(  );
    }
    
    bool default_PlayTextureSounds(  ) {
        return CMultiplayRules::PlayTextureSounds( );
    }

    virtual bool PlayerCanHearChat( ::CBasePlayer * pListener, ::CBasePlayer * pSpeaker ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PlayerCanHearChat )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PlayerCanHearChat )
        bp::override func_PlayerCanHearChat = this->get_override( "PlayerCanHearChat" );
        if( func_PlayerCanHearChat.ptr() != Py_None )
            try {
                return func_PlayerCanHearChat( pListener ? pListener->GetPyHandle() : boost::python::object(), pSpeaker ? pSpeaker->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::PlayerCanHearChat( pListener, pSpeaker );
            }
        else
            return this->CTeamplayRules::PlayerCanHearChat( pListener, pSpeaker );
    }
    
    bool default_PlayerCanHearChat( ::CBasePlayer * pListener, ::CBasePlayer * pSpeaker ) {
        return CTeamplayRules::PlayerCanHearChat( pListener, pSpeaker );
    }

    virtual void PlayerGotAmmo( ::CBaseCombatCharacter * pPlayer, char * szName, int iCount ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, PlayerGotAmmo )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, PlayerGotAmmo )
        bp::override func_PlayerGotAmmo = this->get_override( "PlayerGotAmmo" );
        if( func_PlayerGotAmmo.ptr() != Py_None )
            try {
                func_PlayerGotAmmo( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), szName, iCount );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::PlayerGotAmmo( pPlayer, szName, iCount );
            }
        else
            this->CMultiplayRules::PlayerGotAmmo( pPlayer, szName, iCount );
    }
    
    void default_PlayerGotAmmo( ::CBaseCombatCharacter * pPlayer, char * szName, int iCount ) {
        CMultiplayRules::PlayerGotAmmo( pPlayer, szName, iCount );
    }

    virtual void PlayerGotItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, PlayerGotItem )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, PlayerGotItem )
        bp::override func_PlayerGotItem = this->get_override( "PlayerGotItem" );
        if( func_PlayerGotItem.ptr() != Py_None )
            try {
                func_PlayerGotItem( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::PlayerGotItem( pPlayer, pItem );
            }
        else
            this->CMultiplayRules::PlayerGotItem( pPlayer, pItem );
    }
    
    void default_PlayerGotItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        CMultiplayRules::PlayerGotItem( pPlayer, pItem );
    }

    virtual void PlayerKilled( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PlayerKilled )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PlayerKilled )
        bp::override func_PlayerKilled = this->get_override( "PlayerKilled" );
        if( func_PlayerKilled.ptr() != Py_None )
            try {
                func_PlayerKilled( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::PlayerKilled( pVictim, info );
            }
        else
            this->CTeamplayRules::PlayerKilled( pVictim, info );
    }
    
    void default_PlayerKilled( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        CTeamplayRules::PlayerKilled( pVictim, info );
    }

    virtual bool PlayerMayBlockPoint( ::CBasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PlayerMayBlockPoint )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PlayerMayBlockPoint )
        bp::override func_PlayerMayBlockPoint = this->get_override( "PlayerMayBlockPoint" );
        if( func_PlayerMayBlockPoint.ptr() != Py_None )
            try {
                return func_PlayerMayBlockPoint( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), iPointIndex, pszReason, iMaxReasonLength );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
            }
        else
            return this->CTeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }
    
    bool default_PlayerMayBlockPoint( ::CBasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        return CTeamplayRules::PlayerMayBlockPoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }

    virtual bool PlayerMayCapturePoint( ::CBasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PlayerMayCapturePoint )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PlayerMayCapturePoint )
        bp::override func_PlayerMayCapturePoint = this->get_override( "PlayerMayCapturePoint" );
        if( func_PlayerMayCapturePoint.ptr() != Py_None )
            try {
                return func_PlayerMayCapturePoint( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), iPointIndex, pszReason, iMaxReasonLength );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
            }
        else
            return this->CTeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }
    
    bool default_PlayerMayCapturePoint( ::CBasePlayer * pPlayer, int iPointIndex, char * pszReason=0, int iMaxReasonLength=0 ) {
        return CTeamplayRules::PlayerMayCapturePoint( pPlayer, iPointIndex, pszReason, iMaxReasonLength );
    }

    virtual int PlayerRelationship( ::CBaseEntity * pPlayer, ::CBaseEntity * pTarget ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PlayerRelationship )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PlayerRelationship )
        bp::override func_PlayerRelationship = this->get_override( "PlayerRelationship" );
        if( func_PlayerRelationship.ptr() != Py_None )
            try {
                return func_PlayerRelationship( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pTarget ? pTarget->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::PlayerRelationship( pPlayer, pTarget );
            }
        else
            return this->CTeamplayRules::PlayerRelationship( pPlayer, pTarget );
    }
    
    int default_PlayerRelationship( ::CBaseEntity * pPlayer, ::CBaseEntity * pTarget ) {
        return CTeamplayRules::PlayerRelationship( pPlayer, pTarget );
    }

    virtual void PlayerThink( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, PlayerThink )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, PlayerThink )
        bp::override func_PlayerThink = this->get_override( "PlayerThink" );
        if( func_PlayerThink.ptr() != Py_None )
            try {
                func_PlayerThink( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::PlayerThink( pPlayer );
            }
        else
            this->CMultiplayRules::PlayerThink( pPlayer );
    }
    
    void default_PlayerThink( ::CBasePlayer * pPlayer ) {
        CMultiplayRules::PlayerThink( pPlayer );
    }

    virtual bool PointsMayBeCaptured(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, PointsMayBeCaptured )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, PointsMayBeCaptured )
        bp::override func_PointsMayBeCaptured = this->get_override( "PointsMayBeCaptured" );
        if( func_PointsMayBeCaptured.ptr() != Py_None )
            try {
                return func_PointsMayBeCaptured(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::PointsMayBeCaptured(  );
            }
        else
            return this->CTeamplayRules::PointsMayBeCaptured(  );
    }
    
    bool default_PointsMayBeCaptured(  ) {
        return CTeamplayRules::PointsMayBeCaptured( );
    }

    virtual void RadiusDamage( ::CTakeDamageInfo const & info, ::Vector const & vecSrc, float flRadius, int iClassIgnore, ::CBaseEntity * pEntityIgnore ) {
        PY_OVERRIDE_CHECK( CGameRules, RadiusDamage )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, RadiusDamage )
        bp::override func_RadiusDamage = this->get_override( "RadiusDamage" );
        if( func_RadiusDamage.ptr() != Py_None )
            try {
                func_RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, pEntityIgnore ? pEntityIgnore->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::RadiusDamage( info, vecSrc, flRadius, iClassIgnore, pEntityIgnore );
            }
        else
            this->CGameRules::RadiusDamage( info, vecSrc, flRadius, iClassIgnore, pEntityIgnore );
    }
    
    void default_RadiusDamage( ::CTakeDamageInfo const & info, ::Vector const & vecSrc, float flRadius, int iClassIgnore, ::CBaseEntity * pEntityIgnore ) {
        CGameRules::RadiusDamage( info, vecSrc, flRadius, iClassIgnore, pEntityIgnore );
    }

    virtual void RefreshSkillData( bool forceUpdate ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, RefreshSkillData )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, RefreshSkillData )
        bp::override func_RefreshSkillData = this->get_override( "RefreshSkillData" );
        if( func_RefreshSkillData.ptr() != Py_None )
            try {
                func_RefreshSkillData( forceUpdate );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::RefreshSkillData( forceUpdate );
            }
        else
            this->CMultiplayRules::RefreshSkillData( forceUpdate );
    }
    
    void default_RefreshSkillData( bool forceUpdate ) {
        CMultiplayRules::RefreshSkillData( forceUpdate );
    }

    virtual void RegisterScriptFunctions(  ) {
        PY_OVERRIDE_CHECK( CGameRules, RegisterScriptFunctions )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, RegisterScriptFunctions )
        bp::override func_RegisterScriptFunctions = this->get_override( "RegisterScriptFunctions" );
        if( func_RegisterScriptFunctions.ptr() != Py_None )
            try {
                func_RegisterScriptFunctions(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::RegisterScriptFunctions(  );
            }
        else
            this->CGameRules::RegisterScriptFunctions(  );
    }
    
    void default_RegisterScriptFunctions(  ) {
        CGameRules::RegisterScriptFunctions( );
    }

    virtual void ResetMapCycleTimeStamp(  ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, ResetMapCycleTimeStamp )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, ResetMapCycleTimeStamp )
        bp::override func_ResetMapCycleTimeStamp = this->get_override( "ResetMapCycleTimeStamp" );
        if( func_ResetMapCycleTimeStamp.ptr() != Py_None )
            try {
                func_ResetMapCycleTimeStamp(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CMultiplayRules::ResetMapCycleTimeStamp(  );
            }
        else
            this->CMultiplayRules::ResetMapCycleTimeStamp(  );
    }
    
    void default_ResetMapCycleTimeStamp(  ) {
        CMultiplayRules::ResetMapCycleTimeStamp( );
    }

    virtual char const * SetDefaultPlayerTeam( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetDefaultPlayerTeam )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetDefaultPlayerTeam )
        bp::override func_SetDefaultPlayerTeam = this->get_override( "SetDefaultPlayerTeam" );
        if( func_SetDefaultPlayerTeam.ptr() != Py_None )
            try {
                return func_SetDefaultPlayerTeam( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::SetDefaultPlayerTeam( pPlayer );
            }
        else
            return this->CTeamplayRules::SetDefaultPlayerTeam( pPlayer );
    }
    
    char const * default_SetDefaultPlayerTeam( ::CBasePlayer * pPlayer ) {
        return CTeamplayRules::SetDefaultPlayerTeam( pPlayer );
    }

    virtual void SetLastCapPointChanged( int iIndex ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetLastCapPointChanged )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetLastCapPointChanged )
        bp::override func_SetLastCapPointChanged = this->get_override( "SetLastCapPointChanged" );
        if( func_SetLastCapPointChanged.ptr() != Py_None )
            try {
                func_SetLastCapPointChanged( iIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::SetLastCapPointChanged( iIndex );
            }
        else
            this->CTeamplayRules::SetLastCapPointChanged( iIndex );
    }
    
    void default_SetLastCapPointChanged( int iIndex ) {
        CTeamplayRules::SetLastCapPointChanged( iIndex );
    }

    virtual void SetScrambleTeams( bool bScramble ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetScrambleTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetScrambleTeams )
        bp::override func_SetScrambleTeams = this->get_override( "SetScrambleTeams" );
        if( func_SetScrambleTeams.ptr() != Py_None )
            try {
                func_SetScrambleTeams( bScramble );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::SetScrambleTeams( bScramble );
            }
        else
            this->CTeamplayRules::SetScrambleTeams( bScramble );
    }
    
    void default_SetScrambleTeams( bool bScramble ) {
        CTeamplayRules::SetScrambleTeams( bScramble );
    }

    virtual void SetSkillLevel( int iLevel ) {
        PY_OVERRIDE_CHECK( CGameRules, SetSkillLevel )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, SetSkillLevel )
        bp::override func_SetSkillLevel = this->get_override( "SetSkillLevel" );
        if( func_SetSkillLevel.ptr() != Py_None )
            try {
                func_SetSkillLevel( iLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::SetSkillLevel( iLevel );
            }
        else
            this->CGameRules::SetSkillLevel( iLevel );
    }
    
    void default_SetSkillLevel( int iLevel ) {
        CGameRules::SetSkillLevel( iLevel );
    }

    virtual void SetStalemate( int iReason, bool bForceMapReset=true, bool bSwitchTeams=false ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetStalemate )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetStalemate )
        bp::override func_SetStalemate = this->get_override( "SetStalemate" );
        if( func_SetStalemate.ptr() != Py_None )
            try {
                func_SetStalemate( iReason, bForceMapReset, bSwitchTeams );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::SetStalemate( iReason, bForceMapReset, bSwitchTeams );
            }
        else
            this->CTeamplayRules::SetStalemate( iReason, bForceMapReset, bSwitchTeams );
    }
    
    void default_SetStalemate( int iReason, bool bForceMapReset=true, bool bSwitchTeams=false ) {
        CTeamplayRules::SetStalemate( iReason, bForceMapReset, bSwitchTeams );
    }

    virtual void SetSwitchTeams( bool bSwitch ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetSwitchTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetSwitchTeams )
        bp::override func_SetSwitchTeams = this->get_override( "SetSwitchTeams" );
        if( func_SetSwitchTeams.ptr() != Py_None )
            try {
                func_SetSwitchTeams( bSwitch );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::SetSwitchTeams( bSwitch );
            }
        else
            this->CTeamplayRules::SetSwitchTeams( bSwitch );
    }
    
    void default_SetSwitchTeams( bool bSwitch ) {
        CTeamplayRules::SetSwitchTeams( bSwitch );
    }

    virtual void SetWinningTeam( int team, int iWinReason, bool bForceMapReset=true, bool bSwitchTeams=false, bool bDontAddScore=false ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, SetWinningTeam )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, SetWinningTeam )
        bp::override func_SetWinningTeam = this->get_override( "SetWinningTeam" );
        if( func_SetWinningTeam.ptr() != Py_None )
            try {
                func_SetWinningTeam( team, iWinReason, bForceMapReset, bSwitchTeams, bDontAddScore );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::SetWinningTeam( team, iWinReason, bForceMapReset, bSwitchTeams, bDontAddScore );
            }
        else
            this->CTeamplayRules::SetWinningTeam( team, iWinReason, bForceMapReset, bSwitchTeams, bDontAddScore );
    }
    
    void default_SetWinningTeam( int team, int iWinReason, bool bForceMapReset=true, bool bSwitchTeams=false, bool bDontAddScore=false ) {
        CTeamplayRules::SetWinningTeam( team, iWinReason, bForceMapReset, bSwitchTeams, bDontAddScore );
    }

    virtual bool ShouldAutoAim( ::CBasePlayer * pPlayer, ::edict_t * target ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, ShouldAutoAim )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, ShouldAutoAim )
        bp::override func_ShouldAutoAim = this->get_override( "ShouldAutoAim" );
        if( func_ShouldAutoAim.ptr() != Py_None )
            try {
                return func_ShouldAutoAim( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), boost::python::ptr(target) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::ShouldAutoAim( pPlayer, target );
            }
        else
            return this->CTeamplayRules::ShouldAutoAim( pPlayer, target );
    }
    
    bool default_ShouldAutoAim( ::CBasePlayer * pPlayer, ::edict_t * target ) {
        return CTeamplayRules::ShouldAutoAim( pPlayer, target );
    }

    virtual bool ShouldBurningPropsEmitLight(  ) {
        PY_OVERRIDE_CHECK( CGameRules, ShouldBurningPropsEmitLight )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, ShouldBurningPropsEmitLight )
        bp::override func_ShouldBurningPropsEmitLight = this->get_override( "ShouldBurningPropsEmitLight" );
        if( func_ShouldBurningPropsEmitLight.ptr() != Py_None )
            try {
                return func_ShouldBurningPropsEmitLight(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldBurningPropsEmitLight(  );
            }
        else
            return this->CGameRules::ShouldBurningPropsEmitLight(  );
    }
    
    bool default_ShouldBurningPropsEmitLight(  ) {
        return CGameRules::ShouldBurningPropsEmitLight( );
    }

    virtual bool ShouldScrambleTeams(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, ShouldScrambleTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, ShouldScrambleTeams )
        bp::override func_ShouldScrambleTeams = this->get_override( "ShouldScrambleTeams" );
        if( func_ShouldScrambleTeams.ptr() != Py_None )
            try {
                return func_ShouldScrambleTeams(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::ShouldScrambleTeams(  );
            }
        else
            return this->CTeamplayRules::ShouldScrambleTeams(  );
    }
    
    bool default_ShouldScrambleTeams(  ) {
        return CTeamplayRules::ShouldScrambleTeams( );
    }

    virtual bool ShouldSwitchTeams(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, ShouldSwitchTeams )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, ShouldSwitchTeams )
        bp::override func_ShouldSwitchTeams = this->get_override( "ShouldSwitchTeams" );
        if( func_ShouldSwitchTeams.ptr() != Py_None )
            try {
                return func_ShouldSwitchTeams(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::ShouldSwitchTeams(  );
            }
        else
            return this->CTeamplayRules::ShouldSwitchTeams(  );
    }
    
    bool default_ShouldSwitchTeams(  ) {
        return CTeamplayRules::ShouldSwitchTeams( );
    }

    virtual bool ShouldTimeoutClient( int nUserID, float flTimeSinceLastReceived ) {
        PY_OVERRIDE_CHECK( CGameRules, ShouldTimeoutClient )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, ShouldTimeoutClient )
        bp::override func_ShouldTimeoutClient = this->get_override( "ShouldTimeoutClient" );
        if( func_ShouldTimeoutClient.ptr() != Py_None )
            try {
                return func_ShouldTimeoutClient( nUserID, flTimeSinceLastReceived );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldTimeoutClient( nUserID, flTimeSinceLastReceived );
            }
        else
            return this->CGameRules::ShouldTimeoutClient( nUserID, flTimeSinceLastReceived );
    }
    
    bool default_ShouldTimeoutClient( int nUserID, float flTimeSinceLastReceived ) {
        return CGameRules::ShouldTimeoutClient( nUserID, flTimeSinceLastReceived );
    }

    virtual bool ShouldUseRobustRadiusDamage( ::CBaseEntity * pEntity ) {
        PY_OVERRIDE_CHECK( CGameRules, ShouldUseRobustRadiusDamage )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, ShouldUseRobustRadiusDamage )
        bp::override func_ShouldUseRobustRadiusDamage = this->get_override( "ShouldUseRobustRadiusDamage" );
        if( func_ShouldUseRobustRadiusDamage.ptr() != Py_None )
            try {
                return func_ShouldUseRobustRadiusDamage( pEntity ? pEntity->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldUseRobustRadiusDamage( pEntity );
            }
        else
            return this->CGameRules::ShouldUseRobustRadiusDamage( pEntity );
    }
    
    bool default_ShouldUseRobustRadiusDamage( ::CBaseEntity * pEntity ) {
        return CGameRules::ShouldUseRobustRadiusDamage( pEntity );
    }

    virtual bool SwitchToNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, SwitchToNextBestWeapon )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, SwitchToNextBestWeapon )
        bp::override func_SwitchToNextBestWeapon = this->get_override( "SwitchToNextBestWeapon" );
        if( func_SwitchToNextBestWeapon.ptr() != Py_None )
            try {
                return func_SwitchToNextBestWeapon( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), pCurrentWeapon ? pCurrentWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
            }
        else
            return this->CMultiplayRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
    }
    
    bool default_SwitchToNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        return CMultiplayRules::SwitchToNextBestWeapon( pPlayer, pCurrentWeapon );
    }

    virtual bool TeamMayCapturePoint( int iTeam, int iPointIndex ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, TeamMayCapturePoint )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, TeamMayCapturePoint )
        bp::override func_TeamMayCapturePoint = this->get_override( "TeamMayCapturePoint" );
        if( func_TeamMayCapturePoint.ptr() != Py_None )
            try {
                return func_TeamMayCapturePoint( iTeam, iPointIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
            }
        else
            return this->CTeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
    }
    
    bool default_TeamMayCapturePoint( int iTeam, int iPointIndex ) {
        return CTeamplayRules::TeamMayCapturePoint( iTeam, iPointIndex );
    }

    virtual void Think(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, Think )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, Think )
        bp::override func_Think = this->get_override( "Think" );
        if( func_Think.ptr() != Py_None )
            try {
                func_Think(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CTeamplayRules::Think(  );
            }
        else
            this->CTeamplayRules::Think(  );
    }
    
    void default_Think(  ) {
        CTeamplayRules::Think( );
    }

    virtual bool TimerMayExpire(  ) {
        PY_OVERRIDE_CHECK( CTeamplayRules, TimerMayExpire )
        PY_OVERRIDE_LOG( _gamerules, CTeamplayRules, TimerMayExpire )
        bp::override func_TimerMayExpire = this->get_override( "TimerMayExpire" );
        if( func_TimerMayExpire.ptr() != Py_None )
            try {
                return func_TimerMayExpire(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CTeamplayRules::TimerMayExpire(  );
            }
        else
            return this->CTeamplayRules::TimerMayExpire(  );
    }
    
    bool default_TimerMayExpire(  ) {
        return CTeamplayRules::TimerMayExpire( );
    }

    virtual void UpdateClientData( ::CBasePlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CGameRules, UpdateClientData )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, UpdateClientData )
        bp::override func_UpdateClientData = this->get_override( "UpdateClientData" );
        if( func_UpdateClientData.ptr() != Py_None )
            try {
                func_UpdateClientData( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::UpdateClientData( pPlayer );
            }
        else
            this->CGameRules::UpdateClientData( pPlayer );
    }
    
    void default_UpdateClientData( ::CBasePlayer * pPlayer ) {
        CGameRules::UpdateClientData( pPlayer );
    }

    virtual void UpdateGameplayStatsFromSteam(  ) {
        PY_OVERRIDE_CHECK( CGameRules, UpdateGameplayStatsFromSteam )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, UpdateGameplayStatsFromSteam )
        bp::override func_UpdateGameplayStatsFromSteam = this->get_override( "UpdateGameplayStatsFromSteam" );
        if( func_UpdateGameplayStatsFromSteam.ptr() != Py_None )
            try {
                func_UpdateGameplayStatsFromSteam(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::UpdateGameplayStatsFromSteam(  );
            }
        else
            this->CGameRules::UpdateGameplayStatsFromSteam(  );
    }
    
    void default_UpdateGameplayStatsFromSteam(  ) {
        CGameRules::UpdateGameplayStatsFromSteam( );
    }

    virtual ::QAngle VecItemRespawnAngles( ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, VecItemRespawnAngles )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, VecItemRespawnAngles )
        bp::override func_VecItemRespawnAngles = this->get_override( "VecItemRespawnAngles" );
        if( func_VecItemRespawnAngles.ptr() != Py_None )
            try {
                return func_VecItemRespawnAngles( pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::VecItemRespawnAngles( pItem );
            }
        else
            return this->CMultiplayRules::VecItemRespawnAngles( pItem );
    }
    
    ::QAngle default_VecItemRespawnAngles( ::CItem * pItem ) {
        return CMultiplayRules::VecItemRespawnAngles( pItem );
    }

    virtual ::Vector VecItemRespawnSpot( ::CItem * pItem ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, VecItemRespawnSpot )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, VecItemRespawnSpot )
        bp::override func_VecItemRespawnSpot = this->get_override( "VecItemRespawnSpot" );
        if( func_VecItemRespawnSpot.ptr() != Py_None )
            try {
                return func_VecItemRespawnSpot( pItem ? pItem->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::VecItemRespawnSpot( pItem );
            }
        else
            return this->CMultiplayRules::VecItemRespawnSpot( pItem );
    }
    
    ::Vector default_VecItemRespawnSpot( ::CItem * pItem ) {
        return CMultiplayRules::VecItemRespawnSpot( pItem );
    }

    virtual ::Vector VecWeaponRespawnSpot( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, VecWeaponRespawnSpot )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, VecWeaponRespawnSpot )
        bp::override func_VecWeaponRespawnSpot = this->get_override( "VecWeaponRespawnSpot" );
        if( func_VecWeaponRespawnSpot.ptr() != Py_None )
            try {
                return func_VecWeaponRespawnSpot( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::VecWeaponRespawnSpot( pWeapon );
            }
        else
            return this->CMultiplayRules::VecWeaponRespawnSpot( pWeapon );
    }
    
    ::Vector default_VecWeaponRespawnSpot( ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::VecWeaponRespawnSpot( pWeapon );
    }

    virtual int WeaponShouldRespawn( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CMultiplayRules, WeaponShouldRespawn )
        PY_OVERRIDE_LOG( _gamerules, CMultiplayRules, WeaponShouldRespawn )
        bp::override func_WeaponShouldRespawn = this->get_override( "WeaponShouldRespawn" );
        if( func_WeaponShouldRespawn.ptr() != Py_None )
            try {
                return func_WeaponShouldRespawn( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CMultiplayRules::WeaponShouldRespawn( pWeapon );
            }
        else
            return this->CMultiplayRules::WeaponShouldRespawn( pWeapon );
    }
    
    int default_WeaponShouldRespawn( ::CBaseCombatWeapon * pWeapon ) {
        return CMultiplayRules::WeaponShouldRespawn( pWeapon );
    }

    virtual float WeaponTraceEntity( ::CBaseEntity * pEntity, ::Vector const & vecStart, ::Vector const & vecEnd, unsigned int mask, ::trace_t * ptr ) {
        PY_OVERRIDE_CHECK( CGameRules, WeaponTraceEntity )
        PY_OVERRIDE_LOG( _gamerules, CGameRules, WeaponTraceEntity )
        bp::override func_WeaponTraceEntity = this->get_override( "WeaponTraceEntity" );
        if( func_WeaponTraceEntity.ptr() != Py_None )
            try {
                return func_WeaponTraceEntity( pEntity ? pEntity->GetPyHandle() : boost::python::object(), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::WeaponTraceEntity( pEntity, vecStart, vecEnd, mask, ptr );
            }
        else
            return this->CGameRules::WeaponTraceEntity( pEntity, vecStart, vecEnd, mask, ptr );
    }
    
    float default_WeaponTraceEntity( ::CBaseEntity * pEntity, ::Vector const & vecStart, ::Vector const & vecEnd, unsigned int mask, ::trace_t * ptr ) {
        return CGameRules::WeaponTraceEntity( pEntity, vecStart, vecEnd, mask, ptr );
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

void register_CHL2WarsGameRules_class(){

    { //::CHL2WarsGameRules
        typedef bp::class_< CHL2WarsGameRules_wrapper, bp::bases< CTeamplayRules >, boost::noncopyable > CHL2WarsGameRules_exposer_t;
        CHL2WarsGameRules_exposer_t CHL2WarsGameRules_exposer = CHL2WarsGameRules_exposer_t( "CHL2WarsGameRules", bp::no_init );
        bp::scope CHL2WarsGameRules_scope( CHL2WarsGameRules_exposer );
        CHL2WarsGameRules_exposer.def( bp::init< >() );
        { //::CHL2WarsGameRules::ClientActive
        
            typedef void ( ::CHL2WarsGameRules::*ClientActive_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ClientActive_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientActive"
                , ClientActive_function_type(&::CHL2WarsGameRules::ClientActive)
                , default_ClientActive_function_type(&CHL2WarsGameRules_wrapper::default_ClientActive)
                , ( bp::arg("client") ) );
        
        }
        { //::CHL2WarsGameRules::ClientCommand
        
            typedef bool ( ::CHL2WarsGameRules::*ClientCommand_function_type )( ::CBaseEntity *,::CCommand const & ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ClientCommand_function_type )( ::CBaseEntity *,::CCommand const & ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type(&::CHL2WarsGameRules::ClientCommand)
                , default_ClientCommand_function_type(&CHL2WarsGameRules_wrapper::default_ClientCommand)
                , ( bp::arg("edict"), bp::arg("args") ) );
        
        }
        { //::CHL2WarsGameRules::CreateStandardEntities
        
            typedef void ( ::CHL2WarsGameRules::*CreateStandardEntities_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_CreateStandardEntities_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CreateStandardEntities"
                , CreateStandardEntities_function_type(&::CHL2WarsGameRules::CreateStandardEntities)
                , default_CreateStandardEntities_function_type(&CHL2WarsGameRules_wrapper::default_CreateStandardEntities) );
        
        }
        { //::CHL2WarsGameRules::GetChatFormat
        
            typedef char const * ( ::CHL2WarsGameRules::*GetChatFormat_function_type )( bool,::CBasePlayer * ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetChatFormat_function_type )( bool,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetChatFormat"
                , GetChatFormat_function_type(&::CHL2WarsGameRules::GetChatFormat)
                , default_GetChatFormat_function_type(&CHL2WarsGameRules_wrapper::default_GetChatFormat)
                , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) );
        
        }
        { //::CHL2WarsGameRules::GetChatPrefix
        
            typedef char const * ( ::CHL2WarsGameRules::*GetChatPrefix_function_type )( bool,::CBasePlayer * ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetChatPrefix_function_type )( bool,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetChatPrefix"
                , GetChatPrefix_function_type(&::CHL2WarsGameRules::GetChatPrefix)
                , default_GetChatPrefix_function_type(&CHL2WarsGameRules_wrapper::default_GetChatPrefix)
                , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) );
        
        }
        { //::CHL2WarsGameRules::GetGameDescription
        
            typedef char const * ( ::CHL2WarsGameRules::*GetGameDescription_function_type )(  ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetGameDescription_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetGameDescription"
                , GetGameDescription_function_type(&::CHL2WarsGameRules::GetGameDescription)
                , default_GetGameDescription_function_type(&CHL2WarsGameRules_wrapper::default_GetGameDescription) );
        
        }
        { //::CHL2WarsGameRules::GetMapElapsedTime
        
            typedef float ( ::CHL2WarsGameRules::*GetMapElapsedTime_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetMapElapsedTime"
                , GetMapElapsedTime_function_type( &::CHL2WarsGameRules::GetMapElapsedTime ) );
        
        }
        { //::CHL2WarsGameRules::GetNextLevelName
        
            typedef ::boost::python::api::object ( ::CHL2WarsGameRules::*GetNextLevelName_function_type )( bool ) ;
            typedef ::boost::python::api::object ( CHL2WarsGameRules_wrapper::*default_GetNextLevelName_function_type )( bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetNextLevelName"
                , GetNextLevelName_function_type(&::CHL2WarsGameRules::GetNextLevelName)
                , default_GetNextLevelName_function_type(&CHL2WarsGameRules_wrapper::default_GetNextLevelName)
                , ( bp::arg("bRandom")=(bool)(false) ) );
        
        }
        { //::CHL2WarsGameRules::GetPlayerClassname
        
            typedef char const * ( ::CHL2WarsGameRules::*GetPlayerClassname_function_type )(  ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetPlayerClassname_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetPlayerClassname"
                , GetPlayerClassname_function_type(&::CHL2WarsGameRules::GetPlayerClassname)
                , default_GetPlayerClassname_function_type(&CHL2WarsGameRules_wrapper::default_GetPlayerClassname) );
        
        }
        { //::CHL2WarsGameRules::InitGamerules
        
            typedef void ( ::CHL2WarsGameRules::*InitGamerules_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_InitGamerules_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "InitGamerules"
                , InitGamerules_function_type(&::CHL2WarsGameRules::InitGamerules)
                , default_InitGamerules_function_type(&CHL2WarsGameRules_wrapper::default_InitGamerules) );
        
        }
        { //::CHL2WarsGameRules::InitTeams
        
            typedef void ( ::CHL2WarsGameRules::*InitTeams_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "InitTeams"
                , InitTeams_function_type( &::CHL2WarsGameRules::InitTeams ) );
        
        }
        { //::CHL2WarsGameRules::IsTeamplay
        
            typedef bool ( ::CHL2WarsGameRules::*IsTeamplay_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsTeamplay_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsTeamplay"
                , IsTeamplay_function_type(&::CHL2WarsGameRules::IsTeamplay)
                , default_IsTeamplay_function_type(&CHL2WarsGameRules_wrapper::default_IsTeamplay) );
        
        }
        { //::CHL2WarsGameRules::LevelShutdown
        
            typedef void ( ::CHL2WarsGameRules::*LevelShutdown_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_LevelShutdown_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "LevelShutdown"
                , LevelShutdown_function_type(&::CHL2WarsGameRules::LevelShutdown)
                , default_LevelShutdown_function_type(&CHL2WarsGameRules_wrapper::default_LevelShutdown) );
        
        }
        { //::CHL2WarsGameRules::OnServerHibernating
        
            typedef void ( ::CHL2WarsGameRules::*OnServerHibernating_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_OnServerHibernating_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "OnServerHibernating"
                , OnServerHibernating_function_type(&::CHL2WarsGameRules::OnServerHibernating)
                , default_OnServerHibernating_function_type(&CHL2WarsGameRules_wrapper::default_OnServerHibernating) );
        
        }
        { //::CHL2WarsGameRules::PlayerChangedOwnerNumber
        
            typedef void ( ::CHL2WarsGameRules::*PlayerChangedOwnerNumber_function_type )( ::CBasePlayer *,int,int ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerChangedOwnerNumber_function_type )( ::CBasePlayer *,int,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerChangedOwnerNumber"
                , PlayerChangedOwnerNumber_function_type(&::CHL2WarsGameRules::PlayerChangedOwnerNumber)
                , default_PlayerChangedOwnerNumber_function_type(&CHL2WarsGameRules_wrapper::default_PlayerChangedOwnerNumber)
                , ( bp::arg("player"), bp::arg("oldownernumber"), bp::arg("newownernumber") ) );
        
        }
        { //::CHL2WarsGameRules::PlayerSpawn
        
            typedef void ( ::CHL2WarsGameRules::*PlayerSpawn_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerSpawn_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerSpawn"
                , PlayerSpawn_function_type(&::CHL2WarsGameRules::PlayerSpawn)
                , default_PlayerSpawn_function_type(&CHL2WarsGameRules_wrapper::default_PlayerSpawn)
                , ( bp::arg("player") ) );
        
        }
        { //::CHL2WarsGameRules::Precache
        
            typedef void ( ::CHL2WarsGameRules::*Precache_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_Precache_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "Precache"
                , Precache_function_type(&::CHL2WarsGameRules::Precache)
                , default_Precache_function_type(&CHL2WarsGameRules_wrapper::default_Precache) );
        
        }
        { //::CHL2WarsGameRules::PyClientConnected
        
            typedef bool ( ::CHL2WarsGameRules::*ClientConnected_function_type )( int,char const *,char const *,char *,int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ClientConnected_function_type )( int,char const *,char const *,char *,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientConnected"
                , ClientConnected_function_type(&::CHL2WarsGameRules::PyClientConnected)
                , default_ClientConnected_function_type(&CHL2WarsGameRules_wrapper::default_ClientConnected)
                , ( bp::arg("clientindex"), bp::arg("name"), bp::arg("address"), bp::arg("reject"), bp::arg("maxrejectlen") ) );
        
        }
        { //::CHL2WarsGameRules::PyClientDisconnected
        
            typedef void ( ::CHL2WarsGameRules::*ClientDisconnected_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ClientDisconnected_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientDisconnected"
                , ClientDisconnected_function_type(&::CHL2WarsGameRules::PyClientDisconnected)
                , default_ClientDisconnected_function_type(&CHL2WarsGameRules_wrapper::default_ClientDisconnected)
                , ( bp::arg("client") ) );
        
        }
        { //::CHL2WarsGameRules::SelectDefaultTeam
        
            typedef int ( ::CHL2WarsGameRules::*SelectDefaultTeam_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SelectDefaultTeam"
                , SelectDefaultTeam_function_type( &::CHL2WarsGameRules::SelectDefaultTeam ) );
        
        }
        { //::CHL2WarsGameRules::ShouldCollide
        
            typedef bool ( ::CHL2WarsGameRules::*ShouldCollide_function_type )( int,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldCollide"
                , ShouldCollide_function_type( &::CHL2WarsGameRules::ShouldCollide )
                , ( bp::arg("collisionGroup0"), bp::arg("collisionGroup1") ) );
        
        }
        { //::CHL2WarsGameRules::ShutdownGamerules
        
            typedef void ( ::CHL2WarsGameRules::*ShutdownGamerules_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ShutdownGamerules_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShutdownGamerules"
                , ShutdownGamerules_function_type(&::CHL2WarsGameRules::ShutdownGamerules)
                , default_ShutdownGamerules_function_type(&CHL2WarsGameRules_wrapper::default_ShutdownGamerules) );
        
        }
        { //::CHL2WarsGameRules::UpdateVoiceManager
        
            typedef void ( ::CHL2WarsGameRules::*UpdateVoiceManager_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "UpdateVoiceManager"
                , UpdateVoiceManager_function_type( &::CHL2WarsGameRules::UpdateVoiceManager ) );
        
        }
        { //::CGameRules::AIClassText
        
            typedef char const * ( ::CGameRules::*AIClassText_function_type )( int ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_AIClassText_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AIClassText"
                , AIClassText_function_type(&::CGameRules::AIClassText)
                , default_AIClassText_function_type(&CHL2WarsGameRules_wrapper::default_AIClassText)
                , ( bp::arg("classType") ) );
        
        }
        { //::CGameRules::AdjustPlayerDamageInflicted
        
            typedef float ( ::CGameRules::*AdjustPlayerDamageInflicted_function_type )( float ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_AdjustPlayerDamageInflicted_function_type )( float ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AdjustPlayerDamageInflicted"
                , AdjustPlayerDamageInflicted_function_type(&::CGameRules::AdjustPlayerDamageInflicted)
                , default_AdjustPlayerDamageInflicted_function_type(&CHL2WarsGameRules_wrapper::default_AdjustPlayerDamageInflicted)
                , ( bp::arg("damage") ) );
        
        }
        { //::CGameRules::AdjustPlayerDamageTaken
        
            typedef void ( ::CGameRules::*AdjustPlayerDamageTaken_function_type )( ::CTakeDamageInfo * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_AdjustPlayerDamageTaken_function_type )( ::CTakeDamageInfo * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AdjustPlayerDamageTaken"
                , AdjustPlayerDamageTaken_function_type(&::CGameRules::AdjustPlayerDamageTaken)
                , default_AdjustPlayerDamageTaken_function_type(&CHL2WarsGameRules_wrapper::default_AdjustPlayerDamageTaken)
                , ( bp::arg("pInfo") ) );
        
        }
        { //::CMultiplayRules::AllowAutoTargetCrosshair
        
            typedef bool ( ::CMultiplayRules::*AllowAutoTargetCrosshair_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_AllowAutoTargetCrosshair_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AllowAutoTargetCrosshair"
                , AllowAutoTargetCrosshair_function_type(&::CMultiplayRules::AllowAutoTargetCrosshair)
                , default_AllowAutoTargetCrosshair_function_type(&CHL2WarsGameRules_wrapper::default_AllowAutoTargetCrosshair) );
        
        }
        { //::CMultiplayRules::AllowDamage
        
            typedef bool ( ::CMultiplayRules::*AllowDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_AllowDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AllowDamage"
                , AllowDamage_function_type(&::CMultiplayRules::AllowDamage)
                , default_AllowDamage_function_type(&CHL2WarsGameRules_wrapper::default_AllowDamage)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CGameRules::AllowSoundscapes
        
            typedef bool ( ::CGameRules::*AllowSoundscapes_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_AllowSoundscapes_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "AllowSoundscapes"
                , AllowSoundscapes_function_type(&::CGameRules::AllowSoundscapes)
                , default_AllowSoundscapes_function_type(&CHL2WarsGameRules_wrapper::default_AllowSoundscapes) );
        
        }
        { //::CGameRules::CanEntityBeUsePushed
        
            typedef bool ( ::CGameRules::*CanEntityBeUsePushed_function_type )( ::CBaseEntity * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_CanEntityBeUsePushed_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CanEntityBeUsePushed"
                , CanEntityBeUsePushed_function_type(&::CGameRules::CanEntityBeUsePushed)
                , default_CanEntityBeUsePushed_function_type(&CHL2WarsGameRules_wrapper::default_CanEntityBeUsePushed)
                , ( bp::arg("pEnt") ) );
        
        }
        { //::CGameRules::CanHaveAmmo
        
            typedef bool ( ::CGameRules::*CanHaveAmmo_function_type )( ::CBaseCombatCharacter *,int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_CanHaveAmmo_function_type )( ::CBaseCombatCharacter *,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CanHaveAmmo"
                , CanHaveAmmo_function_type(&::CGameRules::CanHaveAmmo)
                , default_CanHaveAmmo_function_type(&CHL2WarsGameRules_wrapper::default_CanHaveAmmo)
                , ( bp::arg("pPlayer"), bp::arg("iAmmoIndex") ) );
        
        }
        { //::CGameRules::CanHaveAmmo
        
            typedef bool ( ::CGameRules::*CanHaveAmmo_function_type )( ::CBaseCombatCharacter *,char const * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_CanHaveAmmo_function_type )( ::CBaseCombatCharacter *,char const * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CanHaveAmmo"
                , CanHaveAmmo_function_type(&::CGameRules::CanHaveAmmo)
                , default_CanHaveAmmo_function_type(&CHL2WarsGameRules_wrapper::default_CanHaveAmmo)
                , ( bp::arg("pPlayer"), bp::arg("szName") ) );
        
        }
        { //::CMultiplayRules::CanHaveItem
        
            typedef bool ( ::CMultiplayRules::*CanHaveItem_function_type )( ::CBasePlayer *,::CItem * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_CanHaveItem_function_type )( ::CBasePlayer *,::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CanHaveItem"
                , CanHaveItem_function_type(&::CMultiplayRules::CanHaveItem)
                , default_CanHaveItem_function_type(&CHL2WarsGameRules_wrapper::default_CanHaveItem)
                , ( bp::arg("pPlayer"), bp::arg("pItem") ) );
        
        }
        { //::CMultiplayRules::CanHavePlayerItem
        
            typedef bool ( ::CMultiplayRules::*CanHavePlayerItem_function_type )( ::CBasePlayer *,::CBaseCombatWeapon * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_CanHavePlayerItem_function_type )( ::CBasePlayer *,::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CanHavePlayerItem"
                , CanHavePlayerItem_function_type(&::CMultiplayRules::CanHavePlayerItem)
                , default_CanHavePlayerItem_function_type(&CHL2WarsGameRules_wrapper::default_CanHavePlayerItem)
                , ( bp::arg("pPlayer"), bp::arg("pWeapon") ) );
        
        }
        { //::CTeamplayRules::ChangePlayerTeam
        
            typedef void ( ::CTeamplayRules::*ChangePlayerTeam_function_type )( ::CBasePlayer *,char const *,bool,bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ChangePlayerTeam_function_type )( ::CBasePlayer *,char const *,bool,bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ChangePlayerTeam"
                , ChangePlayerTeam_function_type(&::CTeamplayRules::ChangePlayerTeam)
                , default_ChangePlayerTeam_function_type(&CHL2WarsGameRules_wrapper::default_ChangePlayerTeam)
                , ( bp::arg("pPlayer"), bp::arg("pTeamName"), bp::arg("bKill"), bp::arg("bGib") ) );
        
        }
        { //::CGameRules::CheckChatText
        
            typedef void ( ::CGameRules::*CheckChatText_function_type )( ::CBasePlayer *,char * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_CheckChatText_function_type )( ::CBasePlayer *,char * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CheckChatText"
                , CheckChatText_function_type(&::CGameRules::CheckChatText)
                , default_CheckChatText_function_type(&CHL2WarsGameRules_wrapper::default_CheckChatText)
                , ( bp::arg("pPlayer"), bp::arg("pText") ) );
        
        }
        { //::CGameRules::ClientCommandKeyValues
        
            typedef void ( ::CGameRules::*ClientCommandKeyValues_function_type )( ::edict_t *,::KeyValues * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ClientCommandKeyValues_function_type )( ::edict_t *,::KeyValues * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientCommandKeyValues"
                , ClientCommandKeyValues_function_type(&::CGameRules::ClientCommandKeyValues)
                , default_ClientCommandKeyValues_function_type(&CHL2WarsGameRules_wrapper::default_ClientCommandKeyValues)
                , ( bp::arg("pEntity"), bp::arg("pKeyValues") ) );
        
        }
        { //::CTeamplayRules::ClientSettingsChanged
        
            typedef void ( ::CTeamplayRules::*ClientSettingsChanged_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ClientSettingsChanged_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ClientSettingsChanged"
                , ClientSettingsChanged_function_type(&::CTeamplayRules::ClientSettingsChanged)
                , default_ClientSettingsChanged_function_type(&CHL2WarsGameRules_wrapper::default_ClientSettingsChanged)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CGameRules::CreateCustomNetworkStringTables
        
            typedef void ( ::CGameRules::*CreateCustomNetworkStringTables_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_CreateCustomNetworkStringTables_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "CreateCustomNetworkStringTables"
                , CreateCustomNetworkStringTables_function_type(&::CGameRules::CreateCustomNetworkStringTables)
                , default_CreateCustomNetworkStringTables_function_type(&CHL2WarsGameRules_wrapper::default_CreateCustomNetworkStringTables) );
        
        }
        { //::CMultiplayRules::DeadPlayerAmmo
        
            typedef int ( ::CMultiplayRules::*DeadPlayerAmmo_function_type )( ::CBasePlayer * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_DeadPlayerAmmo_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "DeadPlayerAmmo"
                , DeadPlayerAmmo_function_type(&::CMultiplayRules::DeadPlayerAmmo)
                , default_DeadPlayerAmmo_function_type(&CHL2WarsGameRules_wrapper::default_DeadPlayerAmmo)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CMultiplayRules::DeadPlayerWeapons
        
            typedef int ( ::CMultiplayRules::*DeadPlayerWeapons_function_type )( ::CBasePlayer * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_DeadPlayerWeapons_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "DeadPlayerWeapons"
                , DeadPlayerWeapons_function_type(&::CMultiplayRules::DeadPlayerWeapons)
                , default_DeadPlayerWeapons_function_type(&CHL2WarsGameRules_wrapper::default_DeadPlayerWeapons)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::DeathNotice
        
            typedef void ( ::CTeamplayRules::*DeathNotice_function_type )( ::CBasePlayer *,::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_DeathNotice_function_type )( ::CBasePlayer *,::CTakeDamageInfo const & ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CTeamplayRules::DeathNotice)
                , default_DeathNotice_function_type(&CHL2WarsGameRules_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CGameRules::DefaultFOV
        
            typedef int ( ::CGameRules::*DefaultFOV_function_type )(  ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_DefaultFOV_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "DefaultFOV"
                , DefaultFOV_function_type(&::CGameRules::DefaultFOV)
                , default_DefaultFOV_function_type(&CHL2WarsGameRules_wrapper::default_DefaultFOV) );
        
        }
        { //::CMultiplayRules::EndMultiplayerGame
        
            typedef void ( ::CMultiplayRules::*EndMultiplayerGame_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_EndMultiplayerGame_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "EndMultiplayerGame"
                , EndMultiplayerGame_function_type(&::CMultiplayRules::EndMultiplayerGame)
                , default_EndMultiplayerGame_function_type(&CHL2WarsGameRules_wrapper::default_EndMultiplayerGame) );
        
        }
        { //::CMultiplayRules::FAllowNPCs
        
            typedef bool ( ::CMultiplayRules::*FAllowNPCs_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_FAllowNPCs_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FAllowNPCs"
                , FAllowNPCs_function_type(&::CMultiplayRules::FAllowNPCs)
                , default_FAllowNPCs_function_type(&CHL2WarsGameRules_wrapper::default_FAllowNPCs) );
        
        }
        { //::CMultiplayRules::FPlayerCanRespawn
        
            typedef bool ( ::CMultiplayRules::*FPlayerCanRespawn_function_type )( ::CBasePlayer * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_FPlayerCanRespawn_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FPlayerCanRespawn"
                , FPlayerCanRespawn_function_type(&::CMultiplayRules::FPlayerCanRespawn)
                , default_FPlayerCanRespawn_function_type(&CHL2WarsGameRules_wrapper::default_FPlayerCanRespawn)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::FPlayerCanTakeDamage
        
            typedef bool ( ::CTeamplayRules::*FPlayerCanTakeDamage_function_type )( ::CBasePlayer *,::CBaseEntity * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_FPlayerCanTakeDamage_function_type )( ::CBasePlayer *,::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FPlayerCanTakeDamage"
                , FPlayerCanTakeDamage_function_type(&::CTeamplayRules::FPlayerCanTakeDamage)
                , default_FPlayerCanTakeDamage_function_type(&CHL2WarsGameRules_wrapper::default_FPlayerCanTakeDamage)
                , ( bp::arg("pPlayer"), bp::arg("pAttacker") ) );
        
        }
        { //::CMultiplayRules::FShouldSwitchWeapon
        
            typedef bool ( ::CMultiplayRules::*FShouldSwitchWeapon_function_type )( ::CBasePlayer *,::CBaseCombatWeapon * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_FShouldSwitchWeapon_function_type )( ::CBasePlayer *,::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FShouldSwitchWeapon"
                , FShouldSwitchWeapon_function_type(&::CMultiplayRules::FShouldSwitchWeapon)
                , default_FShouldSwitchWeapon_function_type(&CHL2WarsGameRules_wrapper::default_FShouldSwitchWeapon)
                , ( bp::arg("pPlayer"), bp::arg("pWeapon") ) );
        
        }
        { //::CMultiplayRules::FlHEVChargerRechargeTime
        
            typedef float ( ::CMultiplayRules::*FlHEVChargerRechargeTime_function_type )(  ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlHEVChargerRechargeTime_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlHEVChargerRechargeTime"
                , FlHEVChargerRechargeTime_function_type(&::CMultiplayRules::FlHEVChargerRechargeTime)
                , default_FlHEVChargerRechargeTime_function_type(&CHL2WarsGameRules_wrapper::default_FlHEVChargerRechargeTime) );
        
        }
        { //::CMultiplayRules::FlHealthChargerRechargeTime
        
            typedef float ( ::CMultiplayRules::*FlHealthChargerRechargeTime_function_type )(  ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlHealthChargerRechargeTime_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlHealthChargerRechargeTime"
                , FlHealthChargerRechargeTime_function_type(&::CMultiplayRules::FlHealthChargerRechargeTime)
                , default_FlHealthChargerRechargeTime_function_type(&CHL2WarsGameRules_wrapper::default_FlHealthChargerRechargeTime) );
        
        }
        { //::CMultiplayRules::FlItemRespawnTime
        
            typedef float ( ::CMultiplayRules::*FlItemRespawnTime_function_type )( ::CItem * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlItemRespawnTime_function_type )( ::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlItemRespawnTime"
                , FlItemRespawnTime_function_type(&::CMultiplayRules::FlItemRespawnTime)
                , default_FlItemRespawnTime_function_type(&CHL2WarsGameRules_wrapper::default_FlItemRespawnTime)
                , ( bp::arg("pItem") ) );
        
        }
        { //::CMultiplayRules::FlPlayerFallDamage
        
            typedef float ( ::CMultiplayRules::*FlPlayerFallDamage_function_type )( ::CBasePlayer * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlPlayerFallDamage_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlPlayerFallDamage"
                , FlPlayerFallDamage_function_type(&::CMultiplayRules::FlPlayerFallDamage)
                , default_FlPlayerFallDamage_function_type(&CHL2WarsGameRules_wrapper::default_FlPlayerFallDamage)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CGameRules::FlPlayerFallDeathDoesScreenFade
        
            typedef bool ( ::CGameRules::*FlPlayerFallDeathDoesScreenFade_function_type )( ::CBasePlayer * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_FlPlayerFallDeathDoesScreenFade_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlPlayerFallDeathDoesScreenFade"
                , FlPlayerFallDeathDoesScreenFade_function_type(&::CGameRules::FlPlayerFallDeathDoesScreenFade)
                , default_FlPlayerFallDeathDoesScreenFade_function_type(&CHL2WarsGameRules_wrapper::default_FlPlayerFallDeathDoesScreenFade)
                , ( bp::arg("pl") ) );
        
        }
        { //::CMultiplayRules::FlPlayerSpawnTime
        
            typedef float ( ::CMultiplayRules::*FlPlayerSpawnTime_function_type )( ::CBasePlayer * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlPlayerSpawnTime_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlPlayerSpawnTime"
                , FlPlayerSpawnTime_function_type(&::CMultiplayRules::FlPlayerSpawnTime)
                , default_FlPlayerSpawnTime_function_type(&CHL2WarsGameRules_wrapper::default_FlPlayerSpawnTime)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CMultiplayRules::FlWeaponRespawnTime
        
            typedef float ( ::CMultiplayRules::*FlWeaponRespawnTime_function_type )( ::CBaseCombatWeapon * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlWeaponRespawnTime_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlWeaponRespawnTime"
                , FlWeaponRespawnTime_function_type(&::CMultiplayRules::FlWeaponRespawnTime)
                , default_FlWeaponRespawnTime_function_type(&CHL2WarsGameRules_wrapper::default_FlWeaponRespawnTime)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CMultiplayRules::FlWeaponTryRespawn
        
            typedef float ( ::CMultiplayRules::*FlWeaponTryRespawn_function_type )( ::CBaseCombatWeapon * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_FlWeaponTryRespawn_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "FlWeaponTryRespawn"
                , FlWeaponTryRespawn_function_type(&::CMultiplayRules::FlWeaponTryRespawn)
                , default_FlWeaponTryRespawn_function_type(&CHL2WarsGameRules_wrapper::default_FlWeaponTryRespawn)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CGameRules::GetAmmoQuantityScale
        
            typedef float ( ::CGameRules::*GetAmmoQuantityScale_function_type )( int ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_GetAmmoQuantityScale_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetAmmoQuantityScale"
                , GetAmmoQuantityScale_function_type(&::CGameRules::GetAmmoQuantityScale)
                , default_GetAmmoQuantityScale_function_type(&CHL2WarsGameRules_wrapper::default_GetAmmoQuantityScale)
                , ( bp::arg("iAmmoIndex") ) );
        
        }
        { //::CGameRules::GetAutoAimMode
        
            typedef int ( ::CGameRules::*GetAutoAimMode_function_type )(  ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetAutoAimMode_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetAutoAimMode"
                , GetAutoAimMode_function_type(&::CGameRules::GetAutoAimMode)
                , default_GetAutoAimMode_function_type(&CHL2WarsGameRules_wrapper::default_GetAutoAimMode) );
        
        }
        { //::CGameRules::GetAutoAimScale
        
            typedef float ( ::CGameRules::*GetAutoAimScale_function_type )( ::CBasePlayer * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_GetAutoAimScale_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetAutoAimScale"
                , GetAutoAimScale_function_type(&::CGameRules::GetAutoAimScale)
                , default_GetAutoAimScale_function_type(&CHL2WarsGameRules_wrapper::default_GetAutoAimScale)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::GetCaptureValueForPlayer
        
            typedef int ( ::CTeamplayRules::*GetCaptureValueForPlayer_function_type )( ::CBasePlayer * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetCaptureValueForPlayer_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetCaptureValueForPlayer"
                , GetCaptureValueForPlayer_function_type(&::CTeamplayRules::GetCaptureValueForPlayer)
                , default_GetCaptureValueForPlayer_function_type(&CHL2WarsGameRules_wrapper::default_GetCaptureValueForPlayer)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CGameRules::GetChatLocation
        
            typedef char const * ( ::CGameRules::*GetChatLocation_function_type )( bool,::CBasePlayer * ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetChatLocation_function_type )( bool,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetChatLocation"
                , GetChatLocation_function_type(&::CGameRules::GetChatLocation)
                , default_GetChatLocation_function_type(&CHL2WarsGameRules_wrapper::default_GetChatLocation)
                , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) );
        
        }
        { //::CGameRules::GetDamageCustomString
        
            typedef char const * ( ::CGameRules::*GetDamageCustomString_function_type )( ::CTakeDamageInfo const & ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetDamageCustomString_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetDamageCustomString"
                , GetDamageCustomString_function_type(&::CGameRules::GetDamageCustomString)
                , default_GetDamageCustomString_function_type(&CHL2WarsGameRules_wrapper::default_GetDamageCustomString)
                , ( bp::arg("info") ) );
        
        }
        { //::CGameRules::GetDamageMultiplier
        
            typedef float ( ::CGameRules::*GetDamageMultiplier_function_type )(  ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_GetDamageMultiplier_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetDamageMultiplier"
                , GetDamageMultiplier_function_type(&::CGameRules::GetDamageMultiplier)
                , default_GetDamageMultiplier_function_type(&CHL2WarsGameRules_wrapper::default_GetDamageMultiplier) );
        
        }
        { //::CMultiplayRules::GetDeathScorer
        
            typedef ::CBasePlayer * ( ::CMultiplayRules::*GetDeathScorer_function_type )( ::CBaseEntity *,::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetDeathScorer"
                , GetDeathScorer_function_type( &::CMultiplayRules::GetDeathScorer )
                , ( bp::arg("pKiller"), bp::arg("pInflictor") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CMultiplayRules::GetDeathScorer
        
            typedef ::CBasePlayer * ( ::CMultiplayRules::*GetDeathScorer_function_type )( ::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) ;
            typedef ::CBasePlayer * ( CHL2WarsGameRules_wrapper::*default_GetDeathScorer_function_type )( ::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetDeathScorer"
                , GetDeathScorer_function_type(&::CMultiplayRules::GetDeathScorer)
                , default_GetDeathScorer_function_type(&CHL2WarsGameRules_wrapper::default_GetDeathScorer)
                , ( bp::arg("pKiller"), bp::arg("pInflictor"), bp::arg("pVictim") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CGameRules::GetGameType
        
            typedef int ( ::CGameRules::*GetGameType_function_type )(  ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetGameType_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetGameType"
                , GetGameType_function_type(&::CGameRules::GetGameType)
                , default_GetGameType_function_type(&CHL2WarsGameRules_wrapper::default_GetGameType) );
        
        }
        { //::CGameRules::GetGameTypeName
        
            typedef char const * ( ::CGameRules::*GetGameTypeName_function_type )(  ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetGameTypeName_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetGameTypeName"
                , GetGameTypeName_function_type(&::CGameRules::GetGameTypeName)
                , default_GetGameTypeName_function_type(&CHL2WarsGameRules_wrapper::default_GetGameTypeName) );
        
        }
        { //::CTeamplayRules::GetIndexedTeamName
        
            typedef char const * ( ::CTeamplayRules::*GetIndexedTeamName_function_type )( int ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetIndexedTeamName_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetIndexedTeamName"
                , GetIndexedTeamName_function_type(&::CTeamplayRules::GetIndexedTeamName)
                , default_GetIndexedTeamName_function_type(&CHL2WarsGameRules_wrapper::default_GetIndexedTeamName)
                , ( bp::arg("teamIndex") ) );
        
        }
        { //::CGameRules::GetMaxHumanPlayers
        
            typedef int ( ::CGameRules::*GetMaxHumanPlayers_function_type )(  ) const;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetMaxHumanPlayers_function_type )(  ) const;
            
            CHL2WarsGameRules_exposer.def( 
                "GetMaxHumanPlayers"
                , GetMaxHumanPlayers_function_type(&::CGameRules::GetMaxHumanPlayers)
                , default_GetMaxHumanPlayers_function_type(&CHL2WarsGameRules_wrapper::default_GetMaxHumanPlayers) );
        
        }
        { //::CMultiplayRules::GetNextBestWeapon
        
            typedef ::CBaseCombatWeapon * ( ::CMultiplayRules::*GetNextBestWeapon_function_type )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) ;
            typedef ::CBaseCombatWeapon * ( CHL2WarsGameRules_wrapper::*default_GetNextBestWeapon_function_type )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetNextBestWeapon"
                , GetNextBestWeapon_function_type(&::CMultiplayRules::GetNextBestWeapon)
                , default_GetNextBestWeapon_function_type(&CHL2WarsGameRules_wrapper::default_GetNextBestWeapon)
                , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CMultiplayRules::GetPlayerSpawnSpot
        
            typedef ::CBaseEntity * ( ::CMultiplayRules::*GetPlayerSpawnSpot_function_type )( ::CBasePlayer * ) ;
            typedef ::CBaseEntity * ( CHL2WarsGameRules_wrapper::*default_GetPlayerSpawnSpot_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetPlayerSpawnSpot"
                , GetPlayerSpawnSpot_function_type(&::CMultiplayRules::GetPlayerSpawnSpot)
                , default_GetPlayerSpawnSpot_function_type(&CHL2WarsGameRules_wrapper::default_GetPlayerSpawnSpot)
                , ( bp::arg("pPlayer") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CGameRules::GetSkillLevel
        
            typedef int ( ::CGameRules::*GetSkillLevel_function_type )(  ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetSkillLevel_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetSkillLevel"
                , GetSkillLevel_function_type(&::CGameRules::GetSkillLevel)
                , default_GetSkillLevel_function_type(&CHL2WarsGameRules_wrapper::default_GetSkillLevel) );
        
        }
        { //::CMultiplayRules::GetTaggedConVarList
        
            typedef void ( ::CMultiplayRules::*GetTaggedConVarList_function_type )( ::KeyValues * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_GetTaggedConVarList_function_type )( ::KeyValues * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetTaggedConVarList"
                , GetTaggedConVarList_function_type(&::CMultiplayRules::GetTaggedConVarList)
                , default_GetTaggedConVarList_function_type(&CHL2WarsGameRules_wrapper::default_GetTaggedConVarList)
                , ( bp::arg("pCvarTagList") ) );
        
        }
        { //::CTeamplayRules::GetTeamID
        
            typedef char const * ( ::CTeamplayRules::*GetTeamID_function_type )( ::CBaseEntity * ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_GetTeamID_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetTeamID"
                , GetTeamID_function_type(&::CTeamplayRules::GetTeamID)
                , default_GetTeamID_function_type(&CHL2WarsGameRules_wrapper::default_GetTeamID)
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CTeamplayRules::GetTeamIndex
        
            typedef int ( ::CTeamplayRules::*GetTeamIndex_function_type )( char const * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_GetTeamIndex_function_type )( char const * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetTeamIndex"
                , GetTeamIndex_function_type(&::CTeamplayRules::GetTeamIndex)
                , default_GetTeamIndex_function_type(&CHL2WarsGameRules_wrapper::default_GetTeamIndex)
                , ( bp::arg("pTeamName") ) );
        
        }
        { //::CGameRules::GetTopDownMovementAxis
        
            typedef ::QAngle const & ( ::CGameRules::*GetTopDownMovementAxis_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "GetTopDownMovementAxis"
                , GetTopDownMovementAxis_function_type(&::CGameRules::GetTopDownMovementAxis)
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CTeamplayRules::HandleScrambleTeams
        
            typedef void ( ::CTeamplayRules::*HandleScrambleTeams_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_HandleScrambleTeams_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "HandleScrambleTeams"
                , HandleScrambleTeams_function_type(&::CTeamplayRules::HandleScrambleTeams)
                , default_HandleScrambleTeams_function_type(&CHL2WarsGameRules_wrapper::default_HandleScrambleTeams) );
        
        }
        { //::CTeamplayRules::HandleSwitchTeams
        
            typedef void ( ::CTeamplayRules::*HandleSwitchTeams_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_HandleSwitchTeams_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "HandleSwitchTeams"
                , HandleSwitchTeams_function_type(&::CTeamplayRules::HandleSwitchTeams)
                , default_HandleSwitchTeams_function_type(&CHL2WarsGameRules_wrapper::default_HandleSwitchTeams) );
        
        }
        { //::CMultiplayRules::HandleTimeLimitChange
        
            typedef void ( ::CMultiplayRules::*HandleTimeLimitChange_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_HandleTimeLimitChange_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "HandleTimeLimitChange"
                , HandleTimeLimitChange_function_type(&::CMultiplayRules::HandleTimeLimitChange)
                , default_HandleTimeLimitChange_function_type(&CHL2WarsGameRules_wrapper::default_HandleTimeLimitChange) );
        
        }
        { //::CTeamplayRules::IPointsForKill
        
            typedef int ( ::CTeamplayRules::*IPointsForKill_function_type )( ::CBasePlayer *,::CBasePlayer * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_IPointsForKill_function_type )( ::CBasePlayer *,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IPointsForKill"
                , IPointsForKill_function_type(&::CTeamplayRules::IPointsForKill)
                , default_IPointsForKill_function_type(&CHL2WarsGameRules_wrapper::default_IPointsForKill)
                , ( bp::arg("pAttacker"), bp::arg("pKilled") ) );
        
        }
        { //::CGameRules::InRoundRestart
        
            typedef bool ( ::CGameRules::*InRoundRestart_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_InRoundRestart_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "InRoundRestart"
                , InRoundRestart_function_type(&::CGameRules::InRoundRestart)
                , default_InRoundRestart_function_type(&CHL2WarsGameRules_wrapper::default_InRoundRestart) );
        
        }
        { //::CGameRules::Init
        
            typedef bool ( ::CGameRules::*Init_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_Init_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "Init"
                , Init_function_type(&::CGameRules::Init)
                , default_Init_function_type(&CHL2WarsGameRules_wrapper::default_Init) );
        
        }
        { //::CGameRules::InitDefaultAIRelationships
        
            typedef void ( ::CGameRules::*InitDefaultAIRelationships_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_InitDefaultAIRelationships_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "InitDefaultAIRelationships"
                , InitDefaultAIRelationships_function_type(&::CGameRules::InitDefaultAIRelationships)
                , default_InitDefaultAIRelationships_function_type(&CHL2WarsGameRules_wrapper::default_InitDefaultAIRelationships) );
        
        }
        { //::CTeamplayRules::InitHUD
        
            typedef void ( ::CTeamplayRules::*InitHUD_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_InitHUD_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "InitHUD"
                , InitHUD_function_type(&::CTeamplayRules::InitHUD)
                , default_InitHUD_function_type(&CHL2WarsGameRules_wrapper::default_InitHUD)
                , ( bp::arg("pl") ) );
        
        }
        { //::CMultiplayRules::IsAllowedToSpawn
        
            typedef bool ( ::CMultiplayRules::*IsAllowedToSpawn_function_type )( ::CBaseEntity * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsAllowedToSpawn_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsAllowedToSpawn"
                , IsAllowedToSpawn_function_type(&::CMultiplayRules::IsAllowedToSpawn)
                , default_IsAllowedToSpawn_function_type(&CHL2WarsGameRules_wrapper::default_IsAllowedToSpawn)
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CMultiplayRules::IsCoOp
        
            typedef bool ( ::CMultiplayRules::*IsCoOp_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsCoOp_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsCoOp"
                , IsCoOp_function_type(&::CMultiplayRules::IsCoOp)
                , default_IsCoOp_function_type(&CHL2WarsGameRules_wrapper::default_IsCoOp) );
        
        }
        { //::CMultiplayRules::IsDeathmatch
        
            typedef bool ( ::CMultiplayRules::*IsDeathmatch_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsDeathmatch_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsDeathmatch"
                , IsDeathmatch_function_type(&::CMultiplayRules::IsDeathmatch)
                , default_IsDeathmatch_function_type(&CHL2WarsGameRules_wrapper::default_IsDeathmatch) );
        
        }
        { //::CMultiplayRules::IsMultiplayer
        
            typedef bool ( ::CMultiplayRules::*IsMultiplayer_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsMultiplayer_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsMultiplayer"
                , IsMultiplayer_function_type(&::CMultiplayRules::IsMultiplayer)
                , default_IsMultiplayer_function_type(&CHL2WarsGameRules_wrapper::default_IsMultiplayer) );
        
        }
        { //::CGameRules::IsSkillLevel
        
            typedef bool ( ::CGameRules::*IsSkillLevel_function_type )( int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsSkillLevel_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsSkillLevel"
                , IsSkillLevel_function_type(&::CGameRules::IsSkillLevel)
                , default_IsSkillLevel_function_type(&CHL2WarsGameRules_wrapper::default_IsSkillLevel)
                , ( bp::arg("iLevel") ) );
        
        }
        { //::CGameRules::IsSpawnPointValid
        
            typedef bool ( ::CGameRules::*IsSpawnPointValid_function_type )( ::CBaseEntity *,::CBasePlayer * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsSpawnPointValid_function_type )( ::CBaseEntity *,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsSpawnPointValid"
                , IsSpawnPointValid_function_type(&::CGameRules::IsSpawnPointValid)
                , default_IsSpawnPointValid_function_type(&CHL2WarsGameRules_wrapper::default_IsSpawnPointValid)
                , ( bp::arg("pSpot"), bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::IsValidTeam
        
            typedef bool ( ::CTeamplayRules::*IsValidTeam_function_type )( char const * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_IsValidTeam_function_type )( char const * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "IsValidTeam"
                , IsValidTeam_function_type(&::CTeamplayRules::IsValidTeam)
                , default_IsValidTeam_function_type(&CHL2WarsGameRules_wrapper::default_IsValidTeam)
                , ( bp::arg("pTeamName") ) );
        
        }
        { //::CMultiplayRules::ItemShouldRespawn
        
            typedef int ( ::CMultiplayRules::*ItemShouldRespawn_function_type )( ::CItem * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_ItemShouldRespawn_function_type )( ::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ItemShouldRespawn"
                , ItemShouldRespawn_function_type(&::CMultiplayRules::ItemShouldRespawn)
                , default_ItemShouldRespawn_function_type(&CHL2WarsGameRules_wrapper::default_ItemShouldRespawn)
                , ( bp::arg("pItem") ) );
        
        }
        { //::CGameRules::MarkAchievement
        
            typedef void ( ::CGameRules::*MarkAchievement_function_type )( ::IRecipientFilter &,char const * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_MarkAchievement_function_type )( ::IRecipientFilter &,char const * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "MarkAchievement"
                , MarkAchievement_function_type(&::CGameRules::MarkAchievement)
                , default_MarkAchievement_function_type(&CHL2WarsGameRules_wrapper::default_MarkAchievement)
                , ( bp::arg("filter"), bp::arg("pchAchievementName") ) );
        
        }
        { //::CGameRules::Name
        
            typedef char const * ( ::CGameRules::*Name_function_type )(  ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_Name_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "Name"
                , Name_function_type(&::CGameRules::Name)
                , default_Name_function_type(&CHL2WarsGameRules_wrapper::default_Name) );
        
        }
        { //::CGameRules::NumEntityClasses
        
            typedef int ( ::CGameRules::*NumEntityClasses_function_type )(  ) const;
            typedef int ( CHL2WarsGameRules_wrapper::*default_NumEntityClasses_function_type )(  ) const;
            
            CHL2WarsGameRules_exposer.def( 
                "NumEntityClasses"
                , NumEntityClasses_function_type(&::CGameRules::NumEntityClasses)
                , default_NumEntityClasses_function_type(&CHL2WarsGameRules_wrapper::default_NumEntityClasses) );
        
        }
        { //::CGameRules::NumFactions
        
            typedef int ( ::CGameRules::*NumFactions_function_type )(  ) const;
            typedef int ( CHL2WarsGameRules_wrapper::*default_NumFactions_function_type )(  ) const;
            
            CHL2WarsGameRules_exposer.def( 
                "NumFactions"
                , NumFactions_function_type(&::CGameRules::NumFactions)
                , default_NumFactions_function_type(&CHL2WarsGameRules_wrapper::default_NumFactions) );
        
        }
        { //::CGameRules::OnBeginChangeLevel
        
            typedef void ( ::CGameRules::*OnBeginChangeLevel_function_type )( char const *,::KeyValues * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_OnBeginChangeLevel_function_type )( char const *,::KeyValues * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "OnBeginChangeLevel"
                , OnBeginChangeLevel_function_type(&::CGameRules::OnBeginChangeLevel)
                , default_OnBeginChangeLevel_function_type(&CHL2WarsGameRules_wrapper::default_OnBeginChangeLevel)
                , ( bp::arg("nextMapName"), bp::arg("saveData") ) );
        
        }
        { //::CGameRules::OnNavMeshLoad
        
            typedef void ( ::CGameRules::*OnNavMeshLoad_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_OnNavMeshLoad_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "OnNavMeshLoad"
                , OnNavMeshLoad_function_type(&::CGameRules::OnNavMeshLoad)
                , default_OnNavMeshLoad_function_type(&CHL2WarsGameRules_wrapper::default_OnNavMeshLoad) );
        
        }
        { //::CGameRules::OnSkillLevelChanged
        
            typedef void ( ::CGameRules::*OnSkillLevelChanged_function_type )( int ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_OnSkillLevelChanged_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "OnSkillLevelChanged"
                , OnSkillLevelChanged_function_type(&::CGameRules::OnSkillLevelChanged)
                , default_OnSkillLevelChanged_function_type(&CHL2WarsGameRules_wrapper::default_OnSkillLevelChanged)
                , ( bp::arg("iNewLevel") ) );
        
        }
        { //::CMultiplayRules::PlayFootstepSounds
        
            typedef bool ( ::CMultiplayRules::*PlayFootstepSounds_function_type )( ::CBasePlayer * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PlayFootstepSounds_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayFootstepSounds"
                , PlayFootstepSounds_function_type(&::CMultiplayRules::PlayFootstepSounds)
                , default_PlayFootstepSounds_function_type(&CHL2WarsGameRules_wrapper::default_PlayFootstepSounds)
                , ( bp::arg("pl") ) );
        
        }
        { //::CMultiplayRules::PlayTextureSounds
        
            typedef bool ( ::CMultiplayRules::*PlayTextureSounds_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PlayTextureSounds_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayTextureSounds"
                , PlayTextureSounds_function_type(&::CMultiplayRules::PlayTextureSounds)
                , default_PlayTextureSounds_function_type(&CHL2WarsGameRules_wrapper::default_PlayTextureSounds) );
        
        }
        { //::CTeamplayRules::PlayerCanHearChat
        
            typedef bool ( ::CTeamplayRules::*PlayerCanHearChat_function_type )( ::CBasePlayer *,::CBasePlayer * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PlayerCanHearChat_function_type )( ::CBasePlayer *,::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerCanHearChat"
                , PlayerCanHearChat_function_type(&::CTeamplayRules::PlayerCanHearChat)
                , default_PlayerCanHearChat_function_type(&CHL2WarsGameRules_wrapper::default_PlayerCanHearChat)
                , ( bp::arg("pListener"), bp::arg("pSpeaker") ) );
        
        }
        { //::CMultiplayRules::PlayerGotAmmo
        
            typedef void ( ::CMultiplayRules::*PlayerGotAmmo_function_type )( ::CBaseCombatCharacter *,char *,int ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerGotAmmo_function_type )( ::CBaseCombatCharacter *,char *,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerGotAmmo"
                , PlayerGotAmmo_function_type(&::CMultiplayRules::PlayerGotAmmo)
                , default_PlayerGotAmmo_function_type(&CHL2WarsGameRules_wrapper::default_PlayerGotAmmo)
                , ( bp::arg("pPlayer"), bp::arg("szName"), bp::arg("iCount") ) );
        
        }
        { //::CMultiplayRules::PlayerGotItem
        
            typedef void ( ::CMultiplayRules::*PlayerGotItem_function_type )( ::CBasePlayer *,::CItem * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerGotItem_function_type )( ::CBasePlayer *,::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerGotItem"
                , PlayerGotItem_function_type(&::CMultiplayRules::PlayerGotItem)
                , default_PlayerGotItem_function_type(&CHL2WarsGameRules_wrapper::default_PlayerGotItem)
                , ( bp::arg("pPlayer"), bp::arg("pItem") ) );
        
        }
        { //::CTeamplayRules::PlayerKilled
        
            typedef void ( ::CTeamplayRules::*PlayerKilled_function_type )( ::CBasePlayer *,::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerKilled_function_type )( ::CBasePlayer *,::CTakeDamageInfo const & ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerKilled"
                , PlayerKilled_function_type(&::CTeamplayRules::PlayerKilled)
                , default_PlayerKilled_function_type(&CHL2WarsGameRules_wrapper::default_PlayerKilled)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CTeamplayRules::PlayerMayBlockPoint
        
            typedef bool ( ::CTeamplayRules::*PlayerMayBlockPoint_function_type )( ::CBasePlayer *,int,char *,int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PlayerMayBlockPoint_function_type )( ::CBasePlayer *,int,char *,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerMayBlockPoint"
                , PlayerMayBlockPoint_function_type(&::CTeamplayRules::PlayerMayBlockPoint)
                , default_PlayerMayBlockPoint_function_type(&CHL2WarsGameRules_wrapper::default_PlayerMayBlockPoint)
                , ( bp::arg("pPlayer"), bp::arg("iPointIndex"), bp::arg("pszReason")=bp::object(), bp::arg("iMaxReasonLength")=(int)(0) ) );
        
        }
        { //::CTeamplayRules::PlayerMayCapturePoint
        
            typedef bool ( ::CTeamplayRules::*PlayerMayCapturePoint_function_type )( ::CBasePlayer *,int,char *,int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PlayerMayCapturePoint_function_type )( ::CBasePlayer *,int,char *,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerMayCapturePoint"
                , PlayerMayCapturePoint_function_type(&::CTeamplayRules::PlayerMayCapturePoint)
                , default_PlayerMayCapturePoint_function_type(&CHL2WarsGameRules_wrapper::default_PlayerMayCapturePoint)
                , ( bp::arg("pPlayer"), bp::arg("iPointIndex"), bp::arg("pszReason")=bp::object(), bp::arg("iMaxReasonLength")=(int)(0) ) );
        
        }
        { //::CTeamplayRules::PlayerRelationship
        
            typedef int ( ::CTeamplayRules::*PlayerRelationship_function_type )( ::CBaseEntity *,::CBaseEntity * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_PlayerRelationship_function_type )( ::CBaseEntity *,::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerRelationship"
                , PlayerRelationship_function_type(&::CTeamplayRules::PlayerRelationship)
                , default_PlayerRelationship_function_type(&CHL2WarsGameRules_wrapper::default_PlayerRelationship)
                , ( bp::arg("pPlayer"), bp::arg("pTarget") ) );
        
        }
        { //::CMultiplayRules::PlayerThink
        
            typedef void ( ::CMultiplayRules::*PlayerThink_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_PlayerThink_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PlayerThink"
                , PlayerThink_function_type(&::CMultiplayRules::PlayerThink)
                , default_PlayerThink_function_type(&CHL2WarsGameRules_wrapper::default_PlayerThink)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::PointsMayBeCaptured
        
            typedef bool ( ::CTeamplayRules::*PointsMayBeCaptured_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_PointsMayBeCaptured_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "PointsMayBeCaptured"
                , PointsMayBeCaptured_function_type(&::CTeamplayRules::PointsMayBeCaptured)
                , default_PointsMayBeCaptured_function_type(&CHL2WarsGameRules_wrapper::default_PointsMayBeCaptured) );
        
        }
        { //::CGameRules::RadiusDamage
        
            typedef void ( ::CGameRules::*RadiusDamage_function_type )( ::CTakeDamageInfo const &,::Vector const &,float,int,::CBaseEntity * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_RadiusDamage_function_type )( ::CTakeDamageInfo const &,::Vector const &,float,int,::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "RadiusDamage"
                , RadiusDamage_function_type(&::CGameRules::RadiusDamage)
                , default_RadiusDamage_function_type(&CHL2WarsGameRules_wrapper::default_RadiusDamage)
                , ( bp::arg("info"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("iClassIgnore"), bp::arg("pEntityIgnore") ) );
        
        }
        { //::CMultiplayRules::RefreshSkillData
        
            typedef void ( ::CMultiplayRules::*RefreshSkillData_function_type )( bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_RefreshSkillData_function_type )( bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "RefreshSkillData"
                , RefreshSkillData_function_type(&::CMultiplayRules::RefreshSkillData)
                , default_RefreshSkillData_function_type(&CHL2WarsGameRules_wrapper::default_RefreshSkillData)
                , ( bp::arg("forceUpdate") ) );
        
        }
        { //::CGameRules::RegisterScriptFunctions
        
            typedef void ( ::CGameRules::*RegisterScriptFunctions_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_RegisterScriptFunctions_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "RegisterScriptFunctions"
                , RegisterScriptFunctions_function_type(&::CGameRules::RegisterScriptFunctions)
                , default_RegisterScriptFunctions_function_type(&CHL2WarsGameRules_wrapper::default_RegisterScriptFunctions) );
        
        }
        { //::CMultiplayRules::ResetMapCycleTimeStamp
        
            typedef void ( ::CMultiplayRules::*ResetMapCycleTimeStamp_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_ResetMapCycleTimeStamp_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ResetMapCycleTimeStamp"
                , ResetMapCycleTimeStamp_function_type(&::CMultiplayRules::ResetMapCycleTimeStamp)
                , default_ResetMapCycleTimeStamp_function_type(&CHL2WarsGameRules_wrapper::default_ResetMapCycleTimeStamp) );
        
        }
        { //::CTeamplayRules::SetDefaultPlayerTeam
        
            typedef char const * ( ::CTeamplayRules::*SetDefaultPlayerTeam_function_type )( ::CBasePlayer * ) ;
            typedef char const * ( CHL2WarsGameRules_wrapper::*default_SetDefaultPlayerTeam_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetDefaultPlayerTeam"
                , SetDefaultPlayerTeam_function_type(&::CTeamplayRules::SetDefaultPlayerTeam)
                , default_SetDefaultPlayerTeam_function_type(&CHL2WarsGameRules_wrapper::default_SetDefaultPlayerTeam)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CTeamplayRules::SetLastCapPointChanged
        
            typedef void ( ::CTeamplayRules::*SetLastCapPointChanged_function_type )( int ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetLastCapPointChanged_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetLastCapPointChanged"
                , SetLastCapPointChanged_function_type(&::CTeamplayRules::SetLastCapPointChanged)
                , default_SetLastCapPointChanged_function_type(&CHL2WarsGameRules_wrapper::default_SetLastCapPointChanged)
                , ( bp::arg("iIndex") ) );
        
        }
        { //::CTeamplayRules::SetScrambleTeams
        
            typedef void ( ::CTeamplayRules::*SetScrambleTeams_function_type )( bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetScrambleTeams_function_type )( bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetScrambleTeams"
                , SetScrambleTeams_function_type(&::CTeamplayRules::SetScrambleTeams)
                , default_SetScrambleTeams_function_type(&CHL2WarsGameRules_wrapper::default_SetScrambleTeams)
                , ( bp::arg("bScramble") ) );
        
        }
        { //::CGameRules::SetSkillLevel
        
            typedef void ( ::CGameRules::*SetSkillLevel_function_type )( int ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetSkillLevel_function_type )( int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetSkillLevel"
                , SetSkillLevel_function_type(&::CGameRules::SetSkillLevel)
                , default_SetSkillLevel_function_type(&CHL2WarsGameRules_wrapper::default_SetSkillLevel)
                , ( bp::arg("iLevel") ) );
        
        }
        { //::CTeamplayRules::SetStalemate
        
            typedef void ( ::CTeamplayRules::*SetStalemate_function_type )( int,bool,bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetStalemate_function_type )( int,bool,bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetStalemate"
                , SetStalemate_function_type(&::CTeamplayRules::SetStalemate)
                , default_SetStalemate_function_type(&CHL2WarsGameRules_wrapper::default_SetStalemate)
                , ( bp::arg("iReason"), bp::arg("bForceMapReset")=(bool)(true), bp::arg("bSwitchTeams")=(bool)(false) ) );
        
        }
        { //::CTeamplayRules::SetSwitchTeams
        
            typedef void ( ::CTeamplayRules::*SetSwitchTeams_function_type )( bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetSwitchTeams_function_type )( bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetSwitchTeams"
                , SetSwitchTeams_function_type(&::CTeamplayRules::SetSwitchTeams)
                , default_SetSwitchTeams_function_type(&CHL2WarsGameRules_wrapper::default_SetSwitchTeams)
                , ( bp::arg("bSwitch") ) );
        
        }
        { //::CTeamplayRules::SetWinningTeam
        
            typedef void ( ::CTeamplayRules::*SetWinningTeam_function_type )( int,int,bool,bool,bool ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_SetWinningTeam_function_type )( int,int,bool,bool,bool ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SetWinningTeam"
                , SetWinningTeam_function_type(&::CTeamplayRules::SetWinningTeam)
                , default_SetWinningTeam_function_type(&CHL2WarsGameRules_wrapper::default_SetWinningTeam)
                , ( bp::arg("team"), bp::arg("iWinReason"), bp::arg("bForceMapReset")=(bool)(true), bp::arg("bSwitchTeams")=(bool)(false), bp::arg("bDontAddScore")=(bool)(false) ) );
        
        }
        { //::CTeamplayRules::ShouldAutoAim
        
            typedef bool ( ::CTeamplayRules::*ShouldAutoAim_function_type )( ::CBasePlayer *,::edict_t * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldAutoAim_function_type )( ::CBasePlayer *,::edict_t * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldAutoAim"
                , ShouldAutoAim_function_type(&::CTeamplayRules::ShouldAutoAim)
                , default_ShouldAutoAim_function_type(&CHL2WarsGameRules_wrapper::default_ShouldAutoAim)
                , ( bp::arg("pPlayer"), bp::arg("target") ) );
        
        }
        { //::CGameRules::ShouldBurningPropsEmitLight
        
            typedef bool ( ::CGameRules::*ShouldBurningPropsEmitLight_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldBurningPropsEmitLight_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldBurningPropsEmitLight"
                , ShouldBurningPropsEmitLight_function_type(&::CGameRules::ShouldBurningPropsEmitLight)
                , default_ShouldBurningPropsEmitLight_function_type(&CHL2WarsGameRules_wrapper::default_ShouldBurningPropsEmitLight) );
        
        }
        { //::CTeamplayRules::ShouldScrambleTeams
        
            typedef bool ( ::CTeamplayRules::*ShouldScrambleTeams_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldScrambleTeams_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldScrambleTeams"
                , ShouldScrambleTeams_function_type(&::CTeamplayRules::ShouldScrambleTeams)
                , default_ShouldScrambleTeams_function_type(&CHL2WarsGameRules_wrapper::default_ShouldScrambleTeams) );
        
        }
        { //::CTeamplayRules::ShouldSwitchTeams
        
            typedef bool ( ::CTeamplayRules::*ShouldSwitchTeams_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldSwitchTeams_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldSwitchTeams"
                , ShouldSwitchTeams_function_type(&::CTeamplayRules::ShouldSwitchTeams)
                , default_ShouldSwitchTeams_function_type(&CHL2WarsGameRules_wrapper::default_ShouldSwitchTeams) );
        
        }
        { //::CGameRules::ShouldTimeoutClient
        
            typedef bool ( ::CGameRules::*ShouldTimeoutClient_function_type )( int,float ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldTimeoutClient_function_type )( int,float ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldTimeoutClient"
                , ShouldTimeoutClient_function_type(&::CGameRules::ShouldTimeoutClient)
                , default_ShouldTimeoutClient_function_type(&CHL2WarsGameRules_wrapper::default_ShouldTimeoutClient)
                , ( bp::arg("nUserID"), bp::arg("flTimeSinceLastReceived") ) );
        
        }
        { //::CGameRules::ShouldUseRobustRadiusDamage
        
            typedef bool ( ::CGameRules::*ShouldUseRobustRadiusDamage_function_type )( ::CBaseEntity * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_ShouldUseRobustRadiusDamage_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "ShouldUseRobustRadiusDamage"
                , ShouldUseRobustRadiusDamage_function_type(&::CGameRules::ShouldUseRobustRadiusDamage)
                , default_ShouldUseRobustRadiusDamage_function_type(&CHL2WarsGameRules_wrapper::default_ShouldUseRobustRadiusDamage)
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CMultiplayRules::SwitchToNextBestWeapon
        
            typedef bool ( ::CMultiplayRules::*SwitchToNextBestWeapon_function_type )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_SwitchToNextBestWeapon_function_type )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "SwitchToNextBestWeapon"
                , SwitchToNextBestWeapon_function_type(&::CMultiplayRules::SwitchToNextBestWeapon)
                , default_SwitchToNextBestWeapon_function_type(&CHL2WarsGameRules_wrapper::default_SwitchToNextBestWeapon)
                , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") ) );
        
        }
        { //::CTeamplayRules::TeamMayCapturePoint
        
            typedef bool ( ::CTeamplayRules::*TeamMayCapturePoint_function_type )( int,int ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_TeamMayCapturePoint_function_type )( int,int ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "TeamMayCapturePoint"
                , TeamMayCapturePoint_function_type(&::CTeamplayRules::TeamMayCapturePoint)
                , default_TeamMayCapturePoint_function_type(&CHL2WarsGameRules_wrapper::default_TeamMayCapturePoint)
                , ( bp::arg("iTeam"), bp::arg("iPointIndex") ) );
        
        }
        { //::CTeamplayRules::Think
        
            typedef void ( ::CTeamplayRules::*Think_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_Think_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "Think"
                , Think_function_type(&::CTeamplayRules::Think)
                , default_Think_function_type(&CHL2WarsGameRules_wrapper::default_Think) );
        
        }
        { //::CTeamplayRules::TimerMayExpire
        
            typedef bool ( ::CTeamplayRules::*TimerMayExpire_function_type )(  ) ;
            typedef bool ( CHL2WarsGameRules_wrapper::*default_TimerMayExpire_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "TimerMayExpire"
                , TimerMayExpire_function_type(&::CTeamplayRules::TimerMayExpire)
                , default_TimerMayExpire_function_type(&CHL2WarsGameRules_wrapper::default_TimerMayExpire) );
        
        }
        { //::CGameRules::UpdateClientData
        
            typedef void ( ::CGameRules::*UpdateClientData_function_type )( ::CBasePlayer * ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_UpdateClientData_function_type )( ::CBasePlayer * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "UpdateClientData"
                , UpdateClientData_function_type(&::CGameRules::UpdateClientData)
                , default_UpdateClientData_function_type(&CHL2WarsGameRules_wrapper::default_UpdateClientData)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CGameRules::UpdateGameplayStatsFromSteam
        
            typedef void ( ::CGameRules::*UpdateGameplayStatsFromSteam_function_type )(  ) ;
            typedef void ( CHL2WarsGameRules_wrapper::*default_UpdateGameplayStatsFromSteam_function_type )(  ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "UpdateGameplayStatsFromSteam"
                , UpdateGameplayStatsFromSteam_function_type(&::CGameRules::UpdateGameplayStatsFromSteam)
                , default_UpdateGameplayStatsFromSteam_function_type(&CHL2WarsGameRules_wrapper::default_UpdateGameplayStatsFromSteam) );
        
        }
        { //::CMultiplayRules::VecItemRespawnAngles
        
            typedef ::QAngle ( ::CMultiplayRules::*VecItemRespawnAngles_function_type )( ::CItem * ) ;
            typedef ::QAngle ( CHL2WarsGameRules_wrapper::*default_VecItemRespawnAngles_function_type )( ::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "VecItemRespawnAngles"
                , VecItemRespawnAngles_function_type(&::CMultiplayRules::VecItemRespawnAngles)
                , default_VecItemRespawnAngles_function_type(&CHL2WarsGameRules_wrapper::default_VecItemRespawnAngles)
                , ( bp::arg("pItem") ) );
        
        }
        { //::CMultiplayRules::VecItemRespawnSpot
        
            typedef ::Vector ( ::CMultiplayRules::*VecItemRespawnSpot_function_type )( ::CItem * ) ;
            typedef ::Vector ( CHL2WarsGameRules_wrapper::*default_VecItemRespawnSpot_function_type )( ::CItem * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "VecItemRespawnSpot"
                , VecItemRespawnSpot_function_type(&::CMultiplayRules::VecItemRespawnSpot)
                , default_VecItemRespawnSpot_function_type(&CHL2WarsGameRules_wrapper::default_VecItemRespawnSpot)
                , ( bp::arg("pItem") ) );
        
        }
        { //::CMultiplayRules::VecWeaponRespawnSpot
        
            typedef ::Vector ( ::CMultiplayRules::*VecWeaponRespawnSpot_function_type )( ::CBaseCombatWeapon * ) ;
            typedef ::Vector ( CHL2WarsGameRules_wrapper::*default_VecWeaponRespawnSpot_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "VecWeaponRespawnSpot"
                , VecWeaponRespawnSpot_function_type(&::CMultiplayRules::VecWeaponRespawnSpot)
                , default_VecWeaponRespawnSpot_function_type(&CHL2WarsGameRules_wrapper::default_VecWeaponRespawnSpot)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CMultiplayRules::WeaponShouldRespawn
        
            typedef int ( ::CMultiplayRules::*WeaponShouldRespawn_function_type )( ::CBaseCombatWeapon * ) ;
            typedef int ( CHL2WarsGameRules_wrapper::*default_WeaponShouldRespawn_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "WeaponShouldRespawn"
                , WeaponShouldRespawn_function_type(&::CMultiplayRules::WeaponShouldRespawn)
                , default_WeaponShouldRespawn_function_type(&CHL2WarsGameRules_wrapper::default_WeaponShouldRespawn)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CGameRules::WeaponTraceEntity
        
            typedef float ( ::CGameRules::*WeaponTraceEntity_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * ) ;
            typedef float ( CHL2WarsGameRules_wrapper::*default_WeaponTraceEntity_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * ) ;
            
            CHL2WarsGameRules_exposer.def( 
                "WeaponTraceEntity"
                , WeaponTraceEntity_function_type(&::CGameRules::WeaponTraceEntity)
                , default_WeaponTraceEntity_function_type(&CHL2WarsGameRules_wrapper::default_WeaponTraceEntity)
                , ( bp::arg("pEntity"), bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("mask"), bp::arg("ptr") ) );
        
        }
        { //property "intermissionendtime"[fget=::CHL2WarsGameRules::GetIntermissionEndTime, fset=::CHL2WarsGameRules::SetintermissionEndTime]
        
            typedef float ( ::CHL2WarsGameRules::*fget )(  ) ;
            typedef void ( ::CHL2WarsGameRules::*fset )( float ) ;
            
            CHL2WarsGameRules_exposer.add_property( 
                "intermissionendtime"
                , fget( &::CHL2WarsGameRules::GetIntermissionEndTime )
                , fset( &::CHL2WarsGameRules::SetintermissionEndTime ) );
        
        }
        { //property "gameover"[fget=::CHL2WarsGameRules::GetGameOver, fset=::CHL2WarsGameRules::SetGameOver]
        
            typedef bool ( ::CHL2WarsGameRules::*fget )(  ) ;
            typedef void ( ::CHL2WarsGameRules::*fset )( bool ) ;
            
            CHL2WarsGameRules_exposer.add_property( 
                "gameover"
                , fget( &::CHL2WarsGameRules::GetGameOver )
                , fset( &::CHL2WarsGameRules::SetGameOver ) );
        
        }
    }

}

