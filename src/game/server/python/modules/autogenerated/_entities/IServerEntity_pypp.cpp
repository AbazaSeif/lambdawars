// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "nav_area.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "filters.h"
#include "EntityFlame.h"
#include "gib.h"
#include "props.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "srcpy_converters_ents.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "IServerEntity_pypp.hpp"

namespace bp = boost::python;

struct IServerEntity_wrapper : IServerEntity, bp::wrapper< IServerEntity > {

    IServerEntity_wrapper()
    : IServerEntity()
      , bp::wrapper< IServerEntity >(){
        // null constructor
        
    }

    virtual ::CBaseHandle const & GetRefEHandle(  ) const {
        throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
    }

    virtual void SetRefEHandle( ::CBaseHandle const & handle ){
        bp::override func_SetRefEHandle = this->get_override( "SetRefEHandle" );
        try {
            func_SetRefEHandle( boost::ref(handle) );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

void register_IServerEntity_class(){

    bp::class_< IServerEntity_wrapper, bp::bases< IServerUnknown >, boost::noncopyable >( "IServerEntity", bp::no_init )    
        .def( 
            "GetRefEHandle"
            , bp::pure_virtual( (::CBaseHandle const & ( ::IHandleEntity::* )(  ) const)(&::IHandleEntity::GetRefEHandle) )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "SetRefEHandle"
            , bp::pure_virtual( (void ( ::IHandleEntity::* )( ::CBaseHandle const & ) )(&::IHandleEntity::SetRefEHandle) )
            , ( bp::arg("handle") ) );

}

