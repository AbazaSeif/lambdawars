// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "wars_flora.h"
#include "unit_sense.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CHL2WarsPlayer_pypp.hpp"

namespace bp = boost::python;

struct CHL2WarsPlayer_wrapper : CHL2WarsPlayer, bp::wrapper< CHL2WarsPlayer > {

    CHL2WarsPlayer_wrapper( )
    : CHL2WarsPlayer( )
      , bp::wrapper< CHL2WarsPlayer >(){
        // null constructor
    
    }

    virtual bool ClientCommand( ::CCommand const & args ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, ClientCommand )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, ClientCommand )
        bp::override func_ClientCommand = this->get_override( "ClientCommand" );
        if( func_ClientCommand.ptr() != Py_None )
            try {
                return func_ClientCommand( boost::ref(args) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsPlayer::ClientCommand( args );
            }
        else
            return this->CHL2WarsPlayer::ClientCommand( args );
    }
    
    bool default_ClientCommand( ::CCommand const & args ) {
        return CHL2WarsPlayer::ClientCommand( args );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnLeftMouseButtonDoublePressed )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnLeftMouseButtonDoublePressed )
        bp::override func_OnLeftMouseButtonDoublePressed = this->get_override( "OnLeftMouseButtonDoublePressed" );
        if( func_OnLeftMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( data );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( data );
    }
    
    void default_OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( data );
    }

    virtual void OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnLeftMouseButtonPressed )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnLeftMouseButtonPressed )
        bp::override func_OnLeftMouseButtonPressed = this->get_override( "OnLeftMouseButtonPressed" );
        if( func_OnLeftMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonPressed( data );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonPressed( data );
    }
    
    void default_OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonPressed( data );
    }

    virtual void OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnLeftMouseButtonReleased )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnLeftMouseButtonReleased )
        bp::override func_OnLeftMouseButtonReleased = this->get_override( "OnLeftMouseButtonReleased" );
        if( func_OnLeftMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonReleased( data );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonReleased( data );
    }
    
    void default_OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonReleased( data );
    }

    virtual void OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnRightMouseButtonDoublePressed )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnRightMouseButtonDoublePressed )
        bp::override func_OnRightMouseButtonDoublePressed = this->get_override( "OnRightMouseButtonDoublePressed" );
        if( func_OnRightMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonDoublePressed( data );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonDoublePressed( data );
    }
    
    void default_OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonDoublePressed( data );
    }

    virtual void OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnRightMouseButtonPressed )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnRightMouseButtonPressed )
        bp::override func_OnRightMouseButtonPressed = this->get_override( "OnRightMouseButtonPressed" );
        if( func_OnRightMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonPressed( data );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonPressed( data );
    }
    
    void default_OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonPressed( data );
    }

    virtual void OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, OnRightMouseButtonReleased )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, OnRightMouseButtonReleased )
        bp::override func_OnRightMouseButtonReleased = this->get_override( "OnRightMouseButtonReleased" );
        if( func_OnRightMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnRightMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonReleased( data );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonReleased( data );
    }
    
    void default_OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonReleased( data );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, Precache )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::Precache(  );
            }
        else
            this->CHL2WarsPlayer::Precache(  );
    }
    
    void default_Precache(  ) {
        CHL2WarsPlayer::Precache( );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, Spawn )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::Spawn(  );
            }
        else
            this->CHL2WarsPlayer::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CHL2WarsPlayer::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::UpdateOnRemove(  );
            }
        else
            this->CHL2WarsPlayer::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CHL2WarsPlayer::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CHL2WarsPlayer, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsPlayer::UpdateTransmitState(  );
            }
        else
            return this->CHL2WarsPlayer::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CHL2WarsPlayer::UpdateTransmitState( );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Activate )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Activate(  );
            }
        else
            this->CBasePlayer::Activate(  );
    }
    
    void default_Activate(  ) {
        CBasePlayer::Activate( );
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, BecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, BecomeRagdoll )
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }

    virtual bool CanBecomeRagdoll(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, CanBecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, CanBecomeRagdoll )
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, CorpseGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, CorpseGib )
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( info );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( info );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( info );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBasePlayer, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBasePlayer::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBasePlayer::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBasePlayer, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBasePlayer::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBasePlayer::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Event_Gibbed )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Event_Gibbed )
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( info );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( info );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( info );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Event_Killed( info );
            }
        else
            this->CBasePlayer::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBasePlayer::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Event_KilledOther( pVictim, info );
            }
        else
            this->CBasePlayer::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBasePlayer::Event_KilledOther( pVictim, info );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetIMouse )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBasePlayer, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::GetTracerType(  );
            }
        else
            return this->CBasePlayer::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBasePlayer::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CBasePlayer, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CBasePlayer::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBasePlayer::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( set );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBasePlayer, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::OnRestore(  );
            }
        else
            this->CBasePlayer::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBasePlayer::OnRestore( );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, OnSequenceSet )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, OnSequenceSet )
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBasePlayer, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::OnTakeDamage( info );
            }
        else
            return this->CBasePlayer::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBasePlayer::OnTakeDamage( info );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBasePlayer, OnTakeDamage_Alive )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, OnTakeDamage_Alive )
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::OnTakeDamage_Alive( info );
            }
        else
            return this->CBasePlayer::OnTakeDamage_Alive( info );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CBasePlayer::OnTakeDamage_Alive( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void PyOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyOnNewModel )
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual void PyPostOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyPostOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyPostOnNewModel )
        bp::override func_PostOnNewModel = this->get_override( "PostOnNewModel" );
        if( func_PostOnNewModel.ptr() != Py_None )
            try {
                func_PostOnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyPostOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyPostOnNewModel(  );
    }
    
    virtual void default_PostOnNewModel(  ){
        CBaseAnimating::PyPostOnNewModel( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, ShouldGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, ShouldGib )
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( info );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( info );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( info );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( info, vecDir, ptr );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBasePlayer, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBasePlayer::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBasePlayer::VPhysicsCollision( index, pEvent );
    }

    virtual void Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget, ::Vector const * pVelocity ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Weapon_Drop )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Weapon_Drop )
        bp::override func_Weapon_Drop = this->get_override( "Weapon_Drop" );
        if( func_Weapon_Drop.ptr() != Py_None )
            try {
                func_Weapon_Drop( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
            }
        else
            this->CBasePlayer::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }
    
    void default_Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget, ::Vector const * pVelocity ) {
        CBasePlayer::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }

    virtual void Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Weapon_Equip )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Weapon_Equip )
        bp::override func_Weapon_Equip = this->get_override( "Weapon_Equip" );
        if( func_Weapon_Equip.ptr() != Py_None )
            try {
                func_Weapon_Equip( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBasePlayer::Weapon_Equip( pWeapon );
            }
        else
            this->CBasePlayer::Weapon_Equip( pWeapon );
    }
    
    void default_Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        CBasePlayer::Weapon_Equip( pWeapon );
    }

    virtual bool Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        PY_OVERRIDE_CHECK( CBasePlayer, Weapon_Switch )
        PY_OVERRIDE_LOG( _entities, CBasePlayer, Weapon_Switch )
        bp::override func_Weapon_Switch = this->get_override( "Weapon_Switch" );
        if( func_Weapon_Switch.ptr() != Py_None )
            try {
                return func_Weapon_Switch( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), viewmodelindex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBasePlayer::Weapon_Switch( pWeapon, viewmodelindex );
            }
        else
            return this->CBasePlayer::Weapon_Switch( pWeapon, viewmodelindex );
    }
    
    bool default_Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        return CBasePlayer::Weapon_Switch( pWeapon, viewmodelindex );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
        PY_OVERRIDE_CHECK( CHL2WarsPlayer, GetServerClass )
        if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
        {
            try
            {
                ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                if( pServerClass )
                    return pServerClass;
            }
            catch( bp::error_already_set & ) 
            {
                PyErr_Print();
            }
        }
        return CHL2WarsPlayer::GetServerClass();
    }

    static int m_lifeState_Get( CHL2WarsPlayer const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CHL2WarsPlayer & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CHL2WarsPlayer const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CHL2WarsPlayer & inst, int val ) { inst.m_takedamage.Set( val ); }

    static int m_nSkin_Get( CHL2WarsPlayer const & inst ) { return inst.m_nSkin.Get(); }

    static void m_nSkin_Set( CHL2WarsPlayer & inst, int val ) { inst.m_nSkin.Set( val ); }

};

void register_CHL2WarsPlayer_class(){

    { //::CHL2WarsPlayer
        typedef bp::class_< CHL2WarsPlayer_wrapper, bp::bases< CBasePlayer >, boost::noncopyable > CHL2WarsPlayer_exposer_t;
        CHL2WarsPlayer_exposer_t CHL2WarsPlayer_exposer = CHL2WarsPlayer_exposer_t( "CHL2WarsPlayer", bp::no_init );
        bp::scope CHL2WarsPlayer_scope( CHL2WarsPlayer_exposer );
        CHL2WarsPlayer_exposer.def( bp::init< >() );
        { //::CHL2WarsPlayer::AddActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*AddActiveAbility_function_type )( ::boost::python::api::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddActiveAbility"
                , AddActiveAbility_function_type( &::CHL2WarsPlayer::AddActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::AddHudHiddenBits
        
            typedef void ( ::CHL2WarsPlayer::*AddHudHiddenBits_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddHudHiddenBits"
                , AddHudHiddenBits_function_type( &::CHL2WarsPlayer::AddHudHiddenBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::CHL2WarsPlayer::AddToGroup
        
            typedef void ( ::CHL2WarsPlayer::*AddToGroup_function_type )( int,::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddToGroup"
                , AddToGroup_function_type( &::CHL2WarsPlayer::AddToGroup )
                , ( bp::arg("group"), bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::AddUnit
        
            typedef void ( ::CHL2WarsPlayer::*AddUnit_function_type )( ::CBaseEntity *,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddUnit"
                , AddUnit_function_type( &::CHL2WarsPlayer::AddUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::CalculateHeight
        
            typedef void ( ::CHL2WarsPlayer::*CalculateHeight_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CalculateHeight"
                , CalculateHeight_function_type( &::CHL2WarsPlayer::CalculateHeight )
                , ( bp::arg("vPosition") ) );
        
        }
        { //::CHL2WarsPlayer::CalculateMouseData
        
            typedef void ( ::CHL2WarsPlayer::*CalculateMouseData_function_type )( ::Vector const &,::Vector const &,::Vector const &,::MouseTraceData_t & ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "CalculateMouseData"
                , CalculateMouseData_function_type( &::CHL2WarsPlayer::CalculateMouseData )
                , ( bp::arg("vMouseAim"), bp::arg("vPos"), bp::arg("vCamOffset"), bp::arg("mousedata") ) );
        
        }
        { //::CHL2WarsPlayer::ChangeFaction
        
            typedef void ( ::CHL2WarsPlayer::*ChangeFaction_function_type )( char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ChangeFaction"
                , ChangeFaction_function_type( &::CHL2WarsPlayer::ChangeFaction )
                , ( bp::arg("faction") ) );
        
        }
        { //::CHL2WarsPlayer::CleanupGroups
        
            typedef void ( ::CHL2WarsPlayer::*CleanupGroups_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CleanupGroups"
                , CleanupGroups_function_type( &::CHL2WarsPlayer::CleanupGroups ) );
        
        }
        { //::CHL2WarsPlayer::ClearActiveAbilities
        
            typedef void ( ::CHL2WarsPlayer::*ClearActiveAbilities_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearActiveAbilities"
                , ClearActiveAbilities_function_type( &::CHL2WarsPlayer::ClearActiveAbilities ) );
        
        }
        { //::CHL2WarsPlayer::ClearGroup
        
            typedef void ( ::CHL2WarsPlayer::*ClearGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearGroup"
                , ClearGroup_function_type( &::CHL2WarsPlayer::ClearGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::ClearMouse
        
            typedef void ( ::CHL2WarsPlayer::*ClearMouse_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearMouse"
                , ClearMouse_function_type( &::CHL2WarsPlayer::ClearMouse ) );
        
        }
        { //::CHL2WarsPlayer::ClearSelection
        
            typedef void ( ::CHL2WarsPlayer::*ClearSelection_function_type )( bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearSelection"
                , ClearSelection_function_type( &::CHL2WarsPlayer::ClearSelection )
                , ( bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::ClientCommand
        
            typedef bool ( ::CHL2WarsPlayer::*ClientCommand_function_type )( ::CCommand const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_ClientCommand_function_type )( ::CCommand const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type(&::CHL2WarsPlayer::ClientCommand)
                , default_ClientCommand_function_type(&CHL2WarsPlayer_wrapper::default_ClientCommand)
                , ( bp::arg("args") ) );
        
        }
        { //::CHL2WarsPlayer::CountGroup
        
            typedef int ( ::CHL2WarsPlayer::*CountGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CountGroup"
                , CountGroup_function_type( &::CHL2WarsPlayer::CountGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::CountUnits
        
            typedef int ( ::CHL2WarsPlayer::*CountUnits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CountUnits"
                , CountUnits_function_type( &::CHL2WarsPlayer::CountUnits ) );
        
        }
        { //::CHL2WarsPlayer::CreateViewModel
        
            typedef void ( ::CHL2WarsPlayer::*CreateViewModel_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CreateViewModel"
                , CreateViewModel_function_type( &::CHL2WarsPlayer::CreateViewModel )
                , ( bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        { //::CHL2WarsPlayer::EyePosition
        
            typedef ::Vector ( ::CHL2WarsPlayer::*EyePosition_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::CHL2WarsPlayer::EyePosition ) );
        
        }
        { //::CHL2WarsPlayer::FindUnit
        
            typedef int ( ::CHL2WarsPlayer::*FindUnit_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "FindUnit"
                , FindUnit_function_type( &::CHL2WarsPlayer::FindUnit )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::GetCamAcceleration
        
            typedef float ( ::CHL2WarsPlayer::*GetCamAcceleration_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamAcceleration"
                , GetCamAcceleration_function_type( &::CHL2WarsPlayer::GetCamAcceleration ) );
        
        }
        { //::CHL2WarsPlayer::GetCamFriction
        
            typedef float ( ::CHL2WarsPlayer::*GetCamFriction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamFriction"
                , GetCamFriction_function_type( &::CHL2WarsPlayer::GetCamFriction ) );
        
        }
        { //::CHL2WarsPlayer::GetCamGroundPos
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetCamGroundPos_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamGroundPos"
                , GetCamGroundPos_function_type( &::CHL2WarsPlayer::GetCamGroundPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetCamLimits
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetCamLimits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamLimits"
                , GetCamLimits_function_type( &::CHL2WarsPlayer::GetCamLimits )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetCamMaxHeight
        
            typedef float ( ::CHL2WarsPlayer::*GetCamMaxHeight_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamMaxHeight"
                , GetCamMaxHeight_function_type( &::CHL2WarsPlayer::GetCamMaxHeight ) );
        
        }
        { //::CHL2WarsPlayer::GetCamSpeed
        
            typedef float ( ::CHL2WarsPlayer::*GetCamSpeed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamSpeed"
                , GetCamSpeed_function_type( &::CHL2WarsPlayer::GetCamSpeed ) );
        
        }
        { //::CHL2WarsPlayer::GetCamStopSpeed
        
            typedef float ( ::CHL2WarsPlayer::*GetCamStopSpeed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamStopSpeed"
                , GetCamStopSpeed_function_type( &::CHL2WarsPlayer::GetCamStopSpeed ) );
        
        }
        { //::CHL2WarsPlayer::GetCameraOffset
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetCameraOffset_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCameraOffset"
                , GetCameraOffset_function_type( &::CHL2WarsPlayer::GetCameraOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetControlledUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetControlledUnit_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetControlledUnit"
                , GetControlledUnit_function_type( &::CHL2WarsPlayer::GetControlledUnit )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetDefaultFaction
        
            typedef char const * ( ::CHL2WarsPlayer::*GetDefaultFaction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetDefaultFaction"
                , GetDefaultFaction_function_type( &::CHL2WarsPlayer::GetDefaultFaction ) );
        
        }
        { //::CHL2WarsPlayer::GetFaction
        
            typedef char const * ( ::CHL2WarsPlayer::*GetFaction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetFaction"
                , GetFaction_function_type( &::CHL2WarsPlayer::GetFaction ) );
        
        }
        { //::CHL2WarsPlayer::GetGroup
        
            typedef ::CUtlVector< CHandle< CBaseEntity >, CUtlMemory< CHandle< CBaseEntity >, int > > const & ( ::CHL2WarsPlayer::*GetGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroup"
                , GetGroup_function_type( &::CHL2WarsPlayer::GetGroup )
                , ( bp::arg("group") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetGroupNumber
        
            typedef int ( ::CHL2WarsPlayer::*GetGroupNumber_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroupNumber"
                , GetGroupNumber_function_type( &::CHL2WarsPlayer::GetGroupNumber )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::GetGroupUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetGroupUnit_function_type )( int,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroupUnit"
                , GetGroupUnit_function_type( &::CHL2WarsPlayer::GetGroupUnit )
                , ( bp::arg("group"), bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetHudHiddenBits
        
            typedef int ( ::CHL2WarsPlayer::*GetHudHiddenBits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetHudHiddenBits"
                , GetHudHiddenBits_function_type( &::CHL2WarsPlayer::GetHudHiddenBits ) );
        
        }
        { //::CHL2WarsPlayer::GetLastAckTickCount
        
            typedef int ( ::CHL2WarsPlayer::*GetLastAckTickCount_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetLastAckTickCount"
                , GetLastAckTickCount_function_type( &::CHL2WarsPlayer::GetLastAckTickCount ) );
        
        }
        { //::CHL2WarsPlayer::GetMouseAim
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetMouseAim_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseAim"
                , GetMouseAim_function_type( &::CHL2WarsPlayer::GetMouseAim )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseCapture
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetMouseCapture_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseCapture"
                , GetMouseCapture_function_type( &::CHL2WarsPlayer::GetMouseCapture )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseData
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseData_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseData"
                , GetMouseData_function_type( &::CHL2WarsPlayer::GetMouseData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftDoublePressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftDoublePressed"
                , GetMouseDataLeftDoublePressed_function_type( &::CHL2WarsPlayer::GetMouseDataLeftDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftPressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftPressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftPressed"
                , GetMouseDataLeftPressed_function_type( &::CHL2WarsPlayer::GetMouseDataLeftPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftReleased
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftReleased_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftReleased"
                , GetMouseDataLeftReleased_function_type( &::CHL2WarsPlayer::GetMouseDataLeftReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightDoublePressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightDoublePressed"
                , GetMouseDataRightDoublePressed_function_type( &::CHL2WarsPlayer::GetMouseDataRightDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightPressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightPressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightPressed"
                , GetMouseDataRightPressed_function_type( &::CHL2WarsPlayer::GetMouseDataRightPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightReleased
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightReleased_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightReleased"
                , GetMouseDataRightReleased_function_type( &::CHL2WarsPlayer::GetMouseDataRightReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CHL2WarsPlayer_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CHL2WarsPlayer::GetPyNetworkType ) );
        
        }
        { //::CHL2WarsPlayer::GetSelection
        
            typedef ::boost::python::list ( ::CHL2WarsPlayer::*GetSelection_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetSelection"
                , GetSelection_function_type( &::CHL2WarsPlayer::GetSelection ) );
        
        }
        { //::CHL2WarsPlayer::GetSingleActiveAbility
        
            typedef ::boost::python::api::object ( ::CHL2WarsPlayer::*GetSingleActiveAbility_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetSingleActiveAbility"
                , GetSingleActiveAbility_function_type( &::CHL2WarsPlayer::GetSingleActiveAbility ) );
        
        }
        { //::CHL2WarsPlayer::GetUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetUnit_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetUnit"
                , GetUnit_function_type( &::CHL2WarsPlayer::GetUnit )
                , ( bp::arg("idx") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::InputSetCameraFollowEntity
        
            typedef void ( ::CHL2WarsPlayer::*InputSetCameraFollowEntity_function_type )( ::inputdata_t & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "InputSetCameraFollowEntity"
                , InputSetCameraFollowEntity_function_type( &::CHL2WarsPlayer::InputSetCameraFollowEntity )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CHL2WarsPlayer::IsActiveAbility
        
            typedef bool ( ::CHL2WarsPlayer::*IsActiveAbility_function_type )( ::boost::python::api::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsActiveAbility"
                , IsActiveAbility_function_type( &::CHL2WarsPlayer::IsActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::IsCamValid
        
            typedef bool ( ::CHL2WarsPlayer::*IsCamValid_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsCamValid"
                , IsCamValid_function_type( &::CHL2WarsPlayer::IsCamValid ) );
        
        }
        { //::CHL2WarsPlayer::IsLeftDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsLeftDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsLeftDoublePressed"
                , IsLeftDoublePressed_function_type( &::CHL2WarsPlayer::IsLeftDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::IsLeftPressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsLeftPressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsLeftPressed"
                , IsLeftPressed_function_type( &::CHL2WarsPlayer::IsLeftPressed ) );
        
        }
        { //::CHL2WarsPlayer::IsMouseHoveringEntity
        
            typedef bool ( ::CHL2WarsPlayer::*IsMouseHoveringEntity_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsMouseHoveringEntity"
                , IsMouseHoveringEntity_function_type( &::CHL2WarsPlayer::IsMouseHoveringEntity )
                , ( bp::arg("pEnt") ) );
        
        }
        { //::CHL2WarsPlayer::IsRequestingFullUpdate
        
            typedef bool ( ::CHL2WarsPlayer::*IsRequestingFullUpdate_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsRequestingFullUpdate"
                , IsRequestingFullUpdate_function_type( &::CHL2WarsPlayer::IsRequestingFullUpdate ) );
        
        }
        { //::CHL2WarsPlayer::IsRightDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsRightDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsRightDoublePressed"
                , IsRightDoublePressed_function_type( &::CHL2WarsPlayer::IsRightDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::IsRightPressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsRightPressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsRightPressed"
                , IsRightPressed_function_type( &::CHL2WarsPlayer::IsRightPressed ) );
        
        }
        { //::CHL2WarsPlayer::IsStrategicModeOn
        
            typedef bool ( ::CHL2WarsPlayer::*IsStrategicModeOn_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "IsStrategicModeOn"
                , IsStrategicModeOn_function_type( &::CHL2WarsPlayer::IsStrategicModeOn ) );
        
        }
        { //::CHL2WarsPlayer::MakeCurrentSelectionGroup
        
            typedef void ( ::CHL2WarsPlayer::*MakeCurrentSelectionGroup_function_type )( int,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "MakeCurrentSelectionGroup"
                , MakeCurrentSelectionGroup_function_type( &::CHL2WarsPlayer::MakeCurrentSelectionGroup )
                , ( bp::arg("group"), bp::arg("bClearGroup") ) );
        
        }
        { //::CHL2WarsPlayer::ModeWantsSpectatorGUI
        
            typedef bool ( ::CHL2WarsPlayer::*ModeWantsSpectatorGUI_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ModeWantsSpectatorGUI"
                , ModeWantsSpectatorGUI_function_type( &::CHL2WarsPlayer::ModeWantsSpectatorGUI )
                , ( bp::arg("iMode") ) );
        
        }
        { //::CHL2WarsPlayer::NoClipStateChanged
        
            typedef void ( ::CHL2WarsPlayer::*NoClipStateChanged_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "NoClipStateChanged"
                , NoClipStateChanged_function_type( &::CHL2WarsPlayer::NoClipStateChanged ) );
        
        }
        { //::CHL2WarsPlayer::OnChangeOwnerNumber
        
            typedef void ( ::CHL2WarsPlayer::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CHL2WarsPlayer::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CHL2WarsPlayer_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonDoublePressed
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonDoublePressed"
                , OnLeftMouseButtonDoublePressed_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonDoublePressed)
                , default_OnLeftMouseButtonDoublePressed_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonPressed
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonPressed"
                , OnLeftMouseButtonPressed_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonPressed)
                , default_OnLeftMouseButtonPressed_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonReleased
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonReleased"
                , OnLeftMouseButtonReleased_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonReleased)
                , default_OnLeftMouseButtonReleased_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonDoublePressed
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonDoublePressed"
                , OnRightMouseButtonDoublePressed_function_type(&::CHL2WarsPlayer::OnRightMouseButtonDoublePressed)
                , default_OnRightMouseButtonDoublePressed_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonPressed
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonPressed"
                , OnRightMouseButtonPressed_function_type(&::CHL2WarsPlayer::OnRightMouseButtonPressed)
                , default_OnRightMouseButtonPressed_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonReleased
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonReleased"
                , OnRightMouseButtonReleased_function_type(&::CHL2WarsPlayer::OnRightMouseButtonReleased)
                , default_OnRightMouseButtonReleased_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnSelectionChanged
        
            typedef void ( ::CHL2WarsPlayer::*OnSelectionChanged_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnSelectionChanged"
                , OnSelectionChanged_function_type( &::CHL2WarsPlayer::OnSelectionChanged ) );
        
        }
        { //::CHL2WarsPlayer::OrderUnits
        
            typedef void ( ::CHL2WarsPlayer::*OrderUnits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OrderUnits"
                , OrderUnits_function_type( &::CHL2WarsPlayer::OrderUnits ) );
        
        }
        { //::CHL2WarsPlayer::PreThink
        
            typedef void ( ::CHL2WarsPlayer::*PreThink_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PreThink"
                , PreThink_function_type( &::CHL2WarsPlayer::PreThink ) );
        
        }
        { //::CHL2WarsPlayer::Precache
        
            typedef void ( ::CHL2WarsPlayer::*Precache_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Precache_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Precache"
                , Precache_function_type(&::CHL2WarsPlayer::Precache)
                , default_Precache_function_type(&CHL2WarsPlayer_wrapper::default_Precache) );
        
        }
        { //::CHL2WarsPlayer::RemoveActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*RemoveActiveAbility_function_type )( ::boost::python::api::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveActiveAbility"
                , RemoveActiveAbility_function_type( &::CHL2WarsPlayer::RemoveActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::RemoveHudHiddenBits
        
            typedef void ( ::CHL2WarsPlayer::*RemoveHudHiddenBits_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveHudHiddenBits"
                , RemoveHudHiddenBits_function_type( &::CHL2WarsPlayer::RemoveHudHiddenBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::CHL2WarsPlayer::RemoveUnit
        
            typedef void ( ::CHL2WarsPlayer::*RemoveUnit_function_type )( int,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::CHL2WarsPlayer::RemoveUnit )
                , ( bp::arg("idx"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::RemoveUnit
        
            typedef void ( ::CHL2WarsPlayer::*RemoveUnit_function_type )( ::CBaseEntity *,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::CHL2WarsPlayer::RemoveUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::ScheduleSelectionChangedSignal
        
            typedef void ( ::CHL2WarsPlayer::*ScheduleSelectionChangedSignal_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ScheduleSelectionChangedSignal"
                , ScheduleSelectionChangedSignal_function_type( &::CHL2WarsPlayer::ScheduleSelectionChangedSignal ) );
        
        }
        { //::CHL2WarsPlayer::SelectGroup
        
            typedef void ( ::CHL2WarsPlayer::*SelectGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SelectGroup"
                , SelectGroup_function_type( &::CHL2WarsPlayer::SelectGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::SetAnimation
        
            typedef void ( ::CHL2WarsPlayer::*SetAnimation_function_type )( ::PLAYER_ANIM ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetAnimation"
                , SetAnimation_function_type( &::CHL2WarsPlayer::SetAnimation )
                , ( bp::arg("playerAnim") ) );
        
        }
        { //::CHL2WarsPlayer::SetCamLimits
        
            typedef void ( ::CHL2WarsPlayer::*SetCamLimits_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetCamLimits"
                , SetCamLimits_function_type( &::CHL2WarsPlayer::SetCamLimits )
                , ( bp::arg("limits") ) );
        
        }
        { //::CHL2WarsPlayer::SetCameraOffset
        
            typedef void ( ::CHL2WarsPlayer::*SetCameraOffset_function_type )( ::Vector & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetCameraOffset"
                , SetCameraOffset_function_type( &::CHL2WarsPlayer::SetCameraOffset )
                , ( bp::arg("offs") ) );
        
        }
        { //::CHL2WarsPlayer::SetControlledUnit
        
            typedef void ( ::CHL2WarsPlayer::*SetControlledUnit_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetControlledUnit"
                , SetControlledUnit_function_type( &::CHL2WarsPlayer::SetControlledUnit )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::SetIsRequestingFullUpdate
        
            typedef void ( ::CHL2WarsPlayer::*SetIsRequestingFullUpdate_function_type )( bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetIsRequestingFullUpdate"
                , SetIsRequestingFullUpdate_function_type( &::CHL2WarsPlayer::SetIsRequestingFullUpdate )
                , ( bp::arg("bRequestingFullUpdate") ) );
        
        }
        { //::CHL2WarsPlayer::SetLastAckTickCount
        
            typedef void ( ::CHL2WarsPlayer::*SetLastAckTickCount_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetLastAckTickCount"
                , SetLastAckTickCount_function_type( &::CHL2WarsPlayer::SetLastAckTickCount )
                , ( bp::arg("iAckTickCount") ) );
        
        }
        { //::CHL2WarsPlayer::SetMouseCapture
        
            typedef void ( ::CHL2WarsPlayer::*SetMouseCapture_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetMouseCapture"
                , SetMouseCapture_function_type( &::CHL2WarsPlayer::SetMouseCapture )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CHL2WarsPlayer::SetSingleActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*SetSingleActiveAbility_function_type )( ::boost::python::api::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetSingleActiveAbility"
                , SetSingleActiveAbility_function_type( &::CHL2WarsPlayer::SetSingleActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::SetStrategicMode
        
            typedef void ( ::CHL2WarsPlayer::*SetStrategicMode_function_type )( bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetStrategicMode"
                , SetStrategicMode_function_type( &::CHL2WarsPlayer::SetStrategicMode )
                , ( bp::arg("state") ) );
        
        }
        { //::CHL2WarsPlayer::SetupVisibility
        
            typedef void ( ::CHL2WarsPlayer::*SetupVisibility_function_type )( ::CBaseEntity *,unsigned char *,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetupVisibility"
                , SetupVisibility_function_type( &::CHL2WarsPlayer::SetupVisibility )
                , ( bp::arg("pViewEntity"), bp::arg("pvs"), bp::arg("pvssize") ) );
        
        }
        { //::CHL2WarsPlayer::SnapCameraTo
        
            typedef void ( ::CHL2WarsPlayer::*SnapCameraTo_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SnapCameraTo"
                , SnapCameraTo_function_type( &::CHL2WarsPlayer::SnapCameraTo )
                , ( bp::arg("vPos") ) );
        
        }
        { //::CHL2WarsPlayer::Spawn
        
            typedef void ( ::CHL2WarsPlayer::*Spawn_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Spawn_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CHL2WarsPlayer::Spawn)
                , default_Spawn_function_type(&CHL2WarsPlayer_wrapper::default_Spawn) );
        
        }
        { //::CHL2WarsPlayer::UpdateButtonState
        
            typedef void ( ::CHL2WarsPlayer::*UpdateButtonState_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateButtonState"
                , UpdateButtonState_function_type( &::CHL2WarsPlayer::UpdateButtonState )
                , ( bp::arg("nUserCmdButtonMask") ) );
        
        }
        { //::CHL2WarsPlayer::UpdateCameraSettings
        
            typedef void ( ::CHL2WarsPlayer::*UpdateCameraSettings_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateCameraSettings"
                , UpdateCameraSettings_function_type( &::CHL2WarsPlayer::UpdateCameraSettings ) );
        
        }
        { //::CHL2WarsPlayer::UpdateControl
        
            typedef void ( ::CHL2WarsPlayer::*UpdateControl_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateControl"
                , UpdateControl_function_type( &::CHL2WarsPlayer::UpdateControl ) );
        
        }
        { //::CHL2WarsPlayer::UpdateMouseData
        
            typedef void ( ::CHL2WarsPlayer::*UpdateMouseData_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateMouseData"
                , UpdateMouseData_function_type( &::CHL2WarsPlayer::UpdateMouseData )
                , ( bp::arg("vMouseAim") ) );
        
        }
        { //::CHL2WarsPlayer::UpdateOnRemove
        
            typedef void ( ::CHL2WarsPlayer::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CHL2WarsPlayer::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CHL2WarsPlayer_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CHL2WarsPlayer::UpdateSelection
        
            typedef void ( ::CHL2WarsPlayer::*UpdateSelection_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateSelection"
                , UpdateSelection_function_type( &::CHL2WarsPlayer::UpdateSelection ) );
        
        }
        { //::CHL2WarsPlayer::UpdateTransmitState
        
            typedef int ( ::CHL2WarsPlayer::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CHL2WarsPlayer::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CHL2WarsPlayer_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CHL2WarsPlayer::VPhysicsShadowUpdate
        
            typedef void ( ::CHL2WarsPlayer::*VPhysicsShadowUpdate_function_type )( ::IPhysicsObject * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "VPhysicsShadowUpdate"
                , VPhysicsShadowUpdate_function_type( &::CHL2WarsPlayer::VPhysicsShadowUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CHL2WarsPlayer::WasLeftDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*WasLeftDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "WasLeftDoublePressed"
                , WasLeftDoublePressed_function_type( &::CHL2WarsPlayer::WasLeftDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::WasRightDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*WasRightDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "WasRightDoublePressed"
                , WasRightDoublePressed_function_type( &::CHL2WarsPlayer::WasRightDoublePressed ) );
        
        }
        { //::CBasePlayer::Activate
        
            typedef void ( ::CBasePlayer::*Activate_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Activate_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBasePlayer::Activate)
                , default_Activate_function_type(&CHL2WarsPlayer_wrapper::default_Activate) );
        
        }
        { //::CBaseCombatCharacter::BecomeRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "BecomeRagdoll"
                , BecomeRagdoll_function_type(&::CBaseCombatCharacter::BecomeRagdoll)
                , default_BecomeRagdoll_function_type(&CHL2WarsPlayer_wrapper::default_BecomeRagdoll)
                , ( bp::arg("info"), bp::arg("forceVector") ) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CHL2WarsPlayer_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CHL2WarsPlayer_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CHL2WarsPlayer_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CHL2WarsPlayer_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CHL2WarsPlayer_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBasePlayer::DoImpactEffect
        
            typedef void ( ::CBasePlayer::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBasePlayer::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CHL2WarsPlayer_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBasePlayer::DrawDebugGeometryOverlays
        
            typedef void ( ::CBasePlayer::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBasePlayer::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CHL2WarsPlayer_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CHL2WarsPlayer_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CHL2WarsPlayer_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CHL2WarsPlayer_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::Event_Killed
        
            typedef void ( ::CBasePlayer::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBasePlayer::Event_Killed)
                , default_Event_Killed_function_type(&CHL2WarsPlayer_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::Event_KilledOther
        
            typedef void ( ::CBasePlayer::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBasePlayer::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CHL2WarsPlayer_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CHL2WarsPlayer_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CHL2WarsPlayer_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetTracerType
        
            typedef char const * ( ::CBasePlayer::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CHL2WarsPlayer_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBasePlayer::GetTracerType)
                , default_GetTracerType_function_type(&CHL2WarsPlayer_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBasePlayer::MakeTracer
        
            typedef void ( ::CBasePlayer::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBasePlayer::MakeTracer)
                , default_MakeTracer_function_type(&CHL2WarsPlayer_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CHL2WarsPlayer_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBasePlayer::OnRestore
        
            typedef void ( ::CBasePlayer::*OnRestore_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBasePlayer::OnRestore)
                , default_OnRestore_function_type(&CHL2WarsPlayer_wrapper::default_OnRestore) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CHL2WarsPlayer_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBasePlayer::OnTakeDamage
        
            typedef int ( ::CBasePlayer::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBasePlayer::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CHL2WarsPlayer_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::OnTakeDamage_Alive
        
            typedef int ( ::CBasePlayer::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type(&::CBasePlayer::OnTakeDamage_Alive)
                , default_OnTakeDamage_Alive_function_type(&CHL2WarsPlayer_wrapper::default_OnTakeDamage_Alive)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CHL2WarsPlayer_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CHL2WarsPlayer_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CHL2WarsPlayer_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CHL2WarsPlayer_wrapper::*OnNewModel_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CHL2WarsPlayer_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseAnimating::PyPostOnNewModel
        
            typedef void ( CHL2WarsPlayer_wrapper::*PostOnNewModel_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PostOnNewModel"
                , PostOnNewModel_function_type( &CHL2WarsPlayer_wrapper::default_PostOnNewModel ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CHL2WarsPlayer_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CHL2WarsPlayer_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CHL2WarsPlayer_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CHL2WarsPlayer_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CHL2WarsPlayer_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBasePlayer::VPhysicsCollision
        
            typedef void ( ::CBasePlayer::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBasePlayer::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CHL2WarsPlayer_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBasePlayer::Weapon_Drop
        
            typedef void ( ::CBasePlayer::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type(&::CBasePlayer::Weapon_Drop)
                , default_Weapon_Drop_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Drop)
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget"), bp::arg("pVelocity") ) );
        
        }
        { //::CBasePlayer::Weapon_Equip
        
            typedef void ( ::CBasePlayer::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type(&::CBasePlayer::Weapon_Equip)
                , default_Weapon_Equip_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Equip)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_Switch
        
            typedef bool ( ::CBasePlayer::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type(&::CBasePlayer::Weapon_Switch)
                , default_Weapon_Switch_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Switch)
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        CHL2WarsPlayer_exposer.staticmethod( "GetPyNetworkType" );
        { //property "unit"[fget=::CHL2WarsPlayer::GetControlledUnit, fset=::CHL2WarsPlayer::SetControlledUnit]
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*fget )(  ) const;
            typedef void ( ::CHL2WarsPlayer::*fset )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.add_property( 
                "unit"
                , bp::make_function( 
                      fget( &::CHL2WarsPlayer::GetControlledUnit )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::CHL2WarsPlayer::SetControlledUnit ) );
        
        }
        CHL2WarsPlayer_exposer.add_property( "lifestate", &CHL2WarsPlayer_wrapper::m_lifeState_Get, &CHL2WarsPlayer_wrapper::m_lifeState_Set );
        CHL2WarsPlayer_exposer.add_property( "takedamage", &CHL2WarsPlayer_wrapper::m_takedamage_Get, &CHL2WarsPlayer_wrapper::m_takedamage_Set );
        CHL2WarsPlayer_exposer.add_property( "skin", &CHL2WarsPlayer_wrapper::m_nSkin_Get, &CHL2WarsPlayer_wrapper::m_nSkin_Set );
    }

}

