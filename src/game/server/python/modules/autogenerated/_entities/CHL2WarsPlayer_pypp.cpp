// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "cbase.h"
#include "mathlib/vmatrix.h"
#include "utlvector.h"
#include "shareddefs.h"
#include "util.h"
#include "takedamageinfo.h"
#include "baseanimating.h"
#include "BaseAnimatingOverlay.h"
#include "baseflex.h"
#include "basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "player.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "unit_sense.h"
#include "wars_func_unit.h"
#include "soundent.h"
#include "gib.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "entityoutput.h"
#include "props.h"
#include "modelentities.h"
#include "triggers.h"
#include "wars_weapon.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "src_python_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "src_python_converters_ents.h"
#include "src_python.h"
#include "tier0/memdbgon.h"
#include "CHL2WarsPlayer_pypp.hpp"

namespace bp = boost::python;

struct CHL2WarsPlayer_wrapper : CHL2WarsPlayer, bp::wrapper< CHL2WarsPlayer > {

    CHL2WarsPlayer_wrapper( )
    : CHL2WarsPlayer( )
      , bp::wrapper< CHL2WarsPlayer >(){
        // null constructor
    
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CHL2WarsPlayer::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonDoublePressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonDoublePressed( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonDoublePressed = this->get_override( "OnLeftMouseButtonDoublePressed" );
        if( func_OnLeftMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonDoublePressed( boost::ref(data) );
    }

    virtual void OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonPressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonPressed( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonPressed = this->get_override( "OnLeftMouseButtonPressed" );
        if( func_OnLeftMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonPressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonPressed( boost::ref(data) );
    }

    virtual void OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnLeftMouseButtonReleased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnLeftMouseButtonReleased( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnLeftMouseButtonReleased = this->get_override( "OnLeftMouseButtonReleased" );
        if( func_OnLeftMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnLeftMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
    }
    
    void default_OnLeftMouseButtonReleased( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnLeftMouseButtonReleased( boost::ref(data) );
    }

    virtual void OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonDoublePressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonDoublePressed( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonDoublePressed = this->get_override( "OnRightMouseButtonDoublePressed" );
        if( func_OnRightMouseButtonDoublePressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonDoublePressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonDoublePressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonDoublePressed( boost::ref(data) );
    }

    virtual void OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonPressed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonPressed( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonPressed = this->get_override( "OnRightMouseButtonPressed" );
        if( func_OnRightMouseButtonPressed.ptr() != Py_None )
            try {
                func_OnRightMouseButtonPressed( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonPressed( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonPressed( boost::ref(data) );
    }

    virtual void OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRightMouseButtonReleased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRightMouseButtonReleased( boost::ref(data) ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRightMouseButtonReleased = this->get_override( "OnRightMouseButtonReleased" );
        if( func_OnRightMouseButtonReleased.ptr() != Py_None )
            try {
                func_OnRightMouseButtonReleased( boost::ref(data) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
            }
        else
            this->CHL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
    }
    
    void default_OnRightMouseButtonReleased( ::MouseTraceData_t const & data ) {
        CHL2WarsPlayer::OnRightMouseButtonReleased( boost::ref(data) );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::Precache(  );
            }
        else
            this->CHL2WarsPlayer::Precache(  );
    }
    
    void default_Precache(  ) {
        CHL2WarsPlayer::Precache( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::Spawn(  );
            }
        else
            this->CHL2WarsPlayer::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CHL2WarsPlayer::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHL2WarsPlayer::UpdateOnRemove(  );
            }
        else
            this->CHL2WarsPlayer::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CHL2WarsPlayer::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateTransmitState: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateTransmitState(  ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHL2WarsPlayer::UpdateTransmitState(  );
            }
        else
            return this->CHL2WarsPlayer::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CHL2WarsPlayer::UpdateTransmitState( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CorpseGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CorpseGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
            }
        else
            this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Gibbed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Gibbed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseCombatCharacter::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseCombatCharacter::Event_Killed( boost::ref(info) );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_KilledOther: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ModifyOrAppendCriteria: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ModifyOrAppendCriteria( boost::ref(set) ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSequenceSet: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSequenceSet( nOldSequence ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage( boost::ref(info) );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage_Alive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage_Alive( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage_Alive( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void PyOnNewModel(  ){
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( boost::ref(info), boost::ref(vecDir), boost::python::ptr(ptr) );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual void Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Weapon_Drop: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Weapon_Drop( boost::python::ptr(pWeapon), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Weapon_Drop = this->get_override( "Weapon_Drop" );
        if( func_Weapon_Drop.ptr() != Py_None )
            try {
                func_Weapon_Drop( boost::python::ptr(pWeapon), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Weapon_Drop( boost::python::ptr(pWeapon), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
            }
        else
            this->CBaseCombatCharacter::Weapon_Drop( boost::python::ptr(pWeapon), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
    }
    
    void default_Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        CBaseCombatCharacter::Weapon_Drop( boost::python::ptr(pWeapon), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
    }

    virtual void Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Weapon_Equip: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Weapon_Equip( boost::python::ptr(pWeapon) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Weapon_Equip = this->get_override( "Weapon_Equip" );
        if( func_Weapon_Equip.ptr() != Py_None )
            try {
                func_Weapon_Equip( boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Weapon_Equip( boost::python::ptr(pWeapon) );
            }
        else
            this->CBaseCombatCharacter::Weapon_Equip( boost::python::ptr(pWeapon) );
    }
    
    void default_Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        CBaseCombatCharacter::Weapon_Equip( boost::python::ptr(pWeapon) );
    }

    virtual bool Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Weapon_Switch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Weapon_Switch( boost::python::ptr(pWeapon), viewmodelindex ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Weapon_Switch = this->get_override( "Weapon_Switch" );
        if( func_Weapon_Switch.ptr() != Py_None )
            try {
                return func_Weapon_Switch( boost::python::ptr(pWeapon), viewmodelindex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Weapon_Switch( boost::python::ptr(pWeapon), viewmodelindex );
            }
        else
            return this->CBaseCombatCharacter::Weapon_Switch( boost::python::ptr(pWeapon), viewmodelindex );
    }
    
    bool default_Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        return CBaseCombatCharacter::Weapon_Switch( boost::python::ptr(pWeapon), viewmodelindex );
    }

    virtual ServerClass* GetServerClass() {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetServerClass(  ) of Class: CHL2WarsPlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>("pyServerClass", GetPyInstance(), NULL, true);
        if( pServerClass )
            return pServerClass;
        return CHL2WarsPlayer::GetServerClass();
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: CHL2WarsPlayer\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->CHL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->CHL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return CHL2WarsPlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

};

void register_CHL2WarsPlayer_class(){

    { //::CHL2WarsPlayer
        typedef bp::class_< CHL2WarsPlayer_wrapper, bp::bases< CBasePlayer >, boost::noncopyable > CHL2WarsPlayer_exposer_t;
        CHL2WarsPlayer_exposer_t CHL2WarsPlayer_exposer = CHL2WarsPlayer_exposer_t( "CHL2WarsPlayer", bp::no_init );
        bp::scope CHL2WarsPlayer_scope( CHL2WarsPlayer_exposer );
        CHL2WarsPlayer_exposer.def( bp::init< >() );
        { //::CHL2WarsPlayer::AddActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*AddActiveAbility_function_type )( ::boost::python::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddActiveAbility"
                , AddActiveAbility_function_type( &::CHL2WarsPlayer::AddActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::AddHudHiddenBits
        
            typedef void ( ::CHL2WarsPlayer::*AddHudHiddenBits_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddHudHiddenBits"
                , AddHudHiddenBits_function_type( &::CHL2WarsPlayer::AddHudHiddenBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::CHL2WarsPlayer::AddToGroup
        
            typedef void ( ::CHL2WarsPlayer::*AddToGroup_function_type )( int,::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddToGroup"
                , AddToGroup_function_type( &::CHL2WarsPlayer::AddToGroup )
                , ( bp::arg("group"), bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::AddUnit
        
            typedef void ( ::CHL2WarsPlayer::*AddUnit_function_type )( ::CBaseEntity *,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "AddUnit"
                , AddUnit_function_type( &::CHL2WarsPlayer::AddUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::CalculateHeight
        
            typedef void ( ::CHL2WarsPlayer::*CalculateHeight_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CalculateHeight"
                , CalculateHeight_function_type( &::CHL2WarsPlayer::CalculateHeight )
                , ( bp::arg("vPosition") ) );
        
        }
        { //::CHL2WarsPlayer::ChangeFaction
        
            typedef void ( ::CHL2WarsPlayer::*ChangeFaction_function_type )( char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ChangeFaction"
                , ChangeFaction_function_type( &::CHL2WarsPlayer::ChangeFaction )
                , ( bp::arg("faction") ) );
        
        }
        { //::CHL2WarsPlayer::CleanupGroups
        
            typedef void ( ::CHL2WarsPlayer::*CleanupGroups_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CleanupGroups"
                , CleanupGroups_function_type( &::CHL2WarsPlayer::CleanupGroups ) );
        
        }
        { //::CHL2WarsPlayer::ClearActiveAbilities
        
            typedef void ( ::CHL2WarsPlayer::*ClearActiveAbilities_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearActiveAbilities"
                , ClearActiveAbilities_function_type( &::CHL2WarsPlayer::ClearActiveAbilities ) );
        
        }
        { //::CHL2WarsPlayer::ClearGroup
        
            typedef void ( ::CHL2WarsPlayer::*ClearGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearGroup"
                , ClearGroup_function_type( &::CHL2WarsPlayer::ClearGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::ClearMouse
        
            typedef void ( ::CHL2WarsPlayer::*ClearMouse_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearMouse"
                , ClearMouse_function_type( &::CHL2WarsPlayer::ClearMouse ) );
        
        }
        { //::CHL2WarsPlayer::ClearSelection
        
            typedef void ( ::CHL2WarsPlayer::*ClearSelection_function_type )( bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClearSelection"
                , ClearSelection_function_type( &::CHL2WarsPlayer::ClearSelection )
                , ( bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::ClientCommand
        
            typedef bool ( ::CHL2WarsPlayer::*ClientCommand_function_type )( ::CCommand const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type( &::CHL2WarsPlayer::ClientCommand )
                , ( bp::arg("args") ) );
        
        }
        { //::CHL2WarsPlayer::CountGroup
        
            typedef int ( ::CHL2WarsPlayer::*CountGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CountGroup"
                , CountGroup_function_type( &::CHL2WarsPlayer::CountGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::CountUnits
        
            typedef int ( ::CHL2WarsPlayer::*CountUnits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CountUnits"
                , CountUnits_function_type( &::CHL2WarsPlayer::CountUnits ) );
        
        }
        { //::CHL2WarsPlayer::CreateViewModel
        
            typedef void ( ::CHL2WarsPlayer::*CreateViewModel_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CreateViewModel"
                , CreateViewModel_function_type( &::CHL2WarsPlayer::CreateViewModel )
                , ( bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        { //::CHL2WarsPlayer::EyePosition
        
            typedef ::Vector ( ::CHL2WarsPlayer::*EyePosition_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::CHL2WarsPlayer::EyePosition ) );
        
        }
        { //::CHL2WarsPlayer::FindUnit
        
            typedef int ( ::CHL2WarsPlayer::*FindUnit_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "FindUnit"
                , FindUnit_function_type( &::CHL2WarsPlayer::FindUnit )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::GetCamAcceleration
        
            typedef float ( ::CHL2WarsPlayer::*GetCamAcceleration_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamAcceleration"
                , GetCamAcceleration_function_type( &::CHL2WarsPlayer::GetCamAcceleration ) );
        
        }
        { //::CHL2WarsPlayer::GetCamFriction
        
            typedef float ( ::CHL2WarsPlayer::*GetCamFriction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamFriction"
                , GetCamFriction_function_type( &::CHL2WarsPlayer::GetCamFriction ) );
        
        }
        { //::CHL2WarsPlayer::GetCamGroundPos
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetCamGroundPos_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamGroundPos"
                , GetCamGroundPos_function_type( &::CHL2WarsPlayer::GetCamGroundPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetCamHeight
        
            typedef float ( ::CHL2WarsPlayer::*GetCamHeight_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamHeight"
                , GetCamHeight_function_type( &::CHL2WarsPlayer::GetCamHeight ) );
        
        }
        { //::CHL2WarsPlayer::GetCamMaxHeight
        
            typedef float ( ::CHL2WarsPlayer::*GetCamMaxHeight_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamMaxHeight"
                , GetCamMaxHeight_function_type( &::CHL2WarsPlayer::GetCamMaxHeight ) );
        
        }
        { //::CHL2WarsPlayer::GetCamSpeed
        
            typedef float ( ::CHL2WarsPlayer::*GetCamSpeed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamSpeed"
                , GetCamSpeed_function_type( &::CHL2WarsPlayer::GetCamSpeed ) );
        
        }
        { //::CHL2WarsPlayer::GetCamStopSpeed
        
            typedef float ( ::CHL2WarsPlayer::*GetCamStopSpeed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCamStopSpeed"
                , GetCamStopSpeed_function_type( &::CHL2WarsPlayer::GetCamStopSpeed ) );
        
        }
        { //::CHL2WarsPlayer::GetCameraOffset
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetCameraOffset_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetCameraOffset"
                , GetCameraOffset_function_type( &::CHL2WarsPlayer::GetCameraOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetControlledUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetControlledUnit_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetControlledUnit"
                , GetControlledUnit_function_type( &::CHL2WarsPlayer::GetControlledUnit )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetDefaultFaction
        
            typedef char const * ( ::CHL2WarsPlayer::*GetDefaultFaction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetDefaultFaction"
                , GetDefaultFaction_function_type( &::CHL2WarsPlayer::GetDefaultFaction ) );
        
        }
        { //::CHL2WarsPlayer::GetFaction
        
            typedef char const * ( ::CHL2WarsPlayer::*GetFaction_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetFaction"
                , GetFaction_function_type( &::CHL2WarsPlayer::GetFaction ) );
        
        }
        { //::CHL2WarsPlayer::GetGroup
        
            typedef ::CUtlVector< CHandle< CBaseEntity >, CUtlMemory< CHandle< CBaseEntity >, int > > const & ( ::CHL2WarsPlayer::*GetGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroup"
                , GetGroup_function_type( &::CHL2WarsPlayer::GetGroup )
                , ( bp::arg("group") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetGroupNumber
        
            typedef int ( ::CHL2WarsPlayer::*GetGroupNumber_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroupNumber"
                , GetGroupNumber_function_type( &::CHL2WarsPlayer::GetGroupNumber )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::GetGroupUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetGroupUnit_function_type )( int,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetGroupUnit"
                , GetGroupUnit_function_type( &::CHL2WarsPlayer::GetGroupUnit )
                , ( bp::arg("group"), bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetHudHiddenBits
        
            typedef int ( ::CHL2WarsPlayer::*GetHudHiddenBits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetHudHiddenBits"
                , GetHudHiddenBits_function_type( &::CHL2WarsPlayer::GetHudHiddenBits ) );
        
        }
        { //::CHL2WarsPlayer::GetMouseAim
        
            typedef ::Vector const & ( ::CHL2WarsPlayer::*GetMouseAim_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseAim"
                , GetMouseAim_function_type( &::CHL2WarsPlayer::GetMouseAim )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseCapture
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetMouseCapture_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseCapture"
                , GetMouseCapture_function_type( &::CHL2WarsPlayer::GetMouseCapture )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseData
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseData_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseData"
                , GetMouseData_function_type( &::CHL2WarsPlayer::GetMouseData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftDoublePressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftDoublePressed"
                , GetMouseDataLeftDoublePressed_function_type( &::CHL2WarsPlayer::GetMouseDataLeftDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftPressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftPressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftPressed"
                , GetMouseDataLeftPressed_function_type( &::CHL2WarsPlayer::GetMouseDataLeftPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataLeftReleased
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataLeftReleased_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataLeftReleased"
                , GetMouseDataLeftReleased_function_type( &::CHL2WarsPlayer::GetMouseDataLeftReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightDoublePressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightDoublePressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightDoublePressed"
                , GetMouseDataRightDoublePressed_function_type( &::CHL2WarsPlayer::GetMouseDataRightDoublePressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightPressed
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightPressed_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightPressed"
                , GetMouseDataRightPressed_function_type( &::CHL2WarsPlayer::GetMouseDataRightPressed )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetMouseDataRightReleased
        
            typedef ::MouseTraceData_t const & ( ::CHL2WarsPlayer::*GetMouseDataRightReleased_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "GetMouseDataRightReleased"
                , GetMouseDataRightReleased_function_type( &::CHL2WarsPlayer::GetMouseDataRightReleased )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CHL2WarsPlayer::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CHL2WarsPlayer_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CHL2WarsPlayer::GetPyNetworkType ) );
        
        }
        { //::CHL2WarsPlayer::GetSelection
        
            typedef ::boost::python::list ( ::CHL2WarsPlayer::*GetSelection_function_type )( int,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetSelection"
                , GetSelection_function_type( &::CHL2WarsPlayer::GetSelection )
                , ( bp::arg("rangemin")=(int)(0), bp::arg("rangemax")=(int)(-0x000000001) ) );
        
        }
        { //::CHL2WarsPlayer::GetSingleActiveAbility
        
            typedef ::boost::python::object ( ::CHL2WarsPlayer::*GetSingleActiveAbility_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetSingleActiveAbility"
                , GetSingleActiveAbility_function_type( &::CHL2WarsPlayer::GetSingleActiveAbility ) );
        
        }
        { //::CHL2WarsPlayer::GetUnit
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*GetUnit_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetUnit"
                , GetUnit_function_type( &::CHL2WarsPlayer::GetUnit )
                , ( bp::arg("idx") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CHL2WarsPlayer::IsActiveAbility
        
            typedef bool ( ::CHL2WarsPlayer::*IsActiveAbility_function_type )( ::boost::python::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsActiveAbility"
                , IsActiveAbility_function_type( &::CHL2WarsPlayer::IsActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::IsLeftDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsLeftDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsLeftDoublePressed"
                , IsLeftDoublePressed_function_type( &::CHL2WarsPlayer::IsLeftDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::IsLeftPressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsLeftPressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsLeftPressed"
                , IsLeftPressed_function_type( &::CHL2WarsPlayer::IsLeftPressed ) );
        
        }
        { //::CHL2WarsPlayer::IsRightDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsRightDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsRightDoublePressed"
                , IsRightDoublePressed_function_type( &::CHL2WarsPlayer::IsRightDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::IsRightPressed
        
            typedef bool ( ::CHL2WarsPlayer::*IsRightPressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "IsRightPressed"
                , IsRightPressed_function_type( &::CHL2WarsPlayer::IsRightPressed ) );
        
        }
        { //::CHL2WarsPlayer::IsStrategicModeOn
        
            typedef bool ( ::CHL2WarsPlayer::*IsStrategicModeOn_function_type )(  ) const;
            
            CHL2WarsPlayer_exposer.def( 
                "IsStrategicModeOn"
                , IsStrategicModeOn_function_type( &::CHL2WarsPlayer::IsStrategicModeOn ) );
        
        }
        { //::CHL2WarsPlayer::MakeCurrentSelectionGroup
        
            typedef void ( ::CHL2WarsPlayer::*MakeCurrentSelectionGroup_function_type )( int,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "MakeCurrentSelectionGroup"
                , MakeCurrentSelectionGroup_function_type( &::CHL2WarsPlayer::MakeCurrentSelectionGroup )
                , ( bp::arg("group"), bp::arg("bClearGroup") ) );
        
        }
        { //::CHL2WarsPlayer::ModeWantsSpectatorGUI
        
            typedef bool ( ::CHL2WarsPlayer::*ModeWantsSpectatorGUI_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ModeWantsSpectatorGUI"
                , ModeWantsSpectatorGUI_function_type( &::CHL2WarsPlayer::ModeWantsSpectatorGUI )
                , ( bp::arg("iMode") ) );
        
        }
        { //::CHL2WarsPlayer::OnChangeOwnerNumber
        
            typedef void ( ::CHL2WarsPlayer::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CHL2WarsPlayer::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CHL2WarsPlayer_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonDoublePressed
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonDoublePressed"
                , OnLeftMouseButtonDoublePressed_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonDoublePressed)
                , default_OnLeftMouseButtonDoublePressed_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonPressed
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonPressed"
                , OnLeftMouseButtonPressed_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonPressed)
                , default_OnLeftMouseButtonPressed_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnLeftMouseButtonReleased
        
            typedef void ( ::CHL2WarsPlayer::*OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnLeftMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnLeftMouseButtonReleased"
                , OnLeftMouseButtonReleased_function_type(&::CHL2WarsPlayer::OnLeftMouseButtonReleased)
                , default_OnLeftMouseButtonReleased_function_type(&CHL2WarsPlayer_wrapper::default_OnLeftMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonDoublePressed
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonDoublePressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonDoublePressed"
                , OnRightMouseButtonDoublePressed_function_type(&::CHL2WarsPlayer::OnRightMouseButtonDoublePressed)
                , default_OnRightMouseButtonDoublePressed_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonDoublePressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonPressed
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonPressed_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonPressed"
                , OnRightMouseButtonPressed_function_type(&::CHL2WarsPlayer::OnRightMouseButtonPressed)
                , default_OnRightMouseButtonPressed_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonPressed)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnRightMouseButtonReleased
        
            typedef void ( ::CHL2WarsPlayer::*OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnRightMouseButtonReleased_function_type )( ::MouseTraceData_t const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnRightMouseButtonReleased"
                , OnRightMouseButtonReleased_function_type(&::CHL2WarsPlayer::OnRightMouseButtonReleased)
                , default_OnRightMouseButtonReleased_function_type(&CHL2WarsPlayer_wrapper::default_OnRightMouseButtonReleased)
                , ( bp::arg("data") ) );
        
        }
        { //::CHL2WarsPlayer::OnSelectionChanged
        
            typedef void ( ::CHL2WarsPlayer::*OnSelectionChanged_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnSelectionChanged"
                , OnSelectionChanged_function_type( &::CHL2WarsPlayer::OnSelectionChanged ) );
        
        }
        { //::CHL2WarsPlayer::OrderUnits
        
            typedef void ( ::CHL2WarsPlayer::*OrderUnits_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OrderUnits"
                , OrderUnits_function_type( &::CHL2WarsPlayer::OrderUnits ) );
        
        }
        { //::CHL2WarsPlayer::PreThink
        
            typedef void ( ::CHL2WarsPlayer::*PreThink_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PreThink"
                , PreThink_function_type( &::CHL2WarsPlayer::PreThink ) );
        
        }
        { //::CHL2WarsPlayer::Precache
        
            typedef void ( ::CHL2WarsPlayer::*Precache_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Precache_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Precache"
                , Precache_function_type(&::CHL2WarsPlayer::Precache)
                , default_Precache_function_type(&CHL2WarsPlayer_wrapper::default_Precache) );
        
        }
        { //::CHL2WarsPlayer::RemoveActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*RemoveActiveAbility_function_type )( ::boost::python::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveActiveAbility"
                , RemoveActiveAbility_function_type( &::CHL2WarsPlayer::RemoveActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::RemoveHudHiddenBits
        
            typedef void ( ::CHL2WarsPlayer::*RemoveHudHiddenBits_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveHudHiddenBits"
                , RemoveHudHiddenBits_function_type( &::CHL2WarsPlayer::RemoveHudHiddenBits )
                , ( bp::arg("bits") ) );
        
        }
        { //::CHL2WarsPlayer::RemoveUnit
        
            typedef void ( ::CHL2WarsPlayer::*RemoveUnit_function_type )( int,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::CHL2WarsPlayer::RemoveUnit )
                , ( bp::arg("idx"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::RemoveUnit
        
            typedef void ( ::CHL2WarsPlayer::*RemoveUnit_function_type )( ::CBaseEntity *,bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "RemoveUnit"
                , RemoveUnit_function_type( &::CHL2WarsPlayer::RemoveUnit )
                , ( bp::arg("pUnit"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CHL2WarsPlayer::ScheduleSelectionChangedSignal
        
            typedef void ( ::CHL2WarsPlayer::*ScheduleSelectionChangedSignal_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ScheduleSelectionChangedSignal"
                , ScheduleSelectionChangedSignal_function_type( &::CHL2WarsPlayer::ScheduleSelectionChangedSignal ) );
        
        }
        { //::CHL2WarsPlayer::SelectGroup
        
            typedef void ( ::CHL2WarsPlayer::*SelectGroup_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SelectGroup"
                , SelectGroup_function_type( &::CHL2WarsPlayer::SelectGroup )
                , ( bp::arg("group") ) );
        
        }
        { //::CHL2WarsPlayer::SetAnimation
        
            typedef void ( ::CHL2WarsPlayer::*SetAnimation_function_type )( ::PLAYER_ANIM ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetAnimation"
                , SetAnimation_function_type( &::CHL2WarsPlayer::SetAnimation )
                , ( bp::arg("playerAnim") ) );
        
        }
        { //::CHL2WarsPlayer::SetCameraOffset
        
            typedef void ( ::CHL2WarsPlayer::*SetCameraOffset_function_type )( ::Vector & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetCameraOffset"
                , SetCameraOffset_function_type( &::CHL2WarsPlayer::SetCameraOffset )
                , ( bp::arg("offs") ) );
        
        }
        { //::CHL2WarsPlayer::SetControlledUnit
        
            typedef void ( ::CHL2WarsPlayer::*SetControlledUnit_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetControlledUnit"
                , SetControlledUnit_function_type( &::CHL2WarsPlayer::SetControlledUnit )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CHL2WarsPlayer::SetMouseCapture
        
            typedef void ( ::CHL2WarsPlayer::*SetMouseCapture_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetMouseCapture"
                , SetMouseCapture_function_type( &::CHL2WarsPlayer::SetMouseCapture )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CHL2WarsPlayer::SetSingleActiveAbility
        
            typedef void ( ::CHL2WarsPlayer::*SetSingleActiveAbility_function_type )( ::boost::python::object ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetSingleActiveAbility"
                , SetSingleActiveAbility_function_type( &::CHL2WarsPlayer::SetSingleActiveAbility )
                , ( bp::arg("ability") ) );
        
        }
        { //::CHL2WarsPlayer::SetStrategicMode
        
            typedef void ( ::CHL2WarsPlayer::*SetStrategicMode_function_type )( bool ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SetStrategicMode"
                , SetStrategicMode_function_type( &::CHL2WarsPlayer::SetStrategicMode )
                , ( bp::arg("state") ) );
        
        }
        { //::CHL2WarsPlayer::SnapCameraTo
        
            typedef void ( ::CHL2WarsPlayer::*SnapCameraTo_function_type )( ::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "SnapCameraTo"
                , SnapCameraTo_function_type( &::CHL2WarsPlayer::SnapCameraTo )
                , ( bp::arg("vPos") ) );
        
        }
        { //::CHL2WarsPlayer::Spawn
        
            typedef void ( ::CHL2WarsPlayer::*Spawn_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Spawn_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CHL2WarsPlayer::Spawn)
                , default_Spawn_function_type(&CHL2WarsPlayer_wrapper::default_Spawn) );
        
        }
        { //::CHL2WarsPlayer::UpdateButtonState
        
            typedef void ( ::CHL2WarsPlayer::*UpdateButtonState_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateButtonState"
                , UpdateButtonState_function_type( &::CHL2WarsPlayer::UpdateButtonState )
                , ( bp::arg("nUserCmdButtonMask") ) );
        
        }
        { //::CHL2WarsPlayer::UpdateCameraSettings
        
            typedef void ( ::CHL2WarsPlayer::*UpdateCameraSettings_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateCameraSettings"
                , UpdateCameraSettings_function_type( &::CHL2WarsPlayer::UpdateCameraSettings ) );
        
        }
        { //::CHL2WarsPlayer::UpdateControl
        
            typedef void ( ::CHL2WarsPlayer::*UpdateControl_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateControl"
                , UpdateControl_function_type( &::CHL2WarsPlayer::UpdateControl ) );
        
        }
        { //::CHL2WarsPlayer::UpdateMouseData
        
            typedef void ( ::CHL2WarsPlayer::*UpdateMouseData_function_type )( ::Vector & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateMouseData"
                , UpdateMouseData_function_type( &::CHL2WarsPlayer::UpdateMouseData )
                , ( bp::arg("vMouseAim") ) );
        
        }
        { //::CHL2WarsPlayer::UpdateOnRemove
        
            typedef void ( ::CHL2WarsPlayer::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CHL2WarsPlayer::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CHL2WarsPlayer_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CHL2WarsPlayer::UpdateSelection
        
            typedef void ( ::CHL2WarsPlayer::*UpdateSelection_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateSelection"
                , UpdateSelection_function_type( &::CHL2WarsPlayer::UpdateSelection ) );
        
        }
        { //::CHL2WarsPlayer::UpdateTransmitState
        
            typedef int ( ::CHL2WarsPlayer::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CHL2WarsPlayer::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CHL2WarsPlayer_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CHL2WarsPlayer::VPhysicsShadowUpdate
        
            typedef void ( ::CHL2WarsPlayer::*VPhysicsShadowUpdate_function_type )( ::IPhysicsObject * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "VPhysicsShadowUpdate"
                , VPhysicsShadowUpdate_function_type( &::CHL2WarsPlayer::VPhysicsShadowUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CHL2WarsPlayer::WasLeftDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*WasLeftDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "WasLeftDoublePressed"
                , WasLeftDoublePressed_function_type( &::CHL2WarsPlayer::WasLeftDoublePressed ) );
        
        }
        { //::CHL2WarsPlayer::WasRightDoublePressed
        
            typedef bool ( ::CHL2WarsPlayer::*WasRightDoublePressed_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "WasRightDoublePressed"
                , WasRightDoublePressed_function_type( &::CHL2WarsPlayer::WasRightDoublePressed ) );
        
        }
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Activate_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CHL2WarsPlayer_wrapper::default_Activate) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CHL2WarsPlayer_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CHL2WarsPlayer_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CHL2WarsPlayer_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CHL2WarsPlayer_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CHL2WarsPlayer_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CHL2WarsPlayer_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CHL2WarsPlayer_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CHL2WarsPlayer_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CHL2WarsPlayer_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CHL2WarsPlayer_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Killed
        
            typedef void ( ::CBaseCombatCharacter::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseCombatCharacter::Event_Killed)
                , default_Event_Killed_function_type(&CHL2WarsPlayer_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CHL2WarsPlayer_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CHL2WarsPlayer_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CHL2WarsPlayer_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CHL2WarsPlayer_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CHL2WarsPlayer_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CHL2WarsPlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CHL2WarsPlayer_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CHL2WarsPlayer_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CHL2WarsPlayer_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseCombatCharacter::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CHL2WarsPlayer_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage_Alive
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CHL2WarsPlayer_wrapper::*default_OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type(&::CBaseCombatCharacter::OnTakeDamage_Alive)
                , default_OnTakeDamage_Alive_function_type(&CHL2WarsPlayer_wrapper::default_OnTakeDamage_Alive)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CHL2WarsPlayer_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CHL2WarsPlayer_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CHL2WarsPlayer_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CHL2WarsPlayer_wrapper::*OnNewModel_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CHL2WarsPlayer_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CHL2WarsPlayer_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CHL2WarsPlayer_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CHL2WarsPlayer_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CHL2WarsPlayer_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CHL2WarsPlayer_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CHL2WarsPlayer_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Drop
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type(&::CBaseCombatCharacter::Weapon_Drop)
                , default_Weapon_Drop_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Drop)
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget")=bp::object(), bp::arg("pVelocity")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Equip
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            typedef void ( CHL2WarsPlayer_wrapper::*default_Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type(&::CBaseCombatCharacter::Weapon_Equip)
                , default_Weapon_Equip_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Equip)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Switch
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            typedef bool ( CHL2WarsPlayer_wrapper::*default_Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CHL2WarsPlayer_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type(&::CBaseCombatCharacter::Weapon_Switch)
                , default_Weapon_Switch_function_type(&CHL2WarsPlayer_wrapper::default_Weapon_Switch)
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        CHL2WarsPlayer_exposer.staticmethod( "GetPyNetworkType" );
        { //property "unit"[fget=::CHL2WarsPlayer::GetControlledUnit, fset=::CHL2WarsPlayer::SetControlledUnit]
        
            typedef ::CBaseEntity * ( ::CHL2WarsPlayer::*fget )(  ) ;
            typedef void ( ::CHL2WarsPlayer::*fset )( ::CBaseEntity * ) ;
            
            CHL2WarsPlayer_exposer.add_property( 
                "unit"
                , bp::make_function( 
                      fget( &::CHL2WarsPlayer::GetControlledUnit )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::CHL2WarsPlayer::SetControlledUnit ) );
        
        }
        { //::CHL2WarsPlayer::TestCollision
            
                typedef bool ( ::CHL2WarsPlayer::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( CHL2WarsPlayer_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                CHL2WarsPlayer_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::CHL2WarsPlayer::TestCollision)
                    , default_TestCollision_function_type(&CHL2WarsPlayer_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

