// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "wars_flora.h"
#include "unit_sense.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CFuncUnit_pypp.hpp"

namespace bp = boost::python;

struct CFuncUnit_wrapper : CFuncUnit, bp::wrapper< CFuncUnit > {

    CFuncUnit_wrapper( )
    : CFuncUnit( )
      , bp::wrapper< CFuncUnit >(){
        // null constructor
    
    }

    virtual bool CanUserControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, CanUserControl )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, CanUserControl )
        bp::override func_CanUserControl = this->get_override( "CanUserControl" );
        if( func_CanUserControl.ptr() != Py_None )
            try {
                return func_CanUserControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncUnit::CanUserControl( pPlayer );
            }
        else
            return this->CFuncUnit::CanUserControl( pPlayer );
    }
    
    bool default_CanUserControl( ::CHL2WarsPlayer * pPlayer ) {
        return CFuncUnit::CanUserControl( pPlayer );
    }

    virtual bool ClientCommand( ::CCommand const & args ) {
        PY_OVERRIDE_CHECK( CFuncUnit, ClientCommand )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, ClientCommand )
        bp::override func_ClientCommand = this->get_override( "ClientCommand" );
        if( func_ClientCommand.ptr() != Py_None )
            try {
                return func_ClientCommand( boost::ref(args) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncUnit::ClientCommand( args );
            }
        else
            return this->CFuncUnit::ClientCommand( args );
    }
    
    bool default_ClientCommand( ::CCommand const & args ) {
        return CFuncUnit::ClientCommand( args );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( CFuncUnit, GetIMouse )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncUnit::GetIMouse(  );
            }
        else
            return this->CFuncUnit::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CFuncUnit::GetIMouse( );
    }

    virtual bool IsSelectableByPlayer( ::CHL2WarsPlayer * pPlayer, ::boost::python::api::object target_selection=boost::python::api::object() ) {
        PY_OVERRIDE_CHECK( CFuncUnit, IsSelectableByPlayer )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, IsSelectableByPlayer )
        bp::override func_IsSelectableByPlayer = this->get_override( "IsSelectableByPlayer" );
        if( func_IsSelectableByPlayer.ptr() != Py_None )
            try {
                return func_IsSelectableByPlayer( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), target_selection );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncUnit::IsSelectableByPlayer( pPlayer, target_selection );
            }
        else
            return this->CFuncUnit::IsSelectableByPlayer( pPlayer, target_selection );
    }
    
    bool default_IsSelectableByPlayer( ::CHL2WarsPlayer * pPlayer, ::boost::python::api::object target_selection=boost::python::api::object() ) {
        return CFuncUnit::IsSelectableByPlayer( pPlayer, target_selection );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CFuncUnit, KeyValue )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncUnit::KeyValue( szKeyName, szValue );
            }
        else
            return this->CFuncUnit::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CFuncUnit::KeyValue( szKeyName, szValue );
    }

    virtual void OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnButtonsChanged )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnButtonsChanged )
        bp::override func_OnButtonsChanged = this->get_override( "OnButtonsChanged" );
        if( func_OnButtonsChanged.ptr() != Py_None )
            try {
                func_OnButtonsChanged( buttonsMask, buttonsChanged );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
            }
        else
            this->CFuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
    }
    
    void default_OnButtonsChanged( int buttonsMask, int buttonsChanged ) {
        CFuncUnit::OnButtonsChanged( buttonsMask, buttonsChanged );
    }

    virtual void OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickLeftDoublePressed )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickLeftDoublePressed )
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        if( func_OnClickLeftDoublePressed.ptr() != Py_None )
            try {
                func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickLeftDoublePressed( player );
            }
        else
            this->CFuncUnit::OnClickLeftDoublePressed( player );
    }
    
    void default_OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickLeftDoublePressed( player );
    }

    virtual void OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickLeftPressed )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickLeftPressed )
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        if( func_OnClickLeftPressed.ptr() != Py_None )
            try {
                func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickLeftPressed( player );
            }
        else
            this->CFuncUnit::OnClickLeftPressed( player );
    }
    
    void default_OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickLeftPressed( player );
    }

    virtual void OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickLeftReleased )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickLeftReleased )
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        if( func_OnClickLeftReleased.ptr() != Py_None )
            try {
                func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickLeftReleased( player );
            }
        else
            this->CFuncUnit::OnClickLeftReleased( player );
    }
    
    void default_OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickLeftReleased( player );
    }

    virtual void OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickRightDoublePressed )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickRightDoublePressed )
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        if( func_OnClickRightDoublePressed.ptr() != Py_None )
            try {
                func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickRightDoublePressed( player );
            }
        else
            this->CFuncUnit::OnClickRightDoublePressed( player );
    }
    
    void default_OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickRightDoublePressed( player );
    }

    virtual void OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickRightPressed )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickRightPressed )
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        if( func_OnClickRightPressed.ptr() != Py_None )
            try {
                func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickRightPressed( player );
            }
        else
            this->CFuncUnit::OnClickRightPressed( player );
    }
    
    void default_OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickRightPressed( player );
    }

    virtual void OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnClickRightReleased )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnClickRightReleased )
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        if( func_OnClickRightReleased.ptr() != Py_None )
            try {
                func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnClickRightReleased( player );
            }
        else
            this->CFuncUnit::OnClickRightReleased( player );
    }
    
    void default_OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnClickRightReleased( player );
    }

    virtual void OnCursorEntered( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnCursorEntered )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnCursorEntered( player );
            }
        else
            this->CFuncUnit::OnCursorEntered( player );
    }
    
    void default_OnCursorEntered( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnCursorEntered( player );
    }

    virtual void OnCursorExited( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnCursorExited )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnCursorExited( player );
            }
        else
            this->CFuncUnit::OnCursorExited( player );
    }
    
    void default_OnCursorExited( ::CHL2WarsPlayer * player ) {
        CFuncUnit::OnCursorExited( player );
    }

    virtual void OnDeSelected( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnDeSelected )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnDeSelected )
        bp::override func_OnDeSelected = this->get_override( "OnDeSelected" );
        if( func_OnDeSelected.ptr() != Py_None )
            try {
                func_OnDeSelected( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnDeSelected( pPlayer );
            }
        else
            this->CFuncUnit::OnDeSelected( pPlayer );
    }
    
    void default_OnDeSelected( ::CHL2WarsPlayer * pPlayer ) {
        CFuncUnit::OnDeSelected( pPlayer );
    }

    virtual void OnSelected( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnSelected )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnSelected )
        bp::override func_OnSelected = this->get_override( "OnSelected" );
        if( func_OnSelected.ptr() != Py_None )
            try {
                func_OnSelected( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnSelected( pPlayer );
            }
        else
            this->CFuncUnit::OnSelected( pPlayer );
    }
    
    void default_OnSelected( ::CHL2WarsPlayer * pPlayer ) {
        CFuncUnit::OnSelected( pPlayer );
    }

    virtual void OnUnitTypeChanged( char const * old_unit_type ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnUnitTypeChanged )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnUnitTypeChanged )
        bp::override func_OnUnitTypeChanged = this->get_override( "OnUnitTypeChanged" );
        if( func_OnUnitTypeChanged.ptr() != Py_None )
            try {
                func_OnUnitTypeChanged( old_unit_type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnUnitTypeChanged( old_unit_type );
            }
        else
            this->CFuncUnit::OnUnitTypeChanged( old_unit_type );
    }
    
    void default_OnUnitTypeChanged( char const * old_unit_type ) {
        CFuncUnit::OnUnitTypeChanged( old_unit_type );
    }

    virtual void OnUserControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnUserControl )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnUserControl )
        bp::override func_OnUserControl = this->get_override( "OnUserControl" );
        if( func_OnUserControl.ptr() != Py_None )
            try {
                func_OnUserControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnUserControl( pPlayer );
            }
        else
            this->CFuncUnit::OnUserControl( pPlayer );
    }
    
    void default_OnUserControl( ::CHL2WarsPlayer * pPlayer ) {
        CFuncUnit::OnUserControl( pPlayer );
    }

    virtual void OnUserLeftControl( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, OnUserLeftControl )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, OnUserLeftControl )
        bp::override func_OnUserLeftControl = this->get_override( "OnUserLeftControl" );
        if( func_OnUserLeftControl.ptr() != Py_None )
            try {
                func_OnUserLeftControl( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::OnUserLeftControl( pPlayer );
            }
        else
            this->CFuncUnit::OnUserLeftControl( pPlayer );
    }
    
    void default_OnUserLeftControl( ::CHL2WarsPlayer * pPlayer ) {
        CFuncUnit::OnUserLeftControl( pPlayer );
    }

    virtual void Order( ::CHL2WarsPlayer * pPlayer ) {
        PY_OVERRIDE_CHECK( CFuncUnit, Order )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, Order )
        bp::override func_Order = this->get_override( "Order" );
        if( func_Order.ptr() != Py_None )
            try {
                func_Order( pPlayer ? pPlayer->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::Order( pPlayer );
            }
        else
            this->CFuncUnit::Order( pPlayer );
    }
    
    void default_Order( ::CHL2WarsPlayer * pPlayer ) {
        CFuncUnit::Order( pPlayer );
    }

    virtual void Select( ::CHL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        PY_OVERRIDE_CHECK( CFuncUnit, Select )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, Select )
        bp::override func_Select = this->get_override( "Select" );
        if( func_Select.ptr() != Py_None )
            try {
                func_Select( pPlayer ? pPlayer->GetPyHandle() : boost::python::object(), bTriggerOnSel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::Select( pPlayer, bTriggerOnSel );
            }
        else
            this->CFuncUnit::Select( pPlayer, bTriggerOnSel );
    }
    
    void default_Select( ::CHL2WarsPlayer * pPlayer, bool bTriggerOnSel=true ) {
        CFuncUnit::Select( pPlayer, bTriggerOnSel );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CFuncUnit, Spawn )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::Spawn(  );
            }
        else
            this->CFuncUnit::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CFuncUnit::Spawn( );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CFuncUnit, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::UpdateOnRemove(  );
            }
        else
            this->CFuncUnit::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CFuncUnit::UpdateOnRemove( );
    }

    virtual void UserCmd( ::CUserCmd * pCmd ) {
        PY_OVERRIDE_CHECK( CFuncUnit, UserCmd )
        PY_OVERRIDE_LOG( _entities, CFuncUnit, UserCmd )
        bp::override func_UserCmd = this->get_override( "UserCmd" );
        if( func_UserCmd.ptr() != Py_None )
            try {
                func_UserCmd( boost::python::ptr(pCmd) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncUnit::UserCmd( pCmd );
            }
        else
            this->CFuncUnit::UserCmd( pCmd );
    }
    
    void default_UserCmd( ::CUserCmd * pCmd ) {
        CFuncUnit::UserCmd( pCmd );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Activate(  );
            }
        else
            this->CBaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseEntity::Activate( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CFuncBrush, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CFuncBrush, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncBrush::CreateVPhysics(  );
            }
        else
            return this->CFuncBrush::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CFuncBrush::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CFuncBrush, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CFuncBrush, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncBrush::DrawDebugTextOverlays(  );
            }
        else
            return this->CFuncBrush::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CFuncBrush::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( info );
            }
        else
            this->CBaseEntity::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseEntity::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseEntity::ModifyOrAppendCriteria( set );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnRestore(  );
            }
        else
            this->CBaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseEntity::OnRestore( );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( info );
            }
        else
            return this->CBaseEntity::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Precache(  );
            }
        else
            this->CBaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseEntity::Precache( );
    }

    virtual int Restore( ::IRestore & restore ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Restore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Restore )
        bp::override func_Restore = this->get_override( "Restore" );
        if( func_Restore.ptr() != Py_None )
            try {
                return func_Restore( boost::ref(restore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::Restore( restore );
            }
        else
            return this->CBaseEntity::Restore( restore );
    }
    
    int default_Restore( ::IRestore & restore ) {
        return CBaseEntity::Restore( restore );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( info, vecDir, ptr );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::UpdateTransmitState(  );
            }
        else
            return this->CBaseEntity::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseEntity::UpdateTransmitState( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
        PY_OVERRIDE_CHECK( CFuncUnit, GetServerClass )
        if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
        {
            try
            {
                ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                if( pServerClass )
                    return pServerClass;
            }
            catch( bp::error_already_set & ) 
            {
                PyErr_Print();
            }
        }
        return CFuncUnit::GetServerClass();
    }

    static int m_lifeState_Get( CFuncUnit const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CFuncUnit & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CFuncUnit const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CFuncUnit & inst, int val ) { inst.m_takedamage.Set( val ); }

};

void register_CFuncUnit_class(){

    { //::CFuncUnit
        typedef bp::class_< CFuncUnit_wrapper, bp::bases< CFuncBrush >, boost::noncopyable > CFuncUnit_exposer_t;
        CFuncUnit_exposer_t CFuncUnit_exposer = CFuncUnit_exposer_t( "CFuncUnit", bp::init< >() );
        bp::scope CFuncUnit_scope( CFuncUnit_exposer );
        { //::CFuncUnit::AreAttacksPassable
        
            typedef bool ( ::CFuncUnit::*AreAttacksPassable_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "AreAttacksPassable"
                , AreAttacksPassable_function_type( &::CFuncUnit::AreAttacksPassable )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CFuncUnit::CanBeSeen
        
            typedef bool ( ::CFuncUnit::*CanBeSeen_function_type )( ::CUnitBase * ) ;
            
            CFuncUnit_exposer.def( 
                "CanBeSeen"
                , CanBeSeen_function_type( &::CFuncUnit::CanBeSeen )
                , ( bp::arg("pUnit")=bp::object() ) );
        
        }
        { //::CFuncUnit::CanUserControl
        
            typedef bool ( ::CFuncUnit::*CanUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef bool ( CFuncUnit_wrapper::*default_CanUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "CanUserControl"
                , CanUserControl_function_type(&::CFuncUnit::CanUserControl)
                , default_CanUserControl_function_type(&CFuncUnit_wrapper::default_CanUserControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::ClientCommand
        
            typedef bool ( ::CFuncUnit::*ClientCommand_function_type )( ::CCommand const & ) ;
            typedef bool ( CFuncUnit_wrapper::*default_ClientCommand_function_type )( ::CCommand const & ) ;
            
            CFuncUnit_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type(&::CFuncUnit::ClientCommand)
                , default_ClientCommand_function_type(&CFuncUnit_wrapper::default_ClientCommand)
                , ( bp::arg("args") ) );
        
        }
        { //::CFuncUnit::GetCommander
        
            typedef ::CHL2WarsPlayer * ( ::CFuncUnit::*GetCommander_function_type )(  ) const;
            
            CFuncUnit_exposer.def( 
                "GetCommander"
                , GetCommander_function_type( &::CFuncUnit::GetCommander )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CFuncUnit::GetEnterOffset
        
            typedef ::Vector const & ( ::CFuncUnit::*GetEnterOffset_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "GetEnterOffset"
                , GetEnterOffset_function_type( &::CFuncUnit::GetEnterOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CFuncUnit::GetIMouse
        
            typedef ::IMouse * ( ::CFuncUnit::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CFuncUnit_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CFuncUnit::GetIMouse)
                , default_GetIMouse_function_type(&CFuncUnit_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CFuncUnit::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CFuncUnit_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CFuncUnit::GetPyNetworkType ) );
        
        }
        { //::CFuncUnit::GetSquad
        
            typedef ::CBaseEntity * ( ::CFuncUnit::*GetSquad_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "GetSquad"
                , GetSquad_function_type( &::CFuncUnit::GetSquad )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CFuncUnit::GetUnitType
        
            typedef char const * ( ::CFuncUnit::*GetUnitType_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "GetUnitType"
                , GetUnitType_function_type( &::CFuncUnit::GetUnitType ) );
        
        }
        { //::CFuncUnit::HasEnterOffset
        
            typedef bool ( ::CFuncUnit::*HasEnterOffset_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "HasEnterOffset"
                , HasEnterOffset_function_type( &::CFuncUnit::HasEnterOffset ) );
        
        }
        { //::CFuncUnit::IRelationPriority
        
            typedef int ( ::CFuncUnit::*IRelationPriority_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "IRelationPriority"
                , IRelationPriority_function_type( &::CFuncUnit::IRelationPriority )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CFuncUnit::IRelationType
        
            typedef ::Disposition_t ( ::CFuncUnit::*IRelationType_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "IRelationType"
                , IRelationType_function_type( &::CFuncUnit::IRelationType )
                , ( bp::arg("pTarget") ) );
        
        }
        { //::CFuncUnit::IsSelectableByPlayer
        
            typedef bool ( ::CFuncUnit::*IsSelectableByPlayer_function_type )( ::CHL2WarsPlayer *,::boost::python::api::object ) ;
            typedef bool ( CFuncUnit_wrapper::*default_IsSelectableByPlayer_function_type )( ::CHL2WarsPlayer *,::boost::python::api::object ) ;
            
            CFuncUnit_exposer.def( 
                "IsSelectableByPlayer"
                , IsSelectableByPlayer_function_type(&::CFuncUnit::IsSelectableByPlayer)
                , default_IsSelectableByPlayer_function_type(&CFuncUnit_wrapper::default_IsSelectableByPlayer)
                , ( bp::arg("pPlayer"), bp::arg("target_selection")=boost::python::api::object() ) );
        
        }
        { //::CFuncUnit::IsUnit
        
            typedef bool ( ::CFuncUnit::*IsUnit_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "IsUnit"
                , IsUnit_function_type( &::CFuncUnit::IsUnit ) );
        
        }
        { //::CFuncUnit::KeyValue
        
            typedef bool ( ::CFuncUnit::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CFuncUnit_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CFuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CFuncUnit::KeyValue)
                , default_KeyValue_function_type(&CFuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CFuncUnit::OnButtonsChanged
        
            typedef void ( ::CFuncUnit::*OnButtonsChanged_function_type )( int,int ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnButtonsChanged_function_type )( int,int ) ;
            
            CFuncUnit_exposer.def( 
                "OnButtonsChanged"
                , OnButtonsChanged_function_type(&::CFuncUnit::OnButtonsChanged)
                , default_OnButtonsChanged_function_type(&CFuncUnit_wrapper::default_OnButtonsChanged)
                , ( bp::arg("buttonsMask"), bp::arg("buttonsChanged") ) );
        
        }
        { //::CFuncUnit::OnClickLeftDoublePressed
        
            typedef void ( ::CFuncUnit::*OnClickLeftDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickLeftDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickLeftDoublePressed"
                , OnClickLeftDoublePressed_function_type(&::CFuncUnit::OnClickLeftDoublePressed)
                , default_OnClickLeftDoublePressed_function_type(&CFuncUnit_wrapper::default_OnClickLeftDoublePressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnClickLeftPressed
        
            typedef void ( ::CFuncUnit::*OnClickLeftPressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickLeftPressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickLeftPressed"
                , OnClickLeftPressed_function_type(&::CFuncUnit::OnClickLeftPressed)
                , default_OnClickLeftPressed_function_type(&CFuncUnit_wrapper::default_OnClickLeftPressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnClickLeftReleased
        
            typedef void ( ::CFuncUnit::*OnClickLeftReleased_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickLeftReleased_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickLeftReleased"
                , OnClickLeftReleased_function_type(&::CFuncUnit::OnClickLeftReleased)
                , default_OnClickLeftReleased_function_type(&CFuncUnit_wrapper::default_OnClickLeftReleased)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnClickRightDoublePressed
        
            typedef void ( ::CFuncUnit::*OnClickRightDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickRightDoublePressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickRightDoublePressed"
                , OnClickRightDoublePressed_function_type(&::CFuncUnit::OnClickRightDoublePressed)
                , default_OnClickRightDoublePressed_function_type(&CFuncUnit_wrapper::default_OnClickRightDoublePressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnClickRightPressed
        
            typedef void ( ::CFuncUnit::*OnClickRightPressed_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickRightPressed_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickRightPressed"
                , OnClickRightPressed_function_type(&::CFuncUnit::OnClickRightPressed)
                , default_OnClickRightPressed_function_type(&CFuncUnit_wrapper::default_OnClickRightPressed)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnClickRightReleased
        
            typedef void ( ::CFuncUnit::*OnClickRightReleased_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnClickRightReleased_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnClickRightReleased"
                , OnClickRightReleased_function_type(&::CFuncUnit::OnClickRightReleased)
                , default_OnClickRightReleased_function_type(&CFuncUnit_wrapper::default_OnClickRightReleased)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnCursorEntered
        
            typedef void ( ::CFuncUnit::*OnCursorEntered_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnCursorEntered_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type(&::CFuncUnit::OnCursorEntered)
                , default_OnCursorEntered_function_type(&CFuncUnit_wrapper::default_OnCursorEntered)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnCursorExited
        
            typedef void ( ::CFuncUnit::*OnCursorExited_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnCursorExited_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type(&::CFuncUnit::OnCursorExited)
                , default_OnCursorExited_function_type(&CFuncUnit_wrapper::default_OnCursorExited)
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::OnDeSelected
        
            typedef void ( ::CFuncUnit::*OnDeSelected_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnDeSelected_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnDeSelected"
                , OnDeSelected_function_type(&::CFuncUnit::OnDeSelected)
                , default_OnDeSelected_function_type(&CFuncUnit_wrapper::default_OnDeSelected)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::OnSelected
        
            typedef void ( ::CFuncUnit::*OnSelected_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnSelected_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnSelected"
                , OnSelected_function_type(&::CFuncUnit::OnSelected)
                , default_OnSelected_function_type(&CFuncUnit_wrapper::default_OnSelected)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::OnUnitTypeChanged
        
            typedef void ( ::CFuncUnit::*OnUnitTypeChanged_function_type )( char const * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnUnitTypeChanged_function_type )( char const * ) ;
            
            CFuncUnit_exposer.def( 
                "OnUnitTypeChanged"
                , OnUnitTypeChanged_function_type(&::CFuncUnit::OnUnitTypeChanged)
                , default_OnUnitTypeChanged_function_type(&CFuncUnit_wrapper::default_OnUnitTypeChanged)
                , ( bp::arg("old_unit_type") ) );
        
        }
        { //::CFuncUnit::OnUserControl
        
            typedef void ( ::CFuncUnit::*OnUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnUserControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnUserControl"
                , OnUserControl_function_type(&::CFuncUnit::OnUserControl)
                , default_OnUserControl_function_type(&CFuncUnit_wrapper::default_OnUserControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::OnUserLeftControl
        
            typedef void ( ::CFuncUnit::*OnUserLeftControl_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnUserLeftControl_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "OnUserLeftControl"
                , OnUserLeftControl_function_type(&::CFuncUnit::OnUserLeftControl)
                , default_OnUserLeftControl_function_type(&CFuncUnit_wrapper::default_OnUserLeftControl)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::Order
        
            typedef void ( ::CFuncUnit::*Order_function_type )( ::CHL2WarsPlayer * ) ;
            typedef void ( CFuncUnit_wrapper::*default_Order_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "Order"
                , Order_function_type(&::CFuncUnit::Order)
                , default_Order_function_type(&CFuncUnit_wrapper::default_Order)
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CFuncUnit::Select
        
            typedef void ( ::CFuncUnit::*Select_function_type )( ::CHL2WarsPlayer *,bool ) ;
            typedef void ( CFuncUnit_wrapper::*default_Select_function_type )( ::CHL2WarsPlayer *,bool ) ;
            
            CFuncUnit_exposer.def( 
                "Select"
                , Select_function_type(&::CFuncUnit::Select)
                , default_Select_function_type(&CFuncUnit_wrapper::default_Select)
                , ( bp::arg("pPlayer"), bp::arg("bTriggerOnSel")=(bool)(true) ) );
        
        }
        { //::CFuncUnit::SetCanBeSeen
        
            typedef void ( ::CFuncUnit::*SetCanBeSeen_function_type )( bool ) ;
            
            CFuncUnit_exposer.def( 
                "SetCanBeSeen"
                , SetCanBeSeen_function_type( &::CFuncUnit::SetCanBeSeen )
                , ( bp::arg("canbeseen") ) );
        
        }
        { //::CFuncUnit::SetCommander
        
            typedef void ( ::CFuncUnit::*SetCommander_function_type )( ::CHL2WarsPlayer * ) ;
            
            CFuncUnit_exposer.def( 
                "SetCommander"
                , SetCommander_function_type( &::CFuncUnit::SetCommander )
                , ( bp::arg("player") ) );
        
        }
        { //::CFuncUnit::SetEnterOffset
        
            typedef void ( ::CFuncUnit::*SetEnterOffset_function_type )( ::Vector const & ) ;
            
            CFuncUnit_exposer.def( 
                "SetEnterOffset"
                , SetEnterOffset_function_type( &::CFuncUnit::SetEnterOffset )
                , ( bp::arg("enteroffset") ) );
        
        }
        { //::CFuncUnit::SetSquad
        
            typedef void ( ::CFuncUnit::*SetSquad_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "SetSquad"
                , SetSquad_function_type( &::CFuncUnit::SetSquad )
                , ( bp::arg("pUnit") ) );
        
        }
        { //::CFuncUnit::SetUnitType
        
            typedef void ( ::CFuncUnit::*SetUnitType_function_type )( char const * ) ;
            
            CFuncUnit_exposer.def( 
                "SetUnitType"
                , SetUnitType_function_type( &::CFuncUnit::SetUnitType )
                , ( bp::arg("unit_type") ) );
        
        }
        { //::CFuncUnit::Spawn
        
            typedef void ( ::CFuncUnit::*Spawn_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_Spawn_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CFuncUnit::Spawn)
                , default_Spawn_function_type(&CFuncUnit_wrapper::default_Spawn) );
        
        }
        { //::CFuncUnit::UpdateOnRemove
        
            typedef void ( ::CFuncUnit::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CFuncUnit::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CFuncUnit_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CFuncUnit::UserCmd
        
            typedef void ( ::CFuncUnit::*UserCmd_function_type )( ::CUserCmd * ) ;
            typedef void ( CFuncUnit_wrapper::*default_UserCmd_function_type )( ::CUserCmd * ) ;
            
            CFuncUnit_exposer.def( 
                "UserCmd"
                , UserCmd_function_type(&::CFuncUnit::UserCmd)
                , default_UserCmd_function_type(&CFuncUnit_wrapper::default_UserCmd)
                , ( bp::arg("pCmd") ) );
        
        }
        { //::CBaseEntity::Activate
        
            typedef void ( ::CBaseEntity::*Activate_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_Activate_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseEntity::Activate)
                , default_Activate_function_type(&CFuncUnit_wrapper::default_Activate) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CFuncUnit_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CFuncUnit_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CFuncUnit_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CFuncBrush::CreateVPhysics
        
            typedef bool ( ::CFuncBrush::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CFuncUnit_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CFuncBrush::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CFuncUnit_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CFuncUnit_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CFuncUnit_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CFuncUnit_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CFuncUnit_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CFuncUnit_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CFuncUnit_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CFuncBrush::DrawDebugTextOverlays
        
            typedef int ( ::CFuncBrush::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CFuncUnit_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CFuncBrush::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CFuncUnit_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CFuncUnit_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CFuncUnit_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CFuncUnit_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CFuncUnit_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CFuncUnit_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CFuncUnit_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CFuncUnit_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CFuncUnit_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CFuncUnit_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CFuncUnit_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CFuncUnit_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CFuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CFuncUnit_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CFuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CFuncUnit_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CFuncUnit_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncUnit_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CFuncUnit_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CFuncUnit_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CFuncUnit_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseEntity::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CFuncUnit_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CFuncUnit_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseEntity::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CFuncUnit_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CFuncUnit_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CFuncUnit_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseEntity::OnRestore
        
            typedef void ( ::CBaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseEntity::OnRestore)
                , default_OnRestore_function_type(&CFuncUnit_wrapper::default_OnRestore) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CFuncUnit_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CFuncUnit_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CFuncUnit_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CFuncUnit_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CFuncUnit_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CFuncUnit_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CFuncUnit_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CFuncUnit_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CFuncUnit_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CFuncUnit_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::Precache
        
            typedef void ( ::CBaseEntity::*Precache_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_Precache_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseEntity::Precache)
                , default_Precache_function_type(&CFuncUnit_wrapper::default_Precache) );
        
        }
        { //::CBaseEntity::Restore
        
            typedef int ( ::CBaseEntity::*Restore_function_type )( ::IRestore & ) ;
            typedef int ( CFuncUnit_wrapper::*default_Restore_function_type )( ::IRestore & ) ;
            
            CFuncUnit_exposer.def( 
                "Restore"
                , Restore_function_type(&::CBaseEntity::Restore)
                , default_Restore_function_type(&CFuncUnit_wrapper::default_Restore)
                , ( bp::arg("restore") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CFuncUnit_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CFuncUnit_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CFuncUnit_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CFuncUnit_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CFuncUnit_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CFuncUnit_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CFuncUnit_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CFuncUnit_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::UpdateTransmitState
        
            typedef int ( ::CBaseEntity::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CFuncUnit_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CFuncUnit_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseEntity::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CFuncUnit_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CFuncUnit_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CFuncUnit_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CFuncUnit_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CFuncUnit_exposer.staticmethod( "GetPyNetworkType" );
        { //property "selectionpriority"[fget=::CFuncUnit::GetSelectionPriority, fset=::CFuncUnit::SetSelectionPriority]
        
            typedef int ( ::CFuncUnit::*fget )(  ) ;
            typedef void ( ::CFuncUnit::*fset )( int ) ;
            
            CFuncUnit_exposer.add_property( 
                "selectionpriority"
                , fget( &::CFuncUnit::GetSelectionPriority )
                , fset( &::CFuncUnit::SetSelectionPriority ) );
        
        }
        { //property "attackpriority"[fget=::CFuncUnit::GetAttackPriority, fset=::CFuncUnit::SetAttackPriority]
        
            typedef int ( ::CFuncUnit::*fget )(  ) ;
            typedef void ( ::CFuncUnit::*fset )( int ) ;
            
            CFuncUnit_exposer.add_property( 
                "attackpriority"
                , fget( &::CFuncUnit::GetAttackPriority )
                , fset( &::CFuncUnit::SetAttackPriority ) );
        
        }
        { //property "energy"[fget=::CFuncUnit::GetEnergy, fset=::CFuncUnit::SetEnergy]
        
            typedef int ( ::CFuncUnit::*fget )(  ) const;
            typedef void ( ::CFuncUnit::*fset )( int ) ;
            
            CFuncUnit_exposer.add_property( 
                "energy"
                , fget( &::CFuncUnit::GetEnergy )
                , fset( &::CFuncUnit::SetEnergy ) );
        
        }
        { //property "maxenergy"[fget=::CFuncUnit::GetMaxEnergy, fset=::CFuncUnit::SetMaxEnergy]
        
            typedef int ( ::CFuncUnit::*fget )(  ) const;
            typedef void ( ::CFuncUnit::*fset )( int ) ;
            
            CFuncUnit_exposer.add_property( 
                "maxenergy"
                , fget( &::CFuncUnit::GetMaxEnergy )
                , fset( &::CFuncUnit::SetMaxEnergy ) );
        
        }
        { //property "kills"[fget=::CFuncUnit::GetKills, fset=::CFuncUnit::SetKills]
        
            typedef int ( ::CFuncUnit::*fget )(  ) const;
            typedef void ( ::CFuncUnit::*fset )( int ) ;
            
            CFuncUnit_exposer.add_property( 
                "kills"
                , fget( &::CFuncUnit::GetKills )
                , fset( &::CFuncUnit::SetKills ) );
        
        }
        CFuncUnit_exposer.add_property( "lifestate", &CFuncUnit_wrapper::m_lifeState_Get, &CFuncUnit_wrapper::m_lifeState_Set );
        CFuncUnit_exposer.add_property( "takedamage", &CFuncUnit_wrapper::m_takedamage_Get, &CFuncUnit_wrapper::m_takedamage_Set );
    }

}

