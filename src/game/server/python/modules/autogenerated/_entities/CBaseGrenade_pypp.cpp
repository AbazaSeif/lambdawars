// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "nav_area.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBaseGrenade_pypp.hpp"

namespace bp = boost::python;

struct CBaseGrenade_wrapper : CBaseGrenade, bp::wrapper< CBaseGrenade > {

    CBaseGrenade_wrapper( )
    : CBaseGrenade( )
      , bp::wrapper< CBaseGrenade >(){
        // null constructor
    
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseGrenade, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseGrenade, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseGrenade::Event_Killed( info );
            }
        else
            this->CBaseGrenade::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseGrenade::Event_Killed( info );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseGrenade, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseGrenade, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseGrenade::Precache(  );
            }
        else
            this->CBaseGrenade::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseGrenade::Precache( );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, BecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, BecomeRagdoll )
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( info, forceVector );
    }

    virtual bool CanBecomeRagdoll(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, CanBecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, CanBecomeRagdoll )
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, CorpseGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, CorpseGib )
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( info );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( info );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( info );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Event_Gibbed )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Event_Gibbed )
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( info );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( info );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetIMouse )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( set );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimatingOverlay, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBaseAnimatingOverlay, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimatingOverlay::OnRestore(  );
            }
        else
            this->CBaseAnimatingOverlay::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseAnimatingOverlay::OnRestore( );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, OnSequenceSet )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, OnSequenceSet )
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage( info );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage( info );
    }

    virtual int OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, OnTakeDamage_Alive )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, OnTakeDamage_Alive )
        bp::override func_OnTakeDamage_Alive = this->get_override( "OnTakeDamage_Alive" );
        if( func_OnTakeDamage_Alive.ptr() != Py_None )
            try {
                return func_OnTakeDamage_Alive( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::OnTakeDamage_Alive( info );
            }
        else
            return this->CBaseCombatCharacter::OnTakeDamage_Alive( info );
    }
    
    int default_OnTakeDamage_Alive( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::OnTakeDamage_Alive( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void PyOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyOnNewModel )
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, ShouldGib )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, ShouldGib )
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( info );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( info );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( info );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Spawn )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Spawn(  );
            }
        else
            this->CBaseCombatCharacter::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseCombatCharacter::Spawn( );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( info, vecDir, ptr );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::UpdateOnRemove(  );
            }
        else
            this->CBaseCombatCharacter::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseCombatCharacter::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::UpdateTransmitState(  );
            }
        else
            return this->CBaseEntity::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseEntity::UpdateTransmitState( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual void Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Weapon_Drop )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Weapon_Drop )
        bp::override func_Weapon_Drop = this->get_override( "Weapon_Drop" );
        if( func_Weapon_Drop.ptr() != Py_None )
            try {
                func_Weapon_Drop( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), boost::python::ptr(pvecTarget), boost::python::ptr(pVelocity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
            }
        else
            this->CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }
    
    void default_Weapon_Drop( ::CBaseCombatWeapon * pWeapon, ::Vector const * pvecTarget=0, ::Vector const * pVelocity=0 ) {
        CBaseCombatCharacter::Weapon_Drop( pWeapon, pvecTarget, pVelocity );
    }

    virtual void Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Weapon_Equip )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Weapon_Equip )
        bp::override func_Weapon_Equip = this->get_override( "Weapon_Equip" );
        if( func_Weapon_Equip.ptr() != Py_None )
            try {
                func_Weapon_Equip( pWeapon ? pWeapon->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatCharacter::Weapon_Equip( pWeapon );
            }
        else
            this->CBaseCombatCharacter::Weapon_Equip( pWeapon );
    }
    
    void default_Weapon_Equip( ::CBaseCombatWeapon * pWeapon ) {
        CBaseCombatCharacter::Weapon_Equip( pWeapon );
    }

    virtual bool Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        PY_OVERRIDE_CHECK( CBaseCombatCharacter, Weapon_Switch )
        PY_OVERRIDE_LOG( _entities, CBaseCombatCharacter, Weapon_Switch )
        bp::override func_Weapon_Switch = this->get_override( "Weapon_Switch" );
        if( func_Weapon_Switch.ptr() != Py_None )
            try {
                return func_Weapon_Switch( pWeapon ? pWeapon->GetPyHandle() : boost::python::object(), viewmodelindex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
            }
        else
            return this->CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
    }
    
    bool default_Weapon_Switch( ::CBaseCombatWeapon * pWeapon, int viewmodelindex=0 ) {
        return CBaseCombatCharacter::Weapon_Switch( pWeapon, viewmodelindex );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
        PY_OVERRIDE_CHECK( CBaseGrenade, GetServerClass )
        PY_OVERRIDE_LOG( _entities, CBaseGrenade, GetServerClass )
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
        if( pServerClass )
            return pServerClass;
        return CBaseGrenade::GetServerClass();
    }

    static int m_lifeState_Get( CBaseGrenade const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CBaseGrenade & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CBaseGrenade const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CBaseGrenade & inst, int val ) { inst.m_takedamage.Set( val ); }

    static int m_nSkin_Get( CBaseGrenade const & inst ) { return inst.m_nSkin.Get(); }

    static void m_nSkin_Set( CBaseGrenade & inst, int val ) { inst.m_nSkin.Set( val ); }

};

void register_CBaseGrenade_class(){

    { //::CBaseGrenade
        typedef bp::class_< CBaseGrenade_wrapper, bp::bases< CBaseCombatCharacter >, boost::noncopyable > CBaseGrenade_exposer_t;
        CBaseGrenade_exposer_t CBaseGrenade_exposer = CBaseGrenade_exposer_t( "CBaseGrenade", bp::init< >() );
        bp::scope CBaseGrenade_scope( CBaseGrenade_exposer );
        { //::CBaseGrenade::BloodColor
        
            typedef int ( ::CBaseGrenade::*BloodColor_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "BloodColor"
                , BloodColor_function_type( &::CBaseGrenade::BloodColor ) );
        
        }
        { //::CBaseGrenade::BounceSound
        
            typedef void ( ::CBaseGrenade::*BounceSound_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "BounceSound"
                , BounceSound_function_type( &::CBaseGrenade::BounceSound ) );
        
        }
        { //::CBaseGrenade::BounceTouch
        
            typedef void ( ::CBaseGrenade::*BounceTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "BounceTouch"
                , BounceTouch_function_type( &::CBaseGrenade::BounceTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseGrenade::DangerSoundThink
        
            typedef void ( ::CBaseGrenade::*DangerSoundThink_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "DangerSoundThink"
                , DangerSoundThink_function_type( &::CBaseGrenade::DangerSoundThink ) );
        
        }
        { //::CBaseGrenade::Detonate
        
            typedef void ( ::CBaseGrenade::*Detonate_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "Detonate"
                , Detonate_function_type( &::CBaseGrenade::Detonate ) );
        
        }
        { //::CBaseGrenade::DetonateUse
        
            typedef void ( ::CBaseGrenade::*DetonateUse_function_type )( ::CBaseEntity *,::CBaseEntity *,::USE_TYPE,float ) ;
            
            CBaseGrenade_exposer.def( 
                "DetonateUse"
                , DetonateUse_function_type( &::CBaseGrenade::DetonateUse )
                , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) );
        
        }
        { //::CBaseGrenade::Event_Killed
        
            typedef void ( ::CBaseGrenade::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseGrenade::Event_Killed)
                , default_Event_Killed_function_type(&CBaseGrenade_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseGrenade::Explode
        
            typedef void ( ::CBaseGrenade::*Explode_function_type )( ::trace_t *,int ) ;
            
            CBaseGrenade_exposer.def( 
                "Explode"
                , Explode_function_type( &::CBaseGrenade::Explode )
                , ( bp::arg("pTrace"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CBaseGrenade::ExplodeTouch
        
            typedef void ( ::CBaseGrenade::*ExplodeTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "ExplodeTouch"
                , ExplodeTouch_function_type( &::CBaseGrenade::ExplodeTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseGrenade::GetBlastForce
        
            typedef ::Vector ( ::CBaseGrenade::*GetBlastForce_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetBlastForce"
                , GetBlastForce_function_type( &::CBaseGrenade::GetBlastForce ) );
        
        }
        { //::CBaseGrenade::GetOriginalThrower
        
            typedef ::CBaseEntity * ( ::CBaseGrenade::*GetOriginalThrower_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetOriginalThrower"
                , GetOriginalThrower_function_type( &::CBaseGrenade::GetOriginalThrower )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseGrenade::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBaseGrenade_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBaseGrenade::GetPyNetworkType ) );
        
        }
        { //::CBaseGrenade::GetShakeAmplitude
        
            typedef float ( ::CBaseGrenade::*GetShakeAmplitude_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetShakeAmplitude"
                , GetShakeAmplitude_function_type( &::CBaseGrenade::GetShakeAmplitude ) );
        
        }
        { //::CBaseGrenade::GetShakeRadius
        
            typedef float ( ::CBaseGrenade::*GetShakeRadius_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetShakeRadius"
                , GetShakeRadius_function_type( &::CBaseGrenade::GetShakeRadius ) );
        
        }
        { //::CBaseGrenade::GetThrower
        
            typedef ::CBaseCombatCharacter * ( ::CBaseGrenade::*GetThrower_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetThrower"
                , GetThrower_function_type( &::CBaseGrenade::GetThrower )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseGrenade::ObjectCaps
        
            typedef int ( ::CBaseGrenade::*ObjectCaps_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CBaseGrenade::ObjectCaps ) );
        
        }
        { //::CBaseGrenade::PreDetonate
        
            typedef void ( ::CBaseGrenade::*PreDetonate_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "PreDetonate"
                , PreDetonate_function_type( &::CBaseGrenade::PreDetonate ) );
        
        }
        { //::CBaseGrenade::Precache
        
            typedef void ( ::CBaseGrenade::*Precache_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Precache_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseGrenade::Precache)
                , default_Precache_function_type(&CBaseGrenade_wrapper::default_Precache) );
        
        }
        { //::CBaseGrenade::SetBounceSound
        
            typedef void ( ::CBaseGrenade::*SetBounceSound_function_type )( char const * ) ;
            
            CBaseGrenade_exposer.def( 
                "SetBounceSound"
                , SetBounceSound_function_type( &::CBaseGrenade::SetBounceSound )
                , ( bp::arg("pszBounceSound") ) );
        
        }
        { //::CBaseGrenade::SetThrower
        
            typedef void ( ::CBaseGrenade::*SetThrower_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseGrenade_exposer.def( 
                "SetThrower"
                , SetThrower_function_type( &::CBaseGrenade::SetThrower )
                , ( bp::arg("pThrower") ) );
        
        }
        { //::CBaseGrenade::SlideTouch
        
            typedef void ( ::CBaseGrenade::*SlideTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "SlideTouch"
                , SlideTouch_function_type( &::CBaseGrenade::SlideTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseGrenade::Smoke
        
            typedef void ( ::CBaseGrenade::*Smoke_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "Smoke"
                , Smoke_function_type( &::CBaseGrenade::Smoke ) );
        
        }
        { //::CBaseGrenade::TumbleThink
        
            typedef void ( ::CBaseGrenade::*TumbleThink_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "TumbleThink"
                , TumbleThink_function_type( &::CBaseGrenade::TumbleThink ) );
        
        }
        { //::CBaseGrenade::Use
        
            typedef void ( ::CBaseGrenade::*Use_function_type )( ::CBaseEntity *,::CBaseEntity *,::USE_TYPE,float ) ;
            
            CBaseGrenade_exposer.def( 
                "Use"
                , Use_function_type( &::CBaseGrenade::Use )
                , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) );
        
        }
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Activate_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CBaseGrenade_wrapper::default_Activate) );
        
        }
        { //::CBaseCombatCharacter::BecomeRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            
            CBaseGrenade_exposer.def( 
                "BecomeRagdoll"
                , BecomeRagdoll_function_type(&::CBaseCombatCharacter::BecomeRagdoll)
                , default_BecomeRagdoll_function_type(&CBaseGrenade_wrapper::default_BecomeRagdoll)
                , ( bp::arg("info"), bp::arg("forceVector") ) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBaseGrenade_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBaseGrenade_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBaseGrenade_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CBaseGrenade_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseGrenade_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBaseGrenade_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBaseGrenade_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBaseGrenade_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseGrenade_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseGrenade_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBaseGrenade_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseGrenade_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBaseGrenade_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CBaseGrenade_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CBaseGrenade_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CBaseGrenade_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CBaseGrenade_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBaseGrenade_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseGrenade_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CBaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBaseGrenade_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseGrenade_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseGrenade_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseGrenade_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBaseGrenade_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CBaseGrenade_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBaseGrenade_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBaseGrenade_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CBaseGrenade_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CBaseGrenade_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CBaseGrenade_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseAnimatingOverlay::OnRestore
        
            typedef void ( ::CBaseAnimatingOverlay::*OnRestore_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseAnimatingOverlay::OnRestore)
                , default_OnRestore_function_type(&CBaseGrenade_wrapper::default_OnRestore) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CBaseGrenade_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CBaseGrenade_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CBaseGrenade_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseGrenade_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseCombatCharacter::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseGrenade_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::OnTakeDamage_Alive
        
            typedef int ( ::CBaseCombatCharacter::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseGrenade_wrapper::*default_OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type(&::CBaseCombatCharacter::OnTakeDamage_Alive)
                , default_OnTakeDamage_Alive_function_type(&CBaseGrenade_wrapper::default_OnTakeDamage_Alive)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseGrenade_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseGrenade_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBaseGrenade_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseGrenade_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CBaseGrenade_wrapper::*OnNewModel_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CBaseGrenade_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseGrenade_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CBaseGrenade_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseCombatCharacter::Spawn
        
            typedef void ( ::CBaseCombatCharacter::*Spawn_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseCombatCharacter::Spawn)
                , default_Spawn_function_type(&CBaseGrenade_wrapper::default_Spawn) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseGrenade_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBaseGrenade_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseGrenade_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CBaseGrenade_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CBaseGrenade_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CBaseGrenade_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseCombatCharacter::UpdateOnRemove
        
            typedef void ( ::CBaseCombatCharacter::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBaseGrenade_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseCombatCharacter::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseGrenade_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::UpdateTransmitState
        
            typedef int ( ::CBaseEntity::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CBaseGrenade_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CBaseGrenade_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseEntity::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CBaseGrenade_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseGrenade_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseGrenade_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Drop
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CBaseGrenade_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type(&::CBaseCombatCharacter::Weapon_Drop)
                , default_Weapon_Drop_function_type(&CBaseGrenade_wrapper::default_Weapon_Drop)
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget")=bp::object(), bp::arg("pVelocity")=bp::object() ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Equip
        
            typedef void ( ::CBaseCombatCharacter::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            typedef void ( CBaseGrenade_wrapper::*default_Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseGrenade_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type(&::CBaseCombatCharacter::Weapon_Equip)
                , default_Weapon_Equip_function_type(&CBaseGrenade_wrapper::default_Weapon_Equip)
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBaseCombatCharacter::Weapon_Switch
        
            typedef bool ( ::CBaseCombatCharacter::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            typedef bool ( CBaseGrenade_wrapper::*default_Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CBaseGrenade_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type(&::CBaseCombatCharacter::Weapon_Switch)
                , default_Weapon_Switch_function_type(&CBaseGrenade_wrapper::default_Weapon_Switch)
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        CBaseGrenade_exposer.staticmethod( "GetPyNetworkType" );
        { //property "damage"[fget=::CBaseGrenade::GetDamage, fset=::CBaseGrenade::SetDamage]
        
            typedef float ( ::CBaseGrenade::*fget )(  ) ;
            typedef void ( ::CBaseGrenade::*fset )( float ) ;
            
            CBaseGrenade_exposer.add_property( 
                "damage"
                , fget( &::CBaseGrenade::GetDamage )
                , fset( &::CBaseGrenade::SetDamage ) );
        
        }
        { //property "damageradius"[fget=::CBaseGrenade::GetDamageRadius, fset=::CBaseGrenade::SetDamageRadius]
        
            typedef float ( ::CBaseGrenade::*fget )(  ) ;
            typedef void ( ::CBaseGrenade::*fset )( float ) ;
            
            CBaseGrenade_exposer.add_property( 
                "damageradius"
                , fget( &::CBaseGrenade::GetDamageRadius )
                , fset( &::CBaseGrenade::SetDamageRadius ) );
        
        }
        CBaseGrenade_exposer.add_property( "lifestate", &CBaseGrenade_wrapper::m_lifeState_Get, &CBaseGrenade_wrapper::m_lifeState_Set );
        CBaseGrenade_exposer.add_property( "takedamage", &CBaseGrenade_wrapper::m_takedamage_Get, &CBaseGrenade_wrapper::m_takedamage_Set );
        CBaseGrenade_exposer.add_property( "skin", &CBaseGrenade_wrapper::m_nSkin_Get, &CBaseGrenade_wrapper::m_nSkin_Set );
    }

}

