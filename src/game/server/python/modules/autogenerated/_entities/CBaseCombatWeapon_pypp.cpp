// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "cbase.h"
#include "mathlib/vmatrix.h"
#include "utlvector.h"
#include "shareddefs.h"
#include "util.h"
#include "takedamageinfo.h"
#include "baseanimating.h"
#include "BaseAnimatingOverlay.h"
#include "baseflex.h"
#include "basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "player.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "unit_sense.h"
#include "wars_func_unit.h"
#include "soundent.h"
#include "gib.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "entityoutput.h"
#include "props.h"
#include "modelentities.h"
#include "triggers.h"
#include "wars_weapon.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "src_python_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "src_python_converters_ents.h"
#include "src_python.h"
#include "tier0/memdbgon.h"
#include "CBaseCombatWeapon_pypp.hpp"

namespace bp = boost::python;

struct CBaseCombatWeapon_wrapper : CBaseCombatWeapon, bp::wrapper< CBaseCombatWeapon > {

    CBaseCombatWeapon_wrapper( )
    : CBaseCombatWeapon( )
      , bp::wrapper< CBaseCombatWeapon >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Activate(  );
            }
        else
            this->CBaseCombatWeapon::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseCombatWeapon::Activate( );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseCombatWeapon::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Precache(  );
            }
        else
            this->CBaseCombatWeapon::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseCombatWeapon::Precache( );
    }

    virtual void PrimaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PrimaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PrimaryAttack(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PrimaryAttack = this->get_override( "PrimaryAttack" );
        if( func_PrimaryAttack.ptr() != Py_None )
            try {
                func_PrimaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::PrimaryAttack(  );
            }
        else
            this->CBaseCombatWeapon::PrimaryAttack(  );
    }
    
    void default_PrimaryAttack(  ) {
        CBaseCombatWeapon::PrimaryAttack( );
    }

    virtual void SecondaryAttack(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SecondaryAttack: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SecondaryAttack(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SecondaryAttack = this->get_override( "SecondaryAttack" );
        if( func_SecondaryAttack.ptr() != Py_None )
            try {
                func_SecondaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::SecondaryAttack(  );
            }
        else
            this->CBaseCombatWeapon::SecondaryAttack(  );
    }
    
    void default_SecondaryAttack(  ) {
        CBaseCombatWeapon::SecondaryAttack( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Spawn(  );
            }
        else
            this->CBaseCombatWeapon::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseCombatWeapon::Spawn( );
    }

    virtual int UpdateTransmitState(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateTransmitState: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateTransmitState(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatWeapon::UpdateTransmitState(  );
            }
        else
            return this->CBaseCombatWeapon::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseCombatWeapon::UpdateTransmitState( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
            }
        else
            this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( boost::ref(info) );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_KilledOther: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ModifyOrAppendCriteria: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ModifyOrAppendCriteria( boost::ref(set) ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSequenceSet: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSequenceSet( nOldSequence ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void PyOnNewModel(  ){
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( boost::ref(info), boost::ref(vecDir), boost::python::ptr(ptr) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual ServerClass* GetServerClass() {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetServerClass(  ) of Class: CBaseCombatWeapon\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>("pyServerClass", GetPyInstance(), NULL, true);
        if( pServerClass )
            return pServerClass;
        return CBaseCombatWeapon::GetServerClass();
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: CBaseCombatWeapon\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->CBaseCombatWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->CBaseCombatWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return CBaseCombatWeapon::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

    float m_flNextPrimaryAttack_Get() {
       return m_flNextPrimaryAttack.Get();
    }

    void m_flNextPrimaryAttack_Set(float val) {
       m_flNextPrimaryAttack.Set(val);
    }

    float m_flNextSecondaryAttack_Get() {
       return m_flNextSecondaryAttack.Get();
    }

    void m_flNextSecondaryAttack_Set(float val) {
       m_flNextSecondaryAttack.Set(val);
    }

    float m_flTimeWeaponIdle_Get() {
       return m_flTimeWeaponIdle.Get();
    }

    void m_flTimeWeaponIdle_Set(float val) {
       m_flTimeWeaponIdle.Set(val);
    }

    int m_iState_Get() {
       return m_iState.Get();
    }

    void m_iState_Set(int val) {
       m_iState.Set(val);
    }

    int m_iPrimaryAmmoType_Get() {
       return m_iPrimaryAmmoType.Get();
    }

    void m_iPrimaryAmmoType_Set(int val) {
       m_iPrimaryAmmoType.Set(val);
    }

    int m_iSecondaryAmmoType_Get() {
       return m_iSecondaryAmmoType.Get();
    }

    void m_iSecondaryAmmoType_Set(int val) {
       m_iSecondaryAmmoType.Set(val);
    }

    int m_iClip1_Get() {
       return m_iClip1.Get();
    }

    void m_iClip1_Set(int val) {
       m_iClip1.Set(val);
    }

    int m_iClip2_Get() {
       return m_iClip2.Get();
    }

    void m_iClip2_Set(int val) {
       m_iClip2.Set(val);
    }

};

void register_CBaseCombatWeapon_class(){

    { //::CBaseCombatWeapon
        typedef bp::class_< CBaseCombatWeapon_wrapper, bp::bases< CBaseAnimating >, boost::noncopyable > CBaseCombatWeapon_exposer_t;
        CBaseCombatWeapon_exposer_t CBaseCombatWeapon_exposer = CBaseCombatWeapon_exposer_t( "CBaseCombatWeapon", bp::no_init );
        bp::scope CBaseCombatWeapon_scope( CBaseCombatWeapon_exposer );
        CBaseCombatWeapon_exposer.def( bp::init< >() );
        { //::CBaseCombatWeapon::AbortReload
        
            typedef void ( ::CBaseCombatWeapon::*AbortReload_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "AbortReload"
                , AbortReload_function_type( &::CBaseCombatWeapon::AbortReload ) );
        
        }
        { //::CBaseCombatWeapon::Activate
        
            typedef void ( ::CBaseCombatWeapon::*Activate_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_Activate_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseCombatWeapon::Activate)
                , default_Activate_function_type(&CBaseCombatWeapon_wrapper::default_Activate) );
        
        }
        { //::CBaseCombatWeapon::ActivityListCount
        
            typedef int ( ::CBaseCombatWeapon::*ActivityListCount_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ActivityListCount"
                , ActivityListCount_function_type( &::CBaseCombatWeapon::ActivityListCount ) );
        
        }
        { //::CBaseCombatWeapon::ActivityOverride
        
            typedef ::Activity ( ::CBaseCombatWeapon::*ActivityOverride_function_type )( ::Activity,bool * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ActivityOverride"
                , ActivityOverride_function_type( &::CBaseCombatWeapon::ActivityOverride )
                , ( bp::arg("baseAct"), bp::arg("pRequired") ) );
        
        }
        { //::CBaseCombatWeapon::AddViewKick
        
            typedef void ( ::CBaseCombatWeapon::*AddViewKick_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "AddViewKick"
                , AddViewKick_function_type( &::CBaseCombatWeapon::AddViewKick ) );
        
        }
        { //::CBaseCombatWeapon::AddViewmodelBob
        
            typedef void ( ::CBaseCombatWeapon::*AddViewmodelBob_function_type )( ::CBaseViewModel *,::Vector &,::QAngle & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "AddViewmodelBob"
                , AddViewmodelBob_function_type( &::CBaseCombatWeapon::AddViewmodelBob )
                , ( bp::arg("viewmodel"), bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBaseCombatWeapon::AllowsAutoSwitchFrom
        
            typedef bool ( ::CBaseCombatWeapon::*AllowsAutoSwitchFrom_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "AllowsAutoSwitchFrom"
                , AllowsAutoSwitchFrom_function_type( &::CBaseCombatWeapon::AllowsAutoSwitchFrom ) );
        
        }
        { //::CBaseCombatWeapon::AllowsAutoSwitchTo
        
            typedef bool ( ::CBaseCombatWeapon::*AllowsAutoSwitchTo_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "AllowsAutoSwitchTo"
                , AllowsAutoSwitchTo_function_type( &::CBaseCombatWeapon::AllowsAutoSwitchTo ) );
        
        }
        { //::CBaseCombatWeapon::AttemptToMaterialize
        
            typedef void ( ::CBaseCombatWeapon::*AttemptToMaterialize_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "AttemptToMaterialize"
                , AttemptToMaterialize_function_type( &::CBaseCombatWeapon::AttemptToMaterialize ) );
        
        }
        { //::CBaseCombatWeapon::BaseForceFire
        
            typedef void ( ::CBaseCombatWeapon::*BaseForceFire_function_type )( ::CBaseCombatCharacter *,::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "BaseForceFire"
                , BaseForceFire_function_type( &::CBaseCombatWeapon::BaseForceFire )
                , ( bp::arg("pOperator"), bp::arg("pTarget")=bp::object() ) );
        
        }
        { //::CBaseCombatWeapon::CalcViewmodelBob
        
            typedef float ( ::CBaseCombatWeapon::*CalcViewmodelBob_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CalcViewmodelBob"
                , CalcViewmodelBob_function_type( &::CBaseCombatWeapon::CalcViewmodelBob ) );
        
        }
        { //::CBaseCombatWeapon::CanBePickedUpByNPCs
        
            typedef bool ( ::CBaseCombatWeapon::*CanBePickedUpByNPCs_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanBePickedUpByNPCs"
                , CanBePickedUpByNPCs_function_type( &::CBaseCombatWeapon::CanBePickedUpByNPCs ) );
        
        }
        { //::CBaseCombatWeapon::CanBeSelected
        
            typedef bool ( ::CBaseCombatWeapon::*CanBeSelected_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanBeSelected"
                , CanBeSelected_function_type( &::CBaseCombatWeapon::CanBeSelected ) );
        
        }
        { //::CBaseCombatWeapon::CanDeploy
        
            typedef bool ( ::CBaseCombatWeapon::*CanDeploy_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanDeploy"
                , CanDeploy_function_type( &::CBaseCombatWeapon::CanDeploy ) );
        
        }
        { //::CBaseCombatWeapon::CanHolster
        
            typedef bool ( ::CBaseCombatWeapon::*CanHolster_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanHolster"
                , CanHolster_function_type( &::CBaseCombatWeapon::CanHolster ) );
        
        }
        { //::CBaseCombatWeapon::CanLower
        
            typedef bool ( ::CBaseCombatWeapon::*CanLower_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanLower"
                , CanLower_function_type( &::CBaseCombatWeapon::CanLower ) );
        
        }
        { //::CBaseCombatWeapon::CapabilitiesGet
        
            typedef int ( ::CBaseCombatWeapon::*CapabilitiesGet_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CapabilitiesGet"
                , CapabilitiesGet_function_type( &::CBaseCombatWeapon::CapabilitiesGet ) );
        
        }
        { //::CBaseCombatWeapon::CheckReload
        
            typedef void ( ::CBaseCombatWeapon::*CheckReload_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CheckReload"
                , CheckReload_function_type( &::CBaseCombatWeapon::CheckReload ) );
        
        }
        { //::CBaseCombatWeapon::CheckRespawn
        
            typedef void ( ::CBaseCombatWeapon::*CheckRespawn_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CheckRespawn"
                , CheckRespawn_function_type( &::CBaseCombatWeapon::CheckRespawn ) );
        
        }
        { //::CBaseCombatWeapon::Clip1
        
            typedef int ( ::CBaseCombatWeapon::*Clip1_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "Clip1"
                , Clip1_function_type( &::CBaseCombatWeapon::Clip1 ) );
        
        }
        { //::CBaseCombatWeapon::Clip2
        
            typedef int ( ::CBaseCombatWeapon::*Clip2_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "Clip2"
                , Clip2_function_type( &::CBaseCombatWeapon::Clip2 ) );
        
        }
        { //::CBaseCombatWeapon::DefaultDeploy
        
            typedef bool ( ::CBaseCombatWeapon::*DefaultDeploy_function_type )( char *,char *,int,char * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DefaultDeploy"
                , DefaultDeploy_function_type( &::CBaseCombatWeapon::DefaultDeploy )
                , ( bp::arg("szViewModel"), bp::arg("szWeaponModel"), bp::arg("iActivity"), bp::arg("szAnimExt") ) );
        
        }
        { //::CBaseCombatWeapon::DefaultReload
        
            typedef bool ( ::CBaseCombatWeapon::*DefaultReload_function_type )( int,int,int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DefaultReload"
                , DefaultReload_function_type( &::CBaseCombatWeapon::DefaultReload )
                , ( bp::arg("iClipSize1"), bp::arg("iClipSize2"), bp::arg("iActivity") ) );
        
        }
        { //::CBaseCombatWeapon::DefaultTouch
        
            typedef void ( ::CBaseCombatWeapon::*DefaultTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DefaultTouch"
                , DefaultTouch_function_type( &::CBaseCombatWeapon::DefaultTouch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatWeapon::Delete
        
            typedef void ( ::CBaseCombatWeapon::*Delete_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Delete"
                , Delete_function_type( &::CBaseCombatWeapon::Delete ) );
        
        }
        { //::CBaseCombatWeapon::Deploy
        
            typedef bool ( ::CBaseCombatWeapon::*Deploy_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Deploy"
                , Deploy_function_type( &::CBaseCombatWeapon::Deploy ) );
        
        }
        { //::CBaseCombatWeapon::DestroyItem
        
            typedef void ( ::CBaseCombatWeapon::*DestroyItem_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DestroyItem"
                , DestroyItem_function_type( &::CBaseCombatWeapon::DestroyItem ) );
        
        }
        { //::CBaseCombatWeapon::DisplayAltFireHudHint
        
            typedef void ( ::CBaseCombatWeapon::*DisplayAltFireHudHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DisplayAltFireHudHint"
                , DisplayAltFireHudHint_function_type( &::CBaseCombatWeapon::DisplayAltFireHudHint ) );
        
        }
        { //::CBaseCombatWeapon::DisplayReloadHudHint
        
            typedef void ( ::CBaseCombatWeapon::*DisplayReloadHudHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DisplayReloadHudHint"
                , DisplayReloadHudHint_function_type( &::CBaseCombatWeapon::DisplayReloadHudHint ) );
        
        }
        { //::CBaseCombatWeapon::Drop
        
            typedef void ( ::CBaseCombatWeapon::*Drop_function_type )( ::Vector const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Drop"
                , Drop_function_type( &::CBaseCombatWeapon::Drop )
                , ( bp::arg("vecVelocity") ) );
        
        }
        { //::CBaseCombatWeapon::Equip
        
            typedef void ( ::CBaseCombatWeapon::*Equip_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Equip"
                , Equip_function_type( &::CBaseCombatWeapon::Equip )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::CBaseCombatWeapon::FallInit
        
            typedef void ( ::CBaseCombatWeapon::*FallInit_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "FallInit"
                , FallInit_function_type( &::CBaseCombatWeapon::FallInit ) );
        
        }
        { //::CBaseCombatWeapon::FallThink
        
            typedef void ( ::CBaseCombatWeapon::*FallThink_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "FallThink"
                , FallThink_function_type( &::CBaseCombatWeapon::FallThink ) );
        
        }
        { //::CBaseCombatWeapon::FinishReload
        
            typedef void ( ::CBaseCombatWeapon::*FinishReload_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "FinishReload"
                , FinishReload_function_type( &::CBaseCombatWeapon::FinishReload ) );
        
        }
        { //::CBaseCombatWeapon::GetActivity
        
            typedef ::Activity ( ::CBaseCombatWeapon::*GetActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetActivity"
                , GetActivity_function_type( &::CBaseCombatWeapon::GetActivity ) );
        
        }
        { //::CBaseCombatWeapon::GetAnimPrefix
        
            typedef char const * ( ::CBaseCombatWeapon::*GetAnimPrefix_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetAnimPrefix"
                , GetAnimPrefix_function_type( &::CBaseCombatWeapon::GetAnimPrefix ) );
        
        }
        { //::CBaseCombatWeapon::GetAvailableWeaponsInBox
        
            typedef int ( *GetAvailableWeaponsInBox_function_type )( ::CBaseCombatWeapon * *,int,::Vector const &,::Vector const & );
            
            CBaseCombatWeapon_exposer.def( 
                "GetAvailableWeaponsInBox"
                , GetAvailableWeaponsInBox_function_type( &::CBaseCombatWeapon::GetAvailableWeaponsInBox )
                , ( bp::arg("pList"), bp::arg("listMax"), bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::CBaseCombatWeapon::GetBulletSpread
        
            typedef ::Vector const & ( ::CBaseCombatWeapon::*GetBulletSpread_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetBulletSpread"
                , GetBulletSpread_function_type( &::CBaseCombatWeapon::GetBulletSpread )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseCombatWeapon::GetBulletSpread
        
            typedef ::Vector ( ::CBaseCombatWeapon::*GetBulletSpread_function_type )( ::WeaponProficiency_t ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetBulletSpread"
                , GetBulletSpread_function_type( &::CBaseCombatWeapon::GetBulletSpread )
                , ( bp::arg("proficiency") ) );
        
        }
        { //::CBaseCombatWeapon::GetBulletType
        
            typedef int ( ::CBaseCombatWeapon::*GetBulletType_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetBulletType"
                , GetBulletType_function_type( &::CBaseCombatWeapon::GetBulletType ) );
        
        }
        { //::CBaseCombatWeapon::GetDamage
        
            typedef float ( ::CBaseCombatWeapon::*GetDamage_function_type )( float,int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetDamage"
                , GetDamage_function_type( &::CBaseCombatWeapon::GetDamage )
                , ( bp::arg("flDistance"), bp::arg("iLocation") ) );
        
        }
        { //::CBaseCombatWeapon::GetDefaultAnimSpeed
        
            typedef float ( ::CBaseCombatWeapon::*GetDefaultAnimSpeed_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetDefaultAnimSpeed"
                , GetDefaultAnimSpeed_function_type( &::CBaseCombatWeapon::GetDefaultAnimSpeed ) );
        
        }
        { //::CBaseCombatWeapon::GetDefaultClip1
        
            typedef int ( ::CBaseCombatWeapon::*GetDefaultClip1_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetDefaultClip1"
                , GetDefaultClip1_function_type( &::CBaseCombatWeapon::GetDefaultClip1 ) );
        
        }
        { //::CBaseCombatWeapon::GetDefaultClip2
        
            typedef int ( ::CBaseCombatWeapon::*GetDefaultClip2_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetDefaultClip2"
                , GetDefaultClip2_function_type( &::CBaseCombatWeapon::GetDefaultClip2 ) );
        
        }
        { //::CBaseCombatWeapon::GetDrawActivity
        
            typedef ::Activity ( ::CBaseCombatWeapon::*GetDrawActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetDrawActivity"
                , GetDrawActivity_function_type( &::CBaseCombatWeapon::GetDrawActivity ) );
        
        }
        { //::CBaseCombatWeapon::GetFireRate
        
            typedef float ( ::CBaseCombatWeapon::*GetFireRate_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetFireRate"
                , GetFireRate_function_type( &::CBaseCombatWeapon::GetFireRate ) );
        
        }
        { //::CBaseCombatWeapon::GetIdealActivity
        
            typedef ::Activity ( ::CBaseCombatWeapon::*GetIdealActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetIdealActivity"
                , GetIdealActivity_function_type( &::CBaseCombatWeapon::GetIdealActivity ) );
        
        }
        { //::CBaseCombatWeapon::GetIdealSequence
        
            typedef int ( ::CBaseCombatWeapon::*GetIdealSequence_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetIdealSequence"
                , GetIdealSequence_function_type( &::CBaseCombatWeapon::GetIdealSequence ) );
        
        }
        { //::CBaseCombatWeapon::GetLastWeapon
        
            typedef ::CBaseCombatWeapon * ( ::CBaseCombatWeapon::*GetLastWeapon_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetLastWeapon"
                , GetLastWeapon_function_type( &::CBaseCombatWeapon::GetLastWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatWeapon::GetMaxAutoAimDeflection
        
            typedef float ( ::CBaseCombatWeapon::*GetMaxAutoAimDeflection_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMaxAutoAimDeflection"
                , GetMaxAutoAimDeflection_function_type( &::CBaseCombatWeapon::GetMaxAutoAimDeflection ) );
        
        }
        { //::CBaseCombatWeapon::GetMaxBurst
        
            typedef int ( ::CBaseCombatWeapon::*GetMaxBurst_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMaxBurst"
                , GetMaxBurst_function_type( &::CBaseCombatWeapon::GetMaxBurst ) );
        
        }
        { //::CBaseCombatWeapon::GetMaxClip1
        
            typedef int ( ::CBaseCombatWeapon::*GetMaxClip1_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMaxClip1"
                , GetMaxClip1_function_type( &::CBaseCombatWeapon::GetMaxClip1 ) );
        
        }
        { //::CBaseCombatWeapon::GetMaxClip2
        
            typedef int ( ::CBaseCombatWeapon::*GetMaxClip2_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMaxClip2"
                , GetMaxClip2_function_type( &::CBaseCombatWeapon::GetMaxClip2 ) );
        
        }
        { //::CBaseCombatWeapon::GetMaxRestTime
        
            typedef float ( ::CBaseCombatWeapon::*GetMaxRestTime_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMaxRestTime"
                , GetMaxRestTime_function_type( &::CBaseCombatWeapon::GetMaxRestTime ) );
        
        }
        { //::CBaseCombatWeapon::GetMinBurst
        
            typedef int ( ::CBaseCombatWeapon::*GetMinBurst_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMinBurst"
                , GetMinBurst_function_type( &::CBaseCombatWeapon::GetMinBurst ) );
        
        }
        { //::CBaseCombatWeapon::GetMinRestTime
        
            typedef float ( ::CBaseCombatWeapon::*GetMinRestTime_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetMinRestTime"
                , GetMinRestTime_function_type( &::CBaseCombatWeapon::GetMinRestTime ) );
        
        }
        { //::CBaseCombatWeapon::GetName
        
            typedef char const * ( ::CBaseCombatWeapon::*GetName_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetName"
                , GetName_function_type( &::CBaseCombatWeapon::GetName ) );
        
        }
        { //::CBaseCombatWeapon::GetOwner
        
            typedef ::CBaseCombatCharacter * ( ::CBaseCombatWeapon::*GetOwner_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetOwner"
                , GetOwner_function_type( &::CBaseCombatWeapon::GetOwner )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatWeapon::GetPosition
        
            typedef int ( ::CBaseCombatWeapon::*GetPosition_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetPosition"
                , GetPosition_function_type( &::CBaseCombatWeapon::GetPosition ) );
        
        }
        { //::CBaseCombatWeapon::GetPrimaryAmmoCount
        
            typedef int ( ::CBaseCombatWeapon::*GetPrimaryAmmoCount_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetPrimaryAmmoCount"
                , GetPrimaryAmmoCount_function_type( &::CBaseCombatWeapon::GetPrimaryAmmoCount ) );
        
        }
        { //::CBaseCombatWeapon::GetPrimaryAmmoType
        
            typedef int ( ::CBaseCombatWeapon::*GetPrimaryAmmoType_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetPrimaryAmmoType"
                , GetPrimaryAmmoType_function_type( &::CBaseCombatWeapon::GetPrimaryAmmoType ) );
        
        }
        { //::CBaseCombatWeapon::GetPrimaryAttackActivity
        
            typedef ::Activity ( ::CBaseCombatWeapon::*GetPrimaryAttackActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetPrimaryAttackActivity"
                , GetPrimaryAttackActivity_function_type( &::CBaseCombatWeapon::GetPrimaryAttackActivity ) );
        
        }
        { //::CBaseCombatWeapon::GetPrintName
        
            typedef char const * ( ::CBaseCombatWeapon::*GetPrintName_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetPrintName"
                , GetPrintName_function_type( &::CBaseCombatWeapon::GetPrintName ) );
        
        }
        { //::CBaseCombatWeapon::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBaseCombatWeapon_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBaseCombatWeapon::GetPyNetworkType ) );
        
        }
        { //::CBaseCombatWeapon::GetRandomBurst
        
            typedef int ( ::CBaseCombatWeapon::*GetRandomBurst_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetRandomBurst"
                , GetRandomBurst_function_type( &::CBaseCombatWeapon::GetRandomBurst ) );
        
        }
        { //::CBaseCombatWeapon::GetRumbleEffect
        
            typedef int ( ::CBaseCombatWeapon::*GetRumbleEffect_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetRumbleEffect"
                , GetRumbleEffect_function_type( &::CBaseCombatWeapon::GetRumbleEffect ) );
        
        }
        { //::CBaseCombatWeapon::GetSecondaryAmmoCount
        
            typedef int ( ::CBaseCombatWeapon::*GetSecondaryAmmoCount_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSecondaryAmmoCount"
                , GetSecondaryAmmoCount_function_type( &::CBaseCombatWeapon::GetSecondaryAmmoCount ) );
        
        }
        { //::CBaseCombatWeapon::GetSecondaryAmmoType
        
            typedef int ( ::CBaseCombatWeapon::*GetSecondaryAmmoType_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSecondaryAmmoType"
                , GetSecondaryAmmoType_function_type( &::CBaseCombatWeapon::GetSecondaryAmmoType ) );
        
        }
        { //::CBaseCombatWeapon::GetSecondaryAttackActivity
        
            typedef ::Activity ( ::CBaseCombatWeapon::*GetSecondaryAttackActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSecondaryAttackActivity"
                , GetSecondaryAttackActivity_function_type( &::CBaseCombatWeapon::GetSecondaryAttackActivity ) );
        
        }
        { //::CBaseCombatWeapon::GetShootSound
        
            typedef char const * ( ::CBaseCombatWeapon::*GetShootSound_function_type )( int ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetShootSound"
                , GetShootSound_function_type( &::CBaseCombatWeapon::GetShootSound )
                , ( bp::arg("iIndex") ) );
        
        }
        { //::CBaseCombatWeapon::GetSlot
        
            typedef int ( ::CBaseCombatWeapon::*GetSlot_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSlot"
                , GetSlot_function_type( &::CBaseCombatWeapon::GetSlot ) );
        
        }
        { //::CBaseCombatWeapon::GetSpreadBias
        
            typedef float ( ::CBaseCombatWeapon::*GetSpreadBias_function_type )( ::WeaponProficiency_t ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSpreadBias"
                , GetSpreadBias_function_type( &::CBaseCombatWeapon::GetSpreadBias )
                , ( bp::arg("proficiency") ) );
        
        }
        { //::CBaseCombatWeapon::GetSubType
        
            typedef int ( ::CBaseCombatWeapon::*GetSubType_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetSubType"
                , GetSubType_function_type( &::CBaseCombatWeapon::GetSubType ) );
        
        }
        { //::CBaseCombatWeapon::GetViewModelSequenceDuration
        
            typedef float ( ::CBaseCombatWeapon::*GetViewModelSequenceDuration_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetViewModelSequenceDuration"
                , GetViewModelSequenceDuration_function_type( &::CBaseCombatWeapon::GetViewModelSequenceDuration ) );
        
        }
        { //::CBaseCombatWeapon::GetWeaponFlags
        
            typedef int ( ::CBaseCombatWeapon::*GetWeaponFlags_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWeaponFlags"
                , GetWeaponFlags_function_type( &::CBaseCombatWeapon::GetWeaponFlags ) );
        
        }
        { //::CBaseCombatWeapon::GetWeaponID
        
            typedef int ( ::CBaseCombatWeapon::*GetWeaponID_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWeaponID"
                , GetWeaponID_function_type( &::CBaseCombatWeapon::GetWeaponID ) );
        
        }
        { //::CBaseCombatWeapon::GetWeaponIdleTime
        
            typedef float ( ::CBaseCombatWeapon::*GetWeaponIdleTime_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWeaponIdleTime"
                , GetWeaponIdleTime_function_type( &::CBaseCombatWeapon::GetWeaponIdleTime ) );
        
        }
        { //::CBaseCombatWeapon::GetWeight
        
            typedef int ( ::CBaseCombatWeapon::*GetWeight_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWeight"
                , GetWeight_function_type( &::CBaseCombatWeapon::GetWeight ) );
        
        }
        { //::CBaseCombatWeapon::GetWorldModel
        
            typedef char const * ( ::CBaseCombatWeapon::*GetWorldModel_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWorldModel"
                , GetWorldModel_function_type( &::CBaseCombatWeapon::GetWorldModel ) );
        
        }
        { //::CBaseCombatWeapon::GetWpnData
        
            typedef ::FileWeaponInfo_t const & ( ::CBaseCombatWeapon::*GetWpnData_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "GetWpnData"
                , GetWpnData_function_type( &::CBaseCombatWeapon::GetWpnData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseCombatWeapon::GiveDefaultAmmo
        
            typedef void ( ::CBaseCombatWeapon::*GiveDefaultAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GiveDefaultAmmo"
                , GiveDefaultAmmo_function_type( &::CBaseCombatWeapon::GiveDefaultAmmo ) );
        
        }
        { //::CBaseCombatWeapon::HandleAnimEvent
        
            typedef void ( ::CBaseCombatWeapon::*HandleAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HandleAnimEvent"
                , HandleAnimEvent_function_type( &::CBaseCombatWeapon::HandleAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBaseCombatWeapon::HandleFireOnEmpty
        
            typedef void ( ::CBaseCombatWeapon::*HandleFireOnEmpty_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HandleFireOnEmpty"
                , HandleFireOnEmpty_function_type( &::CBaseCombatWeapon::HandleFireOnEmpty ) );
        
        }
        { //::CBaseCombatWeapon::HasAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*HasAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HasAmmo"
                , HasAmmo_function_type( &::CBaseCombatWeapon::HasAmmo ) );
        
        }
        { //::CBaseCombatWeapon::HasAnyAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*HasAnyAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HasAnyAmmo"
                , HasAnyAmmo_function_type( &::CBaseCombatWeapon::HasAnyAmmo ) );
        
        }
        { //::CBaseCombatWeapon::HasPrimaryAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*HasPrimaryAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HasPrimaryAmmo"
                , HasPrimaryAmmo_function_type( &::CBaseCombatWeapon::HasPrimaryAmmo ) );
        
        }
        { //::CBaseCombatWeapon::HasSecondaryAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*HasSecondaryAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HasSecondaryAmmo"
                , HasSecondaryAmmo_function_type( &::CBaseCombatWeapon::HasSecondaryAmmo ) );
        
        }
        { //::CBaseCombatWeapon::HasWeaponIdleTimeElapsed
        
            typedef bool ( ::CBaseCombatWeapon::*HasWeaponIdleTimeElapsed_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HasWeaponIdleTimeElapsed"
                , HasWeaponIdleTimeElapsed_function_type( &::CBaseCombatWeapon::HasWeaponIdleTimeElapsed ) );
        
        }
        { //::CBaseCombatWeapon::HideThink
        
            typedef void ( ::CBaseCombatWeapon::*HideThink_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "HideThink"
                , HideThink_function_type( &::CBaseCombatWeapon::HideThink ) );
        
        }
        { //::CBaseCombatWeapon::Holster
        
            typedef bool ( ::CBaseCombatWeapon::*Holster_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Holster"
                , Holster_function_type( &::CBaseCombatWeapon::Holster )
                , ( bp::arg("pSwitchingTo")=bp::object() ) );
        
        }
        { //::CBaseCombatWeapon::InputHideWeapon
        
            typedef void ( ::CBaseCombatWeapon::*InputHideWeapon_function_type )( ::inputdata_t & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "InputHideWeapon"
                , InputHideWeapon_function_type( &::CBaseCombatWeapon::InputHideWeapon )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseCombatWeapon::IsAllowedToSwitch
        
            typedef bool ( ::CBaseCombatWeapon::*IsAllowedToSwitch_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsAllowedToSwitch"
                , IsAllowedToSwitch_function_type( &::CBaseCombatWeapon::IsAllowedToSwitch ) );
        
        }
        { //::CBaseCombatWeapon::IsBaseCombatWeapon
        
            typedef bool ( ::CBaseCombatWeapon::*IsBaseCombatWeapon_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "IsBaseCombatWeapon"
                , IsBaseCombatWeapon_function_type( &::CBaseCombatWeapon::IsBaseCombatWeapon ) );
        
        }
        { //::CBaseCombatWeapon::IsConstrained
        
            typedef bool ( ::CBaseCombatWeapon::*IsConstrained_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsConstrained"
                , IsConstrained_function_type( &::CBaseCombatWeapon::IsConstrained ) );
        
        }
        { //::CBaseCombatWeapon::IsLocked
        
            typedef bool ( ::CBaseCombatWeapon::*IsLocked_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsLocked"
                , IsLocked_function_type( &::CBaseCombatWeapon::IsLocked )
                , ( bp::arg("pAsker") ) );
        
        }
        { //::CBaseCombatWeapon::IsMeleeWeapon
        
            typedef bool ( ::CBaseCombatWeapon::*IsMeleeWeapon_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "IsMeleeWeapon"
                , IsMeleeWeapon_function_type( &::CBaseCombatWeapon::IsMeleeWeapon ) );
        
        }
        { //::CBaseCombatWeapon::IsPredicted
        
            typedef bool ( ::CBaseCombatWeapon::*IsPredicted_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "IsPredicted"
                , IsPredicted_function_type( &::CBaseCombatWeapon::IsPredicted ) );
        
        }
        { //::CBaseCombatWeapon::IsRemoveable
        
            typedef bool ( ::CBaseCombatWeapon::*IsRemoveable_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsRemoveable"
                , IsRemoveable_function_type( &::CBaseCombatWeapon::IsRemoveable ) );
        
        }
        { //::CBaseCombatWeapon::IsViewModelSequenceFinished
        
            typedef bool ( ::CBaseCombatWeapon::*IsViewModelSequenceFinished_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsViewModelSequenceFinished"
                , IsViewModelSequenceFinished_function_type( &::CBaseCombatWeapon::IsViewModelSequenceFinished ) );
        
        }
        { //::CBaseCombatWeapon::IsWeaponVisible
        
            typedef bool ( ::CBaseCombatWeapon::*IsWeaponVisible_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsWeaponVisible"
                , IsWeaponVisible_function_type( &::CBaseCombatWeapon::IsWeaponVisible ) );
        
        }
        { //::CBaseCombatWeapon::IsWeaponZoomed
        
            typedef bool ( ::CBaseCombatWeapon::*IsWeaponZoomed_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "IsWeaponZoomed"
                , IsWeaponZoomed_function_type( &::CBaseCombatWeapon::IsWeaponZoomed ) );
        
        }
        { //::CBaseCombatWeapon::ItemBusyFrame
        
            typedef void ( ::CBaseCombatWeapon::*ItemBusyFrame_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ItemBusyFrame"
                , ItemBusyFrame_function_type( &::CBaseCombatWeapon::ItemBusyFrame ) );
        
        }
        { //::CBaseCombatWeapon::ItemHolsterFrame
        
            typedef void ( ::CBaseCombatWeapon::*ItemHolsterFrame_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ItemHolsterFrame"
                , ItemHolsterFrame_function_type( &::CBaseCombatWeapon::ItemHolsterFrame ) );
        
        }
        { //::CBaseCombatWeapon::ItemPostFrame
        
            typedef void ( ::CBaseCombatWeapon::*ItemPostFrame_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ItemPostFrame"
                , ItemPostFrame_function_type( &::CBaseCombatWeapon::ItemPostFrame ) );
        
        }
        { //::CBaseCombatWeapon::ItemPreFrame
        
            typedef void ( ::CBaseCombatWeapon::*ItemPreFrame_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ItemPreFrame"
                , ItemPreFrame_function_type( &::CBaseCombatWeapon::ItemPreFrame ) );
        
        }
        { //::CBaseCombatWeapon::Kill
        
            typedef void ( ::CBaseCombatWeapon::*Kill_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Kill"
                , Kill_function_type( &::CBaseCombatWeapon::Kill ) );
        
        }
        { //::CBaseCombatWeapon::Lock
        
            typedef void ( ::CBaseCombatWeapon::*Lock_function_type )( float,::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Lock"
                , Lock_function_type( &::CBaseCombatWeapon::Lock )
                , ( bp::arg("lockTime"), bp::arg("pLocker") ) );
        
        }
        { //::CBaseCombatWeapon::Lower
        
            typedef bool ( ::CBaseCombatWeapon::*Lower_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Lower"
                , Lower_function_type( &::CBaseCombatWeapon::Lower ) );
        
        }
        { //::CBaseCombatWeapon::MaintainIdealActivity
        
            typedef void ( ::CBaseCombatWeapon::*MaintainIdealActivity_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "MaintainIdealActivity"
                , MaintainIdealActivity_function_type( &::CBaseCombatWeapon::MaintainIdealActivity ) );
        
        }
        { //::CBaseCombatWeapon::MakeTracer
        
            typedef void ( ::CBaseCombatWeapon::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseCombatWeapon::MakeTracer)
                , default_MakeTracer_function_type(&CBaseCombatWeapon_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseCombatWeapon::MakeWeaponNameFromEntity
        
            typedef void ( ::CBaseCombatWeapon::*MakeWeaponNameFromEntity_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "MakeWeaponNameFromEntity"
                , MakeWeaponNameFromEntity_function_type( &::CBaseCombatWeapon::MakeWeaponNameFromEntity )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatWeapon::Materialize
        
            typedef void ( ::CBaseCombatWeapon::*Materialize_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Materialize"
                , Materialize_function_type( &::CBaseCombatWeapon::Materialize ) );
        
        }
        { //::CBaseCombatWeapon::ObjectCaps
        
            typedef int ( ::CBaseCombatWeapon::*ObjectCaps_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CBaseCombatWeapon::ObjectCaps ) );
        
        }
        { //::CBaseCombatWeapon::OnMouseWheel
        
            typedef void ( ::CBaseCombatWeapon::*OnMouseWheel_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnMouseWheel"
                , OnMouseWheel_function_type( &::CBaseCombatWeapon::OnMouseWheel )
                , ( bp::arg("nDirection") ) );
        
        }
        { //::CBaseCombatWeapon::OnPickedUp
        
            typedef void ( ::CBaseCombatWeapon::*OnPickedUp_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnPickedUp"
                , OnPickedUp_function_type( &::CBaseCombatWeapon::OnPickedUp )
                , ( bp::arg("pNewOwner") ) );
        
        }
        { //::CBaseCombatWeapon::Operator_ForceNPCFire
        
            typedef void ( ::CBaseCombatWeapon::*Operator_ForceNPCFire_function_type )( ::CBaseCombatCharacter *,bool,::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Operator_ForceNPCFire"
                , Operator_ForceNPCFire_function_type( &::CBaseCombatWeapon::Operator_ForceNPCFire )
                , ( bp::arg("pOperator"), bp::arg("bSecondary"), bp::arg("pTarget")=bp::object() ) );
        
        }
        { //::CBaseCombatWeapon::Operator_FrameUpdate
        
            typedef void ( ::CBaseCombatWeapon::*Operator_FrameUpdate_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Operator_FrameUpdate"
                , Operator_FrameUpdate_function_type( &::CBaseCombatWeapon::Operator_FrameUpdate )
                , ( bp::arg("pOperator") ) );
        
        }
        { //::CBaseCombatWeapon::Operator_HandleAnimEvent
        
            typedef void ( ::CBaseCombatWeapon::*Operator_HandleAnimEvent_function_type )( ::animevent_t *,::CBaseCombatCharacter * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Operator_HandleAnimEvent"
                , Operator_HandleAnimEvent_function_type( &::CBaseCombatWeapon::Operator_HandleAnimEvent )
                , ( bp::arg("pEvent"), bp::arg("pOperator") ) );
        
        }
        { //::CBaseCombatWeapon::Precache
        
            typedef void ( ::CBaseCombatWeapon::*Precache_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_Precache_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseCombatWeapon::Precache)
                , default_Precache_function_type(&CBaseCombatWeapon_wrapper::default_Precache) );
        
        }
        { //::CBaseCombatWeapon::PrimaryAttack
        
            typedef void ( ::CBaseCombatWeapon::*PrimaryAttack_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_PrimaryAttack_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "PrimaryAttack"
                , PrimaryAttack_function_type(&::CBaseCombatWeapon::PrimaryAttack)
                , default_PrimaryAttack_function_type(&CBaseCombatWeapon_wrapper::default_PrimaryAttack) );
        
        }
        { //::CBaseCombatWeapon::Ready
        
            typedef bool ( ::CBaseCombatWeapon::*Ready_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Ready"
                , Ready_function_type( &::CBaseCombatWeapon::Ready ) );
        
        }
        { //::CBaseCombatWeapon::Reload
        
            typedef bool ( ::CBaseCombatWeapon::*Reload_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Reload"
                , Reload_function_type( &::CBaseCombatWeapon::Reload ) );
        
        }
        { //::CBaseCombatWeapon::ReloadOrSwitchWeapons
        
            typedef bool ( ::CBaseCombatWeapon::*ReloadOrSwitchWeapons_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ReloadOrSwitchWeapons"
                , ReloadOrSwitchWeapons_function_type( &::CBaseCombatWeapon::ReloadOrSwitchWeapons ) );
        
        }
        { //::CBaseCombatWeapon::RescindAltFireHudHint
        
            typedef void ( ::CBaseCombatWeapon::*RescindAltFireHudHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "RescindAltFireHudHint"
                , RescindAltFireHudHint_function_type( &::CBaseCombatWeapon::RescindAltFireHudHint ) );
        
        }
        { //::CBaseCombatWeapon::RescindReloadHudHint
        
            typedef void ( ::CBaseCombatWeapon::*RescindReloadHudHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "RescindReloadHudHint"
                , RescindReloadHudHint_function_type( &::CBaseCombatWeapon::RescindReloadHudHint ) );
        
        }
        { //::CBaseCombatWeapon::Respawn
        
            typedef ::CBaseEntity * ( ::CBaseCombatWeapon::*Respawn_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Respawn"
                , Respawn_function_type( &::CBaseCombatWeapon::Respawn )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseCombatWeapon::SecondaryAttack
        
            typedef void ( ::CBaseCombatWeapon::*SecondaryAttack_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_SecondaryAttack_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SecondaryAttack"
                , SecondaryAttack_function_type(&::CBaseCombatWeapon::SecondaryAttack)
                , default_SecondaryAttack_function_type(&CBaseCombatWeapon_wrapper::default_SecondaryAttack) );
        
        }
        { //::CBaseCombatWeapon::SendViewModelAnim
        
            typedef void ( ::CBaseCombatWeapon::*SendViewModelAnim_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SendViewModelAnim"
                , SendViewModelAnim_function_type( &::CBaseCombatWeapon::SendViewModelAnim )
                , ( bp::arg("nSequence") ) );
        
        }
        { //::CBaseCombatWeapon::SendWeaponAnim
        
            typedef bool ( ::CBaseCombatWeapon::*SendWeaponAnim_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SendWeaponAnim"
                , SendWeaponAnim_function_type( &::CBaseCombatWeapon::SendWeaponAnim )
                , ( bp::arg("iActivity") ) );
        
        }
        { //::CBaseCombatWeapon::SetActivity
        
            typedef void ( ::CBaseCombatWeapon::*SetActivity_function_type )( ::Activity,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetActivity"
                , SetActivity_function_type( &::CBaseCombatWeapon::SetActivity )
                , ( bp::arg("act"), bp::arg("duration") ) );
        
        }
        { //::CBaseCombatWeapon::SetActivity
        
            typedef void ( ::CBaseCombatWeapon::*SetActivity_function_type )( ::Activity ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetActivity"
                , SetActivity_function_type( &::CBaseCombatWeapon::SetActivity )
                , ( bp::arg("eActivity") ) );
        
        }
        { //::CBaseCombatWeapon::SetIdealActivity
        
            typedef bool ( ::CBaseCombatWeapon::*SetIdealActivity_function_type )( ::Activity ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetIdealActivity"
                , SetIdealActivity_function_type( &::CBaseCombatWeapon::SetIdealActivity )
                , ( bp::arg("ideal") ) );
        
        }
        { //::CBaseCombatWeapon::SetOwner
        
            typedef void ( ::CBaseCombatWeapon::*SetOwner_function_type )( ::CBaseCombatCharacter * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetOwner"
                , SetOwner_function_type( &::CBaseCombatWeapon::SetOwner )
                , ( bp::arg("owner") ) );
        
        }
        { //::CBaseCombatWeapon::SetPickupTouch
        
            typedef void ( ::CBaseCombatWeapon::*SetPickupTouch_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetPickupTouch"
                , SetPickupTouch_function_type( &::CBaseCombatWeapon::SetPickupTouch ) );
        
        }
        { //::CBaseCombatWeapon::SetPrimaryAmmoCount
        
            typedef void ( ::CBaseCombatWeapon::*SetPrimaryAmmoCount_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetPrimaryAmmoCount"
                , SetPrimaryAmmoCount_function_type( &::CBaseCombatWeapon::SetPrimaryAmmoCount )
                , ( bp::arg("count") ) );
        
        }
        { //::CBaseCombatWeapon::SetRemoveable
        
            typedef void ( ::CBaseCombatWeapon::*SetRemoveable_function_type )( bool ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetRemoveable"
                , SetRemoveable_function_type( &::CBaseCombatWeapon::SetRemoveable )
                , ( bp::arg("bRemoveable") ) );
        
        }
        { //::CBaseCombatWeapon::SetSecondaryAmmoCount
        
            typedef void ( ::CBaseCombatWeapon::*SetSecondaryAmmoCount_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetSecondaryAmmoCount"
                , SetSecondaryAmmoCount_function_type( &::CBaseCombatWeapon::SetSecondaryAmmoCount )
                , ( bp::arg("count") ) );
        
        }
        { //::CBaseCombatWeapon::SetSubType
        
            typedef void ( ::CBaseCombatWeapon::*SetSubType_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetSubType"
                , SetSubType_function_type( &::CBaseCombatWeapon::SetSubType )
                , ( bp::arg("iType") ) );
        
        }
        { //::CBaseCombatWeapon::SetViewModel
        
            typedef void ( ::CBaseCombatWeapon::*SetViewModel_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetViewModel"
                , SetViewModel_function_type( &::CBaseCombatWeapon::SetViewModel ) );
        
        }
        { //::CBaseCombatWeapon::SetViewModelIndex
        
            typedef void ( ::CBaseCombatWeapon::*SetViewModelIndex_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetViewModelIndex"
                , SetViewModelIndex_function_type( &::CBaseCombatWeapon::SetViewModelIndex )
                , ( bp::arg("index")=(int)(0) ) );
        
        }
        { //::CBaseCombatWeapon::SetWeaponIdleTime
        
            typedef void ( ::CBaseCombatWeapon::*SetWeaponIdleTime_function_type )( float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetWeaponIdleTime"
                , SetWeaponIdleTime_function_type( &::CBaseCombatWeapon::SetWeaponIdleTime )
                , ( bp::arg("time") ) );
        
        }
        { //::CBaseCombatWeapon::SetWeaponVisible
        
            typedef void ( ::CBaseCombatWeapon::*SetWeaponVisible_function_type )( bool ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "SetWeaponVisible"
                , SetWeaponVisible_function_type( &::CBaseCombatWeapon::SetWeaponVisible )
                , ( bp::arg("visible") ) );
        
        }
        { //::CBaseCombatWeapon::ShouldDisplayAltFireHUDHint
        
            typedef bool ( ::CBaseCombatWeapon::*ShouldDisplayAltFireHUDHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ShouldDisplayAltFireHUDHint"
                , ShouldDisplayAltFireHUDHint_function_type( &::CBaseCombatWeapon::ShouldDisplayAltFireHUDHint ) );
        
        }
        { //::CBaseCombatWeapon::ShouldDisplayReloadHUDHint
        
            typedef bool ( ::CBaseCombatWeapon::*ShouldDisplayReloadHUDHint_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ShouldDisplayReloadHUDHint"
                , ShouldDisplayReloadHUDHint_function_type( &::CBaseCombatWeapon::ShouldDisplayReloadHUDHint ) );
        
        }
        { //::CBaseCombatWeapon::ShouldShowControlPanels
        
            typedef bool ( ::CBaseCombatWeapon::*ShouldShowControlPanels_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ShouldShowControlPanels"
                , ShouldShowControlPanels_function_type( &::CBaseCombatWeapon::ShouldShowControlPanels ) );
        
        }
        { //::CBaseCombatWeapon::Spawn
        
            typedef void ( ::CBaseCombatWeapon::*Spawn_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseCombatWeapon::Spawn)
                , default_Spawn_function_type(&CBaseCombatWeapon_wrapper::default_Spawn) );
        
        }
        { //::CBaseCombatWeapon::StartSprinting
        
            typedef bool ( ::CBaseCombatWeapon::*StartSprinting_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "StartSprinting"
                , StartSprinting_function_type( &::CBaseCombatWeapon::StartSprinting ) );
        
        }
        { //::CBaseCombatWeapon::StopSprinting
        
            typedef bool ( ::CBaseCombatWeapon::*StopSprinting_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "StopSprinting"
                , StopSprinting_function_type( &::CBaseCombatWeapon::StopSprinting ) );
        
        }
        { //::CBaseCombatWeapon::StopWeaponSound
        
            typedef void ( ::CBaseCombatWeapon::*StopWeaponSound_function_type )( ::WeaponSound_t ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "StopWeaponSound"
                , StopWeaponSound_function_type( &::CBaseCombatWeapon::StopWeaponSound )
                , ( bp::arg("sound_type") ) );
        
        }
        { //::CBaseCombatWeapon::UpdateClientData
        
            typedef int ( ::CBaseCombatWeapon::*UpdateClientData_function_type )( ::CBasePlayer * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "UpdateClientData"
                , UpdateClientData_function_type( &::CBaseCombatWeapon::UpdateClientData )
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CBaseCombatWeapon::UpdateTransmitState
        
            typedef int ( ::CBaseCombatWeapon::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CBaseCombatWeapon_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseCombatWeapon::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CBaseCombatWeapon_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseCombatWeapon::Use
        
            typedef void ( ::CBaseCombatWeapon::*Use_function_type )( ::CBaseEntity *,::CBaseEntity *,::USE_TYPE,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Use"
                , Use_function_type( &::CBaseCombatWeapon::Use )
                , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) );
        
        }
        { //::CBaseCombatWeapon::UsesClipsForAmmo1
        
            typedef bool ( ::CBaseCombatWeapon::*UsesClipsForAmmo1_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "UsesClipsForAmmo1"
                , UsesClipsForAmmo1_function_type( &::CBaseCombatWeapon::UsesClipsForAmmo1 ) );
        
        }
        { //::CBaseCombatWeapon::UsesClipsForAmmo2
        
            typedef bool ( ::CBaseCombatWeapon::*UsesClipsForAmmo2_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "UsesClipsForAmmo2"
                , UsesClipsForAmmo2_function_type( &::CBaseCombatWeapon::UsesClipsForAmmo2 ) );
        
        }
        { //::CBaseCombatWeapon::UsesPrimaryAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*UsesPrimaryAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "UsesPrimaryAmmo"
                , UsesPrimaryAmmo_function_type( &::CBaseCombatWeapon::UsesPrimaryAmmo ) );
        
        }
        { //::CBaseCombatWeapon::UsesSecondaryAmmo
        
            typedef bool ( ::CBaseCombatWeapon::*UsesSecondaryAmmo_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "UsesSecondaryAmmo"
                , UsesSecondaryAmmo_function_type( &::CBaseCombatWeapon::UsesSecondaryAmmo ) );
        
        }
        { //::CBaseCombatWeapon::VisibleInWeaponSelection
        
            typedef bool ( ::CBaseCombatWeapon::*VisibleInWeaponSelection_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "VisibleInWeaponSelection"
                , VisibleInWeaponSelection_function_type( &::CBaseCombatWeapon::VisibleInWeaponSelection ) );
        
        }
        { //::CBaseCombatWeapon::WeaponAutoAimScale
        
            typedef float ( ::CBaseCombatWeapon::*WeaponAutoAimScale_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponAutoAimScale"
                , WeaponAutoAimScale_function_type( &::CBaseCombatWeapon::WeaponAutoAimScale ) );
        
        }
        { //::CBaseCombatWeapon::WeaponIdle
        
            typedef void ( ::CBaseCombatWeapon::*WeaponIdle_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponIdle"
                , WeaponIdle_function_type( &::CBaseCombatWeapon::WeaponIdle ) );
        
        }
        { //::CBaseCombatWeapon::WeaponLOSCondition
        
            typedef bool ( ::CBaseCombatWeapon::*WeaponLOSCondition_function_type )( ::Vector const &,::Vector const &,bool ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponLOSCondition"
                , WeaponLOSCondition_function_type( &::CBaseCombatWeapon::WeaponLOSCondition )
                , ( bp::arg("ownerPos"), bp::arg("targetPos"), bp::arg("bSetConditions") ) );
        
        }
        { //::CBaseCombatWeapon::WeaponMeleeAttack1Condition
        
            typedef int ( ::CBaseCombatWeapon::*WeaponMeleeAttack1Condition_function_type )( float,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponMeleeAttack1Condition"
                , WeaponMeleeAttack1Condition_function_type( &::CBaseCombatWeapon::WeaponMeleeAttack1Condition )
                , ( bp::arg("flDot"), bp::arg("flDist") ) );
        
        }
        { //::CBaseCombatWeapon::WeaponMeleeAttack2Condition
        
            typedef int ( ::CBaseCombatWeapon::*WeaponMeleeAttack2Condition_function_type )( float,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponMeleeAttack2Condition"
                , WeaponMeleeAttack2Condition_function_type( &::CBaseCombatWeapon::WeaponMeleeAttack2Condition )
                , ( bp::arg("flDot"), bp::arg("flDist") ) );
        
        }
        { //::CBaseCombatWeapon::WeaponRangeAttack1Condition
        
            typedef int ( ::CBaseCombatWeapon::*WeaponRangeAttack1Condition_function_type )( float,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponRangeAttack1Condition"
                , WeaponRangeAttack1Condition_function_type( &::CBaseCombatWeapon::WeaponRangeAttack1Condition )
                , ( bp::arg("flDot"), bp::arg("flDist") ) );
        
        }
        { //::CBaseCombatWeapon::WeaponRangeAttack2Condition
        
            typedef int ( ::CBaseCombatWeapon::*WeaponRangeAttack2Condition_function_type )( float,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponRangeAttack2Condition"
                , WeaponRangeAttack2Condition_function_type( &::CBaseCombatWeapon::WeaponRangeAttack2Condition )
                , ( bp::arg("flDot"), bp::arg("flDist") ) );
        
        }
        { //::CBaseCombatWeapon::WeaponSound
        
            typedef void ( ::CBaseCombatWeapon::*WeaponSound_function_type )( ::WeaponSound_t,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponSound"
                , WeaponSound_function_type( &::CBaseCombatWeapon::WeaponSound )
                , ( bp::arg("sound_type"), bp::arg("soundtime")=0.0f ) );
        
        }
        { //::CBaseCombatWeapon::WeaponState
        
            typedef int ( ::CBaseCombatWeapon::*WeaponState_function_type )(  ) const;
            
            CBaseCombatWeapon_exposer.def( 
                "WeaponState"
                , WeaponState_function_type( &::CBaseCombatWeapon::WeaponState ) );
        
        }
        CBaseCombatWeapon_exposer.def_readwrite( "altfiresunderwater", &CBaseCombatWeapon::m_bAltFiresUnderwater );
        CBaseCombatWeapon_exposer.def_readwrite( "fireonempty", &CBaseCombatWeapon::m_bFireOnEmpty );
        CBaseCombatWeapon_exposer.def_readwrite( "firesunderwater", &CBaseCombatWeapon::m_bFiresUnderwater );
        CBaseCombatWeapon_exposer.def_readwrite( "inreload", &CBaseCombatWeapon::m_bInReload );
        CBaseCombatWeapon_exposer.def_readwrite( "reloadssingly", &CBaseCombatWeapon::m_bReloadsSingly );
        CBaseCombatWeapon_exposer.def_readwrite( "fireduration", &CBaseCombatWeapon::m_fFireDuration );
        CBaseCombatWeapon_exposer.def_readwrite( "maxrange1", &CBaseCombatWeapon::m_fMaxRange1 );
        CBaseCombatWeapon_exposer.def_readwrite( "maxrange2", &CBaseCombatWeapon::m_fMaxRange2 );
        CBaseCombatWeapon_exposer.def_readwrite( "minrange1", &CBaseCombatWeapon::m_fMinRange1 );
        CBaseCombatWeapon_exposer.def_readwrite( "minrange2", &CBaseCombatWeapon::m_fMinRange2 );
        CBaseCombatWeapon_exposer.def_readwrite( "nextemptysoundtime", &CBaseCombatWeapon::m_flNextEmptySoundTime );
        CBaseCombatWeapon_exposer.def_readwrite( "unlocktime", &CBaseCombatWeapon::m_flUnlockTime );
        CBaseCombatWeapon_exposer.def_readwrite( "locker", &CBaseCombatWeapon::m_hLocker );
        CBaseCombatWeapon_exposer.def_readwrite( "subtype", &CBaseCombatWeapon::m_iSubType );
        CBaseCombatWeapon_exposer.def_readwrite( "name", &CBaseCombatWeapon::m_iszName );
        CBaseCombatWeapon_exposer.def_readwrite( "viewmodelindex", &CBaseCombatWeapon::m_nViewModelIndex );
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBaseCombatWeapon_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBaseCombatWeapon_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseCombatWeapon_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBaseCombatWeapon_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseCombatWeapon_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseCombatWeapon_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBaseCombatWeapon_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseCombatWeapon_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBaseCombatWeapon_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CBaseCombatWeapon_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CBaseCombatWeapon_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CBaseCombatWeapon_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CBaseCombatWeapon_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBaseCombatWeapon_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseCombatWeapon_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseCombatWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBaseCombatWeapon_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CBaseCombatWeapon_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CBaseCombatWeapon_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseCombatWeapon_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseCombatWeapon_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseCombatWeapon_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseCombatWeapon_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseCombatWeapon_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseCombatWeapon_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CBaseCombatWeapon_wrapper::*OnNewModel_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CBaseCombatWeapon_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBaseCombatWeapon_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseCombatWeapon_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CBaseCombatWeapon_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CBaseCombatWeapon_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseCombatWeapon_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseCombatWeapon_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseCombatWeapon_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseCombatWeapon_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CBaseCombatWeapon_exposer.staticmethod( "GetAvailableWeaponsInBox" );
        CBaseCombatWeapon_exposer.staticmethod( "GetPyNetworkType" );
        { //::CBaseCombatWeapon::TestCollision
            
                typedef bool ( ::CBaseCombatWeapon::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( CBaseCombatWeapon_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                CBaseCombatWeapon_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::CBaseCombatWeapon::TestCollision)
                    , default_TestCollision_function_type(&CBaseCombatWeapon_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
        CBaseCombatWeapon_exposer.add_property("nextprimaryattack", 
           &CBaseCombatWeapon_wrapper::m_flNextPrimaryAttack_Get,
           &CBaseCombatWeapon_wrapper::m_flNextPrimaryAttack_Set );
        CBaseCombatWeapon_exposer.add_property("nextsecondaryattack", 
           &CBaseCombatWeapon_wrapper::m_flNextSecondaryAttack_Get,
           &CBaseCombatWeapon_wrapper::m_flNextSecondaryAttack_Set );
        CBaseCombatWeapon_exposer.add_property("timeweaponidle", 
           &CBaseCombatWeapon_wrapper::m_flTimeWeaponIdle_Get,
           &CBaseCombatWeapon_wrapper::m_flTimeWeaponIdle_Set );
        CBaseCombatWeapon_exposer.add_property("state", 
           &CBaseCombatWeapon_wrapper::m_iState_Get,
           &CBaseCombatWeapon_wrapper::m_iState_Set );
        CBaseCombatWeapon_exposer.add_property("primaryammotype", 
           &CBaseCombatWeapon_wrapper::m_iPrimaryAmmoType_Get,
           &CBaseCombatWeapon_wrapper::m_iPrimaryAmmoType_Set );
        CBaseCombatWeapon_exposer.add_property("secondaryammotype", 
           &CBaseCombatWeapon_wrapper::m_iSecondaryAmmoType_Get,
           &CBaseCombatWeapon_wrapper::m_iSecondaryAmmoType_Set );
        CBaseCombatWeapon_exposer.add_property("clip1", 
           &CBaseCombatWeapon_wrapper::m_iClip1_Get,
           &CBaseCombatWeapon_wrapper::m_iClip1_Set );
        CBaseCombatWeapon_exposer.add_property("clip2", 
           &CBaseCombatWeapon_wrapper::m_iClip2_Get,
           &CBaseCombatWeapon_wrapper::m_iClip2_Set );
    }

}

