// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "__array_1.pypp.hpp"

#include "cbase.h"

#include "mathlib/vmatrix.h"

#include "utlvector.h"

#include "shareddefs.h"

#include "util.h"

#include "takedamageinfo.h"

#include "baseanimating.h"

#include "BaseAnimatingOverlay.h"

#include "baseflex.h"

#include "basecombatcharacter.h"

#include "basegrenade_shared.h"

#include "player.h"

#include "hl2wars_player.h"

#include "unit_base_shared.h"

#include "unit_sense.h"

#include "wars_func_unit.h"

#include "soundent.h"

#include "gib.h"

#include "Sprite.h"

#include "SpriteTrail.h"

#include "smoke_trail.h"

#include "entityoutput.h"

#include "props.h"

#include "modelentities.h"

#include "triggers.h"

#include "wars_weapon.h"

#include "spark.h"

#include "physics_prop_ragdoll.h"

#include "shared_classnames.h"

#include "npcevent.h"

#include "studio.h"

#include "src_python_entities.h"

#include "isaverestore.h"

#include "saverestore.h"

#include "mapentities_shared.h"

#include "vcollide_parse.h"

#include "hl2wars_player_shared.h"

#include "imouse.h"

#include "props_shared.h"

#include "beam_shared.h"

#include "basecombatweapon_shared.h"

#include "wars_mapboundary.h"

#include "src_python_converters_ents.h"

#include "src_python.h"

#include "tier0/memdbgon.h"

#include "../game/server/python/modules/autogenerated/_entities/CBaseAnimatingOverlay_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseAnimating_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseCombatCharacter_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseCombatWeapon_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseFlex_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseFuncMapBoundary_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseGrenade_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseHandle_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseParticleEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBasePlayer_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseProp_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseToggle_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBaseTrigger_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBeam_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CBreakableProp_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CFuncBrush_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CFuncUnit_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CGib_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CHL2WarsPlayer_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CLogicalEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CPhysicsProp_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CPointEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CRagdollProp_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CServerOnlyEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CServerOnlyPointEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CSoundEnt_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CSpriteTrail_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CSprite_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CTriggerMultiple_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CUnitBase_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/CWarsWeapon_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/DeadEntity_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/PyHandle_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/RocketTrail_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/SmokeTrail_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/_entities__entities_enumerations_pypp.hpp"

#include "../game/server/python/modules/autogenerated/_entities/_entities__entities_free_functions_pypp.hpp"

namespace bp = boost::python;

typedef CEPyHandle<CBaseEntity> CBaseEntityHANDLE;

struct ptr_CBaseEntity_to_handle : bp::to_python_converter<CBaseEntity *, ptr_CBaseEntity_to_handle>
{
    static PyObject* convert(CBaseEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseEntity_to_handle : bp::to_python_converter<CBaseEntity, CBaseEntity_to_handle>
{
    static PyObject* convert(const CBaseEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseEntity
{
    handle_to_CBaseEntity()
    {
        bp::converter::registry::insert(
            &extract_CBaseEntity, 
            bp::type_id<CBaseEntity>()
            );
    }

    static void* extract_CBaseEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseAnimating> CBaseAnimatingHANDLE;

struct ptr_CBaseAnimating_to_handle : bp::to_python_converter<CBaseAnimating *, ptr_CBaseAnimating_to_handle>
{
    static PyObject* convert(CBaseAnimating *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseAnimating_to_handle : bp::to_python_converter<CBaseAnimating, CBaseAnimating_to_handle>
{
    static PyObject* convert(const CBaseAnimating &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseAnimating
{
    handle_to_CBaseAnimating()
    {
        bp::converter::registry::insert(
            &extract_CBaseAnimating, 
            bp::type_id<CBaseAnimating>()
            );
    }

    static void* extract_CBaseAnimating(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseAnimatingOverlay> CBaseAnimatingOverlayHANDLE;

struct ptr_CBaseAnimatingOverlay_to_handle : bp::to_python_converter<CBaseAnimatingOverlay *, ptr_CBaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(CBaseAnimatingOverlay *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseAnimatingOverlay_to_handle : bp::to_python_converter<CBaseAnimatingOverlay, CBaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(const CBaseAnimatingOverlay &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseAnimatingOverlay
{
    handle_to_CBaseAnimatingOverlay()
    {
        bp::converter::registry::insert(
            &extract_CBaseAnimatingOverlay, 
            bp::type_id<CBaseAnimatingOverlay>()
            );
    }

    static void* extract_CBaseAnimatingOverlay(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseFlex> CBaseFlexHANDLE;

struct ptr_CBaseFlex_to_handle : bp::to_python_converter<CBaseFlex *, ptr_CBaseFlex_to_handle>
{
    static PyObject* convert(CBaseFlex *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseFlex_to_handle : bp::to_python_converter<CBaseFlex, CBaseFlex_to_handle>
{
    static PyObject* convert(const CBaseFlex &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseFlex
{
    handle_to_CBaseFlex()
    {
        bp::converter::registry::insert(
            &extract_CBaseFlex, 
            bp::type_id<CBaseFlex>()
            );
    }

    static void* extract_CBaseFlex(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseCombatCharacter> CBaseCombatCharacterHANDLE;

struct ptr_CBaseCombatCharacter_to_handle : bp::to_python_converter<CBaseCombatCharacter *, ptr_CBaseCombatCharacter_to_handle>
{
    static PyObject* convert(CBaseCombatCharacter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseCombatCharacter_to_handle : bp::to_python_converter<CBaseCombatCharacter, CBaseCombatCharacter_to_handle>
{
    static PyObject* convert(const CBaseCombatCharacter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseCombatCharacter
{
    handle_to_CBaseCombatCharacter()
    {
        bp::converter::registry::insert(
            &extract_CBaseCombatCharacter, 
            bp::type_id<CBaseCombatCharacter>()
            );
    }

    static void* extract_CBaseCombatCharacter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseGrenade> CBaseGrenadeHANDLE;

struct ptr_CBaseGrenade_to_handle : bp::to_python_converter<CBaseGrenade *, ptr_CBaseGrenade_to_handle>
{
    static PyObject* convert(CBaseGrenade *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseGrenade_to_handle : bp::to_python_converter<CBaseGrenade, CBaseGrenade_to_handle>
{
    static PyObject* convert(const CBaseGrenade &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseGrenade
{
    handle_to_CBaseGrenade()
    {
        bp::converter::registry::insert(
            &extract_CBaseGrenade, 
            bp::type_id<CBaseGrenade>()
            );
    }

    static void* extract_CBaseGrenade(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBasePlayer> CBasePlayerHANDLE;

struct ptr_CBasePlayer_to_handle : bp::to_python_converter<CBasePlayer *, ptr_CBasePlayer_to_handle>
{
    static PyObject* convert(CBasePlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBasePlayer_to_handle : bp::to_python_converter<CBasePlayer, CBasePlayer_to_handle>
{
    static PyObject* convert(const CBasePlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBasePlayer
{
    handle_to_CBasePlayer()
    {
        bp::converter::registry::insert(
            &extract_CBasePlayer, 
            bp::type_id<CBasePlayer>()
            );
    }

    static void* extract_CBasePlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CHL2WarsPlayer> CHL2WarsPlayerHANDLE;

struct ptr_CHL2WarsPlayer_to_handle : bp::to_python_converter<CHL2WarsPlayer *, ptr_CHL2WarsPlayer_to_handle>
{
    static PyObject* convert(CHL2WarsPlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CHL2WarsPlayer_to_handle : bp::to_python_converter<CHL2WarsPlayer, CHL2WarsPlayer_to_handle>
{
    static PyObject* convert(const CHL2WarsPlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CHL2WarsPlayer
{
    handle_to_CHL2WarsPlayer()
    {
        bp::converter::registry::insert(
            &extract_CHL2WarsPlayer, 
            bp::type_id<CHL2WarsPlayer>()
            );
    }

    static void* extract_CHL2WarsPlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CUnitBase> CUnitBaseHANDLE;

struct ptr_CUnitBase_to_handle : bp::to_python_converter<CUnitBase *, ptr_CUnitBase_to_handle>
{
    static PyObject* convert(CUnitBase *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CUnitBase_to_handle : bp::to_python_converter<CUnitBase, CUnitBase_to_handle>
{
    static PyObject* convert(const CUnitBase &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CUnitBase
{
    handle_to_CUnitBase()
    {
        bp::converter::registry::insert(
            &extract_CUnitBase, 
            bp::type_id<CUnitBase>()
            );
    }

    static void* extract_CUnitBase(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CFuncUnit> CFuncUnitHANDLE;

struct ptr_CFuncUnit_to_handle : bp::to_python_converter<CFuncUnit *, ptr_CFuncUnit_to_handle>
{
    static PyObject* convert(CFuncUnit *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CFuncUnit_to_handle : bp::to_python_converter<CFuncUnit, CFuncUnit_to_handle>
{
    static PyObject* convert(const CFuncUnit &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CFuncUnit
{
    handle_to_CFuncUnit()
    {
        bp::converter::registry::insert(
            &extract_CFuncUnit, 
            bp::type_id<CFuncUnit>()
            );
    }

    static void* extract_CFuncUnit(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CGib> CGibHANDLE;

struct ptr_CGib_to_handle : bp::to_python_converter<CGib *, ptr_CGib_to_handle>
{
    static PyObject* convert(CGib *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CGib_to_handle : bp::to_python_converter<CGib, CGib_to_handle>
{
    static PyObject* convert(const CGib &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CGib
{
    handle_to_CGib()
    {
        bp::converter::registry::insert(
            &extract_CGib, 
            bp::type_id<CGib>()
            );
    }

    static void* extract_CGib(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CSprite> CSpriteHANDLE;

struct ptr_CSprite_to_handle : bp::to_python_converter<CSprite *, ptr_CSprite_to_handle>
{
    static PyObject* convert(CSprite *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CSprite_to_handle : bp::to_python_converter<CSprite, CSprite_to_handle>
{
    static PyObject* convert(const CSprite &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CSprite
{
    handle_to_CSprite()
    {
        bp::converter::registry::insert(
            &extract_CSprite, 
            bp::type_id<CSprite>()
            );
    }

    static void* extract_CSprite(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CSpriteTrail> CSpriteTrailHANDLE;

struct ptr_CSpriteTrail_to_handle : bp::to_python_converter<CSpriteTrail *, ptr_CSpriteTrail_to_handle>
{
    static PyObject* convert(CSpriteTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CSpriteTrail_to_handle : bp::to_python_converter<CSpriteTrail, CSpriteTrail_to_handle>
{
    static PyObject* convert(const CSpriteTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CSpriteTrail
{
    handle_to_CSpriteTrail()
    {
        bp::converter::registry::insert(
            &extract_CSpriteTrail, 
            bp::type_id<CSpriteTrail>()
            );
    }

    static void* extract_CSpriteTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseParticleEntity> CBaseParticleEntityHANDLE;

struct ptr_CBaseParticleEntity_to_handle : bp::to_python_converter<CBaseParticleEntity *, ptr_CBaseParticleEntity_to_handle>
{
    static PyObject* convert(CBaseParticleEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseParticleEntity_to_handle : bp::to_python_converter<CBaseParticleEntity, CBaseParticleEntity_to_handle>
{
    static PyObject* convert(const CBaseParticleEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseParticleEntity
{
    handle_to_CBaseParticleEntity()
    {
        bp::converter::registry::insert(
            &extract_CBaseParticleEntity, 
            bp::type_id<CBaseParticleEntity>()
            );
    }

    static void* extract_CBaseParticleEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<SmokeTrail> SmokeTrailHANDLE;

struct ptr_SmokeTrail_to_handle : bp::to_python_converter<SmokeTrail *, ptr_SmokeTrail_to_handle>
{
    static PyObject* convert(SmokeTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct SmokeTrail_to_handle : bp::to_python_converter<SmokeTrail, SmokeTrail_to_handle>
{
    static PyObject* convert(const SmokeTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_SmokeTrail
{
    handle_to_SmokeTrail()
    {
        bp::converter::registry::insert(
            &extract_SmokeTrail, 
            bp::type_id<SmokeTrail>()
            );
    }

    static void* extract_SmokeTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<RocketTrail> RocketTrailHANDLE;

struct ptr_RocketTrail_to_handle : bp::to_python_converter<RocketTrail *, ptr_RocketTrail_to_handle>
{
    static PyObject* convert(RocketTrail *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct RocketTrail_to_handle : bp::to_python_converter<RocketTrail, RocketTrail_to_handle>
{
    static PyObject* convert(const RocketTrail &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_RocketTrail
{
    handle_to_RocketTrail()
    {
        bp::converter::registry::insert(
            &extract_RocketTrail, 
            bp::type_id<RocketTrail>()
            );
    }

    static void* extract_RocketTrail(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBeam> CBeamHANDLE;

struct ptr_CBeam_to_handle : bp::to_python_converter<CBeam *, ptr_CBeam_to_handle>
{
    static PyObject* convert(CBeam *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBeam_to_handle : bp::to_python_converter<CBeam, CBeam_to_handle>
{
    static PyObject* convert(const CBeam &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBeam
{
    handle_to_CBeam()
    {
        bp::converter::registry::insert(
            &extract_CBeam, 
            bp::type_id<CBeam>()
            );
    }

    static void* extract_CBeam(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CPointEntity> CPointEntityHANDLE;

struct ptr_CPointEntity_to_handle : bp::to_python_converter<CPointEntity *, ptr_CPointEntity_to_handle>
{
    static PyObject* convert(CPointEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CPointEntity_to_handle : bp::to_python_converter<CPointEntity, CPointEntity_to_handle>
{
    static PyObject* convert(const CPointEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CPointEntity
{
    handle_to_CPointEntity()
    {
        bp::converter::registry::insert(
            &extract_CPointEntity, 
            bp::type_id<CPointEntity>()
            );
    }

    static void* extract_CPointEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CServerOnlyEntity> CServerOnlyEntityHANDLE;

struct ptr_CServerOnlyEntity_to_handle : bp::to_python_converter<CServerOnlyEntity *, ptr_CServerOnlyEntity_to_handle>
{
    static PyObject* convert(CServerOnlyEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CServerOnlyEntity_to_handle : bp::to_python_converter<CServerOnlyEntity, CServerOnlyEntity_to_handle>
{
    static PyObject* convert(const CServerOnlyEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CServerOnlyEntity
{
    handle_to_CServerOnlyEntity()
    {
        bp::converter::registry::insert(
            &extract_CServerOnlyEntity, 
            bp::type_id<CServerOnlyEntity>()
            );
    }

    static void* extract_CServerOnlyEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CServerOnlyPointEntity> CServerOnlyPointEntityHANDLE;

struct ptr_CServerOnlyPointEntity_to_handle : bp::to_python_converter<CServerOnlyPointEntity *, ptr_CServerOnlyPointEntity_to_handle>
{
    static PyObject* convert(CServerOnlyPointEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CServerOnlyPointEntity_to_handle : bp::to_python_converter<CServerOnlyPointEntity, CServerOnlyPointEntity_to_handle>
{
    static PyObject* convert(const CServerOnlyPointEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CServerOnlyPointEntity
{
    handle_to_CServerOnlyPointEntity()
    {
        bp::converter::registry::insert(
            &extract_CServerOnlyPointEntity, 
            bp::type_id<CServerOnlyPointEntity>()
            );
    }

    static void* extract_CServerOnlyPointEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CLogicalEntity> CLogicalEntityHANDLE;

struct ptr_CLogicalEntity_to_handle : bp::to_python_converter<CLogicalEntity *, ptr_CLogicalEntity_to_handle>
{
    static PyObject* convert(CLogicalEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CLogicalEntity_to_handle : bp::to_python_converter<CLogicalEntity, CLogicalEntity_to_handle>
{
    static PyObject* convert(const CLogicalEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CLogicalEntity
{
    handle_to_CLogicalEntity()
    {
        bp::converter::registry::insert(
            &extract_CLogicalEntity, 
            bp::type_id<CLogicalEntity>()
            );
    }

    static void* extract_CLogicalEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CFuncBrush> CFuncBrushHANDLE;

struct ptr_CFuncBrush_to_handle : bp::to_python_converter<CFuncBrush *, ptr_CFuncBrush_to_handle>
{
    static PyObject* convert(CFuncBrush *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CFuncBrush_to_handle : bp::to_python_converter<CFuncBrush, CFuncBrush_to_handle>
{
    static PyObject* convert(const CFuncBrush &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CFuncBrush
{
    handle_to_CFuncBrush()
    {
        bp::converter::registry::insert(
            &extract_CFuncBrush, 
            bp::type_id<CFuncBrush>()
            );
    }

    static void* extract_CFuncBrush(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseToggle> CBaseToggleHANDLE;

struct ptr_CBaseToggle_to_handle : bp::to_python_converter<CBaseToggle *, ptr_CBaseToggle_to_handle>
{
    static PyObject* convert(CBaseToggle *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseToggle_to_handle : bp::to_python_converter<CBaseToggle, CBaseToggle_to_handle>
{
    static PyObject* convert(const CBaseToggle &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseToggle
{
    handle_to_CBaseToggle()
    {
        bp::converter::registry::insert(
            &extract_CBaseToggle, 
            bp::type_id<CBaseToggle>()
            );
    }

    static void* extract_CBaseToggle(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseTrigger> CBaseTriggerHANDLE;

struct ptr_CBaseTrigger_to_handle : bp::to_python_converter<CBaseTrigger *, ptr_CBaseTrigger_to_handle>
{
    static PyObject* convert(CBaseTrigger *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseTrigger_to_handle : bp::to_python_converter<CBaseTrigger, CBaseTrigger_to_handle>
{
    static PyObject* convert(const CBaseTrigger &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseTrigger
{
    handle_to_CBaseTrigger()
    {
        bp::converter::registry::insert(
            &extract_CBaseTrigger, 
            bp::type_id<CBaseTrigger>()
            );
    }

    static void* extract_CBaseTrigger(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CTriggerMultiple> CTriggerMultipleHANDLE;

struct ptr_CTriggerMultiple_to_handle : bp::to_python_converter<CTriggerMultiple *, ptr_CTriggerMultiple_to_handle>
{
    static PyObject* convert(CTriggerMultiple *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CTriggerMultiple_to_handle : bp::to_python_converter<CTriggerMultiple, CTriggerMultiple_to_handle>
{
    static PyObject* convert(const CTriggerMultiple &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CTriggerMultiple
{
    handle_to_CTriggerMultiple()
    {
        bp::converter::registry::insert(
            &extract_CTriggerMultiple, 
            bp::type_id<CTriggerMultiple>()
            );
    }

    static void* extract_CTriggerMultiple(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseCombatWeapon> CBaseCombatWeaponHANDLE;

struct ptr_CBaseCombatWeapon_to_handle : bp::to_python_converter<CBaseCombatWeapon *, ptr_CBaseCombatWeapon_to_handle>
{
    static PyObject* convert(CBaseCombatWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseCombatWeapon_to_handle : bp::to_python_converter<CBaseCombatWeapon, CBaseCombatWeapon_to_handle>
{
    static PyObject* convert(const CBaseCombatWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseCombatWeapon
{
    handle_to_CBaseCombatWeapon()
    {
        bp::converter::registry::insert(
            &extract_CBaseCombatWeapon, 
            bp::type_id<CBaseCombatWeapon>()
            );
    }

    static void* extract_CBaseCombatWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CWarsWeapon> CWarsWeaponHANDLE;

struct ptr_CWarsWeapon_to_handle : bp::to_python_converter<CWarsWeapon *, ptr_CWarsWeapon_to_handle>
{
    static PyObject* convert(CWarsWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CWarsWeapon_to_handle : bp::to_python_converter<CWarsWeapon, CWarsWeapon_to_handle>
{
    static PyObject* convert(const CWarsWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CWarsWeapon
{
    handle_to_CWarsWeapon()
    {
        bp::converter::registry::insert(
            &extract_CWarsWeapon, 
            bp::type_id<CWarsWeapon>()
            );
    }

    static void* extract_CWarsWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseFuncMapBoundary> CBaseFuncMapBoundaryHANDLE;

struct ptr_CBaseFuncMapBoundary_to_handle : bp::to_python_converter<CBaseFuncMapBoundary *, ptr_CBaseFuncMapBoundary_to_handle>
{
    static PyObject* convert(CBaseFuncMapBoundary *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseFuncMapBoundary_to_handle : bp::to_python_converter<CBaseFuncMapBoundary, CBaseFuncMapBoundary_to_handle>
{
    static PyObject* convert(const CBaseFuncMapBoundary &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseFuncMapBoundary
{
    handle_to_CBaseFuncMapBoundary()
    {
        bp::converter::registry::insert(
            &extract_CBaseFuncMapBoundary, 
            bp::type_id<CBaseFuncMapBoundary>()
            );
    }

    static void* extract_CBaseFuncMapBoundary(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBaseProp> CBasePropHANDLE;

struct ptr_CBaseProp_to_handle : bp::to_python_converter<CBaseProp *, ptr_CBaseProp_to_handle>
{
    static PyObject* convert(CBaseProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseProp_to_handle : bp::to_python_converter<CBaseProp, CBaseProp_to_handle>
{
    static PyObject* convert(const CBaseProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseProp
{
    handle_to_CBaseProp()
    {
        bp::converter::registry::insert(
            &extract_CBaseProp, 
            bp::type_id<CBaseProp>()
            );
    }

    static void* extract_CBaseProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CBreakableProp> CBreakablePropHANDLE;

struct ptr_CBreakableProp_to_handle : bp::to_python_converter<CBreakableProp *, ptr_CBreakableProp_to_handle>
{
    static PyObject* convert(CBreakableProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBreakableProp_to_handle : bp::to_python_converter<CBreakableProp, CBreakableProp_to_handle>
{
    static PyObject* convert(const CBreakableProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBreakableProp
{
    handle_to_CBreakableProp()
    {
        bp::converter::registry::insert(
            &extract_CBreakableProp, 
            bp::type_id<CBreakableProp>()
            );
    }

    static void* extract_CBreakableProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CPhysicsProp> CPhysicsPropHANDLE;

struct ptr_CPhysicsProp_to_handle : bp::to_python_converter<CPhysicsProp *, ptr_CPhysicsProp_to_handle>
{
    static PyObject* convert(CPhysicsProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CPhysicsProp_to_handle : bp::to_python_converter<CPhysicsProp, CPhysicsProp_to_handle>
{
    static PyObject* convert(const CPhysicsProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CPhysicsProp
{
    handle_to_CPhysicsProp()
    {
        bp::converter::registry::insert(
            &extract_CPhysicsProp, 
            bp::type_id<CPhysicsProp>()
            );
    }

    static void* extract_CPhysicsProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

typedef CEPyHandle<CRagdollProp> CRagdollPropHANDLE;

struct ptr_CRagdollProp_to_handle : bp::to_python_converter<CRagdollProp *, ptr_CRagdollProp_to_handle>
{
    static PyObject* convert(CRagdollProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CRagdollProp_to_handle : bp::to_python_converter<CRagdollProp, CRagdollProp_to_handle>
{
    static PyObject* convert(const CRagdollProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CRagdollProp
{
    handle_to_CRagdollProp()
    {
        bp::converter::registry::insert(
            &extract_CRagdollProp, 
            bp::type_id<CRagdollProp>()
            );
    }

    static void* extract_CRagdollProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL )
           return Py_None;
       return h.Get();
    }
};

BOOST_PYTHON_MODULE(_entities){
    register__entities_enumerations();

    bp::docstring_options doc_options( true, true, false );

    register_CBaseEntity_class();

    register_CBaseAnimating_class();

    register_CBaseAnimatingOverlay_class();

    register_CBaseFlex_class();

    register_CBaseCombatCharacter_class();

    register_CBaseCombatWeapon_class();

    register_CBaseFuncMapBoundary_class();

    register_CBaseGrenade_class();

    register_CBaseHandle_class();

    register_CBaseParticleEntity_class();

    register_CBasePlayer_class();

    register_CBaseProp_class();

    register_CBaseToggle_class();

    register_CBaseTrigger_class();

    register_CBeam_class();

    register_CBreakableProp_class();

    register_CFuncBrush_class();

    register_CFuncUnit_class();

    register_CGib_class();

    register_CHL2WarsPlayer_class();

    register_CServerOnlyEntity_class();

    register_CLogicalEntity_class();

    register_CPhysicsProp_class();

    register_CPointEntity_class();

    register_CRagdollProp_class();

    register_CServerOnlyPointEntity_class();

    register_CSoundEnt_class();

    register_CSprite_class();

    register_CSpriteTrail_class();

    register_CTriggerMultiple_class();

    register_CUnitBase_class();

    register_CWarsWeapon_class();

    register_DeadEntity_class();

    register_PyHandle_class();

    register_RocketTrail_class();

    register_SmokeTrail_class();

    { //::CBaseEntityHANDLE
        typedef bp::class_< CBaseEntityHANDLE, bp::bases< CBaseHandle > > CBaseEntityHANDLE_exposer_t;
        CBaseEntityHANDLE_exposer_t CBaseEntityHANDLE_exposer = CBaseEntityHANDLE_exposer_t( "CBaseEntityHANDLE", bp::init< >() );
        CBaseEntityHANDLE_exposer.def( bp::init< CBaseEntity * >(( bp::arg("pVal") )) );
        CBaseEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseEntityHANDLE::GetAttr )
            );
        
        }
        { //::CBaseEntityHANDLE::Cmp
        
            typedef bool ( ::CBaseEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseEntityHANDLE::Cmp )
            );
        
        }
        { //::CBaseEntityHANDLE::NonZero
        
            typedef bool ( ::CBaseEntityHANDLE::*NonZero_function_type )( ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseEntityHANDLE::NonZero )
            );
        
        }
        { //::CBaseEntityHANDLE::Set
        
            typedef void ( ::CBaseEntityHANDLE::*Set_function_type )( CBaseEntity * ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseEntityHANDLE::Set )
            );
        
        }
        { //::CBaseEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseEntityHANDLE::GetEntryIndex )
            );
        
        }
        CBaseEntityHANDLE_exposer.def( bp::self != bp::self );
        CBaseEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseEntity_to_handle();

    CBaseEntity_to_handle();

    handle_to_CBaseEntity();

    { //::CBaseAnimatingHANDLE
        typedef bp::class_< CBaseAnimatingHANDLE, bp::bases< CBaseHandle > > CBaseAnimatingHANDLE_exposer_t;
        CBaseAnimatingHANDLE_exposer_t CBaseAnimatingHANDLE_exposer = CBaseAnimatingHANDLE_exposer_t( "CBaseAnimatingHANDLE", bp::init< >() );
        CBaseAnimatingHANDLE_exposer.def( bp::init< CBaseAnimating * >(( bp::arg("pVal") )) );
        CBaseAnimatingHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseAnimatingHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseAnimatingHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseAnimatingHANDLE::GetAttr )
            );
        
        }
        { //::CBaseAnimatingHANDLE::Cmp
        
            typedef bool ( ::CBaseAnimatingHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseAnimatingHANDLE::Cmp )
            );
        
        }
        { //::CBaseAnimatingHANDLE::NonZero
        
            typedef bool ( ::CBaseAnimatingHANDLE::*NonZero_function_type )( ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseAnimatingHANDLE::NonZero )
            );
        
        }
        { //::CBaseAnimatingHANDLE::Set
        
            typedef void ( ::CBaseAnimatingHANDLE::*Set_function_type )( CBaseAnimating * ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseAnimatingHANDLE::Set )
            );
        
        }
        { //::CBaseAnimatingHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseAnimatingHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseAnimatingHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseAnimatingHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseAnimatingHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseAnimatingHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseAnimatingHANDLE::GetEntryIndex )
            );
        
        }
        CBaseAnimatingHANDLE_exposer.def( bp::self != bp::self );
        CBaseAnimatingHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseAnimating_to_handle();

    CBaseAnimating_to_handle();

    handle_to_CBaseAnimating();

    { //::CBaseAnimatingOverlayHANDLE
        typedef bp::class_< CBaseAnimatingOverlayHANDLE, bp::bases< CBaseHandle > > CBaseAnimatingOverlayHANDLE_exposer_t;
        CBaseAnimatingOverlayHANDLE_exposer_t CBaseAnimatingOverlayHANDLE_exposer = CBaseAnimatingOverlayHANDLE_exposer_t( "CBaseAnimatingOverlayHANDLE", bp::init< >() );
        CBaseAnimatingOverlayHANDLE_exposer.def( bp::init< CBaseAnimatingOverlay * >(( bp::arg("pVal") )) );
        CBaseAnimatingOverlayHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseAnimatingOverlayHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseAnimatingOverlayHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseAnimatingOverlayHANDLE::GetAttr )
            );
        
        }
        { //::CBaseAnimatingOverlayHANDLE::Cmp
        
            typedef bool ( ::CBaseAnimatingOverlayHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseAnimatingOverlayHANDLE::Cmp )
            );
        
        }
        { //::CBaseAnimatingOverlayHANDLE::NonZero
        
            typedef bool ( ::CBaseAnimatingOverlayHANDLE::*NonZero_function_type )( ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseAnimatingOverlayHANDLE::NonZero )
            );
        
        }
        { //::CBaseAnimatingOverlayHANDLE::Set
        
            typedef void ( ::CBaseAnimatingOverlayHANDLE::*Set_function_type )( CBaseAnimatingOverlay * ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseAnimatingOverlayHANDLE::Set )
            );
        
        }
        { //::CBaseAnimatingOverlayHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseAnimatingOverlayHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseAnimatingOverlayHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseAnimatingOverlayHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseAnimatingOverlayHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseAnimatingOverlayHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseAnimatingOverlayHANDLE::GetEntryIndex )
            );
        
        }
        CBaseAnimatingOverlayHANDLE_exposer.def( bp::self != bp::self );
        CBaseAnimatingOverlayHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseAnimatingOverlay_to_handle();

    CBaseAnimatingOverlay_to_handle();

    handle_to_CBaseAnimatingOverlay();

    { //::CBaseFlexHANDLE
        typedef bp::class_< CBaseFlexHANDLE, bp::bases< CBaseHandle > > CBaseFlexHANDLE_exposer_t;
        CBaseFlexHANDLE_exposer_t CBaseFlexHANDLE_exposer = CBaseFlexHANDLE_exposer_t( "CBaseFlexHANDLE", bp::init< >() );
        CBaseFlexHANDLE_exposer.def( bp::init< CBaseFlex * >(( bp::arg("pVal") )) );
        CBaseFlexHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseFlexHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseFlexHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseFlexHANDLE::GetAttr )
            );
        
        }
        { //::CBaseFlexHANDLE::Cmp
        
            typedef bool ( ::CBaseFlexHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseFlexHANDLE::Cmp )
            );
        
        }
        { //::CBaseFlexHANDLE::NonZero
        
            typedef bool ( ::CBaseFlexHANDLE::*NonZero_function_type )( ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseFlexHANDLE::NonZero )
            );
        
        }
        { //::CBaseFlexHANDLE::Set
        
            typedef void ( ::CBaseFlexHANDLE::*Set_function_type )( CBaseFlex * ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseFlexHANDLE::Set )
            );
        
        }
        { //::CBaseFlexHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseFlexHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseFlexHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseFlexHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseFlexHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseFlexHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseFlexHANDLE::GetEntryIndex )
            );
        
        }
        CBaseFlexHANDLE_exposer.def( bp::self != bp::self );
        CBaseFlexHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseFlex_to_handle();

    CBaseFlex_to_handle();

    handle_to_CBaseFlex();

    { //::CBaseCombatCharacterHANDLE
        typedef bp::class_< CBaseCombatCharacterHANDLE, bp::bases< CBaseHandle > > CBaseCombatCharacterHANDLE_exposer_t;
        CBaseCombatCharacterHANDLE_exposer_t CBaseCombatCharacterHANDLE_exposer = CBaseCombatCharacterHANDLE_exposer_t( "CBaseCombatCharacterHANDLE", bp::init< >() );
        CBaseCombatCharacterHANDLE_exposer.def( bp::init< CBaseCombatCharacter * >(( bp::arg("pVal") )) );
        CBaseCombatCharacterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseCombatCharacterHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseCombatCharacterHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseCombatCharacterHANDLE::GetAttr )
            );
        
        }
        { //::CBaseCombatCharacterHANDLE::Cmp
        
            typedef bool ( ::CBaseCombatCharacterHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseCombatCharacterHANDLE::Cmp )
            );
        
        }
        { //::CBaseCombatCharacterHANDLE::NonZero
        
            typedef bool ( ::CBaseCombatCharacterHANDLE::*NonZero_function_type )( ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseCombatCharacterHANDLE::NonZero )
            );
        
        }
        { //::CBaseCombatCharacterHANDLE::Set
        
            typedef void ( ::CBaseCombatCharacterHANDLE::*Set_function_type )( CBaseCombatCharacter * ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseCombatCharacterHANDLE::Set )
            );
        
        }
        { //::CBaseCombatCharacterHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseCombatCharacterHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseCombatCharacterHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseCombatCharacterHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseCombatCharacterHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseCombatCharacterHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseCombatCharacterHANDLE::GetEntryIndex )
            );
        
        }
        CBaseCombatCharacterHANDLE_exposer.def( bp::self != bp::self );
        CBaseCombatCharacterHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseCombatCharacter_to_handle();

    CBaseCombatCharacter_to_handle();

    handle_to_CBaseCombatCharacter();

    { //::CBaseGrenadeHANDLE
        typedef bp::class_< CBaseGrenadeHANDLE, bp::bases< CBaseHandle > > CBaseGrenadeHANDLE_exposer_t;
        CBaseGrenadeHANDLE_exposer_t CBaseGrenadeHANDLE_exposer = CBaseGrenadeHANDLE_exposer_t( "CBaseGrenadeHANDLE", bp::init< >() );
        CBaseGrenadeHANDLE_exposer.def( bp::init< CBaseGrenade * >(( bp::arg("pVal") )) );
        CBaseGrenadeHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseGrenadeHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseGrenadeHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseGrenadeHANDLE::GetAttr )
            );
        
        }
        { //::CBaseGrenadeHANDLE::Cmp
        
            typedef bool ( ::CBaseGrenadeHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseGrenadeHANDLE::Cmp )
            );
        
        }
        { //::CBaseGrenadeHANDLE::NonZero
        
            typedef bool ( ::CBaseGrenadeHANDLE::*NonZero_function_type )( ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseGrenadeHANDLE::NonZero )
            );
        
        }
        { //::CBaseGrenadeHANDLE::Set
        
            typedef void ( ::CBaseGrenadeHANDLE::*Set_function_type )( CBaseGrenade * ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseGrenadeHANDLE::Set )
            );
        
        }
        { //::CBaseGrenadeHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseGrenadeHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseGrenadeHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseGrenadeHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseGrenadeHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseGrenadeHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseGrenadeHANDLE::GetEntryIndex )
            );
        
        }
        CBaseGrenadeHANDLE_exposer.def( bp::self != bp::self );
        CBaseGrenadeHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseGrenade_to_handle();

    CBaseGrenade_to_handle();

    handle_to_CBaseGrenade();

    { //::CBasePlayerHANDLE
        typedef bp::class_< CBasePlayerHANDLE, bp::bases< CBaseHandle > > CBasePlayerHANDLE_exposer_t;
        CBasePlayerHANDLE_exposer_t CBasePlayerHANDLE_exposer = CBasePlayerHANDLE_exposer_t( "CBasePlayerHANDLE", bp::init< >() );
        CBasePlayerHANDLE_exposer.def( bp::init< CBasePlayer * >(( bp::arg("pVal") )) );
        CBasePlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBasePlayerHANDLE::GetAttr
        
            typedef bp::object ( ::CBasePlayerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBasePlayerHANDLE::GetAttr )
            );
        
        }
        { //::CBasePlayerHANDLE::Cmp
        
            typedef bool ( ::CBasePlayerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBasePlayerHANDLE::Cmp )
            );
        
        }
        { //::CBasePlayerHANDLE::NonZero
        
            typedef bool ( ::CBasePlayerHANDLE::*NonZero_function_type )( ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBasePlayerHANDLE::NonZero )
            );
        
        }
        { //::CBasePlayerHANDLE::Set
        
            typedef void ( ::CBasePlayerHANDLE::*Set_function_type )( CBasePlayer * ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBasePlayerHANDLE::Set )
            );
        
        }
        { //::CBasePlayerHANDLE::GetSerialNumber
        
            typedef int ( ::CBasePlayerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBasePlayerHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBasePlayerHANDLE::GetEntryIndex
        
            typedef int ( ::CBasePlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBasePlayerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBasePlayerHANDLE::GetEntryIndex )
            );
        
        }
        CBasePlayerHANDLE_exposer.def( bp::self != bp::self );
        CBasePlayerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBasePlayer_to_handle();

    CBasePlayer_to_handle();

    handle_to_CBasePlayer();

    { //::CHL2WarsPlayerHANDLE
        typedef bp::class_< CHL2WarsPlayerHANDLE, bp::bases< CBaseHandle > > CHL2WarsPlayerHANDLE_exposer_t;
        CHL2WarsPlayerHANDLE_exposer_t CHL2WarsPlayerHANDLE_exposer = CHL2WarsPlayerHANDLE_exposer_t( "CHL2WarsPlayerHANDLE", bp::init< >() );
        CHL2WarsPlayerHANDLE_exposer.def( bp::init< CHL2WarsPlayer * >(( bp::arg("pVal") )) );
        CHL2WarsPlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CHL2WarsPlayerHANDLE::GetAttr
        
            typedef bp::object ( ::CHL2WarsPlayerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CHL2WarsPlayerHANDLE::GetAttr )
            );
        
        }
        { //::CHL2WarsPlayerHANDLE::Cmp
        
            typedef bool ( ::CHL2WarsPlayerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CHL2WarsPlayerHANDLE::Cmp )
            );
        
        }
        { //::CHL2WarsPlayerHANDLE::NonZero
        
            typedef bool ( ::CHL2WarsPlayerHANDLE::*NonZero_function_type )( ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CHL2WarsPlayerHANDLE::NonZero )
            );
        
        }
        { //::CHL2WarsPlayerHANDLE::Set
        
            typedef void ( ::CHL2WarsPlayerHANDLE::*Set_function_type )( CHL2WarsPlayer * ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CHL2WarsPlayerHANDLE::Set )
            );
        
        }
        { //::CHL2WarsPlayerHANDLE::GetSerialNumber
        
            typedef int ( ::CHL2WarsPlayerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CHL2WarsPlayerHANDLE::GetSerialNumber )
            );
        
        }
        { //::CHL2WarsPlayerHANDLE::GetEntryIndex
        
            typedef int ( ::CHL2WarsPlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CHL2WarsPlayerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CHL2WarsPlayerHANDLE::GetEntryIndex )
            );
        
        }
        CHL2WarsPlayerHANDLE_exposer.def( bp::self != bp::self );
        CHL2WarsPlayerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CHL2WarsPlayer_to_handle();

    CHL2WarsPlayer_to_handle();

    handle_to_CHL2WarsPlayer();

    { //::CUnitBaseHANDLE
        typedef bp::class_< CUnitBaseHANDLE, bp::bases< CBaseHandle > > CUnitBaseHANDLE_exposer_t;
        CUnitBaseHANDLE_exposer_t CUnitBaseHANDLE_exposer = CUnitBaseHANDLE_exposer_t( "CUnitBaseHANDLE", bp::init< >() );
        CUnitBaseHANDLE_exposer.def( bp::init< CUnitBase * >(( bp::arg("pVal") )) );
        CUnitBaseHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CUnitBaseHANDLE::GetAttr
        
            typedef bp::object ( ::CUnitBaseHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CUnitBaseHANDLE::GetAttr )
            );
        
        }
        { //::CUnitBaseHANDLE::Cmp
        
            typedef bool ( ::CUnitBaseHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CUnitBaseHANDLE::Cmp )
            );
        
        }
        { //::CUnitBaseHANDLE::NonZero
        
            typedef bool ( ::CUnitBaseHANDLE::*NonZero_function_type )( ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CUnitBaseHANDLE::NonZero )
            );
        
        }
        { //::CUnitBaseHANDLE::Set
        
            typedef void ( ::CUnitBaseHANDLE::*Set_function_type )( CUnitBase * ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CUnitBaseHANDLE::Set )
            );
        
        }
        { //::CUnitBaseHANDLE::GetSerialNumber
        
            typedef int ( ::CUnitBaseHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CUnitBaseHANDLE::GetSerialNumber )
            );
        
        }
        { //::CUnitBaseHANDLE::GetEntryIndex
        
            typedef int ( ::CUnitBaseHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CUnitBaseHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CUnitBaseHANDLE::GetEntryIndex )
            );
        
        }
        CUnitBaseHANDLE_exposer.def( bp::self != bp::self );
        CUnitBaseHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CUnitBase_to_handle();

    CUnitBase_to_handle();

    handle_to_CUnitBase();

    { //::CFuncUnitHANDLE
        typedef bp::class_< CFuncUnitHANDLE, bp::bases< CBaseHandle > > CFuncUnitHANDLE_exposer_t;
        CFuncUnitHANDLE_exposer_t CFuncUnitHANDLE_exposer = CFuncUnitHANDLE_exposer_t( "CFuncUnitHANDLE", bp::init< >() );
        CFuncUnitHANDLE_exposer.def( bp::init< CFuncUnit * >(( bp::arg("pVal") )) );
        CFuncUnitHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CFuncUnitHANDLE::GetAttr
        
            typedef bp::object ( ::CFuncUnitHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CFuncUnitHANDLE::GetAttr )
            );
        
        }
        { //::CFuncUnitHANDLE::Cmp
        
            typedef bool ( ::CFuncUnitHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CFuncUnitHANDLE::Cmp )
            );
        
        }
        { //::CFuncUnitHANDLE::NonZero
        
            typedef bool ( ::CFuncUnitHANDLE::*NonZero_function_type )( ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CFuncUnitHANDLE::NonZero )
            );
        
        }
        { //::CFuncUnitHANDLE::Set
        
            typedef void ( ::CFuncUnitHANDLE::*Set_function_type )( CFuncUnit * ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CFuncUnitHANDLE::Set )
            );
        
        }
        { //::CFuncUnitHANDLE::GetSerialNumber
        
            typedef int ( ::CFuncUnitHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CFuncUnitHANDLE::GetSerialNumber )
            );
        
        }
        { //::CFuncUnitHANDLE::GetEntryIndex
        
            typedef int ( ::CFuncUnitHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CFuncUnitHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CFuncUnitHANDLE::GetEntryIndex )
            );
        
        }
        CFuncUnitHANDLE_exposer.def( bp::self != bp::self );
        CFuncUnitHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CFuncUnit_to_handle();

    CFuncUnit_to_handle();

    handle_to_CFuncUnit();

    { //::CGibHANDLE
        typedef bp::class_< CGibHANDLE, bp::bases< CBaseHandle > > CGibHANDLE_exposer_t;
        CGibHANDLE_exposer_t CGibHANDLE_exposer = CGibHANDLE_exposer_t( "CGibHANDLE", bp::init< >() );
        CGibHANDLE_exposer.def( bp::init< CGib * >(( bp::arg("pVal") )) );
        CGibHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CGibHANDLE::GetAttr
        
            typedef bp::object ( ::CGibHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CGibHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CGibHANDLE::GetAttr )
            );
        
        }
        { //::CGibHANDLE::Cmp
        
            typedef bool ( ::CGibHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CGibHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CGibHANDLE::Cmp )
            );
        
        }
        { //::CGibHANDLE::NonZero
        
            typedef bool ( ::CGibHANDLE::*NonZero_function_type )( ) const;
            
            CGibHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CGibHANDLE::NonZero )
            );
        
        }
        { //::CGibHANDLE::Set
        
            typedef void ( ::CGibHANDLE::*Set_function_type )( CGib * ) const;
            
            CGibHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CGibHANDLE::Set )
            );
        
        }
        { //::CGibHANDLE::GetSerialNumber
        
            typedef int ( ::CGibHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CGibHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CGibHANDLE::GetSerialNumber )
            );
        
        }
        { //::CGibHANDLE::GetEntryIndex
        
            typedef int ( ::CGibHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CGibHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CGibHANDLE::GetEntryIndex )
            );
        
        }
        CGibHANDLE_exposer.def( bp::self != bp::self );
        CGibHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CGib_to_handle();

    CGib_to_handle();

    handle_to_CGib();

    { //::CSpriteHANDLE
        typedef bp::class_< CSpriteHANDLE, bp::bases< CBaseHandle > > CSpriteHANDLE_exposer_t;
        CSpriteHANDLE_exposer_t CSpriteHANDLE_exposer = CSpriteHANDLE_exposer_t( "CSpriteHANDLE", bp::init< >() );
        CSpriteHANDLE_exposer.def( bp::init< CSprite * >(( bp::arg("pVal") )) );
        CSpriteHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CSpriteHANDLE::GetAttr
        
            typedef bp::object ( ::CSpriteHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CSpriteHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CSpriteHANDLE::GetAttr )
            );
        
        }
        { //::CSpriteHANDLE::Cmp
        
            typedef bool ( ::CSpriteHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CSpriteHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CSpriteHANDLE::Cmp )
            );
        
        }
        { //::CSpriteHANDLE::NonZero
        
            typedef bool ( ::CSpriteHANDLE::*NonZero_function_type )( ) const;
            
            CSpriteHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CSpriteHANDLE::NonZero )
            );
        
        }
        { //::CSpriteHANDLE::Set
        
            typedef void ( ::CSpriteHANDLE::*Set_function_type )( CSprite * ) const;
            
            CSpriteHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CSpriteHANDLE::Set )
            );
        
        }
        { //::CSpriteHANDLE::GetSerialNumber
        
            typedef int ( ::CSpriteHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CSpriteHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CSpriteHANDLE::GetSerialNumber )
            );
        
        }
        { //::CSpriteHANDLE::GetEntryIndex
        
            typedef int ( ::CSpriteHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CSpriteHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CSpriteHANDLE::GetEntryIndex )
            );
        
        }
        CSpriteHANDLE_exposer.def( bp::self != bp::self );
        CSpriteHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CSprite_to_handle();

    CSprite_to_handle();

    handle_to_CSprite();

    { //::CSpriteTrailHANDLE
        typedef bp::class_< CSpriteTrailHANDLE, bp::bases< CBaseHandle > > CSpriteTrailHANDLE_exposer_t;
        CSpriteTrailHANDLE_exposer_t CSpriteTrailHANDLE_exposer = CSpriteTrailHANDLE_exposer_t( "CSpriteTrailHANDLE", bp::init< >() );
        CSpriteTrailHANDLE_exposer.def( bp::init< CSpriteTrail * >(( bp::arg("pVal") )) );
        CSpriteTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CSpriteTrailHANDLE::GetAttr
        
            typedef bp::object ( ::CSpriteTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CSpriteTrailHANDLE::GetAttr )
            );
        
        }
        { //::CSpriteTrailHANDLE::Cmp
        
            typedef bool ( ::CSpriteTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CSpriteTrailHANDLE::Cmp )
            );
        
        }
        { //::CSpriteTrailHANDLE::NonZero
        
            typedef bool ( ::CSpriteTrailHANDLE::*NonZero_function_type )( ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CSpriteTrailHANDLE::NonZero )
            );
        
        }
        { //::CSpriteTrailHANDLE::Set
        
            typedef void ( ::CSpriteTrailHANDLE::*Set_function_type )( CSpriteTrail * ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CSpriteTrailHANDLE::Set )
            );
        
        }
        { //::CSpriteTrailHANDLE::GetSerialNumber
        
            typedef int ( ::CSpriteTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CSpriteTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::CSpriteTrailHANDLE::GetEntryIndex
        
            typedef int ( ::CSpriteTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CSpriteTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CSpriteTrailHANDLE::GetEntryIndex )
            );
        
        }
        CSpriteTrailHANDLE_exposer.def( bp::self != bp::self );
        CSpriteTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CSpriteTrail_to_handle();

    CSpriteTrail_to_handle();

    handle_to_CSpriteTrail();

    { //::CBaseParticleEntityHANDLE
        typedef bp::class_< CBaseParticleEntityHANDLE, bp::bases< CBaseHandle > > CBaseParticleEntityHANDLE_exposer_t;
        CBaseParticleEntityHANDLE_exposer_t CBaseParticleEntityHANDLE_exposer = CBaseParticleEntityHANDLE_exposer_t( "CBaseParticleEntityHANDLE", bp::init< >() );
        CBaseParticleEntityHANDLE_exposer.def( bp::init< CBaseParticleEntity * >(( bp::arg("pVal") )) );
        CBaseParticleEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseParticleEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseParticleEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseParticleEntityHANDLE::GetAttr )
            );
        
        }
        { //::CBaseParticleEntityHANDLE::Cmp
        
            typedef bool ( ::CBaseParticleEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseParticleEntityHANDLE::Cmp )
            );
        
        }
        { //::CBaseParticleEntityHANDLE::NonZero
        
            typedef bool ( ::CBaseParticleEntityHANDLE::*NonZero_function_type )( ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseParticleEntityHANDLE::NonZero )
            );
        
        }
        { //::CBaseParticleEntityHANDLE::Set
        
            typedef void ( ::CBaseParticleEntityHANDLE::*Set_function_type )( CBaseParticleEntity * ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseParticleEntityHANDLE::Set )
            );
        
        }
        { //::CBaseParticleEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseParticleEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseParticleEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseParticleEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseParticleEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseParticleEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseParticleEntityHANDLE::GetEntryIndex )
            );
        
        }
        CBaseParticleEntityHANDLE_exposer.def( bp::self != bp::self );
        CBaseParticleEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseParticleEntity_to_handle();

    CBaseParticleEntity_to_handle();

    handle_to_CBaseParticleEntity();

    { //::SmokeTrailHANDLE
        typedef bp::class_< SmokeTrailHANDLE, bp::bases< CBaseHandle > > SmokeTrailHANDLE_exposer_t;
        SmokeTrailHANDLE_exposer_t SmokeTrailHANDLE_exposer = SmokeTrailHANDLE_exposer_t( "SmokeTrailHANDLE", bp::init< >() );
        SmokeTrailHANDLE_exposer.def( bp::init< SmokeTrail * >(( bp::arg("pVal") )) );
        SmokeTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::SmokeTrailHANDLE::GetAttr
        
            typedef bp::object ( ::SmokeTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::SmokeTrailHANDLE::GetAttr )
            );
        
        }
        { //::SmokeTrailHANDLE::Cmp
        
            typedef bool ( ::SmokeTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::SmokeTrailHANDLE::Cmp )
            );
        
        }
        { //::SmokeTrailHANDLE::NonZero
        
            typedef bool ( ::SmokeTrailHANDLE::*NonZero_function_type )( ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::SmokeTrailHANDLE::NonZero )
            );
        
        }
        { //::SmokeTrailHANDLE::Set
        
            typedef void ( ::SmokeTrailHANDLE::*Set_function_type )( SmokeTrail * ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::SmokeTrailHANDLE::Set )
            );
        
        }
        { //::SmokeTrailHANDLE::GetSerialNumber
        
            typedef int ( ::SmokeTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::SmokeTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::SmokeTrailHANDLE::GetEntryIndex
        
            typedef int ( ::SmokeTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            SmokeTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::SmokeTrailHANDLE::GetEntryIndex )
            );
        
        }
        SmokeTrailHANDLE_exposer.def( bp::self != bp::self );
        SmokeTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_SmokeTrail_to_handle();

    SmokeTrail_to_handle();

    handle_to_SmokeTrail();

    { //::RocketTrailHANDLE
        typedef bp::class_< RocketTrailHANDLE, bp::bases< CBaseHandle > > RocketTrailHANDLE_exposer_t;
        RocketTrailHANDLE_exposer_t RocketTrailHANDLE_exposer = RocketTrailHANDLE_exposer_t( "RocketTrailHANDLE", bp::init< >() );
        RocketTrailHANDLE_exposer.def( bp::init< RocketTrail * >(( bp::arg("pVal") )) );
        RocketTrailHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::RocketTrailHANDLE::GetAttr
        
            typedef bp::object ( ::RocketTrailHANDLE::*GetAttr_function_type )( const char * ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::RocketTrailHANDLE::GetAttr )
            );
        
        }
        { //::RocketTrailHANDLE::Cmp
        
            typedef bool ( ::RocketTrailHANDLE::*Cmp_function_type )( bp::object ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::RocketTrailHANDLE::Cmp )
            );
        
        }
        { //::RocketTrailHANDLE::NonZero
        
            typedef bool ( ::RocketTrailHANDLE::*NonZero_function_type )( ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::RocketTrailHANDLE::NonZero )
            );
        
        }
        { //::RocketTrailHANDLE::Set
        
            typedef void ( ::RocketTrailHANDLE::*Set_function_type )( RocketTrail * ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::RocketTrailHANDLE::Set )
            );
        
        }
        { //::RocketTrailHANDLE::GetSerialNumber
        
            typedef int ( ::RocketTrailHANDLE::*GetSerialNumber_function_type )( ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::RocketTrailHANDLE::GetSerialNumber )
            );
        
        }
        { //::RocketTrailHANDLE::GetEntryIndex
        
            typedef int ( ::RocketTrailHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            RocketTrailHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::RocketTrailHANDLE::GetEntryIndex )
            );
        
        }
        RocketTrailHANDLE_exposer.def( bp::self != bp::self );
        RocketTrailHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_RocketTrail_to_handle();

    RocketTrail_to_handle();

    handle_to_RocketTrail();

    { //::CBeamHANDLE
        typedef bp::class_< CBeamHANDLE, bp::bases< CBaseHandle > > CBeamHANDLE_exposer_t;
        CBeamHANDLE_exposer_t CBeamHANDLE_exposer = CBeamHANDLE_exposer_t( "CBeamHANDLE", bp::init< >() );
        CBeamHANDLE_exposer.def( bp::init< CBeam * >(( bp::arg("pVal") )) );
        CBeamHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBeamHANDLE::GetAttr
        
            typedef bp::object ( ::CBeamHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBeamHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBeamHANDLE::GetAttr )
            );
        
        }
        { //::CBeamHANDLE::Cmp
        
            typedef bool ( ::CBeamHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBeamHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBeamHANDLE::Cmp )
            );
        
        }
        { //::CBeamHANDLE::NonZero
        
            typedef bool ( ::CBeamHANDLE::*NonZero_function_type )( ) const;
            
            CBeamHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBeamHANDLE::NonZero )
            );
        
        }
        { //::CBeamHANDLE::Set
        
            typedef void ( ::CBeamHANDLE::*Set_function_type )( CBeam * ) const;
            
            CBeamHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBeamHANDLE::Set )
            );
        
        }
        { //::CBeamHANDLE::GetSerialNumber
        
            typedef int ( ::CBeamHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBeamHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBeamHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBeamHANDLE::GetEntryIndex
        
            typedef int ( ::CBeamHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBeamHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBeamHANDLE::GetEntryIndex )
            );
        
        }
        CBeamHANDLE_exposer.def( bp::self != bp::self );
        CBeamHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBeam_to_handle();

    CBeam_to_handle();

    handle_to_CBeam();

    { //::CPointEntityHANDLE
        typedef bp::class_< CPointEntityHANDLE, bp::bases< CBaseHandle > > CPointEntityHANDLE_exposer_t;
        CPointEntityHANDLE_exposer_t CPointEntityHANDLE_exposer = CPointEntityHANDLE_exposer_t( "CPointEntityHANDLE", bp::init< >() );
        CPointEntityHANDLE_exposer.def( bp::init< CPointEntity * >(( bp::arg("pVal") )) );
        CPointEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CPointEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CPointEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CPointEntityHANDLE::GetAttr )
            );
        
        }
        { //::CPointEntityHANDLE::Cmp
        
            typedef bool ( ::CPointEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CPointEntityHANDLE::Cmp )
            );
        
        }
        { //::CPointEntityHANDLE::NonZero
        
            typedef bool ( ::CPointEntityHANDLE::*NonZero_function_type )( ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CPointEntityHANDLE::NonZero )
            );
        
        }
        { //::CPointEntityHANDLE::Set
        
            typedef void ( ::CPointEntityHANDLE::*Set_function_type )( CPointEntity * ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CPointEntityHANDLE::Set )
            );
        
        }
        { //::CPointEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CPointEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CPointEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CPointEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CPointEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CPointEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CPointEntityHANDLE::GetEntryIndex )
            );
        
        }
        CPointEntityHANDLE_exposer.def( bp::self != bp::self );
        CPointEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CPointEntity_to_handle();

    CPointEntity_to_handle();

    handle_to_CPointEntity();

    { //::CServerOnlyEntityHANDLE
        typedef bp::class_< CServerOnlyEntityHANDLE, bp::bases< CBaseHandle > > CServerOnlyEntityHANDLE_exposer_t;
        CServerOnlyEntityHANDLE_exposer_t CServerOnlyEntityHANDLE_exposer = CServerOnlyEntityHANDLE_exposer_t( "CServerOnlyEntityHANDLE", bp::init< >() );
        CServerOnlyEntityHANDLE_exposer.def( bp::init< CServerOnlyEntity * >(( bp::arg("pVal") )) );
        CServerOnlyEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CServerOnlyEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CServerOnlyEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CServerOnlyEntityHANDLE::GetAttr )
            );
        
        }
        { //::CServerOnlyEntityHANDLE::Cmp
        
            typedef bool ( ::CServerOnlyEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CServerOnlyEntityHANDLE::Cmp )
            );
        
        }
        { //::CServerOnlyEntityHANDLE::NonZero
        
            typedef bool ( ::CServerOnlyEntityHANDLE::*NonZero_function_type )( ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CServerOnlyEntityHANDLE::NonZero )
            );
        
        }
        { //::CServerOnlyEntityHANDLE::Set
        
            typedef void ( ::CServerOnlyEntityHANDLE::*Set_function_type )( CServerOnlyEntity * ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CServerOnlyEntityHANDLE::Set )
            );
        
        }
        { //::CServerOnlyEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CServerOnlyEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CServerOnlyEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CServerOnlyEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CServerOnlyEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CServerOnlyEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CServerOnlyEntityHANDLE::GetEntryIndex )
            );
        
        }
        CServerOnlyEntityHANDLE_exposer.def( bp::self != bp::self );
        CServerOnlyEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CServerOnlyEntity_to_handle();

    CServerOnlyEntity_to_handle();

    handle_to_CServerOnlyEntity();

    { //::CServerOnlyPointEntityHANDLE
        typedef bp::class_< CServerOnlyPointEntityHANDLE, bp::bases< CBaseHandle > > CServerOnlyPointEntityHANDLE_exposer_t;
        CServerOnlyPointEntityHANDLE_exposer_t CServerOnlyPointEntityHANDLE_exposer = CServerOnlyPointEntityHANDLE_exposer_t( "CServerOnlyPointEntityHANDLE", bp::init< >() );
        CServerOnlyPointEntityHANDLE_exposer.def( bp::init< CServerOnlyPointEntity * >(( bp::arg("pVal") )) );
        CServerOnlyPointEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CServerOnlyPointEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CServerOnlyPointEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CServerOnlyPointEntityHANDLE::GetAttr )
            );
        
        }
        { //::CServerOnlyPointEntityHANDLE::Cmp
        
            typedef bool ( ::CServerOnlyPointEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CServerOnlyPointEntityHANDLE::Cmp )
            );
        
        }
        { //::CServerOnlyPointEntityHANDLE::NonZero
        
            typedef bool ( ::CServerOnlyPointEntityHANDLE::*NonZero_function_type )( ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CServerOnlyPointEntityHANDLE::NonZero )
            );
        
        }
        { //::CServerOnlyPointEntityHANDLE::Set
        
            typedef void ( ::CServerOnlyPointEntityHANDLE::*Set_function_type )( CServerOnlyPointEntity * ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CServerOnlyPointEntityHANDLE::Set )
            );
        
        }
        { //::CServerOnlyPointEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CServerOnlyPointEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CServerOnlyPointEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CServerOnlyPointEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CServerOnlyPointEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CServerOnlyPointEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CServerOnlyPointEntityHANDLE::GetEntryIndex )
            );
        
        }
        CServerOnlyPointEntityHANDLE_exposer.def( bp::self != bp::self );
        CServerOnlyPointEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CServerOnlyPointEntity_to_handle();

    CServerOnlyPointEntity_to_handle();

    handle_to_CServerOnlyPointEntity();

    { //::CLogicalEntityHANDLE
        typedef bp::class_< CLogicalEntityHANDLE, bp::bases< CBaseHandle > > CLogicalEntityHANDLE_exposer_t;
        CLogicalEntityHANDLE_exposer_t CLogicalEntityHANDLE_exposer = CLogicalEntityHANDLE_exposer_t( "CLogicalEntityHANDLE", bp::init< >() );
        CLogicalEntityHANDLE_exposer.def( bp::init< CLogicalEntity * >(( bp::arg("pVal") )) );
        CLogicalEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CLogicalEntityHANDLE::GetAttr
        
            typedef bp::object ( ::CLogicalEntityHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CLogicalEntityHANDLE::GetAttr )
            );
        
        }
        { //::CLogicalEntityHANDLE::Cmp
        
            typedef bool ( ::CLogicalEntityHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CLogicalEntityHANDLE::Cmp )
            );
        
        }
        { //::CLogicalEntityHANDLE::NonZero
        
            typedef bool ( ::CLogicalEntityHANDLE::*NonZero_function_type )( ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CLogicalEntityHANDLE::NonZero )
            );
        
        }
        { //::CLogicalEntityHANDLE::Set
        
            typedef void ( ::CLogicalEntityHANDLE::*Set_function_type )( CLogicalEntity * ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CLogicalEntityHANDLE::Set )
            );
        
        }
        { //::CLogicalEntityHANDLE::GetSerialNumber
        
            typedef int ( ::CLogicalEntityHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CLogicalEntityHANDLE::GetSerialNumber )
            );
        
        }
        { //::CLogicalEntityHANDLE::GetEntryIndex
        
            typedef int ( ::CLogicalEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CLogicalEntityHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CLogicalEntityHANDLE::GetEntryIndex )
            );
        
        }
        CLogicalEntityHANDLE_exposer.def( bp::self != bp::self );
        CLogicalEntityHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CLogicalEntity_to_handle();

    CLogicalEntity_to_handle();

    handle_to_CLogicalEntity();

    { //::CFuncBrushHANDLE
        typedef bp::class_< CFuncBrushHANDLE, bp::bases< CBaseHandle > > CFuncBrushHANDLE_exposer_t;
        CFuncBrushHANDLE_exposer_t CFuncBrushHANDLE_exposer = CFuncBrushHANDLE_exposer_t( "CFuncBrushHANDLE", bp::init< >() );
        CFuncBrushHANDLE_exposer.def( bp::init< CFuncBrush * >(( bp::arg("pVal") )) );
        CFuncBrushHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CFuncBrushHANDLE::GetAttr
        
            typedef bp::object ( ::CFuncBrushHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CFuncBrushHANDLE::GetAttr )
            );
        
        }
        { //::CFuncBrushHANDLE::Cmp
        
            typedef bool ( ::CFuncBrushHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CFuncBrushHANDLE::Cmp )
            );
        
        }
        { //::CFuncBrushHANDLE::NonZero
        
            typedef bool ( ::CFuncBrushHANDLE::*NonZero_function_type )( ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CFuncBrushHANDLE::NonZero )
            );
        
        }
        { //::CFuncBrushHANDLE::Set
        
            typedef void ( ::CFuncBrushHANDLE::*Set_function_type )( CFuncBrush * ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CFuncBrushHANDLE::Set )
            );
        
        }
        { //::CFuncBrushHANDLE::GetSerialNumber
        
            typedef int ( ::CFuncBrushHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CFuncBrushHANDLE::GetSerialNumber )
            );
        
        }
        { //::CFuncBrushHANDLE::GetEntryIndex
        
            typedef int ( ::CFuncBrushHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CFuncBrushHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CFuncBrushHANDLE::GetEntryIndex )
            );
        
        }
        CFuncBrushHANDLE_exposer.def( bp::self != bp::self );
        CFuncBrushHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CFuncBrush_to_handle();

    CFuncBrush_to_handle();

    handle_to_CFuncBrush();

    { //::CBaseToggleHANDLE
        typedef bp::class_< CBaseToggleHANDLE, bp::bases< CBaseHandle > > CBaseToggleHANDLE_exposer_t;
        CBaseToggleHANDLE_exposer_t CBaseToggleHANDLE_exposer = CBaseToggleHANDLE_exposer_t( "CBaseToggleHANDLE", bp::init< >() );
        CBaseToggleHANDLE_exposer.def( bp::init< CBaseToggle * >(( bp::arg("pVal") )) );
        CBaseToggleHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseToggleHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseToggleHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseToggleHANDLE::GetAttr )
            );
        
        }
        { //::CBaseToggleHANDLE::Cmp
        
            typedef bool ( ::CBaseToggleHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseToggleHANDLE::Cmp )
            );
        
        }
        { //::CBaseToggleHANDLE::NonZero
        
            typedef bool ( ::CBaseToggleHANDLE::*NonZero_function_type )( ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseToggleHANDLE::NonZero )
            );
        
        }
        { //::CBaseToggleHANDLE::Set
        
            typedef void ( ::CBaseToggleHANDLE::*Set_function_type )( CBaseToggle * ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseToggleHANDLE::Set )
            );
        
        }
        { //::CBaseToggleHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseToggleHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseToggleHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseToggleHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseToggleHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseToggleHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseToggleHANDLE::GetEntryIndex )
            );
        
        }
        CBaseToggleHANDLE_exposer.def( bp::self != bp::self );
        CBaseToggleHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseToggle_to_handle();

    CBaseToggle_to_handle();

    handle_to_CBaseToggle();

    { //::CBaseTriggerHANDLE
        typedef bp::class_< CBaseTriggerHANDLE, bp::bases< CBaseHandle > > CBaseTriggerHANDLE_exposer_t;
        CBaseTriggerHANDLE_exposer_t CBaseTriggerHANDLE_exposer = CBaseTriggerHANDLE_exposer_t( "CBaseTriggerHANDLE", bp::init< >() );
        CBaseTriggerHANDLE_exposer.def( bp::init< CBaseTrigger * >(( bp::arg("pVal") )) );
        CBaseTriggerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseTriggerHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseTriggerHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseTriggerHANDLE::GetAttr )
            );
        
        }
        { //::CBaseTriggerHANDLE::Cmp
        
            typedef bool ( ::CBaseTriggerHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseTriggerHANDLE::Cmp )
            );
        
        }
        { //::CBaseTriggerHANDLE::NonZero
        
            typedef bool ( ::CBaseTriggerHANDLE::*NonZero_function_type )( ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseTriggerHANDLE::NonZero )
            );
        
        }
        { //::CBaseTriggerHANDLE::Set
        
            typedef void ( ::CBaseTriggerHANDLE::*Set_function_type )( CBaseTrigger * ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseTriggerHANDLE::Set )
            );
        
        }
        { //::CBaseTriggerHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseTriggerHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseTriggerHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseTriggerHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseTriggerHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseTriggerHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseTriggerHANDLE::GetEntryIndex )
            );
        
        }
        CBaseTriggerHANDLE_exposer.def( bp::self != bp::self );
        CBaseTriggerHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseTrigger_to_handle();

    CBaseTrigger_to_handle();

    handle_to_CBaseTrigger();

    { //::CTriggerMultipleHANDLE
        typedef bp::class_< CTriggerMultipleHANDLE, bp::bases< CBaseHandle > > CTriggerMultipleHANDLE_exposer_t;
        CTriggerMultipleHANDLE_exposer_t CTriggerMultipleHANDLE_exposer = CTriggerMultipleHANDLE_exposer_t( "CTriggerMultipleHANDLE", bp::init< >() );
        CTriggerMultipleHANDLE_exposer.def( bp::init< CTriggerMultiple * >(( bp::arg("pVal") )) );
        CTriggerMultipleHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CTriggerMultipleHANDLE::GetAttr
        
            typedef bp::object ( ::CTriggerMultipleHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CTriggerMultipleHANDLE::GetAttr )
            );
        
        }
        { //::CTriggerMultipleHANDLE::Cmp
        
            typedef bool ( ::CTriggerMultipleHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CTriggerMultipleHANDLE::Cmp )
            );
        
        }
        { //::CTriggerMultipleHANDLE::NonZero
        
            typedef bool ( ::CTriggerMultipleHANDLE::*NonZero_function_type )( ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CTriggerMultipleHANDLE::NonZero )
            );
        
        }
        { //::CTriggerMultipleHANDLE::Set
        
            typedef void ( ::CTriggerMultipleHANDLE::*Set_function_type )( CTriggerMultiple * ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CTriggerMultipleHANDLE::Set )
            );
        
        }
        { //::CTriggerMultipleHANDLE::GetSerialNumber
        
            typedef int ( ::CTriggerMultipleHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CTriggerMultipleHANDLE::GetSerialNumber )
            );
        
        }
        { //::CTriggerMultipleHANDLE::GetEntryIndex
        
            typedef int ( ::CTriggerMultipleHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CTriggerMultipleHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CTriggerMultipleHANDLE::GetEntryIndex )
            );
        
        }
        CTriggerMultipleHANDLE_exposer.def( bp::self != bp::self );
        CTriggerMultipleHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CTriggerMultiple_to_handle();

    CTriggerMultiple_to_handle();

    handle_to_CTriggerMultiple();

    { //::CBaseCombatWeaponHANDLE
        typedef bp::class_< CBaseCombatWeaponHANDLE, bp::bases< CBaseHandle > > CBaseCombatWeaponHANDLE_exposer_t;
        CBaseCombatWeaponHANDLE_exposer_t CBaseCombatWeaponHANDLE_exposer = CBaseCombatWeaponHANDLE_exposer_t( "CBaseCombatWeaponHANDLE", bp::init< >() );
        CBaseCombatWeaponHANDLE_exposer.def( bp::init< CBaseCombatWeapon * >(( bp::arg("pVal") )) );
        CBaseCombatWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseCombatWeaponHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseCombatWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseCombatWeaponHANDLE::GetAttr )
            );
        
        }
        { //::CBaseCombatWeaponHANDLE::Cmp
        
            typedef bool ( ::CBaseCombatWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseCombatWeaponHANDLE::Cmp )
            );
        
        }
        { //::CBaseCombatWeaponHANDLE::NonZero
        
            typedef bool ( ::CBaseCombatWeaponHANDLE::*NonZero_function_type )( ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseCombatWeaponHANDLE::NonZero )
            );
        
        }
        { //::CBaseCombatWeaponHANDLE::Set
        
            typedef void ( ::CBaseCombatWeaponHANDLE::*Set_function_type )( CBaseCombatWeapon * ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseCombatWeaponHANDLE::Set )
            );
        
        }
        { //::CBaseCombatWeaponHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseCombatWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseCombatWeaponHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseCombatWeaponHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseCombatWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseCombatWeaponHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseCombatWeaponHANDLE::GetEntryIndex )
            );
        
        }
        CBaseCombatWeaponHANDLE_exposer.def( bp::self != bp::self );
        CBaseCombatWeaponHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseCombatWeapon_to_handle();

    CBaseCombatWeapon_to_handle();

    handle_to_CBaseCombatWeapon();

    { //::CWarsWeaponHANDLE
        typedef bp::class_< CWarsWeaponHANDLE, bp::bases< CBaseHandle > > CWarsWeaponHANDLE_exposer_t;
        CWarsWeaponHANDLE_exposer_t CWarsWeaponHANDLE_exposer = CWarsWeaponHANDLE_exposer_t( "CWarsWeaponHANDLE", bp::init< >() );
        CWarsWeaponHANDLE_exposer.def( bp::init< CWarsWeapon * >(( bp::arg("pVal") )) );
        CWarsWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CWarsWeaponHANDLE::GetAttr
        
            typedef bp::object ( ::CWarsWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CWarsWeaponHANDLE::GetAttr )
            );
        
        }
        { //::CWarsWeaponHANDLE::Cmp
        
            typedef bool ( ::CWarsWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CWarsWeaponHANDLE::Cmp )
            );
        
        }
        { //::CWarsWeaponHANDLE::NonZero
        
            typedef bool ( ::CWarsWeaponHANDLE::*NonZero_function_type )( ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CWarsWeaponHANDLE::NonZero )
            );
        
        }
        { //::CWarsWeaponHANDLE::Set
        
            typedef void ( ::CWarsWeaponHANDLE::*Set_function_type )( CWarsWeapon * ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CWarsWeaponHANDLE::Set )
            );
        
        }
        { //::CWarsWeaponHANDLE::GetSerialNumber
        
            typedef int ( ::CWarsWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CWarsWeaponHANDLE::GetSerialNumber )
            );
        
        }
        { //::CWarsWeaponHANDLE::GetEntryIndex
        
            typedef int ( ::CWarsWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CWarsWeaponHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CWarsWeaponHANDLE::GetEntryIndex )
            );
        
        }
        CWarsWeaponHANDLE_exposer.def( bp::self != bp::self );
        CWarsWeaponHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CWarsWeapon_to_handle();

    CWarsWeapon_to_handle();

    handle_to_CWarsWeapon();

    { //::CBaseFuncMapBoundaryHANDLE
        typedef bp::class_< CBaseFuncMapBoundaryHANDLE, bp::bases< CBaseHandle > > CBaseFuncMapBoundaryHANDLE_exposer_t;
        CBaseFuncMapBoundaryHANDLE_exposer_t CBaseFuncMapBoundaryHANDLE_exposer = CBaseFuncMapBoundaryHANDLE_exposer_t( "CBaseFuncMapBoundaryHANDLE", bp::init< >() );
        CBaseFuncMapBoundaryHANDLE_exposer.def( bp::init< CBaseFuncMapBoundary * >(( bp::arg("pVal") )) );
        CBaseFuncMapBoundaryHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBaseFuncMapBoundaryHANDLE::GetAttr
        
            typedef bp::object ( ::CBaseFuncMapBoundaryHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBaseFuncMapBoundaryHANDLE::GetAttr )
            );
        
        }
        { //::CBaseFuncMapBoundaryHANDLE::Cmp
        
            typedef bool ( ::CBaseFuncMapBoundaryHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBaseFuncMapBoundaryHANDLE::Cmp )
            );
        
        }
        { //::CBaseFuncMapBoundaryHANDLE::NonZero
        
            typedef bool ( ::CBaseFuncMapBoundaryHANDLE::*NonZero_function_type )( ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBaseFuncMapBoundaryHANDLE::NonZero )
            );
        
        }
        { //::CBaseFuncMapBoundaryHANDLE::Set
        
            typedef void ( ::CBaseFuncMapBoundaryHANDLE::*Set_function_type )( CBaseFuncMapBoundary * ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBaseFuncMapBoundaryHANDLE::Set )
            );
        
        }
        { //::CBaseFuncMapBoundaryHANDLE::GetSerialNumber
        
            typedef int ( ::CBaseFuncMapBoundaryHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBaseFuncMapBoundaryHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBaseFuncMapBoundaryHANDLE::GetEntryIndex
        
            typedef int ( ::CBaseFuncMapBoundaryHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBaseFuncMapBoundaryHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBaseFuncMapBoundaryHANDLE::GetEntryIndex )
            );
        
        }
        CBaseFuncMapBoundaryHANDLE_exposer.def( bp::self != bp::self );
        CBaseFuncMapBoundaryHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseFuncMapBoundary_to_handle();

    CBaseFuncMapBoundary_to_handle();

    handle_to_CBaseFuncMapBoundary();

    { //::CBasePropHANDLE
        typedef bp::class_< CBasePropHANDLE, bp::bases< CBaseHandle > > CBasePropHANDLE_exposer_t;
        CBasePropHANDLE_exposer_t CBasePropHANDLE_exposer = CBasePropHANDLE_exposer_t( "CBasePropHANDLE", bp::init< >() );
        CBasePropHANDLE_exposer.def( bp::init< CBaseProp * >(( bp::arg("pVal") )) );
        CBasePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBasePropHANDLE::GetAttr
        
            typedef bp::object ( ::CBasePropHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBasePropHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBasePropHANDLE::GetAttr )
            );
        
        }
        { //::CBasePropHANDLE::Cmp
        
            typedef bool ( ::CBasePropHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBasePropHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBasePropHANDLE::Cmp )
            );
        
        }
        { //::CBasePropHANDLE::NonZero
        
            typedef bool ( ::CBasePropHANDLE::*NonZero_function_type )( ) const;
            
            CBasePropHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBasePropHANDLE::NonZero )
            );
        
        }
        { //::CBasePropHANDLE::Set
        
            typedef void ( ::CBasePropHANDLE::*Set_function_type )( CBaseProp * ) const;
            
            CBasePropHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBasePropHANDLE::Set )
            );
        
        }
        { //::CBasePropHANDLE::GetSerialNumber
        
            typedef int ( ::CBasePropHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBasePropHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBasePropHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBasePropHANDLE::GetEntryIndex
        
            typedef int ( ::CBasePropHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBasePropHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBasePropHANDLE::GetEntryIndex )
            );
        
        }
        CBasePropHANDLE_exposer.def( bp::self != bp::self );
        CBasePropHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBaseProp_to_handle();

    CBaseProp_to_handle();

    handle_to_CBaseProp();

    { //::CBreakablePropHANDLE
        typedef bp::class_< CBreakablePropHANDLE, bp::bases< CBaseHandle > > CBreakablePropHANDLE_exposer_t;
        CBreakablePropHANDLE_exposer_t CBreakablePropHANDLE_exposer = CBreakablePropHANDLE_exposer_t( "CBreakablePropHANDLE", bp::init< >() );
        CBreakablePropHANDLE_exposer.def( bp::init< CBreakableProp * >(( bp::arg("pVal") )) );
        CBreakablePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CBreakablePropHANDLE::GetAttr
        
            typedef bp::object ( ::CBreakablePropHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CBreakablePropHANDLE::GetAttr )
            );
        
        }
        { //::CBreakablePropHANDLE::Cmp
        
            typedef bool ( ::CBreakablePropHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CBreakablePropHANDLE::Cmp )
            );
        
        }
        { //::CBreakablePropHANDLE::NonZero
        
            typedef bool ( ::CBreakablePropHANDLE::*NonZero_function_type )( ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CBreakablePropHANDLE::NonZero )
            );
        
        }
        { //::CBreakablePropHANDLE::Set
        
            typedef void ( ::CBreakablePropHANDLE::*Set_function_type )( CBreakableProp * ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CBreakablePropHANDLE::Set )
            );
        
        }
        { //::CBreakablePropHANDLE::GetSerialNumber
        
            typedef int ( ::CBreakablePropHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CBreakablePropHANDLE::GetSerialNumber )
            );
        
        }
        { //::CBreakablePropHANDLE::GetEntryIndex
        
            typedef int ( ::CBreakablePropHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CBreakablePropHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CBreakablePropHANDLE::GetEntryIndex )
            );
        
        }
        CBreakablePropHANDLE_exposer.def( bp::self != bp::self );
        CBreakablePropHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CBreakableProp_to_handle();

    CBreakableProp_to_handle();

    handle_to_CBreakableProp();

    { //::CPhysicsPropHANDLE
        typedef bp::class_< CPhysicsPropHANDLE, bp::bases< CBaseHandle > > CPhysicsPropHANDLE_exposer_t;
        CPhysicsPropHANDLE_exposer_t CPhysicsPropHANDLE_exposer = CPhysicsPropHANDLE_exposer_t( "CPhysicsPropHANDLE", bp::init< >() );
        CPhysicsPropHANDLE_exposer.def( bp::init< CPhysicsProp * >(( bp::arg("pVal") )) );
        CPhysicsPropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CPhysicsPropHANDLE::GetAttr
        
            typedef bp::object ( ::CPhysicsPropHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CPhysicsPropHANDLE::GetAttr )
            );
        
        }
        { //::CPhysicsPropHANDLE::Cmp
        
            typedef bool ( ::CPhysicsPropHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CPhysicsPropHANDLE::Cmp )
            );
        
        }
        { //::CPhysicsPropHANDLE::NonZero
        
            typedef bool ( ::CPhysicsPropHANDLE::*NonZero_function_type )( ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CPhysicsPropHANDLE::NonZero )
            );
        
        }
        { //::CPhysicsPropHANDLE::Set
        
            typedef void ( ::CPhysicsPropHANDLE::*Set_function_type )( CPhysicsProp * ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CPhysicsPropHANDLE::Set )
            );
        
        }
        { //::CPhysicsPropHANDLE::GetSerialNumber
        
            typedef int ( ::CPhysicsPropHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CPhysicsPropHANDLE::GetSerialNumber )
            );
        
        }
        { //::CPhysicsPropHANDLE::GetEntryIndex
        
            typedef int ( ::CPhysicsPropHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CPhysicsPropHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CPhysicsPropHANDLE::GetEntryIndex )
            );
        
        }
        CPhysicsPropHANDLE_exposer.def( bp::self != bp::self );
        CPhysicsPropHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CPhysicsProp_to_handle();

    CPhysicsProp_to_handle();

    handle_to_CPhysicsProp();

    { //::CRagdollPropHANDLE
        typedef bp::class_< CRagdollPropHANDLE, bp::bases< CBaseHandle > > CRagdollPropHANDLE_exposer_t;
        CRagdollPropHANDLE_exposer_t CRagdollPropHANDLE_exposer = CRagdollPropHANDLE_exposer_t( "CRagdollPropHANDLE", bp::init< >() );
        CRagdollPropHANDLE_exposer.def( bp::init< CRagdollProp * >(( bp::arg("pVal") )) );
        CRagdollPropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
        { //::CRagdollPropHANDLE::GetAttr
        
            typedef bp::object ( ::CRagdollPropHANDLE::*GetAttr_function_type )( const char * ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "__getattr__"
                , GetAttr_function_type( &::CRagdollPropHANDLE::GetAttr )
            );
        
        }
        { //::CRagdollPropHANDLE::Cmp
        
            typedef bool ( ::CRagdollPropHANDLE::*Cmp_function_type )( bp::object ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "__cmp__"
                , Cmp_function_type( &::CRagdollPropHANDLE::Cmp )
            );
        
        }
        { //::CRagdollPropHANDLE::NonZero
        
            typedef bool ( ::CRagdollPropHANDLE::*NonZero_function_type )( ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "__nonzero__"
                , NonZero_function_type( &::CRagdollPropHANDLE::NonZero )
            );
        
        }
        { //::CRagdollPropHANDLE::Set
        
            typedef void ( ::CRagdollPropHANDLE::*Set_function_type )( CRagdollProp * ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "Set"
                , Set_function_type( &::CRagdollPropHANDLE::Set )
            );
        
        }
        { //::CRagdollPropHANDLE::GetSerialNumber
        
            typedef int ( ::CRagdollPropHANDLE::*GetSerialNumber_function_type )( ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "GetSerialNumber"
                , GetSerialNumber_function_type( &::CRagdollPropHANDLE::GetSerialNumber )
            );
        
        }
        { //::CRagdollPropHANDLE::GetEntryIndex
        
            typedef int ( ::CRagdollPropHANDLE::*GetEntryIndex_function_type )(  ) const;
            
            CRagdollPropHANDLE_exposer.def( 
                "GetEntryIndex"
                , GetEntryIndex_function_type( &::CRagdollPropHANDLE::GetEntryIndex )
            );
        
        }
        CRagdollPropHANDLE_exposer.def( bp::self != bp::self );
        CRagdollPropHANDLE_exposer.def( bp::self == bp::self );
    }

    ptr_CRagdollProp_to_handle();

    CRagdollProp_to_handle();

    handle_to_CRagdollProp();

    bp::scope().attr( "PLAYER_MAX_GROUPS" ) = PLAYER_MAX_GROUPS;

    bp::scope().attr( "SF_WALL_START_OFF" ) = (int)SF_WALL_START_OFF;

    bp::scope().attr( "SF_IGNORE_PLAYERUSE" ) = (int)SF_IGNORE_PLAYERUSE;

    ptr_ihandleentity_to_pyhandle();

    py_ent_to_ihandleentity();

    register__entities_free_functions();
}


