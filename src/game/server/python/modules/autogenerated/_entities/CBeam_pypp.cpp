// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "nav_area.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CBeam_pypp.hpp"

namespace bp = boost::python;

struct CBeam_wrapper : CBeam, bp::wrapper< CBeam > {

    CBeam_wrapper( )
    : CBeam( )
      , bp::wrapper< CBeam >(){
        // null constructor
    
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBeam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBeam::DrawDebugTextOverlays(  );
            }
        else
            return this->CBeam::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBeam::DrawDebugTextOverlays( );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBeam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBeam::Precache(  );
            }
        else
            this->CBeam::Precache(  );
    }
    
    void default_Precache(  ) {
        CBeam::Precache( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBeam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBeam::Spawn(  );
            }
        else
            this->CBeam::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBeam::Spawn( );
    }

    virtual int UpdateTransmitState(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateTransmitState: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateTransmitState(  ) of Class: CBeam\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBeam::UpdateTransmitState(  );
            }
        else
            return this->CBeam::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBeam::UpdateTransmitState( );
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Activate(  );
            }
        else
            this->CBaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseEntity::Activate( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
            }
        else
            this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( boost::ref(info) );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_KilledOther: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ModifyOrAppendCriteria: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ModifyOrAppendCriteria( boost::ref(set) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ModifyOrAppendCriteria( boost::ref(set) );
            }
        else
            this->CBaseEntity::ModifyOrAppendCriteria( boost::ref(set) );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseEntity::ModifyOrAppendCriteria( boost::ref(set) );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnRestore: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnRestore(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnRestore(  );
            }
        else
            this->CBaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseEntity::OnRestore( );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( boost::ref(info), boost::ref(vecDir), boost::python::ptr(ptr) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
#if defined(_WIN32)
#if defined(_DEBUG)
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
#elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
#endif // _DEBUG/PY_CHECKTHREADID
#endif // _WIN32
#if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetServerClass(  ) of Class: CBeam\n");
#endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>( "pyServerClass", GetPyInstance(), NULL, true );
        if( pServerClass )
            return pServerClass;
        return CBeam::GetServerClass();
    }

};

void register_CBeam_class(){

    { //::CBeam
        typedef bp::class_< CBeam_wrapper, bp::bases< CBaseEntity >, boost::noncopyable > CBeam_exposer_t;
        CBeam_exposer_t CBeam_exposer = CBeam_exposer_t( "CBeam", bp::init< >() );
        bp::scope CBeam_scope( CBeam_exposer );
        bp::enum_< CBeam::BeamClipStyle_t>("BeamClipStyle_t")
            .value("kNOCLIP", CBeam::kNOCLIP)
            .value("kGEOCLIP", CBeam::kGEOCLIP)
            .value("kMODELCLIP", CBeam::kMODELCLIP)
            .value("kBEAMCLIPSTYLE_NUMBITS", CBeam::kBEAMCLIPSTYLE_NUMBITS)
            .export_values()
            ;
        { //::CBeam::BeamCreate
        
            typedef ::CBeam * ( *BeamCreate_function_type )( char const *,float );
            
            CBeam_exposer.def( 
                "BeamCreate"
                , BeamCreate_function_type( &::CBeam::BeamCreate )
                , ( bp::arg("pSpriteName"), bp::arg("width") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBeam::BeamCreatePredictable
        
            typedef ::CBeam * ( *BeamCreatePredictable_function_type )( char const *,int,bool,char const *,float,::CBasePlayer * );
            
            CBeam_exposer.def( 
                "BeamCreatePredictable"
                , BeamCreatePredictable_function_type( &::CBeam::BeamCreatePredictable )
                , ( bp::arg("module"), bp::arg("line"), bp::arg("persist"), bp::arg("pSpriteName"), bp::arg("width"), bp::arg("pOwner") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBeam::BeamDamage
        
            typedef void ( ::CBeam::*BeamDamage_function_type )( ::trace_t * ) ;
            
            CBeam_exposer.def( 
                "BeamDamage"
                , BeamDamage_function_type( &::CBeam::BeamDamage )
                , ( bp::arg("ptr") ) );
        
        }
        { //::CBeam::BeamDamageInstant
        
            typedef void ( ::CBeam::*BeamDamageInstant_function_type )( ::trace_t *,float ) ;
            
            CBeam_exposer.def( 
                "BeamDamageInstant"
                , BeamDamageInstant_function_type( &::CBeam::BeamDamageInstant )
                , ( bp::arg("ptr"), bp::arg("damage") ) );
        
        }
        { //::CBeam::BeamInit
        
            typedef void ( ::CBeam::*BeamInit_function_type )( char const *,float ) ;
            
            CBeam_exposer.def( 
                "BeamInit"
                , BeamInit_function_type( &::CBeam::BeamInit )
                , ( bp::arg("pSpriteName"), bp::arg("width") ) );
        
        }
        { //::CBeam::DoSparks
        
            typedef void ( ::CBeam::*DoSparks_function_type )( ::Vector const &,::Vector const & ) ;
            
            CBeam_exposer.def( 
                "DoSparks"
                , DoSparks_function_type( &::CBeam::DoSparks )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::CBeam::DrawDebugTextOverlays
        
            typedef int ( ::CBeam::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBeam_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBeam::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBeam_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBeam::EntsInit
        
            typedef void ( ::CBeam::*EntsInit_function_type )( ::CBaseEntity *,::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "EntsInit"
                , EntsInit_function_type( &::CBeam::EntsInit )
                , ( bp::arg("pStartEntity"), bp::arg("pEndEntity") ) );
        
        }
        { //::CBeam::GetAbsEndPos
        
            typedef ::Vector const & ( ::CBeam::*GetAbsEndPos_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetAbsEndPos"
                , GetAbsEndPos_function_type( &::CBeam::GetAbsEndPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBeam::GetAbsStartPos
        
            typedef ::Vector const & ( ::CBeam::*GetAbsStartPos_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetAbsStartPos"
                , GetAbsStartPos_function_type( &::CBeam::GetAbsStartPos )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBeam::GetBeamFlags
        
            typedef int ( ::CBeam::*GetBeamFlags_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetBeamFlags"
                , GetBeamFlags_function_type( &::CBeam::GetBeamFlags ) );
        
        }
        { //::CBeam::GetBrightness
        
            typedef int ( ::CBeam::*GetBrightness_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetBrightness"
                , GetBrightness_function_type( &::CBeam::GetBrightness ) );
        
        }
        { //::CBeam::GetClipStyle
        
            typedef ::CBeam::BeamClipStyle_t ( ::CBeam::*GetClipStyle_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetClipStyle"
                , GetClipStyle_function_type( &::CBeam::GetClipStyle ) );
        
        }
        { //::CBeam::GetDecalName
        
            typedef char const * ( ::CBeam::*GetDecalName_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "GetDecalName"
                , GetDecalName_function_type( &::CBeam::GetDecalName ) );
        
        }
        { //::CBeam::GetEndAttachment
        
            typedef int ( ::CBeam::*GetEndAttachment_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetEndAttachment"
                , GetEndAttachment_function_type( &::CBeam::GetEndAttachment ) );
        
        }
        { //::CBeam::GetEndEntity
        
            typedef int ( ::CBeam::*GetEndEntity_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetEndEntity"
                , GetEndEntity_function_type( &::CBeam::GetEndEntity ) );
        
        }
        { //::CBeam::GetEndEntityPtr
        
            typedef ::CBaseEntity * ( ::CBeam::*GetEndEntityPtr_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetEndEntityPtr"
                , GetEndEntityPtr_function_type( &::CBeam::GetEndEntityPtr )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBeam::GetEndWidth
        
            typedef float ( ::CBeam::*GetEndWidth_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetEndWidth"
                , GetEndWidth_function_type( &::CBeam::GetEndWidth ) );
        
        }
        { //::CBeam::GetFadeLength
        
            typedef float ( ::CBeam::*GetFadeLength_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetFadeLength"
                , GetFadeLength_function_type( &::CBeam::GetFadeLength ) );
        
        }
        { //::CBeam::GetFrame
        
            typedef float ( ::CBeam::*GetFrame_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetFrame"
                , GetFrame_function_type( &::CBeam::GetFrame ) );
        
        }
        { //::CBeam::GetHDRColorScale
        
            typedef float ( ::CBeam::*GetHDRColorScale_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetHDRColorScale"
                , GetHDRColorScale_function_type( &::CBeam::GetHDRColorScale ) );
        
        }
        { //::CBeam::GetNoise
        
            typedef float ( ::CBeam::*GetNoise_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetNoise"
                , GetNoise_function_type( &::CBeam::GetNoise ) );
        
        }
        { //::CBeam::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBeam_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBeam::GetPyNetworkType ) );
        
        }
        { //::CBeam::GetScrollRate
        
            typedef float ( ::CBeam::*GetScrollRate_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetScrollRate"
                , GetScrollRate_function_type( &::CBeam::GetScrollRate ) );
        
        }
        { //::CBeam::GetStartAttachment
        
            typedef int ( ::CBeam::*GetStartAttachment_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetStartAttachment"
                , GetStartAttachment_function_type( &::CBeam::GetStartAttachment ) );
        
        }
        { //::CBeam::GetStartEntity
        
            typedef int ( ::CBeam::*GetStartEntity_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetStartEntity"
                , GetStartEntity_function_type( &::CBeam::GetStartEntity ) );
        
        }
        { //::CBeam::GetStartEntityPtr
        
            typedef ::CBaseEntity * ( ::CBeam::*GetStartEntityPtr_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetStartEntityPtr"
                , GetStartEntityPtr_function_type( &::CBeam::GetStartEntityPtr )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBeam::GetTexture
        
            typedef int ( ::CBeam::*GetTexture_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "GetTexture"
                , GetTexture_function_type( &::CBeam::GetTexture ) );
        
        }
        { //::CBeam::GetType
        
            typedef int ( ::CBeam::*GetType_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetType"
                , GetType_function_type( &::CBeam::GetType ) );
        
        }
        { //::CBeam::GetWidth
        
            typedef float ( ::CBeam::*GetWidth_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "GetWidth"
                , GetWidth_function_type( &::CBeam::GetWidth ) );
        
        }
        { //::CBeam::HoseInit
        
            typedef void ( ::CBeam::*HoseInit_function_type )( ::Vector const &,::Vector const & ) ;
            
            CBeam_exposer.def( 
                "HoseInit"
                , HoseInit_function_type( &::CBeam::HoseInit )
                , ( bp::arg("start"), bp::arg("direction") ) );
        
        }
        { //::CBeam::LaserInit
        
            typedef void ( ::CBeam::*LaserInit_function_type )( ::CBaseEntity *,::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "LaserInit"
                , LaserInit_function_type( &::CBeam::LaserInit )
                , ( bp::arg("pStartEntity"), bp::arg("pEndEntity") ) );
        
        }
        { //::CBeam::LiveForTime
        
            typedef void ( ::CBeam::*LiveForTime_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "LiveForTime"
                , LiveForTime_function_type( &::CBeam::LiveForTime )
                , ( bp::arg("time") ) );
        
        }
        { //::CBeam::ObjectCaps
        
            typedef int ( ::CBeam::*ObjectCaps_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CBeam::ObjectCaps ) );
        
        }
        { //::CBeam::PointEntInit
        
            typedef void ( ::CBeam::*PointEntInit_function_type )( ::Vector const &,::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "PointEntInit"
                , PointEntInit_function_type( &::CBeam::PointEntInit )
                , ( bp::arg("start"), bp::arg("pEndEntity") ) );
        
        }
        { //::CBeam::PointsInit
        
            typedef void ( ::CBeam::*PointsInit_function_type )( ::Vector const &,::Vector const & ) ;
            
            CBeam_exposer.def( 
                "PointsInit"
                , PointsInit_function_type( &::CBeam::PointsInit )
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::CBeam::Precache
        
            typedef void ( ::CBeam::*Precache_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_Precache_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBeam::Precache)
                , default_Precache_function_type(&CBeam_wrapper::default_Precache) );
        
        }
        { //::CBeam::RandomTargetname
        
            typedef ::CBaseEntity * ( ::CBeam::*RandomTargetname_function_type )( char const * ) ;
            
            CBeam_exposer.def( 
                "RandomTargetname"
                , RandomTargetname_function_type( &::CBeam::RandomTargetname )
                , ( bp::arg("szName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBeam::RelinkBeam
        
            typedef void ( ::CBeam::*RelinkBeam_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "RelinkBeam"
                , RelinkBeam_function_type( &::CBeam::RelinkBeam ) );
        
        }
        { //::CBeam::SetAbsEndPos
        
            typedef void ( ::CBeam::*SetAbsEndPos_function_type )( ::Vector const & ) ;
            
            CBeam_exposer.def( 
                "SetAbsEndPos"
                , SetAbsEndPos_function_type( &::CBeam::SetAbsEndPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::CBeam::SetAbsStartPos
        
            typedef void ( ::CBeam::*SetAbsStartPos_function_type )( ::Vector const & ) ;
            
            CBeam_exposer.def( 
                "SetAbsStartPos"
                , SetAbsStartPos_function_type( &::CBeam::SetAbsStartPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::CBeam::SetBeamFlag
        
            typedef void ( ::CBeam::*SetBeamFlag_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetBeamFlag"
                , SetBeamFlag_function_type( &::CBeam::SetBeamFlag )
                , ( bp::arg("flag") ) );
        
        }
        { //::CBeam::SetBeamFlags
        
            typedef void ( ::CBeam::*SetBeamFlags_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetBeamFlags"
                , SetBeamFlags_function_type( &::CBeam::SetBeamFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::CBeam::SetBrightness
        
            typedef void ( ::CBeam::*SetBrightness_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetBrightness"
                , SetBrightness_function_type( &::CBeam::SetBrightness )
                , ( bp::arg("brightness") ) );
        
        }
        { //::CBeam::SetColor
        
            typedef void ( ::CBeam::*SetColor_function_type )( int,int,int ) ;
            
            CBeam_exposer.def( 
                "SetColor"
                , SetColor_function_type( &::CBeam::SetColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::CBeam::SetEndAttachment
        
            typedef void ( ::CBeam::*SetEndAttachment_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetEndAttachment"
                , SetEndAttachment_function_type( &::CBeam::SetEndAttachment )
                , ( bp::arg("attachment") ) );
        
        }
        { //::CBeam::SetEndEntity
        
            typedef void ( ::CBeam::*SetEndEntity_function_type )( ::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "SetEndEntity"
                , SetEndEntity_function_type( &::CBeam::SetEndEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBeam::SetEndPos
        
            typedef void ( ::CBeam::*SetEndPos_function_type )( ::Vector const & ) ;
            
            CBeam_exposer.def( 
                "SetEndPos"
                , SetEndPos_function_type( &::CBeam::SetEndPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::CBeam::SetEndWidth
        
            typedef void ( ::CBeam::*SetEndWidth_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetEndWidth"
                , SetEndWidth_function_type( &::CBeam::SetEndWidth )
                , ( bp::arg("endWidth") ) );
        
        }
        { //::CBeam::SetFadeLength
        
            typedef void ( ::CBeam::*SetFadeLength_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetFadeLength"
                , SetFadeLength_function_type( &::CBeam::SetFadeLength )
                , ( bp::arg("fadeLength") ) );
        
        }
        { //::CBeam::SetFireTime
        
            typedef void ( ::CBeam::*SetFireTime_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetFireTime"
                , SetFireTime_function_type( &::CBeam::SetFireTime )
                , ( bp::arg("flFireTime") ) );
        
        }
        { //::CBeam::SetFrame
        
            typedef void ( ::CBeam::*SetFrame_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetFrame"
                , SetFrame_function_type( &::CBeam::SetFrame )
                , ( bp::arg("frame") ) );
        
        }
        { //::CBeam::SetFrameRate
        
            typedef void ( ::CBeam::*SetFrameRate_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetFrameRate"
                , SetFrameRate_function_type( &::CBeam::SetFrameRate )
                , ( bp::arg("flFrameRate") ) );
        
        }
        { //::CBeam::SetHDRColorScale
        
            typedef void ( ::CBeam::*SetHDRColorScale_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetHDRColorScale"
                , SetHDRColorScale_function_type( &::CBeam::SetHDRColorScale )
                , ( bp::arg("flScale") ) );
        
        }
        { //::CBeam::SetHaloScale
        
            typedef void ( ::CBeam::*SetHaloScale_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetHaloScale"
                , SetHaloScale_function_type( &::CBeam::SetHaloScale )
                , ( bp::arg("haloScale") ) );
        
        }
        { //::CBeam::SetHaloTexture
        
            typedef void ( ::CBeam::*SetHaloTexture_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetHaloTexture"
                , SetHaloTexture_function_type( &::CBeam::SetHaloTexture )
                , ( bp::arg("spriteIndex") ) );
        
        }
        { //::CBeam::SetNoise
        
            typedef void ( ::CBeam::*SetNoise_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetNoise"
                , SetNoise_function_type( &::CBeam::SetNoise )
                , ( bp::arg("amplitude") ) );
        
        }
        { //::CBeam::SetScrollRate
        
            typedef void ( ::CBeam::*SetScrollRate_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetScrollRate"
                , SetScrollRate_function_type( &::CBeam::SetScrollRate )
                , ( bp::arg("speed") ) );
        
        }
        { //::CBeam::SetStartAttachment
        
            typedef void ( ::CBeam::*SetStartAttachment_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetStartAttachment"
                , SetStartAttachment_function_type( &::CBeam::SetStartAttachment )
                , ( bp::arg("attachment") ) );
        
        }
        { //::CBeam::SetStartEntity
        
            typedef void ( ::CBeam::*SetStartEntity_function_type )( ::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "SetStartEntity"
                , SetStartEntity_function_type( &::CBeam::SetStartEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBeam::SetStartPos
        
            typedef void ( ::CBeam::*SetStartPos_function_type )( ::Vector const & ) ;
            
            CBeam_exposer.def( 
                "SetStartPos"
                , SetStartPos_function_type( &::CBeam::SetStartPos )
                , ( bp::arg("pos") ) );
        
        }
        { //::CBeam::SetTexture
        
            typedef void ( ::CBeam::*SetTexture_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetTexture"
                , SetTexture_function_type( &::CBeam::SetTexture )
                , ( bp::arg("spriteIndex") ) );
        
        }
        { //::CBeam::SetType
        
            typedef void ( ::CBeam::*SetType_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "SetType"
                , SetType_function_type( &::CBeam::SetType )
                , ( bp::arg("type") ) );
        
        }
        { //::CBeam::SetWidth
        
            typedef void ( ::CBeam::*SetWidth_function_type )( float ) ;
            
            CBeam_exposer.def( 
                "SetWidth"
                , SetWidth_function_type( &::CBeam::SetWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::CBeam::Spawn
        
            typedef void ( ::CBeam::*Spawn_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBeam::Spawn)
                , default_Spawn_function_type(&CBeam_wrapper::default_Spawn) );
        
        }
        { //::CBeam::SplineInit
        
            typedef void ( ::CBeam::*SplineInit_function_type )( int,::CBaseEntity * *,int * ) ;
            
            CBeam_exposer.def( 
                "SplineInit"
                , SplineInit_function_type( &::CBeam::SplineInit )
                , ( bp::arg("nNumEnts"), bp::arg("pEntList"), bp::arg("attachment") ) );
        
        }
        { //::CBeam::TurnOff
        
            typedef void ( ::CBeam::*TurnOff_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "TurnOff"
                , TurnOff_function_type( &::CBeam::TurnOff ) );
        
        }
        { //::CBeam::TurnOn
        
            typedef void ( ::CBeam::*TurnOn_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "TurnOn"
                , TurnOn_function_type( &::CBeam::TurnOn ) );
        
        }
        { //::CBeam::UpdateTransmitState
        
            typedef int ( ::CBeam::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CBeam_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBeam::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CBeam_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBeam::WorldSpaceCenter
        
            typedef ::Vector const & ( ::CBeam::*WorldSpaceCenter_function_type )(  ) const;
            
            CBeam_exposer.def( 
                "WorldSpaceCenter"
                , WorldSpaceCenter_function_type( &::CBeam::WorldSpaceCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::Activate
        
            typedef void ( ::CBaseEntity::*Activate_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_Activate_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseEntity::Activate)
                , default_Activate_function_type(&CBeam_wrapper::default_Activate) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CBeam_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBeam_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBeam_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBeam_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBeam_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBeam_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBeam_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBeam_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBeam_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBeam_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBeam_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBeam_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBeam_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBeam_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBeam_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CBeam_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CBeam_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBeam_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CBeam_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CBeam_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CBeam_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBeam_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBeam_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBeam_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBeam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBeam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBeam_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBeam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBeam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CBeam_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CBeam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBeam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBeam_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBeam_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBeam_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBeam_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBeam_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBeam_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseEntity::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CBeam_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBeam_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseEntity::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBeam_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CBeam_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CBeam_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CBeam_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseEntity::OnRestore
        
            typedef void ( ::CBaseEntity::*OnRestore_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseEntity::OnRestore)
                , default_OnRestore_function_type(&CBeam_wrapper::default_OnRestore) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBeam_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBeam_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBeam_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBeam_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBeam_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBeam_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBeam_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBeam_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBeam_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBeam_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBeam_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CBeam_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBeam_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBeam_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CBeam_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CBeam_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CBeam_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBeam_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBeam_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBeam_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBeam_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBeam_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBeam_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CBeam_exposer.staticmethod( "BeamCreate" );
        CBeam_exposer.staticmethod( "BeamCreatePredictable" );
        CBeam_exposer.staticmethod( "GetPyNetworkType" );
    }

}

