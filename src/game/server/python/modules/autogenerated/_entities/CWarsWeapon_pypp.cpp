// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "saverestoretypes.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "beam_shared.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "wars_func_unit.h"
#include "hl2wars_player_shared.h"
#include "wars_mapboundary.h"
#include "srcpy_util.h"
#include "wars_weapon.h"
#include "wars_flora.h"
#include "unit_sense.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "CWarsWeapon_pypp.hpp"

namespace bp = boost::python;

struct CWarsWeapon_wrapper : CWarsWeapon, bp::wrapper< CWarsWeapon > {

    CWarsWeapon_wrapper( )
    : CWarsWeapon( )
      , bp::wrapper< CWarsWeapon >(){
        // null constructor
    
    }

    static boost::python::tuple GetShootOriginAndDirection( ::CWarsWeapon & inst ){
        Vector vShootOrigin2;
        Vector vShootDirection2;
        inst.GetShootOriginAndDirection(vShootOrigin2, vShootDirection2);
        return bp::make_tuple( vShootOrigin2, vShootDirection2 );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CWarsWeapon, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CWarsWeapon, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CWarsWeapon::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CWarsWeapon::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CWarsWeapon::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void PrimaryAttack(  ) {
        PY_OVERRIDE_CHECK( CWarsWeapon, PrimaryAttack )
        PY_OVERRIDE_LOG( _entities, CWarsWeapon, PrimaryAttack )
        bp::override func_PrimaryAttack = this->get_override( "PrimaryAttack" );
        if( func_PrimaryAttack.ptr() != Py_None )
            try {
                func_PrimaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CWarsWeapon::PrimaryAttack(  );
            }
        else
            this->CWarsWeapon::PrimaryAttack(  );
    }
    
    void default_PrimaryAttack(  ) {
        CWarsWeapon::PrimaryAttack( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CWarsWeapon, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CWarsWeapon, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CWarsWeapon::UpdateTransmitState(  );
            }
        else
            return this->CWarsWeapon::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CWarsWeapon::UpdateTransmitState( );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatWeapon, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseCombatWeapon, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Activate(  );
            }
        else
            this->CBaseCombatWeapon::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseCombatWeapon::Activate( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, CanBecomeRagdoll )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, CanBecomeRagdoll )
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( info );
            }
        else
            this->CBaseEntity::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetIMouse )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( set );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnChangeOwnerNumber )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnChangeOwnerNumber )
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnRestore(  );
            }
        else
            this->CBaseAnimating::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseAnimating::OnRestore( );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, OnSequenceSet )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, OnSequenceSet )
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( info );
            }
        else
            return this->CBaseEntity::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatWeapon, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseCombatWeapon, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Precache(  );
            }
        else
            this->CBaseCombatWeapon::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseCombatWeapon::Precache( );
    }

    virtual void PyOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyOnNewModel )
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual void PyPostOnNewModel(  ){
        PY_OVERRIDE_CHECK( CBaseAnimating, PyPostOnNewModel )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, PyPostOnNewModel )
        bp::override func_PostOnNewModel = this->get_override( "PostOnNewModel" );
        if( func_PostOnNewModel.ptr() != Py_None )
            try {
                func_PostOnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyPostOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyPostOnNewModel(  );
    }
    
    virtual void default_PostOnNewModel(  ){
        CBaseAnimating::PyPostOnNewModel( );
    }

    virtual int Restore( ::IRestore & restore ) {
        PY_OVERRIDE_CHECK( CBaseAnimating, Restore )
        PY_OVERRIDE_LOG( _entities, CBaseAnimating, Restore )
        bp::override func_Restore = this->get_override( "Restore" );
        if( func_Restore.ptr() != Py_None )
            try {
                return func_Restore( boost::ref(restore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::Restore( restore );
            }
        else
            return this->CBaseAnimating::Restore( restore );
    }
    
    int default_Restore( ::IRestore & restore ) {
        return CBaseAnimating::Restore( restore );
    }

    virtual void SecondaryAttack(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatWeapon, SecondaryAttack )
        PY_OVERRIDE_LOG( _entities, CBaseCombatWeapon, SecondaryAttack )
        bp::override func_SecondaryAttack = this->get_override( "SecondaryAttack" );
        if( func_SecondaryAttack.ptr() != Py_None )
            try {
                func_SecondaryAttack(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::SecondaryAttack(  );
            }
        else
            this->CBaseCombatWeapon::SecondaryAttack(  );
    }
    
    void default_SecondaryAttack(  ) {
        CBaseCombatWeapon::SecondaryAttack( );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CBaseCombatWeapon, Spawn )
        PY_OVERRIDE_LOG( _entities, CBaseCombatWeapon, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseCombatWeapon::Spawn(  );
            }
        else
            this->CBaseCombatWeapon::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseCombatWeapon::Spawn( );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( info, vecDir, ptr );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
        PY_OVERRIDE_CHECK( CWarsWeapon, GetServerClass )
        if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
        {
            try
            {
                ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                if( pServerClass )
                    return pServerClass;
            }
            catch( bp::error_already_set & ) 
            {
                PyErr_Print();
            }
        }
        return CWarsWeapon::GetServerClass();
    }

    static int m_lifeState_Get( CWarsWeapon const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CWarsWeapon & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CWarsWeapon const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CWarsWeapon & inst, int val ) { inst.m_takedamage.Set( val ); }

    static int m_nSkin_Get( CWarsWeapon const & inst ) { return inst.m_nSkin.Get(); }

    static void m_nSkin_Set( CWarsWeapon & inst, int val ) { inst.m_nSkin.Set( val ); }

    static float m_flNextPrimaryAttack_Get( CWarsWeapon const & inst ) { return inst.m_flNextPrimaryAttack.Get(); }

    static void m_flNextPrimaryAttack_Set( CWarsWeapon & inst, float val ) { inst.m_flNextPrimaryAttack.Set( val ); }

    static float m_flNextSecondaryAttack_Get( CWarsWeapon const & inst ) { return inst.m_flNextSecondaryAttack.Get(); }

    static void m_flNextSecondaryAttack_Set( CWarsWeapon & inst, float val ) { inst.m_flNextSecondaryAttack.Set( val ); }

    static float m_flTimeWeaponIdle_Get( CWarsWeapon const & inst ) { return inst.m_flTimeWeaponIdle.Get(); }

    static void m_flTimeWeaponIdle_Set( CWarsWeapon & inst, float val ) { inst.m_flTimeWeaponIdle.Set( val ); }

    static int m_iState_Get( CWarsWeapon const & inst ) { return inst.m_iState.Get(); }

    static void m_iState_Set( CWarsWeapon & inst, int val ) { inst.m_iState.Set( val ); }

    static int m_iPrimaryAmmoType_Get( CWarsWeapon const & inst ) { return inst.m_iPrimaryAmmoType.Get(); }

    static void m_iPrimaryAmmoType_Set( CWarsWeapon & inst, int val ) { inst.m_iPrimaryAmmoType.Set( val ); }

    static int m_iSecondaryAmmoType_Get( CWarsWeapon const & inst ) { return inst.m_iSecondaryAmmoType.Get(); }

    static void m_iSecondaryAmmoType_Set( CWarsWeapon & inst, int val ) { inst.m_iSecondaryAmmoType.Set( val ); }

    static int m_iClip1_Get( CWarsWeapon const & inst ) { return inst.m_iClip1.Get(); }

    static void m_iClip1_Set( CWarsWeapon & inst, int val ) { inst.m_iClip1.Set( val ); }

    static int m_iClip2_Get( CWarsWeapon const & inst ) { return inst.m_iClip2.Get(); }

    static void m_iClip2_Set( CWarsWeapon & inst, int val ) { inst.m_iClip2.Set( val ); }

};

void register_CWarsWeapon_class(){

    { //::CWarsWeapon
        typedef bp::class_< CWarsWeapon_wrapper, bp::bases< CBaseCombatWeapon >, boost::noncopyable > CWarsWeapon_exposer_t;
        CWarsWeapon_exposer_t CWarsWeapon_exposer = CWarsWeapon_exposer_t( "CWarsWeapon", bp::init< >() );
        bp::scope CWarsWeapon_scope( CWarsWeapon_exposer );
        { //::CWarsWeapon::DefaultDeploy
        
            typedef bool ( ::CWarsWeapon::*DefaultDeploy_function_type )( char *,char *,int,char * ) ;
            
            CWarsWeapon_exposer.def( 
                "DefaultDeploy"
                , DefaultDeploy_function_type( &::CWarsWeapon::DefaultDeploy )
                , ( bp::arg("szViewModel"), bp::arg("szWeaponModel"), bp::arg("iActivity"), bp::arg("szAnimExt") ) );
        
        }
        { //::CWarsWeapon::Equip
        
            typedef void ( ::CWarsWeapon::*Equip_function_type )( ::CBaseCombatCharacter * ) ;
            
            CWarsWeapon_exposer.def( 
                "Equip"
                , Equip_function_type( &::CWarsWeapon::Equip )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::CWarsWeapon::GetCommander
        
            typedef ::CHL2WarsPlayer * ( ::CWarsWeapon::*GetCommander_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetCommander"
                , GetCommander_function_type( &::CWarsWeapon::GetCommander )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CWarsWeapon::GetMaxBurst
        
            typedef int ( ::CWarsWeapon::*GetMaxBurst_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetMaxBurst"
                , GetMaxBurst_function_type( &::CWarsWeapon::GetMaxBurst ) );
        
        }
        { //::CWarsWeapon::GetMaxRestTime
        
            typedef float ( ::CWarsWeapon::*GetMaxRestTime_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetMaxRestTime"
                , GetMaxRestTime_function_type( &::CWarsWeapon::GetMaxRestTime ) );
        
        }
        { //::CWarsWeapon::GetMinBurst
        
            typedef int ( ::CWarsWeapon::*GetMinBurst_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetMinBurst"
                , GetMinBurst_function_type( &::CWarsWeapon::GetMinBurst ) );
        
        }
        { //::CWarsWeapon::GetMinRestTime
        
            typedef float ( ::CWarsWeapon::*GetMinRestTime_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetMinRestTime"
                , GetMinRestTime_function_type( &::CWarsWeapon::GetMinRestTime ) );
        
        }
        { //::CWarsWeapon::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CWarsWeapon_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CWarsWeapon::GetPyNetworkType ) );
        
        }
        { //::CWarsWeapon::GetShootOriginAndDirection
        
            typedef boost::python::tuple ( *GetShootOriginAndDirection_function_type )( ::CWarsWeapon & );
            
            CWarsWeapon_exposer.def( 
                "GetShootOriginAndDirection"
                , GetShootOriginAndDirection_function_type( &CWarsWeapon_wrapper::GetShootOriginAndDirection )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWarsWeapon::GetViewModelSequenceDuration
        
            typedef float ( ::CWarsWeapon::*GetViewModelSequenceDuration_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetViewModelSequenceDuration"
                , GetViewModelSequenceDuration_function_type( &::CWarsWeapon::GetViewModelSequenceDuration ) );
        
        }
        { //::CWarsWeapon::IsPredicted
        
            typedef bool ( ::CWarsWeapon::*IsPredicted_function_type )(  ) const;
            
            CWarsWeapon_exposer.def( 
                "IsPredicted"
                , IsPredicted_function_type( &::CWarsWeapon::IsPredicted ) );
        
        }
        { //::CWarsWeapon::IsViewModelSequenceFinished
        
            typedef bool ( ::CWarsWeapon::*IsViewModelSequenceFinished_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "IsViewModelSequenceFinished"
                , IsViewModelSequenceFinished_function_type( &::CWarsWeapon::IsViewModelSequenceFinished ) );
        
        }
        { //::CWarsWeapon::IsWeaponVisible
        
            typedef bool ( ::CWarsWeapon::*IsWeaponVisible_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "IsWeaponVisible"
                , IsWeaponVisible_function_type( &::CWarsWeapon::IsWeaponVisible ) );
        
        }
        { //::CWarsWeapon::MakeTracer
        
            typedef void ( ::CWarsWeapon::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CWarsWeapon_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CWarsWeapon_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CWarsWeapon::MakeTracer)
                , default_MakeTracer_function_type(&CWarsWeapon_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CWarsWeapon::Operator_FrameUpdate
        
            typedef void ( ::CWarsWeapon::*Operator_FrameUpdate_function_type )( ::CBaseCombatCharacter * ) ;
            
            CWarsWeapon_exposer.def( 
                "Operator_FrameUpdate"
                , Operator_FrameUpdate_function_type( &::CWarsWeapon::Operator_FrameUpdate )
                , ( bp::arg("pOperator") ) );
        
        }
        { //::CWarsWeapon::PrimaryAttack
        
            typedef void ( ::CWarsWeapon::*PrimaryAttack_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_PrimaryAttack_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "PrimaryAttack"
                , PrimaryAttack_function_type(&::CWarsWeapon::PrimaryAttack)
                , default_PrimaryAttack_function_type(&CWarsWeapon_wrapper::default_PrimaryAttack) );
        
        }
        { //::CWarsWeapon::SendViewModelAnim
        
            typedef void ( ::CWarsWeapon::*SendViewModelAnim_function_type )( int ) ;
            
            CWarsWeapon_exposer.def( 
                "SendViewModelAnim"
                , SendViewModelAnim_function_type( &::CWarsWeapon::SendViewModelAnim )
                , ( bp::arg("nSequence") ) );
        
        }
        { //::CWarsWeapon::SetViewModel
        
            typedef void ( ::CWarsWeapon::*SetViewModel_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "SetViewModel"
                , SetViewModel_function_type( &::CWarsWeapon::SetViewModel ) );
        
        }
        { //::CWarsWeapon::SetWeaponVisible
        
            typedef void ( ::CWarsWeapon::*SetWeaponVisible_function_type )( bool ) ;
            
            CWarsWeapon_exposer.def( 
                "SetWeaponVisible"
                , SetWeaponVisible_function_type( &::CWarsWeapon::SetWeaponVisible )
                , ( bp::arg("visible") ) );
        
        }
        { //::CWarsWeapon::UpdateTransmitState
        
            typedef int ( ::CWarsWeapon::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CWarsWeapon_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CWarsWeapon::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CWarsWeapon_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CWarsWeapon::WeaponLOSCondition
        
            typedef bool ( ::CWarsWeapon::*WeaponLOSCondition_function_type )( ::Vector const &,::Vector const &,bool ) ;
            
            CWarsWeapon_exposer.def( 
                "WeaponLOSCondition"
                , WeaponLOSCondition_function_type( &::CWarsWeapon::WeaponLOSCondition )
                , ( bp::arg("ownerPos"), bp::arg("targetPos"), bp::arg("bSetConditions") ) );
        
        }
        { //::CWarsWeapon::WeaponLOSCondition
        
            typedef bool ( ::CWarsWeapon::*WeaponLOSCondition_function_type )( ::Vector const &,::Vector const &,::CBaseEntity * ) ;
            
            CWarsWeapon_exposer.def( 
                "WeaponLOSCondition"
                , WeaponLOSCondition_function_type( &::CWarsWeapon::WeaponLOSCondition )
                , ( bp::arg("ownerPos"), bp::arg("targetPos"), bp::arg("pTarget")=bp::object() ) );
        
        }
        { //::CWarsWeapon::WeaponSound
        
            typedef void ( ::CWarsWeapon::*WeaponSound_function_type )( ::WeaponSound_t,float ) ;
            
            CWarsWeapon_exposer.def( 
                "WeaponSound"
                , WeaponSound_function_type( &::CWarsWeapon::WeaponSound )
                , ( bp::arg("sound_type"), bp::arg("soundtime")=0.0f ) );
        
        }
        CWarsWeapon_exposer.def_readwrite( "enableburst", &CWarsWeapon::m_bEnableBurst );
        CWarsWeapon_exposer.def_readwrite( "firerate", &CWarsWeapon::m_fFireRate );
        CWarsWeapon_exposer.def_readwrite( "maxbulletrange", &CWarsWeapon::m_fMaxBulletRange );
        CWarsWeapon_exposer.def_readwrite( "maxresttime", &CWarsWeapon::m_fMaxRestTime );
        CWarsWeapon_exposer.def_readwrite( "minresttime", &CWarsWeapon::m_fMinRestTime );
        CWarsWeapon_exposer.def_readwrite( "overrideammodamage", &CWarsWeapon::m_fOverrideAmmoDamage );
        CWarsWeapon_exposer.def_readwrite( "maxburst", &CWarsWeapon::m_iMaxBurst );
        CWarsWeapon_exposer.def_readwrite( "minburst", &CWarsWeapon::m_iMinBurst );
        CWarsWeapon_exposer.def_readwrite( "burstshotsremaining", &CWarsWeapon::m_nBurstShotsRemaining );
        CWarsWeapon_exposer.def_readwrite( "bulletspread", &CWarsWeapon::m_vBulletSpread );
        { //::CBaseCombatWeapon::Activate
        
            typedef void ( ::CBaseCombatWeapon::*Activate_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_Activate_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseCombatWeapon::Activate)
                , default_Activate_function_type(&CWarsWeapon_wrapper::default_Activate) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CWarsWeapon_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CWarsWeapon_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CWarsWeapon_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CWarsWeapon_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CWarsWeapon_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CWarsWeapon_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CWarsWeapon_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CWarsWeapon_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CWarsWeapon_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CWarsWeapon_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CWarsWeapon_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CWarsWeapon_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CWarsWeapon_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CWarsWeapon_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CWarsWeapon_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CWarsWeapon_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CWarsWeapon_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CWarsWeapon_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CWarsWeapon_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CWarsWeapon_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CWarsWeapon_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CWarsWeapon_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CWarsWeapon_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CWarsWeapon_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CWarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CWarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CWarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CWarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CWarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CWarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CWarsWeapon_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CWarsWeapon_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CWarsWeapon_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CWarsWeapon_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CWarsWeapon_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CWarsWeapon_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CWarsWeapon_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CWarsWeapon_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseAnimating::OnRestore
        
            typedef void ( ::CBaseAnimating::*OnRestore_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_OnRestore_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseAnimating::OnRestore)
                , default_OnRestore_function_type(&CWarsWeapon_wrapper::default_OnRestore) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CWarsWeapon_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CWarsWeapon_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CWarsWeapon_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CWarsWeapon_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CWarsWeapon_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CWarsWeapon_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CWarsWeapon_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CWarsWeapon_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CWarsWeapon_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CWarsWeapon_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CWarsWeapon_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CWarsWeapon_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseCombatWeapon::Precache
        
            typedef void ( ::CBaseCombatWeapon::*Precache_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_Precache_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseCombatWeapon::Precache)
                , default_Precache_function_type(&CWarsWeapon_wrapper::default_Precache) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CWarsWeapon_wrapper::*OnNewModel_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CWarsWeapon_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseAnimating::PyPostOnNewModel
        
            typedef void ( CWarsWeapon_wrapper::*PostOnNewModel_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "PostOnNewModel"
                , PostOnNewModel_function_type( &CWarsWeapon_wrapper::default_PostOnNewModel ) );
        
        }
        { //::CBaseAnimating::Restore
        
            typedef int ( ::CBaseAnimating::*Restore_function_type )( ::IRestore & ) ;
            typedef int ( CWarsWeapon_wrapper::*default_Restore_function_type )( ::IRestore & ) ;
            
            CWarsWeapon_exposer.def( 
                "Restore"
                , Restore_function_type(&::CBaseAnimating::Restore)
                , default_Restore_function_type(&CWarsWeapon_wrapper::default_Restore)
                , ( bp::arg("restore") ) );
        
        }
        { //::CBaseCombatWeapon::SecondaryAttack
        
            typedef void ( ::CBaseCombatWeapon::*SecondaryAttack_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_SecondaryAttack_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "SecondaryAttack"
                , SecondaryAttack_function_type(&::CBaseCombatWeapon::SecondaryAttack)
                , default_SecondaryAttack_function_type(&CWarsWeapon_wrapper::default_SecondaryAttack) );
        
        }
        { //::CBaseCombatWeapon::Spawn
        
            typedef void ( ::CBaseCombatWeapon::*Spawn_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_Spawn_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseCombatWeapon::Spawn)
                , default_Spawn_function_type(&CWarsWeapon_wrapper::default_Spawn) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CWarsWeapon_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CWarsWeapon_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CWarsWeapon_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CWarsWeapon_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CWarsWeapon_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CWarsWeapon_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CWarsWeapon_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CWarsWeapon_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CWarsWeapon_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CWarsWeapon_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CWarsWeapon_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CWarsWeapon_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CWarsWeapon_exposer.staticmethod( "GetPyNetworkType" );
        { //property "primaryattackactivity"[fget=::CWarsWeapon::GetPrimaryAttackActivity, fset=::CWarsWeapon::SetPrimaryAttackActivity]
        
            typedef ::Activity ( ::CWarsWeapon::*fget )(  ) ;
            typedef void ( ::CWarsWeapon::*fset )( ::Activity ) ;
            
            CWarsWeapon_exposer.add_property( 
                "primaryattackactivity"
                , fget( &::CWarsWeapon::GetPrimaryAttackActivity )
                , fset( &::CWarsWeapon::SetPrimaryAttackActivity ) );
        
        }
        { //property "secondaryattackactivity"[fget=::CWarsWeapon::GetSecondaryAttackActivity, fset=::CWarsWeapon::SetSecondaryAttackActivity]
        
            typedef ::Activity ( ::CWarsWeapon::*fget )(  ) ;
            typedef void ( ::CWarsWeapon::*fset )( ::Activity ) ;
            
            CWarsWeapon_exposer.add_property( 
                "secondaryattackactivity"
                , fget( &::CWarsWeapon::GetSecondaryAttackActivity )
                , fset( &::CWarsWeapon::SetSecondaryAttackActivity ) );
        
        }
        CWarsWeapon_exposer.add_property( "lifestate", &CWarsWeapon_wrapper::m_lifeState_Get, &CWarsWeapon_wrapper::m_lifeState_Set );
        CWarsWeapon_exposer.add_property( "takedamage", &CWarsWeapon_wrapper::m_takedamage_Get, &CWarsWeapon_wrapper::m_takedamage_Set );
        CWarsWeapon_exposer.add_property( "skin", &CWarsWeapon_wrapper::m_nSkin_Get, &CWarsWeapon_wrapper::m_nSkin_Set );
        CWarsWeapon_exposer.add_property( "nextprimaryattack", &CWarsWeapon_wrapper::m_flNextPrimaryAttack_Get, &CWarsWeapon_wrapper::m_flNextPrimaryAttack_Set );
        CWarsWeapon_exposer.add_property( "nextsecondaryattack", &CWarsWeapon_wrapper::m_flNextSecondaryAttack_Get, &CWarsWeapon_wrapper::m_flNextSecondaryAttack_Set );
        CWarsWeapon_exposer.add_property( "timeweaponidle", &CWarsWeapon_wrapper::m_flTimeWeaponIdle_Get, &CWarsWeapon_wrapper::m_flTimeWeaponIdle_Set );
        CWarsWeapon_exposer.add_property( "state", &CWarsWeapon_wrapper::m_iState_Get, &CWarsWeapon_wrapper::m_iState_Set );
        CWarsWeapon_exposer.add_property( "primaryammotype", &CWarsWeapon_wrapper::m_iPrimaryAmmoType_Get, &CWarsWeapon_wrapper::m_iPrimaryAmmoType_Set );
        CWarsWeapon_exposer.add_property( "secondaryammotype", &CWarsWeapon_wrapper::m_iSecondaryAmmoType_Get, &CWarsWeapon_wrapper::m_iSecondaryAmmoType_Set );
        CWarsWeapon_exposer.add_property( "clip1", &CWarsWeapon_wrapper::m_iClip1_Get, &CWarsWeapon_wrapper::m_iClip1_Set );
        CWarsWeapon_exposer.add_property( "clip2", &CWarsWeapon_wrapper::m_iClip2_Get, &CWarsWeapon_wrapper::m_iClip2_Set );
    }

}

