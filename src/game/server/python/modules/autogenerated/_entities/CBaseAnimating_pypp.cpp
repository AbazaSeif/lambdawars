// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "mathlib/vmatrix.h"
#include "utlvector.h"
#include "shareddefs.h"
#include "util.h"
#include "takedamageinfo.h"
#include "baseanimating.h"
#include "BaseAnimatingOverlay.h"
#include "baseflex.h"
#include "basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "player.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "unit_sense.h"
#include "wars_func_unit.h"
#include "soundent.h"
#include "gib.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "entityoutput.h"
#include "props.h"
#include "modelentities.h"
#include "triggers.h"
#include "wars_weapon.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "src_python_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "src_python_converters_ents.h"
#include "src_python.h"
#include "tier0/memdbgon.h"
#include "CBaseAnimating_pypp.hpp"

namespace bp = boost::python;

struct CBaseAnimating_wrapper : CBaseAnimating, bp::wrapper< CBaseAnimating > {

    CBaseAnimating_wrapper( )
    : CBaseAnimating( )
      , bp::wrapper< CBaseAnimating >(){
        // null constructor
    
    }

    virtual void Activate(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Activate: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Activate(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Activate(  );
            }
        else
            this->CBaseAnimating::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseAnimating::Activate( );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    static boost::python::tuple GetIntervalMovement( ::CBaseAnimating & inst, float flIntervalUsed, ::Vector & newPosition, ::QAngle & newAngles ){
        bool bMoveSeqFinished2;
        bool result = inst.GetIntervalMovement(flIntervalUsed, bMoveSeqFinished2, newPosition, newAngles);
        return bp::make_tuple( result, bMoveSeqFinished2 );
    }

    static boost::python::tuple GetPoseParameterRange( ::CBaseAnimating & inst, int index ){
        float minValue2;
        float maxValue2;
        bool result = inst.GetPoseParameterRange(index, minValue2, maxValue2);
        return bp::make_tuple( result, minValue2, maxValue2 );
    }

    static boost::python::tuple GotoSequence( ::CBaseAnimating & inst, int iCurrentSequence, float flCurrentCycle, float flCurrentRate, int iGoalSequence ){
        int iNextSequence2;
        float flCycle2;
        int iDir2;
        bool result = inst.GotoSequence(iCurrentSequence, flCurrentCycle, flCurrentRate, iGoalSequence, iNextSequence2, flCycle2, iDir2);
        return bp::make_tuple( result, iNextSequence2, flCycle2, iDir2 );
    }

    static boost::python::tuple LookupHitbox( ::CBaseAnimating & inst, char const * szName ){
        int outSet2;
        int outBox2;
        bool result = inst.LookupHitbox(szName, outSet2, outBox2);
        return bp::make_tuple( result, outSet2, outBox2 );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ModifyOrAppendCriteria: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ModifyOrAppendCriteria( boost::ref(set) ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSequenceSet: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSequenceSet( nOldSequence ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Precache(  );
            }
        else
            this->CBaseAnimating::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseAnimating::Precache( );
    }

    virtual void PyOnNewModel(  ){
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual void Spawn(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Spawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Spawn(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::Spawn(  );
            }
        else
            this->CBaseAnimating::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseAnimating::Spawn( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
            }
        else
            this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DoImpactEffect: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DoImpactEffect( boost::ref(tr), nDamageType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( boost::ref(tr), nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugGeometryOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugGeometryOverlays(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Killed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Killed( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_Killed( boost::ref(info) );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( boost::ref(info) );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_KilledOther: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual char const * GetTracerType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTracerType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTracerType(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MakeTracer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnTakeDamage( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
            }
        else
            return this->CBaseEntity::OnTakeDamage( boost::ref(info) );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( boost::ref(info) );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr ){
        CBaseEntity::TraceAttack( boost::ref(info), boost::ref(vecDir), boost::python::ptr(ptr) );
    }

    virtual void UpdateOnRemove(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateOnRemove: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateOnRemove(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateTransmitState: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateTransmitState(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::UpdateTransmitState(  );
            }
        else
            return this->CBaseEntity::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseEntity::UpdateTransmitState( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VPhysicsCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VPhysicsCollision( index, boost::python::ptr(pEvent) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, boost::python::ptr(pEvent) );
    }

    virtual ServerClass* GetServerClass() {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetServerClass(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>("pyServerClass", GetPyInstance(), NULL, true);
        if( pServerClass )
            return pServerClass;
        return CBaseAnimating::GetServerClass();
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: CBaseAnimating\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->CBaseAnimating::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->CBaseAnimating::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return CBaseAnimating::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

};

void register_CBaseAnimating_class(){

    { //::CBaseAnimating
        typedef bp::class_< CBaseAnimating_wrapper, bp::bases< CBaseEntity >, boost::noncopyable > CBaseAnimating_exposer_t;
        CBaseAnimating_exposer_t CBaseAnimating_exposer = CBaseAnimating_exposer_t( "CBaseAnimating", bp::no_init );
        bp::scope CBaseAnimating_scope( CBaseAnimating_exposer );
        bp::scope().attr("NUM_POSEPAREMETERS") = (int)CBaseAnimating::NUM_POSEPAREMETERS;
        bp::scope().attr("NUM_BONECTRLS") = (int)CBaseAnimating::NUM_BONECTRLS;
        CBaseAnimating_exposer.def( bp::init< >() );
        { //::CBaseAnimating::Activate
        
            typedef void ( ::CBaseAnimating::*Activate_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_Activate_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseAnimating::Activate)
                , default_Activate_function_type(&CBaseAnimating_wrapper::default_Activate) );
        
        }
        { //::CBaseAnimating::BecomeRagdollOnClient
        
            typedef bool ( ::CBaseAnimating::*BecomeRagdollOnClient_function_type )( ::Vector const & ) ;
            
            CBaseAnimating_exposer.def( 
                "BecomeRagdollOnClient"
                , BecomeRagdollOnClient_function_type( &::CBaseAnimating::BecomeRagdollOnClient )
                , ( bp::arg("force") ) );
        
        }
        { //::CBaseAnimating::CalculateIKLocks
        
            typedef void ( ::CBaseAnimating::*CalculateIKLocks_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "CalculateIKLocks"
                , CalculateIKLocks_function_type( &::CBaseAnimating::CalculateIKLocks )
                , ( bp::arg("currentTime") ) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBaseAnimating_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseAnimating::CanSkipAnimation
        
            typedef bool ( ::CBaseAnimating::*CanSkipAnimation_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "CanSkipAnimation"
                , CanSkipAnimation_function_type( &::CBaseAnimating::CanSkipAnimation ) );
        
        }
        { //::CBaseAnimating::ClampRagdollForce
        
            typedef void ( ::CBaseAnimating::*ClampRagdollForce_function_type )( ::Vector const &,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "ClampRagdollForce"
                , ClampRagdollForce_function_type( &::CBaseAnimating::ClampRagdollForce )
                , ( bp::arg("vecForceIn"), bp::arg("vecForceOut") ) );
        
        }
        { //::CBaseAnimating::ClearBoneCacheFlags
        
            typedef void ( ::CBaseAnimating::*ClearBoneCacheFlags_function_type )( short unsigned int ) ;
            
            CBaseAnimating_exposer.def( 
                "ClearBoneCacheFlags"
                , ClearBoneCacheFlags_function_type( &::CBaseAnimating::ClearBoneCacheFlags )
                , ( bp::arg("fFlag") ) );
        
        }
        { //::CBaseAnimating::ComputeEntitySpaceHitboxSurroundingBox
        
            typedef bool ( ::CBaseAnimating::*ComputeEntitySpaceHitboxSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "ComputeEntitySpaceHitboxSurroundingBox"
                , ComputeEntitySpaceHitboxSurroundingBox_function_type( &::CBaseAnimating::ComputeEntitySpaceHitboxSurroundingBox )
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::CBaseAnimating::ComputeHitboxSurroundingBox
        
            typedef bool ( ::CBaseAnimating::*ComputeHitboxSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "ComputeHitboxSurroundingBox"
                , ComputeHitboxSurroundingBox_function_type( &::CBaseAnimating::ComputeHitboxSurroundingBox )
                , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::CBaseAnimating::ComputeHitboxSurroundingBox
        
            typedef bool ( ::CBaseAnimating::*ComputeHitboxSurroundingBox_function_type )( int,::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "ComputeHitboxSurroundingBox"
                , ComputeHitboxSurroundingBox_function_type( &::CBaseAnimating::ComputeHitboxSurroundingBox )
                , ( bp::arg("iHitbox"), bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) );
        
        }
        { //::CBaseAnimating::CopyAnimationDataFrom
        
            typedef void ( ::CBaseAnimating::*CopyAnimationDataFrom_function_type )( ::CBaseAnimating * ) ;
            
            CBaseAnimating_exposer.def( 
                "CopyAnimationDataFrom"
                , CopyAnimationDataFrom_function_type( &::CBaseAnimating::CopyAnimationDataFrom )
                , ( bp::arg("pSource") ) );
        
        }
        { //::CBaseAnimating::CountBodyGroupVariants
        
            typedef int ( ::CBaseAnimating::*CountBodyGroupVariants_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "CountBodyGroupVariants"
                , CountBodyGroupVariants_function_type( &::CBaseAnimating::CountBodyGroupVariants )
                , ( bp::arg("group") ) );
        
        }
        { //::CBaseAnimating::DisableServerIK
        
            typedef void ( ::CBaseAnimating::*DisableServerIK_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "DisableServerIK"
                , DisableServerIK_function_type( &::CBaseAnimating::DisableServerIK ) );
        
        }
        { //::CBaseAnimating::DispatchAnimEvents
        
            typedef void ( ::CBaseAnimating::*DispatchAnimEvents_function_type )( ::CBaseAnimating * ) ;
            
            CBaseAnimating_exposer.def( 
                "DispatchAnimEvents"
                , DispatchAnimEvents_function_type( &::CBaseAnimating::DispatchAnimEvents )
                , ( bp::arg("eventHandler") ) );
        
        }
        { //::CBaseAnimating::Dissolve
        
            typedef bool ( ::CBaseAnimating::*Dissolve_function_type )( char const *,float,bool,int,::Vector,int ) ;
            
            CBaseAnimating_exposer.def( 
                "Dissolve"
                , Dissolve_function_type( &::CBaseAnimating::Dissolve )
                , ( bp::arg("pMaterialName"), bp::arg("flStartTime"), bp::arg("bNPCOnly")=(bool)(true), bp::arg("nDissolveType")=(int)(0), bp::arg("vDissolverOrigin")=vec3_origin, bp::arg("iMagnitude")=(int)(0) ) );
        
        }
        { //::CBaseAnimating::DoMuzzleFlash
        
            typedef void ( ::CBaseAnimating::*DoMuzzleFlash_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "DoMuzzleFlash"
                , DoMuzzleFlash_function_type( &::CBaseAnimating::DoMuzzleFlash ) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBaseAnimating_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseAnimating_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseAnimating::DrawServerHitboxes
        
            typedef void ( ::CBaseAnimating::*DrawServerHitboxes_function_type )( float,bool ) ;
            
            CBaseAnimating_exposer.def( 
                "DrawServerHitboxes"
                , DrawServerHitboxes_function_type( &::CBaseAnimating::DrawServerHitboxes )
                , ( bp::arg("duration")=0.0f, bp::arg("monocolor")=(bool)(false) ) );
        
        }
        { //::CBaseAnimating::EdgeLimitPoseParameter
        
            typedef float ( ::CBaseAnimating::*EdgeLimitPoseParameter_function_type )( int,float,float ) ;
            
            CBaseAnimating_exposer.def( 
                "EdgeLimitPoseParameter"
                , EdgeLimitPoseParameter_function_type( &::CBaseAnimating::EdgeLimitPoseParameter )
                , ( bp::arg("iParameter"), bp::arg("flValue"), bp::arg("flBase")=0.0f ) );
        
        }
        { //::CBaseAnimating::EnableServerIK
        
            typedef void ( ::CBaseAnimating::*EnableServerIK_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "EnableServerIK"
                , EnableServerIK_function_type( &::CBaseAnimating::EnableServerIK ) );
        
        }
        { //::CBaseAnimating::Extinguish
        
            typedef void ( ::CBaseAnimating::*Extinguish_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "Extinguish"
                , Extinguish_function_type( &::CBaseAnimating::Extinguish ) );
        
        }
        { //::CBaseAnimating::ExtractBbox
        
            typedef int ( ::CBaseAnimating::*ExtractBbox_function_type )( int,::Vector &,::Vector & ) ;
            
            CBaseAnimating_exposer.def( 
                "ExtractBbox"
                , ExtractBbox_function_type( &::CBaseAnimating::ExtractBbox )
                , ( bp::arg("sequence"), bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::CBaseAnimating::FindBodyGroupVariant
        
            typedef int ( ::CBaseAnimating::*FindBodyGroupVariant_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "FindBodyGroupVariant"
                , FindBodyGroupVariant_function_type( &::CBaseAnimating::FindBodyGroupVariant )
                , ( bp::arg("group"), bp::arg("variant") ) );
        
        }
        { //::CBaseAnimating::FindBodygroupByName
        
            typedef int ( ::CBaseAnimating::*FindBodygroupByName_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "FindBodygroupByName"
                , FindBodygroupByName_function_type( &::CBaseAnimating::FindBodygroupByName )
                , ( bp::arg("name") ) );
        
        }
        { //::CBaseAnimating::FindDamagedBodyGroupVariant
        
            typedef int ( ::CBaseAnimating::*FindDamagedBodyGroupVariant_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "FindDamagedBodyGroupVariant"
                , FindDamagedBodyGroupVariant_function_type( &::CBaseAnimating::FindDamagedBodyGroupVariant )
                , ( bp::arg("group") ) );
        
        }
        { //::CBaseAnimating::FindTransitionSequence
        
            typedef int ( ::CBaseAnimating::*FindTransitionSequence_function_type )( int,int,int * ) ;
            
            CBaseAnimating_exposer.def( 
                "FindTransitionSequence"
                , FindTransitionSequence_function_type( &::CBaseAnimating::FindTransitionSequence )
                , ( bp::arg("iCurrentSequence"), bp::arg("iGoalSequence"), bp::arg("piDir") ) );
        
        }
        { //::CBaseAnimating::GetAnimTimeInterval
        
            typedef float ( ::CBaseAnimating::*GetAnimTimeInterval_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetAnimTimeInterval"
                , GetAnimTimeInterval_function_type( &::CBaseAnimating::GetAnimTimeInterval ) );
        
        }
        { //::CBaseAnimating::GetAttachment
        
            typedef bool ( ::CBaseAnimating::*GetAttachment_function_type )( char const *,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::CBaseAnimating::GetAttachment )
                , ( bp::arg("szName"), bp::arg("absOrigin"), bp::arg("absAngles") ) );
        
        }
        { //::CBaseAnimating::GetAttachment
        
            typedef bool ( ::CBaseAnimating::*GetAttachment_function_type )( int,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::CBaseAnimating::GetAttachment )
                , ( bp::arg("iAttachment"), bp::arg("absOrigin"), bp::arg("absAngles") ) );
        
        }
        { //::CBaseAnimating::GetAttachment
        
            typedef bool ( ::CBaseAnimating::*GetAttachment_function_type )( char const *,::Vector &,::Vector *,::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::CBaseAnimating::GetAttachment )
                , ( bp::arg("szName"), bp::arg("absOrigin"), bp::arg("forward")=bp::object(), bp::arg("right")=bp::object(), bp::arg("up")=bp::object() ) );
        
        }
        { //::CBaseAnimating::GetAttachment
        
            typedef bool ( ::CBaseAnimating::*GetAttachment_function_type )( int,::Vector &,::Vector *,::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachment"
                , GetAttachment_function_type( &::CBaseAnimating::GetAttachment )
                , ( bp::arg("iAttachment"), bp::arg("absOrigin"), bp::arg("forward")=bp::object(), bp::arg("right")=bp::object(), bp::arg("up")=bp::object() ) );
        
        }
        { //::CBaseAnimating::GetAttachmentBone
        
            typedef int ( ::CBaseAnimating::*GetAttachmentBone_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachmentBone"
                , GetAttachmentBone_function_type( &::CBaseAnimating::GetAttachmentBone )
                , ( bp::arg("iAttachment") ) );
        
        }
        { //::CBaseAnimating::GetAttachmentLocal
        
            typedef bool ( ::CBaseAnimating::*GetAttachmentLocal_function_type )( char const *,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachmentLocal"
                , GetAttachmentLocal_function_type( &::CBaseAnimating::GetAttachmentLocal )
                , ( bp::arg("szName"), bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBaseAnimating::GetAttachmentLocal
        
            typedef bool ( ::CBaseAnimating::*GetAttachmentLocal_function_type )( int,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetAttachmentLocal"
                , GetAttachmentLocal_function_type( &::CBaseAnimating::GetAttachmentLocal )
                , ( bp::arg("iAttachment"), bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBaseAnimating::GetBodygroup
        
            typedef int ( ::CBaseAnimating::*GetBodygroup_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBodygroup"
                , GetBodygroup_function_type( &::CBaseAnimating::GetBodygroup )
                , ( bp::arg("iGroup") ) );
        
        }
        { //::CBaseAnimating::GetBodygroupCount
        
            typedef int ( ::CBaseAnimating::*GetBodygroupCount_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBodygroupCount"
                , GetBodygroupCount_function_type( &::CBaseAnimating::GetBodygroupCount )
                , ( bp::arg("iGroup") ) );
        
        }
        { //::CBaseAnimating::GetBodygroupName
        
            typedef char const * ( ::CBaseAnimating::*GetBodygroupName_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBodygroupName"
                , GetBodygroupName_function_type( &::CBaseAnimating::GetBodygroupName )
                , ( bp::arg("iGroup") ) );
        
        }
        { //::CBaseAnimating::GetBodygroupPartName
        
            typedef char const * ( ::CBaseAnimating::*GetBodygroupPartName_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBodygroupPartName"
                , GetBodygroupPartName_function_type( &::CBaseAnimating::GetBodygroupPartName )
                , ( bp::arg("iGroup"), bp::arg("iPart") ) );
        
        }
        { //::CBaseAnimating::GetBoneCacheFlags
        
            typedef int ( ::CBaseAnimating::*GetBoneCacheFlags_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBoneCacheFlags"
                , GetBoneCacheFlags_function_type( &::CBaseAnimating::GetBoneCacheFlags ) );
        
        }
        { //::CBaseAnimating::GetBoneController
        
            typedef float ( ::CBaseAnimating::*GetBoneController_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBoneController"
                , GetBoneController_function_type( &::CBaseAnimating::GetBoneController )
                , ( bp::arg("iController") ) );
        
        }
        { //::CBaseAnimating::GetBonePosition
        
            typedef void ( ::CBaseAnimating::*GetBonePosition_function_type )( int,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetBonePosition"
                , GetBonePosition_function_type( &::CBaseAnimating::GetBonePosition )
                , ( bp::arg("iBone"), bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBaseAnimating::GetCycle
        
            typedef float ( ::CBaseAnimating::*GetCycle_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetCycle"
                , GetCycle_function_type( &::CBaseAnimating::GetCycle ) );
        
        }
        { //::CBaseAnimating::GetEntryNode
        
            typedef int ( ::CBaseAnimating::*GetEntryNode_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetEntryNode"
                , GetEntryNode_function_type( &::CBaseAnimating::GetEntryNode )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetEntryVelocity
        
            typedef float ( ::CBaseAnimating::*GetEntryVelocity_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetEntryVelocity"
                , GetEntryVelocity_function_type( &::CBaseAnimating::GetEntryVelocity )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetExitNode
        
            typedef int ( ::CBaseAnimating::*GetExitNode_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetExitNode"
                , GetExitNode_function_type( &::CBaseAnimating::GetExitNode )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetExitVelocity
        
            typedef float ( ::CBaseAnimating::*GetExitVelocity_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetExitVelocity"
                , GetExitVelocity_function_type( &::CBaseAnimating::GetExitVelocity )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetEyeballs
        
            typedef void ( ::CBaseAnimating::*GetEyeballs_function_type )( ::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetEyeballs"
                , GetEyeballs_function_type( &::CBaseAnimating::GetEyeballs )
                , ( bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBaseAnimating::GetFlexControllerName
        
            typedef char const * ( ::CBaseAnimating::*GetFlexControllerName_function_type )( ::LocalFlexController_t ) ;
            
            CBaseAnimating_exposer.def( 
                "GetFlexControllerName"
                , GetFlexControllerName_function_type( &::CBaseAnimating::GetFlexControllerName )
                , ( bp::arg("iFlexController") ) );
        
        }
        { //::CBaseAnimating::GetFlexControllerType
        
            typedef char const * ( ::CBaseAnimating::*GetFlexControllerType_function_type )( ::LocalFlexController_t ) ;
            
            CBaseAnimating_exposer.def( 
                "GetFlexControllerType"
                , GetFlexControllerType_function_type( &::CBaseAnimating::GetFlexControllerType )
                , ( bp::arg("iFlexController") ) );
        
        }
        { //::CBaseAnimating::GetFlexDescFacs
        
            typedef char const * ( ::CBaseAnimating::*GetFlexDescFacs_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetFlexDescFacs"
                , GetFlexDescFacs_function_type( &::CBaseAnimating::GetFlexDescFacs )
                , ( bp::arg("iFlexDesc") ) );
        
        }
        { //::CBaseAnimating::GetFrozenAmount
        
            typedef float ( ::CBaseAnimating::*GetFrozenAmount_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetFrozenAmount"
                , GetFrozenAmount_function_type( &::CBaseAnimating::GetFrozenAmount ) );
        
        }
        { //::CBaseAnimating::GetFrozenThawRate
        
            typedef float ( ::CBaseAnimating::*GetFrozenThawRate_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetFrozenThawRate"
                , GetFrozenThawRate_function_type( &::CBaseAnimating::GetFrozenThawRate ) );
        
        }
        { //::CBaseAnimating::GetGroundSpeedVelocity
        
            typedef ::Vector ( ::CBaseAnimating::*GetGroundSpeedVelocity_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetGroundSpeedVelocity"
                , GetGroundSpeedVelocity_function_type( &::CBaseAnimating::GetGroundSpeedVelocity ) );
        
        }
        { //::CBaseAnimating::GetHitboxBone
        
            typedef int ( ::CBaseAnimating::*GetHitboxBone_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetHitboxBone"
                , GetHitboxBone_function_type( &::CBaseAnimating::GetHitboxBone )
                , ( bp::arg("hitboxIndex") ) );
        
        }
        { //::CBaseAnimating::GetHitboxSet
        
            typedef int ( ::CBaseAnimating::*GetHitboxSet_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetHitboxSet"
                , GetHitboxSet_function_type( &::CBaseAnimating::GetHitboxSet ) );
        
        }
        { //::CBaseAnimating::GetHitboxSetCount
        
            typedef int ( ::CBaseAnimating::*GetHitboxSetCount_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetHitboxSetCount"
                , GetHitboxSetCount_function_type( &::CBaseAnimating::GetHitboxSetCount ) );
        
        }
        { //::CBaseAnimating::GetHitboxSetName
        
            typedef char const * ( ::CBaseAnimating::*GetHitboxSetName_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetHitboxSetName"
                , GetHitboxSetName_function_type( &::CBaseAnimating::GetHitboxSetName ) );
        
        }
        { //::CBaseAnimating::GetHitboxesFrontside
        
            typedef int ( ::CBaseAnimating::*GetHitboxesFrontside_function_type )( int *,int,::Vector const &,float ) ;
            
            CBaseAnimating_exposer.def( 
                "GetHitboxesFrontside"
                , GetHitboxesFrontside_function_type( &::CBaseAnimating::GetHitboxesFrontside )
                , ( bp::arg("boxList"), bp::arg("boxMax"), bp::arg("normal"), bp::arg("dist") ) );
        
        }
        { //::CBaseAnimating::GetIdealAccel
        
            typedef float ( ::CBaseAnimating::*GetIdealAccel_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetIdealAccel"
                , GetIdealAccel_function_type( &::CBaseAnimating::GetIdealAccel ) );
        
        }
        { //::CBaseAnimating::GetIdealSpeed
        
            typedef float ( ::CBaseAnimating::*GetIdealSpeed_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetIdealSpeed"
                , GetIdealSpeed_function_type( &::CBaseAnimating::GetIdealSpeed ) );
        
        }
        { //::CBaseAnimating::GetInstantaneousVelocity
        
            typedef float ( ::CBaseAnimating::*GetInstantaneousVelocity_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "GetInstantaneousVelocity"
                , GetInstantaneousVelocity_function_type( &::CBaseAnimating::GetInstantaneousVelocity )
                , ( bp::arg("flInterval")=0.0 ) );
        
        }
        { //::CBaseAnimating::GetIntervalMovement
        
            typedef boost::python::tuple ( *GetIntervalMovement_function_type )( ::CBaseAnimating &,float,::Vector &,::QAngle & );
            
            CBaseAnimating_exposer.def( 
                "GetIntervalMovement"
                , GetIntervalMovement_function_type( &CBaseAnimating_wrapper::GetIntervalMovement )
                , ( bp::arg("inst"), bp::arg("flIntervalUsed"), bp::arg("newPosition"), bp::arg("newAngles") ) );
        
        }
        { //::CBaseAnimating::GetLastVisibleCycle
        
            typedef float ( ::CBaseAnimating::*GetLastVisibleCycle_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetLastVisibleCycle"
                , GetLastVisibleCycle_function_type( &::CBaseAnimating::GetLastVisibleCycle )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetLightingOrigin
        
            typedef ::CBaseEntity * ( ::CBaseAnimating::*GetLightingOrigin_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetLightingOrigin"
                , GetLightingOrigin_function_type( &::CBaseAnimating::GetLightingOrigin )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseAnimating::GetLightingOriginRelative
        
            typedef ::CBaseEntity * ( ::CBaseAnimating::*GetLightingOriginRelative_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetLightingOriginRelative"
                , GetLightingOriginRelative_function_type( &::CBaseAnimating::GetLightingOriginRelative )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseAnimating::GetModelPtr
        
            typedef ::CStudioHdr * ( ::CBaseAnimating::*GetModelPtr_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetModelPtr"
                , GetModelPtr_function_type( &::CBaseAnimating::GetModelPtr )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CBaseAnimating::GetModelScale
        
            typedef float ( ::CBaseAnimating::*GetModelScale_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetModelScale"
                , GetModelScale_function_type( &::CBaseAnimating::GetModelScale ) );
        
        }
        { //::CBaseAnimating::GetMovementFrame
        
            typedef float ( ::CBaseAnimating::*GetMovementFrame_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "GetMovementFrame"
                , GetMovementFrame_function_type( &::CBaseAnimating::GetMovementFrame )
                , ( bp::arg("flDist") ) );
        
        }
        { //::CBaseAnimating::GetNumBodyGroups
        
            typedef int ( ::CBaseAnimating::*GetNumBodyGroups_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetNumBodyGroups"
                , GetNumBodyGroups_function_type( &::CBaseAnimating::GetNumBodyGroups ) );
        
        }
        { //::CBaseAnimating::GetNumBones
        
            typedef int ( ::CBaseAnimating::*GetNumBones_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetNumBones"
                , GetNumBones_function_type( &::CBaseAnimating::GetNumBones ) );
        
        }
        { //::CBaseAnimating::GetNumFlexControllers
        
            typedef ::LocalFlexController_t ( ::CBaseAnimating::*GetNumFlexControllers_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetNumFlexControllers"
                , GetNumFlexControllers_function_type( &::CBaseAnimating::GetNumFlexControllers ) );
        
        }
        { //::CBaseAnimating::GetPhysicsBone
        
            typedef int ( ::CBaseAnimating::*GetPhysicsBone_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetPhysicsBone"
                , GetPhysicsBone_function_type( &::CBaseAnimating::GetPhysicsBone )
                , ( bp::arg("boneIndex") ) );
        
        }
        { //::CBaseAnimating::GetPlaybackRate
        
            typedef float ( ::CBaseAnimating::*GetPlaybackRate_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetPlaybackRate"
                , GetPlaybackRate_function_type( &::CBaseAnimating::GetPlaybackRate ) );
        
        }
        { //::CBaseAnimating::GetPoseParameter
        
            typedef float ( ::CBaseAnimating::*GetPoseParameter_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "GetPoseParameter"
                , GetPoseParameter_function_type( &::CBaseAnimating::GetPoseParameter )
                , ( bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::GetPoseParameter
        
            typedef float ( ::CBaseAnimating::*GetPoseParameter_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetPoseParameter"
                , GetPoseParameter_function_type( &::CBaseAnimating::GetPoseParameter )
                , ( bp::arg("iParameter") ) );
        
        }
        { //::CBaseAnimating::GetPoseParameterRange
        
            typedef boost::python::tuple ( *GetPoseParameterRange_function_type )( ::CBaseAnimating &,int );
            
            CBaseAnimating_exposer.def( 
                "GetPoseParameterRange"
                , GetPoseParameterRange_function_type( &CBaseAnimating_wrapper::GetPoseParameterRange )
                , ( bp::arg("inst"), bp::arg("index") ) );
        
        }
        { //::CBaseAnimating::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBaseAnimating_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBaseAnimating::GetPyNetworkType ) );
        
        }
        { //::CBaseAnimating::GetSequence
        
            typedef int ( ::CBaseAnimating::*GetSequence_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequence"
                , GetSequence_function_type( &::CBaseAnimating::GetSequence ) );
        
        }
        { //::CBaseAnimating::GetSequenceActivity
        
            typedef ::Activity ( ::CBaseAnimating::*GetSequenceActivity_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceActivity"
                , GetSequenceActivity_function_type( &::CBaseAnimating::GetSequenceActivity )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceActivityName
        
            typedef char const * ( ::CBaseAnimating::*GetSequenceActivityName_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceActivityName"
                , GetSequenceActivityName_function_type( &::CBaseAnimating::GetSequenceActivityName )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceCycleRate
        
            typedef float ( ::CBaseAnimating::*GetSequenceCycleRate_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceCycleRate"
                , GetSequenceCycleRate_function_type( &::CBaseAnimating::GetSequenceCycleRate )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceCycleRate
        
            typedef float ( ::CBaseAnimating::*GetSequenceCycleRate_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceCycleRate"
                , GetSequenceCycleRate_function_type( &::CBaseAnimating::GetSequenceCycleRate )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceGroundSpeed
        
            typedef float ( ::CBaseAnimating::*GetSequenceGroundSpeed_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceGroundSpeed"
                , GetSequenceGroundSpeed_function_type( &::CBaseAnimating::GetSequenceGroundSpeed )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceGroundSpeed
        
            typedef float ( ::CBaseAnimating::*GetSequenceGroundSpeed_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceGroundSpeed"
                , GetSequenceGroundSpeed_function_type( &::CBaseAnimating::GetSequenceGroundSpeed )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceKeyValues
        
            typedef ::KeyValues * ( ::CBaseAnimating::*GetSequenceKeyValues_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceKeyValues"
                , GetSequenceKeyValues_function_type( &::CBaseAnimating::GetSequenceKeyValues )
                , ( bp::arg("iSequence") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseAnimating::GetSequenceLinearMotion
        
            typedef void ( ::CBaseAnimating::*GetSequenceLinearMotion_function_type )( int,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceLinearMotion"
                , GetSequenceLinearMotion_function_type( &::CBaseAnimating::GetSequenceLinearMotion )
                , ( bp::arg("iSequence"), bp::arg("pVec") ) );
        
        }
        { //::CBaseAnimating::GetSequenceMoveDist
        
            typedef float ( ::CBaseAnimating::*GetSequenceMoveDist_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceMoveDist"
                , GetSequenceMoveDist_function_type( &::CBaseAnimating::GetSequenceMoveDist )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceMoveDist
        
            typedef float ( ::CBaseAnimating::*GetSequenceMoveDist_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceMoveDist"
                , GetSequenceMoveDist_function_type( &::CBaseAnimating::GetSequenceMoveDist )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceMoveYaw
        
            typedef float ( ::CBaseAnimating::*GetSequenceMoveYaw_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceMoveYaw"
                , GetSequenceMoveYaw_function_type( &::CBaseAnimating::GetSequenceMoveYaw )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSequenceMovement
        
            typedef bool ( ::CBaseAnimating::*GetSequenceMovement_function_type )( int,float,float,::Vector &,::QAngle & ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceMovement"
                , GetSequenceMovement_function_type( &::CBaseAnimating::GetSequenceMovement )
                , ( bp::arg("nSequence"), bp::arg("fromCycle"), bp::arg("toCycle"), bp::arg("deltaPosition"), bp::arg("deltaAngles") ) );
        
        }
        { //::CBaseAnimating::GetSequenceName
        
            typedef char const * ( ::CBaseAnimating::*GetSequenceName_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSequenceName"
                , GetSequenceName_function_type( &::CBaseAnimating::GetSequenceName )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::GetSkeleton
        
            typedef void ( ::CBaseAnimating::*GetSkeleton_function_type )( ::CStudioHdr *,::Vector *,::QuaternionAligned *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "GetSkeleton"
                , GetSkeleton_function_type( &::CBaseAnimating::GetSkeleton )
                , ( bp::arg("pStudioHdr"), bp::arg("pos"), bp::arg("q"), bp::arg("boneMask") ) );
        
        }
        { //::CBaseAnimating::GetStepAngles
        
            typedef ::QAngle ( ::CBaseAnimating::*GetStepAngles_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetStepAngles"
                , GetStepAngles_function_type( &::CBaseAnimating::GetStepAngles ) );
        
        }
        { //::CBaseAnimating::GetStepOrigin
        
            typedef ::Vector ( ::CBaseAnimating::*GetStepOrigin_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "GetStepOrigin"
                , GetStepOrigin_function_type( &::CBaseAnimating::GetStepOrigin ) );
        
        }
        { //::CBaseAnimating::GetVelocity
        
            typedef void ( ::CBaseAnimating::*GetVelocity_function_type )( ::Vector *,::AngularImpulse * ) ;
            
            CBaseAnimating_exposer.def( 
                "GetVelocity"
                , GetVelocity_function_type( &::CBaseAnimating::GetVelocity )
                , ( bp::arg("vVelocity"), bp::arg("vAngVelocity") ) );
        
        }
        { //::CBaseAnimating::GotoSequence
        
            typedef boost::python::tuple ( *GotoSequence_function_type )( ::CBaseAnimating &,int,float,float,int );
            
            CBaseAnimating_exposer.def( 
                "GotoSequence"
                , GotoSequence_function_type( &CBaseAnimating_wrapper::GotoSequence )
                , ( bp::arg("inst"), bp::arg("iCurrentSequence"), bp::arg("flCurrentCycle"), bp::arg("flCurrentRate"), bp::arg("iGoalSequence") ) );
        
        }
        { //::CBaseAnimating::HandleAnimEvent
        
            typedef void ( ::CBaseAnimating::*HandleAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBaseAnimating_exposer.def( 
                "HandleAnimEvent"
                , HandleAnimEvent_function_type( &::CBaseAnimating::HandleAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBaseAnimating::HandleBehaviorAnimEvent
        
            typedef bool ( ::CBaseAnimating::*HandleBehaviorAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBaseAnimating_exposer.def( 
                "HandleBehaviorAnimEvent"
                , HandleBehaviorAnimEvent_function_type( &::CBaseAnimating::HandleBehaviorAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBaseAnimating::HandleScriptedAnimEvent
        
            typedef bool ( ::CBaseAnimating::*HandleScriptedAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBaseAnimating_exposer.def( 
                "HandleScriptedAnimEvent"
                , HandleScriptedAnimEvent_function_type( &::CBaseAnimating::HandleScriptedAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBaseAnimating::HasAnimEvent
        
            typedef bool ( ::CBaseAnimating::*HasAnimEvent_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "HasAnimEvent"
                , HasAnimEvent_function_type( &::CBaseAnimating::HasAnimEvent )
                , ( bp::arg("nSequence"), bp::arg("nEvent") ) );
        
        }
        { //::CBaseAnimating::HasMovement
        
            typedef bool ( ::CBaseAnimating::*HasMovement_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "HasMovement"
                , HasMovement_function_type( &::CBaseAnimating::HasMovement )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::HasPoseParameter
        
            typedef bool ( ::CBaseAnimating::*HasPoseParameter_function_type )( int,char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "HasPoseParameter"
                , HasPoseParameter_function_type( &::CBaseAnimating::HasPoseParameter )
                , ( bp::arg("iSequence"), bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::HasPoseParameter
        
            typedef bool ( ::CBaseAnimating::*HasPoseParameter_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "HasPoseParameter"
                , HasPoseParameter_function_type( &::CBaseAnimating::HasPoseParameter )
                , ( bp::arg("iSequence"), bp::arg("iParameter") ) );
        
        }
        { //::CBaseAnimating::Ignite
        
            typedef void ( ::CBaseAnimating::*Ignite_function_type )( float,bool,float,bool ) ;
            
            CBaseAnimating_exposer.def( 
                "Ignite"
                , Ignite_function_type( &::CBaseAnimating::Ignite )
                , ( bp::arg("flFlameLifetime"), bp::arg("bNPCOnly")=(bool)(true), bp::arg("flSize")=0.0f, bp::arg("bCalledByLevelDesigner")=(bool)(false) ) );
        
        }
        { //::CBaseAnimating::IgniteLifetime
        
            typedef void ( ::CBaseAnimating::*IgniteLifetime_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "IgniteLifetime"
                , IgniteLifetime_function_type( &::CBaseAnimating::IgniteLifetime )
                , ( bp::arg("flFlameLifetime") ) );
        
        }
        { //::CBaseAnimating::IgniteUseCheapEffect
        
            typedef void ( ::CBaseAnimating::*IgniteUseCheapEffect_function_type )( bool ) ;
            
            CBaseAnimating_exposer.def( 
                "IgniteUseCheapEffect"
                , IgniteUseCheapEffect_function_type( &::CBaseAnimating::IgniteUseCheapEffect )
                , ( bp::arg("bUseCheapEffect") ) );
        
        }
        { //::CBaseAnimating::InitBoneControllers
        
            typedef void ( ::CBaseAnimating::*InitBoneControllers_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "InitBoneControllers"
                , InitBoneControllers_function_type( &::CBaseAnimating::InitBoneControllers ) );
        
        }
        { //::CBaseAnimating::InitStepHeightAdjust
        
            typedef void ( ::CBaseAnimating::*InitStepHeightAdjust_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "InitStepHeightAdjust"
                , InitStepHeightAdjust_function_type( &::CBaseAnimating::InitStepHeightAdjust ) );
        
        }
        { //::CBaseAnimating::InputBecomeRagdoll
        
            typedef void ( ::CBaseAnimating::*InputBecomeRagdoll_function_type )( ::inputdata_t & ) ;
            
            CBaseAnimating_exposer.def( 
                "InputBecomeRagdoll"
                , InputBecomeRagdoll_function_type( &::CBaseAnimating::InputBecomeRagdoll )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseAnimating::InputIgnite
        
            typedef void ( ::CBaseAnimating::*InputIgnite_function_type )( ::inputdata_t & ) ;
            
            CBaseAnimating_exposer.def( 
                "InputIgnite"
                , InputIgnite_function_type( &::CBaseAnimating::InputIgnite )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseAnimating::InputIgniteLifetime
        
            typedef void ( ::CBaseAnimating::*InputIgniteLifetime_function_type )( ::inputdata_t & ) ;
            
            CBaseAnimating_exposer.def( 
                "InputIgniteLifetime"
                , InputIgniteLifetime_function_type( &::CBaseAnimating::InputIgniteLifetime )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseAnimating::InvalidateBoneCache
        
            typedef void ( ::CBaseAnimating::*InvalidateBoneCache_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "InvalidateBoneCache"
                , InvalidateBoneCache_function_type( &::CBaseAnimating::InvalidateBoneCache ) );
        
        }
        { //::CBaseAnimating::InvalidateBoneCacheIfOlderThan
        
            typedef void ( ::CBaseAnimating::*InvalidateBoneCacheIfOlderThan_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "InvalidateBoneCacheIfOlderThan"
                , InvalidateBoneCacheIfOlderThan_function_type( &::CBaseAnimating::InvalidateBoneCacheIfOlderThan )
                , ( bp::arg("deltaTime") ) );
        
        }
        { //::CBaseAnimating::InvalidateMdlCache
        
            typedef void ( ::CBaseAnimating::*InvalidateMdlCache_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "InvalidateMdlCache"
                , InvalidateMdlCache_function_type( &::CBaseAnimating::InvalidateMdlCache ) );
        
        }
        { //::CBaseAnimating::IsActivityFinished
        
            typedef bool ( ::CBaseAnimating::*IsActivityFinished_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsActivityFinished"
                , IsActivityFinished_function_type( &::CBaseAnimating::IsActivityFinished ) );
        
        }
        { //::CBaseAnimating::IsDissolving
        
            typedef bool ( ::CBaseAnimating::*IsDissolving_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsDissolving"
                , IsDissolving_function_type( &::CBaseAnimating::IsDissolving ) );
        
        }
        { //::CBaseAnimating::IsFrozen
        
            typedef bool ( ::CBaseAnimating::*IsFrozen_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsFrozen"
                , IsFrozen_function_type( &::CBaseAnimating::IsFrozen ) );
        
        }
        { //::CBaseAnimating::IsOnFire
        
            typedef bool ( ::CBaseAnimating::*IsOnFire_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsOnFire"
                , IsOnFire_function_type( &::CBaseAnimating::IsOnFire ) );
        
        }
        { //::CBaseAnimating::IsRagdoll
        
            typedef bool ( ::CBaseAnimating::*IsRagdoll_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsRagdoll"
                , IsRagdoll_function_type( &::CBaseAnimating::IsRagdoll ) );
        
        }
        { //::CBaseAnimating::IsSequenceFinished
        
            typedef bool ( ::CBaseAnimating::*IsSequenceFinished_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsSequenceFinished"
                , IsSequenceFinished_function_type( &::CBaseAnimating::IsSequenceFinished ) );
        
        }
        { //::CBaseAnimating::IsSequenceLooping
        
            typedef bool ( ::CBaseAnimating::*IsSequenceLooping_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "IsSequenceLooping"
                , IsSequenceLooping_function_type( &::CBaseAnimating::IsSequenceLooping )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::IsSequenceLooping
        
            typedef bool ( ::CBaseAnimating::*IsSequenceLooping_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "IsSequenceLooping"
                , IsSequenceLooping_function_type( &::CBaseAnimating::IsSequenceLooping )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::IsUsingClientSideAnimation
        
            typedef bool ( ::CBaseAnimating::*IsUsingClientSideAnimation_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "IsUsingClientSideAnimation"
                , IsUsingClientSideAnimation_function_type( &::CBaseAnimating::IsUsingClientSideAnimation ) );
        
        }
        { //::CBaseAnimating::IsValidSequence
        
            typedef bool ( ::CBaseAnimating::*IsValidSequence_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "IsValidSequence"
                , IsValidSequence_function_type( &::CBaseAnimating::IsValidSequence )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::IsViewModel
        
            typedef bool ( ::CBaseAnimating::*IsViewModel_function_type )(  ) const;
            
            CBaseAnimating_exposer.def( 
                "IsViewModel"
                , IsViewModel_function_type( &::CBaseAnimating::IsViewModel ) );
        
        }
        { //::CBaseAnimating::LookupActivity
        
            typedef int ( ::CBaseAnimating::*LookupActivity_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupActivity"
                , LookupActivity_function_type( &::CBaseAnimating::LookupActivity )
                , ( bp::arg("label") ) );
        
        }
        { //::CBaseAnimating::LookupAttachment
        
            typedef int ( ::CBaseAnimating::*LookupAttachment_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupAttachment"
                , LookupAttachment_function_type( &::CBaseAnimating::LookupAttachment )
                , ( bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::LookupBone
        
            typedef int ( ::CBaseAnimating::*LookupBone_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupBone"
                , LookupBone_function_type( &::CBaseAnimating::LookupBone )
                , ( bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::LookupHitbox
        
            typedef boost::python::tuple ( *LookupHitbox_function_type )( ::CBaseAnimating &,char const * );
            
            CBaseAnimating_exposer.def( 
                "LookupHitbox"
                , LookupHitbox_function_type( &CBaseAnimating_wrapper::LookupHitbox )
                , ( bp::arg("inst"), bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::LookupPoseParameter
        
            typedef int ( ::CBaseAnimating::*LookupPoseParameter_function_type )( ::CStudioHdr *,char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupPoseParameter"
                , LookupPoseParameter_function_type( &::CBaseAnimating::LookupPoseParameter )
                , ( bp::arg("pStudioHdr"), bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::LookupPoseParameter
        
            typedef int ( ::CBaseAnimating::*LookupPoseParameter_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupPoseParameter"
                , LookupPoseParameter_function_type( &::CBaseAnimating::LookupPoseParameter )
                , ( bp::arg("szName") ) );
        
        }
        { //::CBaseAnimating::LookupSequence
        
            typedef int ( ::CBaseAnimating::*LookupSequence_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "LookupSequence"
                , LookupSequence_function_type( &::CBaseAnimating::LookupSequence )
                , ( bp::arg("label") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CBaseAnimating_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBaseAnimating_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBaseAnimating_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseAnimating::OnRestore
        
            typedef void ( ::CBaseAnimating::*OnRestore_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "OnRestore"
                , OnRestore_function_type( &::CBaseAnimating::OnRestore ) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CBaseAnimating_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CBaseAnimating_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseAnimating::Precache
        
            typedef void ( ::CBaseAnimating::*Precache_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_Precache_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseAnimating::Precache)
                , default_Precache_function_type(&CBaseAnimating_wrapper::default_Precache) );
        
        }
        { //::CBaseAnimating::PrefetchSequence
        
            typedef bool ( ::CBaseAnimating::*PrefetchSequence_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "PrefetchSequence"
                , PrefetchSequence_function_type( &::CBaseAnimating::PrefetchSequence )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CBaseAnimating_wrapper::*OnNewModel_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CBaseAnimating_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseAnimating::PySetModel
        
            typedef void ( ::CBaseAnimating::*SetModel_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "SetModel"
                , SetModel_function_type( &::CBaseAnimating::PySetModel )
                , ( bp::arg("szModelName") ) );
        
        }
        { //::CBaseAnimating::RandomizeBodygroups
        
            typedef void ( ::CBaseAnimating::*RandomizeBodygroups_function_type )( ::CUtlVector< char const*, CUtlMemory< char const*, int > > & ) ;
            
            CBaseAnimating_exposer.def( 
                "RandomizeBodygroups"
                , RandomizeBodygroups_function_type( &::CBaseAnimating::RandomizeBodygroups )
                , ( bp::arg("groups") ) );
        
        }
        { //::CBaseAnimating::ReachedEndOfSequence
        
            typedef void ( ::CBaseAnimating::*ReachedEndOfSequence_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ReachedEndOfSequence"
                , ReachedEndOfSequence_function_type( &::CBaseAnimating::ReachedEndOfSequence ) );
        
        }
        { //::CBaseAnimating::RegisterPrivateActivity
        
            typedef int ( ::CBaseAnimating::*RegisterPrivateActivity_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "RegisterPrivateActivity"
                , RegisterPrivateActivity_function_type( &::CBaseAnimating::RegisterPrivateActivity )
                , ( bp::arg("pszActivityName") ) );
        
        }
        { //::CBaseAnimating::ReportMissingActivity
        
            typedef void ( ::CBaseAnimating::*ReportMissingActivity_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "ReportMissingActivity"
                , ReportMissingActivity_function_type( &::CBaseAnimating::ReportMissingActivity )
                , ( bp::arg("iActivity") ) );
        
        }
        { //::CBaseAnimating::ResetActivityIndexes
        
            typedef void ( ::CBaseAnimating::*ResetActivityIndexes_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ResetActivityIndexes"
                , ResetActivityIndexes_function_type( &::CBaseAnimating::ResetActivityIndexes ) );
        
        }
        { //::CBaseAnimating::ResetClientsideFrame
        
            typedef void ( ::CBaseAnimating::*ResetClientsideFrame_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ResetClientsideFrame"
                , ResetClientsideFrame_function_type( &::CBaseAnimating::ResetClientsideFrame ) );
        
        }
        { //::CBaseAnimating::ResetEventIndexes
        
            typedef void ( ::CBaseAnimating::*ResetEventIndexes_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ResetEventIndexes"
                , ResetEventIndexes_function_type( &::CBaseAnimating::ResetEventIndexes ) );
        
        }
        { //::CBaseAnimating::ResetSequence
        
            typedef void ( ::CBaseAnimating::*ResetSequence_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "ResetSequence"
                , ResetSequence_function_type( &::CBaseAnimating::ResetSequence )
                , ( bp::arg("nSequence") ) );
        
        }
        { //::CBaseAnimating::ResetSequenceInfo
        
            typedef void ( ::CBaseAnimating::*ResetSequenceInfo_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ResetSequenceInfo"
                , ResetSequenceInfo_function_type( &::CBaseAnimating::ResetSequenceInfo ) );
        
        }
        { //::CBaseAnimating::Scorch
        
            typedef void ( ::CBaseAnimating::*Scorch_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "Scorch"
                , Scorch_function_type( &::CBaseAnimating::Scorch )
                , ( bp::arg("rate"), bp::arg("floor") ) );
        
        }
        { //::CBaseAnimating::ScriptGetAttachmentAngles
        
            typedef ::Vector const & ( ::CBaseAnimating::*ScriptGetAttachmentAngles_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "ScriptGetAttachmentAngles"
                , ScriptGetAttachmentAngles_function_type( &::CBaseAnimating::ScriptGetAttachmentAngles )
                , ( bp::arg("iAttachment") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseAnimating::ScriptGetAttachmentOrigin
        
            typedef ::Vector const & ( ::CBaseAnimating::*ScriptGetAttachmentOrigin_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "ScriptGetAttachmentOrigin"
                , ScriptGetAttachmentOrigin_function_type( &::CBaseAnimating::ScriptGetAttachmentOrigin )
                , ( bp::arg("iAttachment") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseAnimating::SelectHeaviestSequence
        
            typedef int ( ::CBaseAnimating::*SelectHeaviestSequence_function_type )( ::Activity ) ;
            
            CBaseAnimating_exposer.def( 
                "SelectHeaviestSequence"
                , SelectHeaviestSequence_function_type( &::CBaseAnimating::SelectHeaviestSequence )
                , ( bp::arg("activity") ) );
        
        }
        { //::CBaseAnimating::SelectWeightedSequence
        
            typedef int ( ::CBaseAnimating::*SelectWeightedSequence_function_type )( ::Activity ) ;
            
            CBaseAnimating_exposer.def( 
                "SelectWeightedSequence"
                , SelectWeightedSequence_function_type( &::CBaseAnimating::SelectWeightedSequence )
                , ( bp::arg("activity") ) );
        
        }
        { //::CBaseAnimating::SelectWeightedSequence
        
            typedef int ( ::CBaseAnimating::*SelectWeightedSequence_function_type )( ::Activity,int ) ;
            
            CBaseAnimating_exposer.def( 
                "SelectWeightedSequence"
                , SelectWeightedSequence_function_type( &::CBaseAnimating::SelectWeightedSequence )
                , ( bp::arg("activity"), bp::arg("curSequence") ) );
        
        }
        { //::CBaseAnimating::SelectWeightedSequenceFromModifiers
        
            typedef int ( ::CBaseAnimating::*SelectWeightedSequenceFromModifiers_function_type )( ::Activity,::CUtlSymbol *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "SelectWeightedSequenceFromModifiers"
                , SelectWeightedSequenceFromModifiers_function_type( &::CBaseAnimating::SelectWeightedSequenceFromModifiers )
                , ( bp::arg("activity"), bp::arg("pActivityModifiers"), bp::arg("iModifierCount") ) );
        
        }
        { //::CBaseAnimating::SequenceDuration
        
            typedef float ( ::CBaseAnimating::*SequenceDuration_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "SequenceDuration"
                , SequenceDuration_function_type( &::CBaseAnimating::SequenceDuration ) );
        
        }
        { //::CBaseAnimating::SequenceDuration
        
            typedef float ( ::CBaseAnimating::*SequenceDuration_function_type )( ::CStudioHdr *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "SequenceDuration"
                , SequenceDuration_function_type( &::CBaseAnimating::SequenceDuration )
                , ( bp::arg("pStudioHdr"), bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::SequenceDuration
        
            typedef float ( ::CBaseAnimating::*SequenceDuration_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "SequenceDuration"
                , SequenceDuration_function_type( &::CBaseAnimating::SequenceDuration )
                , ( bp::arg("iSequence") ) );
        
        }
        { //::CBaseAnimating::SequenceLoops
        
            typedef bool ( ::CBaseAnimating::*SequenceLoops_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "SequenceLoops"
                , SequenceLoops_function_type( &::CBaseAnimating::SequenceLoops ) );
        
        }
        { //::CBaseAnimating::SetBodygroup
        
            typedef void ( ::CBaseAnimating::*SetBodygroup_function_type )( int,int ) ;
            
            CBaseAnimating_exposer.def( 
                "SetBodygroup"
                , SetBodygroup_function_type( &::CBaseAnimating::SetBodygroup )
                , ( bp::arg("iGroup"), bp::arg("iValue") ) );
        
        }
        { //::CBaseAnimating::SetBoneCacheFlags
        
            typedef void ( ::CBaseAnimating::*SetBoneCacheFlags_function_type )( short unsigned int ) ;
            
            CBaseAnimating_exposer.def( 
                "SetBoneCacheFlags"
                , SetBoneCacheFlags_function_type( &::CBaseAnimating::SetBoneCacheFlags )
                , ( bp::arg("fFlag") ) );
        
        }
        { //::CBaseAnimating::SetBoneController
        
            typedef float ( ::CBaseAnimating::*SetBoneController_function_type )( int,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetBoneController"
                , SetBoneController_function_type( &::CBaseAnimating::SetBoneController )
                , ( bp::arg("iController"), bp::arg("flValue") ) );
        
        }
        { //::CBaseAnimating::SetCycle
        
            typedef void ( ::CBaseAnimating::*SetCycle_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetCycle"
                , SetCycle_function_type( &::CBaseAnimating::SetCycle )
                , ( bp::arg("flCycle") ) );
        
        }
        { //::CBaseAnimating::SetFadeDistance
        
            typedef void ( ::CBaseAnimating::*SetFadeDistance_function_type )( float,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetFadeDistance"
                , SetFadeDistance_function_type( &::CBaseAnimating::SetFadeDistance )
                , ( bp::arg("minFadeDist"), bp::arg("maxFadeDist") ) );
        
        }
        { //::CBaseAnimating::SetHitboxSet
        
            typedef void ( ::CBaseAnimating::*SetHitboxSet_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "SetHitboxSet"
                , SetHitboxSet_function_type( &::CBaseAnimating::SetHitboxSet )
                , ( bp::arg("setnum") ) );
        
        }
        { //::CBaseAnimating::SetHitboxSetByName
        
            typedef void ( ::CBaseAnimating::*SetHitboxSetByName_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "SetHitboxSetByName"
                , SetHitboxSetByName_function_type( &::CBaseAnimating::SetHitboxSetByName )
                , ( bp::arg("setname") ) );
        
        }
        { //::CBaseAnimating::SetIKGroundContactInfo
        
            typedef void ( ::CBaseAnimating::*SetIKGroundContactInfo_function_type )( float,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetIKGroundContactInfo"
                , SetIKGroundContactInfo_function_type( &::CBaseAnimating::SetIKGroundContactInfo )
                , ( bp::arg("minHeight"), bp::arg("maxHeight") ) );
        
        }
        { //::CBaseAnimating::SetLightingOrigin
        
            typedef void ( ::CBaseAnimating::*SetLightingOrigin_function_type )( ::CBaseEntity * ) ;
            
            CBaseAnimating_exposer.def( 
                "SetLightingOrigin"
                , SetLightingOrigin_function_type( &::CBaseAnimating::SetLightingOrigin )
                , ( bp::arg("pLightingOrigin") ) );
        
        }
        { //::CBaseAnimating::SetLightingOrigin
        
            typedef void ( ::CBaseAnimating::*SetLightingOrigin_function_type )( ::string_t ) ;
            
            CBaseAnimating_exposer.def( 
                "SetLightingOrigin"
                , SetLightingOrigin_function_type( &::CBaseAnimating::SetLightingOrigin )
                , ( bp::arg("strLightingOrigin") ) );
        
        }
        { //::CBaseAnimating::SetLightingOriginRelative
        
            typedef void ( ::CBaseAnimating::*SetLightingOriginRelative_function_type )( ::CBaseEntity * ) ;
            
            CBaseAnimating_exposer.def( 
                "SetLightingOriginRelative"
                , SetLightingOriginRelative_function_type( &::CBaseAnimating::SetLightingOriginRelative )
                , ( bp::arg("pLightingOriginRelative") ) );
        
        }
        { //::CBaseAnimating::SetLightingOriginRelative
        
            typedef void ( ::CBaseAnimating::*SetLightingOriginRelative_function_type )( ::string_t ) ;
            
            CBaseAnimating_exposer.def( 
                "SetLightingOriginRelative"
                , SetLightingOriginRelative_function_type( &::CBaseAnimating::SetLightingOriginRelative )
                , ( bp::arg("strLightingOriginRelative") ) );
        
        }
        { //::CBaseAnimating::SetModelScale
        
            typedef void ( ::CBaseAnimating::*SetModelScale_function_type )( float,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetModelScale"
                , SetModelScale_function_type( &::CBaseAnimating::SetModelScale )
                , ( bp::arg("scale"), bp::arg("change_duration")=0.0f ) );
        
        }
        { //::CBaseAnimating::SetPlaybackRate
        
            typedef void ( ::CBaseAnimating::*SetPlaybackRate_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetPlaybackRate"
                , SetPlaybackRate_function_type( &::CBaseAnimating::SetPlaybackRate )
                , ( bp::arg("rate") ) );
        
        }
        { //::CBaseAnimating::SetPoseParameter
        
            typedef float ( ::CBaseAnimating::*SetPoseParameter_function_type )( ::CStudioHdr *,char const *,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetPoseParameter"
                , SetPoseParameter_function_type( &::CBaseAnimating::SetPoseParameter )
                , ( bp::arg("pStudioHdr"), bp::arg("szName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseAnimating::SetPoseParameter
        
            typedef float ( ::CBaseAnimating::*SetPoseParameter_function_type )( char const *,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetPoseParameter"
                , SetPoseParameter_function_type( &::CBaseAnimating::SetPoseParameter )
                , ( bp::arg("szName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseAnimating::SetPoseParameter
        
            typedef float ( ::CBaseAnimating::*SetPoseParameter_function_type )( ::CStudioHdr *,int,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetPoseParameter"
                , SetPoseParameter_function_type( &::CBaseAnimating::SetPoseParameter )
                , ( bp::arg("pStudioHdr"), bp::arg("iParameter"), bp::arg("flValue") ) );
        
        }
        { //::CBaseAnimating::SetPoseParameter
        
            typedef float ( ::CBaseAnimating::*SetPoseParameter_function_type )( int,float ) ;
            
            CBaseAnimating_exposer.def( 
                "SetPoseParameter"
                , SetPoseParameter_function_type( &::CBaseAnimating::SetPoseParameter )
                , ( bp::arg("iParameter"), bp::arg("flValue") ) );
        
        }
        { //::CBaseAnimating::SetSequence
        
            typedef void ( ::CBaseAnimating::*SetSequence_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "SetSequence"
                , SetSequence_function_type( &::CBaseAnimating::SetSequence )
                , ( bp::arg("nSequence") ) );
        
        }
        { //::CBaseAnimating::SetSequenceBox
        
            typedef void ( ::CBaseAnimating::*SetSequenceBox_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "SetSequenceBox"
                , SetSequenceBox_function_type( &::CBaseAnimating::SetSequenceBox ) );
        
        }
        { //::CBaseAnimating::SetupBones
        
            typedef void ( ::CBaseAnimating::*SetupBones_function_type )( ::matrix3x4a_t *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "SetupBones"
                , SetupBones_function_type( &::CBaseAnimating::SetupBones )
                , ( bp::arg("pBoneToWorld"), bp::arg("boneMask") ) );
        
        }
        { //::CBaseAnimating::Spawn
        
            typedef void ( ::CBaseAnimating::*Spawn_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_Spawn_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseAnimating::Spawn)
                , default_Spawn_function_type(&CBaseAnimating_wrapper::default_Spawn) );
        
        }
        { //::CBaseAnimating::StopAnimation
        
            typedef void ( ::CBaseAnimating::*StopAnimation_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "StopAnimation"
                , StopAnimation_function_type( &::CBaseAnimating::StopAnimation ) );
        
        }
        { //::CBaseAnimating::StudioFrameAdvance
        
            typedef void ( ::CBaseAnimating::*StudioFrameAdvance_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "StudioFrameAdvance"
                , StudioFrameAdvance_function_type( &::CBaseAnimating::StudioFrameAdvance ) );
        
        }
        { //::CBaseAnimating::StudioFrameAdvanceManual
        
            typedef void ( ::CBaseAnimating::*StudioFrameAdvanceManual_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "StudioFrameAdvanceManual"
                , StudioFrameAdvanceManual_function_type( &::CBaseAnimating::StudioFrameAdvanceManual )
                , ( bp::arg("flInterval") ) );
        
        }
        { //::CBaseAnimating::Teleport
        
            typedef void ( ::CBaseAnimating::*Teleport_function_type )( ::Vector const *,::QAngle const *,::Vector const * ) ;
            
            CBaseAnimating_exposer.def( 
                "Teleport"
                , Teleport_function_type( &::CBaseAnimating::Teleport )
                , ( bp::arg("newPosition"), bp::arg("newAngles"), bp::arg("newVelocity") ) );
        
        }
        { //::CBaseAnimating::Thaw
        
            typedef void ( ::CBaseAnimating::*Thaw_function_type )( float ) ;
            
            CBaseAnimating_exposer.def( 
                "Thaw"
                , Thaw_function_type( &::CBaseAnimating::Thaw )
                , ( bp::arg("flThawAmount") ) );
        
        }
        { //::CBaseAnimating::ToggleFreeze
        
            typedef void ( ::CBaseAnimating::*ToggleFreeze_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "ToggleFreeze"
                , ToggleFreeze_function_type( &::CBaseAnimating::ToggleFreeze ) );
        
        }
        { //::CBaseAnimating::TransferDissolveFrom
        
            typedef void ( ::CBaseAnimating::*TransferDissolveFrom_function_type )( ::CBaseAnimating * ) ;
            
            CBaseAnimating_exposer.def( 
                "TransferDissolveFrom"
                , TransferDissolveFrom_function_type( &::CBaseAnimating::TransferDissolveFrom )
                , ( bp::arg("pAnim") ) );
        
        }
        { //::CBaseAnimating::Unfreeze
        
            typedef void ( ::CBaseAnimating::*Unfreeze_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "Unfreeze"
                , Unfreeze_function_type( &::CBaseAnimating::Unfreeze ) );
        
        }
        { //::CBaseAnimating::UpdateModelScale
        
            typedef void ( ::CBaseAnimating::*UpdateModelScale_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "UpdateModelScale"
                , UpdateModelScale_function_type( &::CBaseAnimating::UpdateModelScale ) );
        
        }
        { //::CBaseAnimating::UpdateStepOrigin
        
            typedef void ( ::CBaseAnimating::*UpdateStepOrigin_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "UpdateStepOrigin"
                , UpdateStepOrigin_function_type( &::CBaseAnimating::UpdateStepOrigin ) );
        
        }
        { //::CBaseAnimating::UseClientSideAnimation
        
            typedef void ( ::CBaseAnimating::*UseClientSideAnimation_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "UseClientSideAnimation"
                , UseClientSideAnimation_function_type( &::CBaseAnimating::UseClientSideAnimation ) );
        
        }
        CBaseAnimating_exposer.def_readwrite( "onignite", &CBaseAnimating::m_OnIgnite );
        CBaseAnimating_exposer.def_readwrite( "groundspeed", &CBaseAnimating::m_flGroundSpeed );
        CBaseAnimating_exposer.def_readwrite( "lastevencheck", &CBaseAnimating::m_flLastEventCheck );
        CBaseAnimating_exposer.def_readwrite( "m_flModelScale", &CBaseAnimating::m_flModelScale );
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBaseAnimating_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBaseAnimating_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseAnimating_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CBaseAnimating_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBaseAnimating_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            typedef void ( CBaseAnimating_wrapper::*default_DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBaseAnimating_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseAnimating_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseAnimating_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseAnimating_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBaseAnimating_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseAnimating_wrapper::*default_Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimating_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CBaseAnimating_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CBaseAnimating_wrapper::*default_Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBaseAnimating_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CBaseAnimating_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CBaseAnimating_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CBaseAnimating_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type )(  ) ;
            typedef char const * ( CBaseAnimating_wrapper::*default_GetTracerType_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseAnimating_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimating_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBaseAnimating_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimating_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CBaseAnimating_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimating_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBaseAnimating_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseAnimating_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseAnimating_wrapper::*default_MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseAnimating_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBaseAnimating_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CBaseAnimating_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CBaseAnimating_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CBaseAnimating_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseAnimating_wrapper::*default_OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimating_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseAnimating_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseAnimating_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBaseAnimating_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseAnimating_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseAnimating_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBaseAnimating_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseAnimating_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CBaseAnimating_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBaseAnimating_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseAnimating_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CBaseAnimating_wrapper::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CBaseAnimating_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CBaseAnimating_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type )(  ) ;
            typedef void ( CBaseAnimating_wrapper::*default_UpdateOnRemove_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseAnimating_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::UpdateTransmitState
        
            typedef int ( ::CBaseEntity::*UpdateTransmitState_function_type )(  ) ;
            typedef int ( CBaseAnimating_wrapper::*default_UpdateTransmitState_function_type )(  ) ;
            
            CBaseAnimating_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseEntity::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CBaseAnimating_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseAnimating_wrapper::*default_VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBaseAnimating_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseAnimating_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CBaseAnimating_exposer.staticmethod( "GetPyNetworkType" );
        { //property "skin"[fget=::CBaseAnimating::GetSkin, fset=::CBaseAnimating::SetSkin]
        
            typedef int ( ::CBaseAnimating::*fget )(  ) ;
            typedef void ( ::CBaseAnimating::*fset )( int ) ;
            
            CBaseAnimating_exposer.add_property( 
                "skin"
                , fget( &::CBaseAnimating::GetSkin )
                , fset( &::CBaseAnimating::SetSkin ) );
        
        }
        { //::CBaseAnimating::TestCollision
            
                typedef bool ( ::CBaseAnimating::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( CBaseAnimating_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                CBaseAnimating_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::CBaseAnimating::TestCollision)
                    , default_TestCollision_function_type(&CBaseAnimating_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

