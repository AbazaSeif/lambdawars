// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "boost/python.hpp"
#include "__array_1.pypp.hpp"
#include "cbase.h"
#include "mathlib/vmatrix.h"
#include "utlvector.h"
#include "shareddefs.h"
#include "util.h"
#include "takedamageinfo.h"
#include "baseanimating.h"
#include "BaseAnimatingOverlay.h"
#include "baseflex.h"
#include "basecombatcharacter.h"
#include "basegrenade_shared.h"
#include "player.h"
#include "hl2wars_player.h"
#include "unit_base_shared.h"
#include "unit_sense.h"
#include "wars_func_unit.h"
#include "soundent.h"
#include "gib.h"
#include "Sprite.h"
#include "SpriteTrail.h"
#include "smoke_trail.h"
#include "entityoutput.h"
#include "props.h"
#include "modelentities.h"
#include "triggers.h"
#include "wars_weapon.h"
#include "spark.h"
#include "physics_prop_ragdoll.h"
#include "shared_classnames.h"
#include "npcevent.h"
#include "studio.h"
#include "src_python_entities.h"
#include "isaverestore.h"
#include "saverestore.h"
#include "mapentities_shared.h"
#include "vcollide_parse.h"
#include "hl2wars_player_shared.h"
#include "imouse.h"
#include "props_shared.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "wars_mapboundary.h"
#include "src_python_converters_ents.h"
#include "src_python.h"
#include "tier0/memdbgon.h"
#include "CBasePlayer_pypp.hpp"

namespace bp = boost::python;

struct CBasePlayer_wrapper : CBasePlayer, bp::wrapper< CBasePlayer > {

    CBasePlayer_wrapper( )
    : CBasePlayer( )
      , bp::wrapper< CBasePlayer >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 32>
    pyplusplus_m_szAnimExtension_wrapper( ::CBasePlayer & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 32>( inst.m_szAnimExtension );
    }

    virtual bool BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "BecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling BecomeRagdoll( boost::ref(info), boost::ref(forceVector) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_BecomeRagdoll = this->get_override( "BecomeRagdoll" );
        if( func_BecomeRagdoll.ptr() != Py_None )
            try {
                return func_BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
            }
        else
            return this->CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }
    
    bool default_BecomeRagdoll( ::CTakeDamageInfo const & info, ::Vector const & forceVector ) {
        return CBaseCombatCharacter::BecomeRagdoll( boost::ref(info), boost::ref(forceVector) );
    }

    virtual bool CanBecomeRagdoll(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanBecomeRagdoll: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanBecomeRagdoll(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanBecomeRagdoll = this->get_override( "CanBecomeRagdoll" );
        if( func_CanBecomeRagdoll.ptr() != Py_None )
            try {
                return func_CanBecomeRagdoll(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::CanBecomeRagdoll(  );
            }
        else
            return this->CBaseAnimating::CanBecomeRagdoll(  );
    }
    
    bool default_CanBecomeRagdoll(  ) {
        return CBaseAnimating::CanBecomeRagdoll( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ComputeWorldSpaceSurroundingBox: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
    }

    virtual bool CorpseGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CorpseGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CorpseGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CorpseGib = this->get_override( "CorpseGib" );
        if( func_CorpseGib.ptr() != Py_None )
            try {
                return func_CorpseGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }
    
    bool default_CorpseGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::CorpseGib( boost::ref(info) );
    }

    virtual bool CreateVPhysics(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateVPhysics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateVPhysics(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
            }
        else
            this->CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( boost::python::ptr(pVictim) );
    }

    virtual int DrawDebugTextOverlays(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DrawDebugTextOverlays: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DrawDebugTextOverlays(  ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseAnimating::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseAnimating::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseAnimating::DrawDebugTextOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( boost::python::ptr(pOther) );
    }

    virtual bool Event_Gibbed( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Event_Gibbed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Event_Gibbed( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Event_Gibbed = this->get_override( "Event_Gibbed" );
        if( func_Event_Gibbed.ptr() != Py_None )
            try {
                return func_Event_Gibbed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }
    
    bool default_Event_Gibbed( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::Event_Gibbed( boost::ref(info) );
    }

    virtual ::IMouse * GetIMouse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIMouse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIMouse(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetIMouse(  );
            }
        else
            return this->CBaseEntity::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return CBaseEntity::GetIMouse( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, szValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, flValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, int nValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, nValue ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, nValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, nValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, nValue );
    }
    
    bool default_KeyValue( char const * szKeyName, int nValue ) {
        return CBaseEntity::KeyValue( szKeyName, nValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "KeyValue: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling KeyValue( szKeyName, boost::ref(vecValue) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, boost::ref(vecValue) );
    }

    virtual void ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ModifyOrAppendCriteria: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ModifyOrAppendCriteria( boost::ref(set) ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
            }
        else
            this->CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }
    
    void default_ModifyOrAppendCriteria( ::ResponseRules::CriteriaSet & set ) {
        CBaseAnimating::ModifyOrAppendCriteria( boost::ref(set) );
    }

    virtual void OnChangeOwnerNumber( int old_owner_number ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnChangeOwnerNumber: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnChangeOwnerNumber( old_owner_number ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnChangeOwnerNumber = this->get_override( "OnChangeOwnerNumber" );
        if( func_OnChangeOwnerNumber.ptr() != Py_None )
            try {
                func_OnChangeOwnerNumber( old_owner_number );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
            }
        else
            this->CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }
    
    void default_OnChangeOwnerNumber( int old_owner_number ) {
        CBaseEntity::OnChangeOwnerNumber( old_owner_number );
    }

    virtual void OnSequenceSet( int nOldSequence ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSequenceSet: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSequenceSet( nOldSequence ) of Class: CBaseAnimating\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSequenceSet = this->get_override( "OnSequenceSet" );
        if( func_OnSequenceSet.ptr() != Py_None )
            try {
                func_OnSequenceSet( nOldSequence );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::OnSequenceSet( nOldSequence );
            }
        else
            this->CBaseAnimating::OnSequenceSet( nOldSequence );
    }
    
    void default_OnSequenceSet( int nOldSequence ) {
        CBaseAnimating::OnSequenceSet( nOldSequence );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PassesDamageFilter: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PassesDamageFilter( boost::ref(info) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( boost::ref(info) );
    }

    virtual void PostClientActive(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostClientActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostClientActive(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PostConstructor: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PostConstructor( szClassname ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void PyOnNewModel(  ){
        bp::override func_OnNewModel = this->get_override( "OnNewModel" );
        if( func_OnNewModel.ptr() != Py_None )
            try {
                func_OnNewModel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseAnimating::PyOnNewModel(  );
            }
        else
            this->CBaseAnimating::PyOnNewModel(  );
    }
    
    virtual void default_OnNewModel(  ){
        CBaseAnimating::PyOnNewModel( );
    }

    virtual bool ShouldGib( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldGib: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldGib( boost::ref(info) ) of Class: CBaseCombatCharacter\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldGib = this->get_override( "ShouldGib" );
        if( func_ShouldGib.ptr() != Py_None )
            try {
                return func_ShouldGib( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
            }
        else
            return this->CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }
    
    bool default_ShouldGib( ::CTakeDamageInfo const & info ) {
        return CBaseCombatCharacter::ShouldGib( boost::ref(info) );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StartTouch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StartTouch( boost::python::ptr(pOther) ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( boost::python::ptr(pOther) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
            }
        else
            this->CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( boost::python::ptr(pOther) );
    }

    virtual void StopLoopingSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "StopLoopingSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling StopLoopingSounds(  ) of Class: CBaseEntity\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    virtual ServerClass* GetServerClass() {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetServerClass: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetServerClass(  ) of Class: CBasePlayer\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        ServerClass *pServerClass = SrcPySystem()->Get<ServerClass *>("pyServerClass", GetPyInstance(), NULL, true);
        if( pServerClass )
            return pServerClass;
        return CBasePlayer::GetServerClass();
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                #if defined(_WIN32)
                #if defined(_DEBUG)
                Assert( GetCurrentThreadId() == g_hPythonThreadID );
                #elif defined(PY_CHECKTHREADID)
                if( GetCurrentThreadId() != g_hPythonThreadID )
                    Error( "TestCollision: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
                #endif // _DEBUG/PY_CHECKTHREADID
                #endif // _WIN32
                #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
                if( py_log_overrides.GetBool() )
                    Msg("Calling TestCollision( boost::ref(ray), mask, boost::ref(trace) ) of Class: CBasePlayer\n");
                #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
                bp::override func_TestCollision = this->get_override( "TestCollision" );
                if( func_TestCollision.ptr() != Py_None )
                    try {
                        return func_TestCollision( PyRay_t(ray), mask, boost::ref(trace) );
                    } catch(bp::error_already_set &) {
                        PyErr_Print();
                        return this->CBasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
                    }
                else
                    return this->CBasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }
            
            bool default_TestCollision( ::Ray_t const & ray, unsigned int mask, ::trace_t & trace ) {
                return CBasePlayer::TestCollision( boost::ref(ray), mask, boost::ref(trace) );
            }

};

void register_CBasePlayer_class(){

    { //::CBasePlayer
        typedef bp::class_< CBasePlayer_wrapper, bp::bases< CBaseCombatCharacter >, boost::noncopyable > CBasePlayer_exposer_t;
        CBasePlayer_exposer_t CBasePlayer_exposer = CBasePlayer_exposer_t( "CBasePlayer", bp::no_init );
        bp::scope CBasePlayer_scope( CBasePlayer_exposer );
        CBasePlayer_exposer.def( bp::init< >() );
        { //::CBasePlayer::AbortReload
        
            typedef void ( ::CBasePlayer::*AbortReload_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "AbortReload"
                , AbortReload_function_type( &::CBasePlayer::AbortReload ) );
        
        }
        { //::CBasePlayer::Activate
        
            typedef void ( ::CBasePlayer::*Activate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Activate"
                , Activate_function_type( &::CBasePlayer::Activate ) );
        
        }
        { //::CBasePlayer::ActivateMovementConstraint
        
            typedef void ( ::CBasePlayer::*ActivateMovementConstraint_function_type )( ::CBaseEntity *,::Vector const &,float,float,float,bool ) ;
            
            CBasePlayer_exposer.def( 
                "ActivateMovementConstraint"
                , ActivateMovementConstraint_function_type( &::CBasePlayer::ActivateMovementConstraint )
                , ( bp::arg("pEntity"), bp::arg("vecCenter"), bp::arg("flRadius"), bp::arg("flConstraintWidth"), bp::arg("flSpeedFactor"), bp::arg("constraintPastRadius")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::AddPoints
        
            typedef void ( ::CBasePlayer::*AddPoints_function_type )( int,bool ) ;
            
            CBasePlayer_exposer.def( 
                "AddPoints"
                , AddPoints_function_type( &::CBasePlayer::AddPoints )
                , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) );
        
        }
        { //::CBasePlayer::AddPointsToTeam
        
            typedef void ( ::CBasePlayer::*AddPointsToTeam_function_type )( int,bool ) ;
            
            CBasePlayer_exposer.def( 
                "AddPointsToTeam"
                , AddPointsToTeam_function_type( &::CBasePlayer::AddPointsToTeam )
                , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) );
        
        }
        { //::CBasePlayer::AddSplitScreenPlayer
        
            typedef void ( ::CBasePlayer::*AddSplitScreenPlayer_function_type )( ::CBasePlayer * ) ;
            
            CBasePlayer_exposer.def( 
                "AddSplitScreenPlayer"
                , AddSplitScreenPlayer_function_type( &::CBasePlayer::AddSplitScreenPlayer )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBasePlayer::AddToPlayerSimulationList
        
            typedef void ( ::CBasePlayer::*AddToPlayerSimulationList_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "AddToPlayerSimulationList"
                , AddToPlayerSimulationList_function_type( &::CBasePlayer::AddToPlayerSimulationList )
                , ( bp::arg("other") ) );
        
        }
        { //::CBasePlayer::AdjustDrownDmg
        
            typedef void ( ::CBasePlayer::*AdjustDrownDmg_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "AdjustDrownDmg"
                , AdjustDrownDmg_function_type( &::CBasePlayer::AdjustDrownDmg )
                , ( bp::arg("nAmount") ) );
        
        }
        { //::CBasePlayer::AllowImmediateDecalPainting
        
            typedef void ( ::CBasePlayer::*AllowImmediateDecalPainting_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "AllowImmediateDecalPainting"
                , AllowImmediateDecalPainting_function_type( &::CBasePlayer::AllowImmediateDecalPainting ) );
        
        }
        { //::CBasePlayer::AllowInstantSpawn
        
            typedef void ( ::CBasePlayer::*AllowInstantSpawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "AllowInstantSpawn"
                , AllowInstantSpawn_function_type( &::CBasePlayer::AllowInstantSpawn ) );
        
        }
        { //::CBasePlayer::ArmorValue
        
            typedef int ( ::CBasePlayer::*ArmorValue_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "ArmorValue"
                , ArmorValue_function_type( &::CBasePlayer::ArmorValue ) );
        
        }
        { //::CBasePlayer::AttemptToExitFreezeCam
        
            typedef void ( ::CBasePlayer::*AttemptToExitFreezeCam_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "AttemptToExitFreezeCam"
                , AttemptToExitFreezeCam_function_type( &::CBasePlayer::AttemptToExitFreezeCam ) );
        
        }
        { //::CBasePlayer::BodyAngles
        
            typedef ::QAngle ( ::CBasePlayer::*BodyAngles_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "BodyAngles"
                , BodyAngles_function_type( &::CBasePlayer::BodyAngles ) );
        
        }
        { //::CBasePlayer::BodyTarget
        
            typedef ::Vector ( ::CBasePlayer::*BodyTarget_function_type )( ::Vector const &,bool ) ;
            
            CBasePlayer_exposer.def( 
                "BodyTarget"
                , BodyTarget_function_type( &::CBasePlayer::BodyTarget )
                , ( bp::arg("posSrc"), bp::arg("bNoisy") ) );
        
        }
        { //::CBasePlayer::BumpWeapon
        
            typedef bool ( ::CBasePlayer::*BumpWeapon_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "BumpWeapon"
                , BumpWeapon_function_type( &::CBasePlayer::BumpWeapon )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::CacheVehicleView
        
            typedef void ( ::CBasePlayer::*CacheVehicleView_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CacheVehicleView"
                , CacheVehicleView_function_type( &::CBasePlayer::CacheVehicleView ) );
        
        }
        { //::CBasePlayer::CalcRoll
        
            typedef float ( ::CBasePlayer::*CalcRoll_function_type )( ::QAngle const &,::Vector const &,float,float ) ;
            
            CBasePlayer_exposer.def( 
                "CalcRoll"
                , CalcRoll_function_type( &::CBasePlayer::CalcRoll )
                , ( bp::arg("angles"), bp::arg("velocity"), bp::arg("rollangle"), bp::arg("rollspeed") ) );
        
        }
        { //::CBasePlayer::CalcView
        
            typedef void ( ::CBasePlayer::*CalcView_function_type )( ::Vector &,::QAngle &,float &,float &,float & ) ;
            
            CBasePlayer_exposer.def( 
                "CalcView"
                , CalcView_function_type( &::CBasePlayer::CalcView )
                , ( bp::arg("eyeOrigin"), bp::arg("eyeAngles"), bp::arg("zNear"), bp::arg("zFar"), bp::arg("fov") ) );
        
        }
        { //::CBasePlayer::CalcViewBob
        
            typedef void ( ::CBasePlayer::*CalcViewBob_function_type )( ::Vector & ) ;
            
            CBasePlayer_exposer.def( 
                "CalcViewBob"
                , CalcViewBob_function_type( &::CBasePlayer::CalcViewBob )
                , ( bp::arg("eyeOrigin") ) );
        
        }
        { //::CBasePlayer::CalcViewRoll
        
            typedef void ( ::CBasePlayer::*CalcViewRoll_function_type )( ::QAngle & ) ;
            
            CBasePlayer_exposer.def( 
                "CalcViewRoll"
                , CalcViewRoll_function_type( &::CBasePlayer::CalcViewRoll )
                , ( bp::arg("eyeAngles") ) );
        
        }
        { //::CBasePlayer::CanBreatheUnderwater
        
            typedef bool ( ::CBasePlayer::*CanBreatheUnderwater_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "CanBreatheUnderwater"
                , CanBreatheUnderwater_function_type( &::CBasePlayer::CanBreatheUnderwater ) );
        
        }
        { //::CBasePlayer::CanHearAndReadChatFrom
        
            typedef bool ( ::CBasePlayer::*CanHearAndReadChatFrom_function_type )( ::CBasePlayer * ) ;
            
            CBasePlayer_exposer.def( 
                "CanHearAndReadChatFrom"
                , CanHearAndReadChatFrom_function_type( &::CBasePlayer::CanHearAndReadChatFrom )
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CBasePlayer::CanPickupObject
        
            typedef bool ( *CanPickupObject_function_type )( ::CBaseEntity *,float,float );
            
            CBasePlayer_exposer.def( 
                "CanPickupObject"
                , CanPickupObject_function_type( &::CBasePlayer::CanPickupObject )
                , ( bp::arg("pObject"), bp::arg("massLimit"), bp::arg("sizeLimit") ) );
        
        }
        { //::CBasePlayer::CanRecoverCurrentDrowningDamage
        
            typedef bool ( ::CBasePlayer::*CanRecoverCurrentDrowningDamage_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "CanRecoverCurrentDrowningDamage"
                , CanRecoverCurrentDrowningDamage_function_type( &::CBasePlayer::CanRecoverCurrentDrowningDamage ) );
        
        }
        { //::CBasePlayer::CanSpeak
        
            typedef bool ( ::CBasePlayer::*CanSpeak_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CanSpeak"
                , CanSpeak_function_type( &::CBasePlayer::CanSpeak ) );
        
        }
        { //::CBasePlayer::ChangeTeam
        
            typedef void ( ::CBasePlayer::*ChangeTeam_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "ChangeTeam"
                , ChangeTeam_function_type( &::CBasePlayer::ChangeTeam )
                , ( bp::arg("iTeamNum") ) );
        
        }
        { //::CBasePlayer::ChangeTeam
        
            typedef void ( ::CBasePlayer::*ChangeTeam_function_type )( int,bool,bool ) ;
            
            CBasePlayer_exposer.def( 
                "ChangeTeam"
                , ChangeTeam_function_type( &::CBasePlayer::ChangeTeam )
                , ( bp::arg("iTeamNum"), bp::arg("bAutoTeam"), bp::arg("bSilent") ) );
        
        }
        { //::CBasePlayer::CheatImpulseCommands
        
            typedef void ( ::CBasePlayer::*CheatImpulseCommands_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "CheatImpulseCommands"
                , CheatImpulseCommands_function_type( &::CBasePlayer::CheatImpulseCommands )
                , ( bp::arg("iImpulse") ) );
        
        }
        { //::CBasePlayer::CheckChatText
        
            typedef void ( ::CBasePlayer::*CheckChatText_function_type )( char *,int ) ;
            
            CBasePlayer_exposer.def( 
                "CheckChatText"
                , CheckChatText_function_type( &::CBasePlayer::CheckChatText )
                , ( bp::arg("p"), bp::arg("bufsize") ) );
        
        }
        { //::CBasePlayer::CheckObserverSettings
        
            typedef void ( ::CBasePlayer::*CheckObserverSettings_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CheckObserverSettings"
                , CheckObserverSettings_function_type( &::CBasePlayer::CheckObserverSettings ) );
        
        }
        { //::CBasePlayer::CheckSuitUpdate
        
            typedef void ( ::CBasePlayer::*CheckSuitUpdate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CheckSuitUpdate"
                , CheckSuitUpdate_function_type( &::CBasePlayer::CheckSuitUpdate ) );
        
        }
        { //::CBasePlayer::CheckTimeBasedDamage
        
            typedef void ( ::CBasePlayer::*CheckTimeBasedDamage_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CheckTimeBasedDamage"
                , CheckTimeBasedDamage_function_type( &::CBasePlayer::CheckTimeBasedDamage ) );
        
        }
        { //::CBasePlayer::CheckTrainUpdate
        
            typedef void ( ::CBasePlayer::*CheckTrainUpdate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CheckTrainUpdate"
                , CheckTrainUpdate_function_type( &::CBasePlayer::CheckTrainUpdate ) );
        
        }
        { //::CBasePlayer::Classify
        
            typedef ::Class_T ( ::CBasePlayer::*Classify_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Classify"
                , Classify_function_type( &::CBasePlayer::Classify ) );
        
        }
        { //::CBasePlayer::ClearImpulse
        
            typedef void ( ::CBasePlayer::*ClearImpulse_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ClearImpulse"
                , ClearImpulse_function_type( &::CBasePlayer::ClearImpulse ) );
        
        }
        { //::CBasePlayer::ClearPlayerSimulationList
        
            typedef void ( ::CBasePlayer::*ClearPlayerSimulationList_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ClearPlayerSimulationList"
                , ClearPlayerSimulationList_function_type( &::CBasePlayer::ClearPlayerSimulationList ) );
        
        }
        { //::CBasePlayer::ClearUseEntity
        
            typedef bool ( ::CBasePlayer::*ClearUseEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ClearUseEntity"
                , ClearUseEntity_function_type( &::CBasePlayer::ClearUseEntity ) );
        
        }
        { //::CBasePlayer::ClearZoomOwner
        
            typedef void ( ::CBasePlayer::*ClearZoomOwner_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ClearZoomOwner"
                , ClearZoomOwner_function_type( &::CBasePlayer::ClearZoomOwner ) );
        
        }
        { //::CBasePlayer::ClientCommand
        
            typedef bool ( ::CBasePlayer::*ClientCommand_function_type )( ::CCommand const & ) ;
            
            CBasePlayer_exposer.def( 
                "ClientCommand"
                , ClientCommand_function_type( &::CBasePlayer::ClientCommand )
                , ( bp::arg("args") ) );
        
        }
        { //::CBasePlayer::CommitSuicide
        
            typedef void ( ::CBasePlayer::*CommitSuicide_function_type )( bool,bool ) ;
            
            CBasePlayer_exposer.def( 
                "CommitSuicide"
                , CommitSuicide_function_type( &::CBasePlayer::CommitSuicide )
                , ( bp::arg("bExplode")=(bool)(false), bp::arg("bForce")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::CommitSuicide
        
            typedef void ( ::CBasePlayer::*CommitSuicide_function_type )( ::Vector const &,bool,bool ) ;
            
            CBasePlayer_exposer.def( 
                "CommitSuicide"
                , CommitSuicide_function_type( &::CBasePlayer::CommitSuicide )
                , ( bp::arg("vecForce"), bp::arg("bExplode")=(bool)(false), bp::arg("bForce")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::CreateCorpse
        
            typedef void ( ::CBasePlayer::*CreateCorpse_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CreateCorpse"
                , CreateCorpse_function_type( &::CBasePlayer::CreateCorpse ) );
        
        }
        { //::CBasePlayer::CreateRagdollEntity
        
            typedef void ( ::CBasePlayer::*CreateRagdollEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CreateRagdollEntity"
                , CreateRagdollEntity_function_type( &::CBasePlayer::CreateRagdollEntity ) );
        
        }
        { //::CBasePlayer::CreateViewModel
        
            typedef void ( ::CBasePlayer::*CreateViewModel_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "CreateViewModel"
                , CreateViewModel_function_type( &::CBasePlayer::CreateViewModel )
                , ( bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        { //::CBasePlayer::CurrentCommandNumber
        
            typedef int ( ::CBasePlayer::*CurrentCommandNumber_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "CurrentCommandNumber"
                , CurrentCommandNumber_function_type( &::CBasePlayer::CurrentCommandNumber ) );
        
        }
        { //::CBasePlayer::DamageEffect
        
            typedef void ( ::CBasePlayer::*DamageEffect_function_type )( float,int ) ;
            
            CBasePlayer_exposer.def( 
                "DamageEffect"
                , DamageEffect_function_type( &::CBasePlayer::DamageEffect )
                , ( bp::arg("flDamage"), bp::arg("fDamageType") ) );
        
        }
        { //::CBasePlayer::DeactivateMovementConstraint
        
            typedef void ( ::CBasePlayer::*DeactivateMovementConstraint_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "DeactivateMovementConstraint"
                , DeactivateMovementConstraint_function_type( &::CBasePlayer::DeactivateMovementConstraint ) );
        
        }
        { //::CBasePlayer::DeathCount
        
            typedef int ( ::CBasePlayer::*DeathCount_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "DeathCount"
                , DeathCount_function_type( &::CBasePlayer::DeathCount ) );
        
        }
        { //::CBasePlayer::DeathSound
        
            typedef void ( ::CBasePlayer::*DeathSound_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "DeathSound"
                , DeathSound_function_type( &::CBasePlayer::DeathSound )
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::DestroyViewModels
        
            typedef void ( ::CBasePlayer::*DestroyViewModels_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "DestroyViewModels"
                , DestroyViewModels_function_type( &::CBasePlayer::DestroyViewModels ) );
        
        }
        { //::CBasePlayer::DisableAutoKick
        
            typedef void ( ::CBasePlayer::*DisableAutoKick_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "DisableAutoKick"
                , DisableAutoKick_function_type( &::CBasePlayer::DisableAutoKick )
                , ( bp::arg("disabled") ) );
        
        }
        { //::CBasePlayer::DisableButtons
        
            typedef void ( ::CBasePlayer::*DisableButtons_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "DisableButtons"
                , DisableButtons_function_type( &::CBasePlayer::DisableButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::CBasePlayer::DoImpactEffect
        
            typedef void ( ::CBasePlayer::*DoImpactEffect_function_type )( ::trace_t &,int ) ;
            
            CBasePlayer_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type( &::CBasePlayer::DoImpactEffect )
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBasePlayer::DoMuzzleFlash
        
            typedef void ( ::CBasePlayer::*DoMuzzleFlash_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "DoMuzzleFlash"
                , DoMuzzleFlash_function_type( &::CBasePlayer::DoMuzzleFlash ) );
        
        }
        { //::CBasePlayer::DoubleCheckUseNPC
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*DoubleCheckUseNPC_function_type )( ::CBaseEntity *,::Vector const &,::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "DoubleCheckUseNPC"
                , DoubleCheckUseNPC_function_type( &::CBasePlayer::DoubleCheckUseNPC )
                , ( bp::arg("pNPC"), bp::arg("vecSrc"), bp::arg("vecDir") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::DrawDebugGeometryOverlays
        
            typedef void ( ::CBasePlayer::*DrawDebugGeometryOverlays_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type( &::CBasePlayer::DrawDebugGeometryOverlays ) );
        
        }
        { //::CBasePlayer::Duck
        
            typedef void ( ::CBasePlayer::*Duck_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Duck"
                , Duck_function_type( &::CBasePlayer::Duck ) );
        
        }
        { //::CBasePlayer::DumpPerfToRecipient
        
            typedef void ( ::CBasePlayer::*DumpPerfToRecipient_function_type )( ::CBasePlayer *,int ) ;
            
            CBasePlayer_exposer.def( 
                "DumpPerfToRecipient"
                , DumpPerfToRecipient_function_type( &::CBasePlayer::DumpPerfToRecipient )
                , ( bp::arg("pRecipient"), bp::arg("nMaxRecords") ) );
        
        }
        { //::CBasePlayer::EnableButtons
        
            typedef void ( ::CBasePlayer::*EnableButtons_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "EnableButtons"
                , EnableButtons_function_type( &::CBasePlayer::EnableButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::CBasePlayer::EnableControl
        
            typedef void ( ::CBasePlayer::*EnableControl_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "EnableControl"
                , EnableControl_function_type( &::CBasePlayer::EnableControl )
                , ( bp::arg("fControl") ) );
        
        }
        { //::CBasePlayer::EnsureSplitScreenTeam
        
            typedef bool ( ::CBasePlayer::*EnsureSplitScreenTeam_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "EnsureSplitScreenTeam"
                , EnsureSplitScreenTeam_function_type( &::CBasePlayer::EnsureSplitScreenTeam ) );
        
        }
        { //::CBasePlayer::EntSelectSpawnPoint
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*EntSelectSpawnPoint_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "EntSelectSpawnPoint"
                , EntSelectSpawnPoint_function_type( &::CBasePlayer::EntSelectSpawnPoint )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::EquipSuit
        
            typedef void ( ::CBasePlayer::*EquipSuit_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "EquipSuit"
                , EquipSuit_function_type( &::CBasePlayer::EquipSuit )
                , ( bp::arg("bPlayEffects")=(bool)(true) ) );
        
        }
        { //::CBasePlayer::Event_Dying
        
            typedef void ( ::CBasePlayer::*Event_Dying_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Event_Dying"
                , Event_Dying_function_type( &::CBasePlayer::Event_Dying ) );
        
        }
        { //::CBasePlayer::Event_Killed
        
            typedef void ( ::CBasePlayer::*Event_Killed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type( &::CBasePlayer::Event_Killed )
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::Event_KilledOther
        
            typedef void ( ::CBasePlayer::*Event_KilledOther_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type( &::CBasePlayer::Event_KilledOther )
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBasePlayer::ExitLadder
        
            typedef void ( ::CBasePlayer::*ExitLadder_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ExitLadder"
                , ExitLadder_function_type( &::CBasePlayer::ExitLadder ) );
        
        }
        { //::CBasePlayer::EyeAngles
        
            typedef ::QAngle const & ( ::CBasePlayer::*EyeAngles_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::CBasePlayer::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::EyePosition
        
            typedef ::Vector ( ::CBasePlayer::*EyePosition_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::CBasePlayer::EyePosition ) );
        
        }
        { //::CBasePlayer::EyePositionAndVectors
        
            typedef void ( ::CBasePlayer::*EyePositionAndVectors_function_type )( ::Vector *,::Vector *,::Vector *,::Vector * ) ;
            
            CBasePlayer_exposer.def( 
                "EyePositionAndVectors"
                , EyePositionAndVectors_function_type( &::CBasePlayer::EyePositionAndVectors )
                , ( bp::arg("pPosition"), bp::arg("pForward"), bp::arg("pRight"), bp::arg("pUp") ) );
        
        }
        { //::CBasePlayer::EyeVectors
        
            typedef void ( ::CBasePlayer::*EyeVectors_function_type )( ::Vector *,::Vector *,::Vector * ) ;
            
            CBasePlayer_exposer.def( 
                "EyeVectors"
                , EyeVectors_function_type( &::CBasePlayer::EyeVectors )
                , ( bp::arg("pForward"), bp::arg("pRight")=bp::object(), bp::arg("pUp")=bp::object() ) );
        
        }
        { //::CBasePlayer::FindEntityClassForward
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindEntityClassForward_function_type )( char * ) ;
            
            CBasePlayer_exposer.def( 
                "FindEntityClassForward"
                , FindEntityClassForward_function_type( &::CBasePlayer::FindEntityClassForward )
                , ( bp::arg("classname") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FindEntityForward
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindEntityForward_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "FindEntityForward"
                , FindEntityForward_function_type( &::CBasePlayer::FindEntityForward )
                , ( bp::arg("fHull") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FindNextObserverTarget
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindNextObserverTarget_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "FindNextObserverTarget"
                , FindNextObserverTarget_function_type( &::CBasePlayer::FindNextObserverTarget )
                , ( bp::arg("bReverse") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FindPickerEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindPickerEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "FindPickerEntity"
                , FindPickerEntity_function_type( &::CBasePlayer::FindPickerEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FindPickerEntityClass
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindPickerEntityClass_function_type )( char * ) ;
            
            CBasePlayer_exposer.def( 
                "FindPickerEntityClass"
                , FindPickerEntityClass_function_type( &::CBasePlayer::FindPickerEntityClass )
                , ( bp::arg("classname") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FindUseEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*FindUseEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "FindUseEntity"
                , FindUseEntity_function_type( &::CBasePlayer::FindUseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::FinishUserMessageThrottling
        
            typedef void ( ::CBasePlayer::*FinishUserMessageThrottling_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "FinishUserMessageThrottling"
                , FinishUserMessageThrottling_function_type( &::CBasePlayer::FinishUserMessageThrottling ) );
        
        }
        { //::CBasePlayer::FirePlayerProxyOutput
        
            typedef void ( ::CBasePlayer::*FirePlayerProxyOutput_function_type )( char const *,::variant_t,::CBaseEntity *,::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "FirePlayerProxyOutput"
                , FirePlayerProxyOutput_function_type( &::CBasePlayer::FirePlayerProxyOutput )
                , ( bp::arg("pszOutputName"), bp::arg("variant"), bp::arg("pActivator"), bp::arg("pCaller") ) );
        
        }
        { //::CBasePlayer::FlashlightIsOn
        
            typedef int ( ::CBasePlayer::*FlashlightIsOn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "FlashlightIsOn"
                , FlashlightIsOn_function_type( &::CBasePlayer::FlashlightIsOn ) );
        
        }
        { //::CBasePlayer::FlashlightTurnOff
        
            typedef void ( ::CBasePlayer::*FlashlightTurnOff_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "FlashlightTurnOff"
                , FlashlightTurnOff_function_type( &::CBasePlayer::FlashlightTurnOff )
                , ( bp::arg("playSound")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::FlashlightTurnOn
        
            typedef bool ( ::CBasePlayer::*FlashlightTurnOn_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "FlashlightTurnOn"
                , FlashlightTurnOn_function_type( &::CBasePlayer::FlashlightTurnOn )
                , ( bp::arg("playSound")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::ForceButtons
        
            typedef void ( ::CBasePlayer::*ForceButtons_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "ForceButtons"
                , ForceButtons_function_type( &::CBasePlayer::ForceButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::CBasePlayer::ForceChangeTeam
        
            typedef void ( ::CBasePlayer::*ForceChangeTeam_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "ForceChangeTeam"
                , ForceChangeTeam_function_type( &::CBasePlayer::ForceChangeTeam )
                , ( bp::arg("iTeamNum") ) );
        
        }
        { //::CBasePlayer::ForceClientDllUpdate
        
            typedef void ( ::CBasePlayer::*ForceClientDllUpdate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ForceClientDllUpdate"
                , ForceClientDllUpdate_function_type( &::CBasePlayer::ForceClientDllUpdate ) );
        
        }
        { //::CBasePlayer::ForceDropOfCarriedPhysObjects
        
            typedef void ( ::CBasePlayer::*ForceDropOfCarriedPhysObjects_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "ForceDropOfCarriedPhysObjects"
                , ForceDropOfCarriedPhysObjects_function_type( &::CBasePlayer::ForceDropOfCarriedPhysObjects )
                , ( bp::arg("pOnlyIfHoldindThis")=bp::object() ) );
        
        }
        { //::CBasePlayer::ForceObserverMode
        
            typedef void ( ::CBasePlayer::*ForceObserverMode_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "ForceObserverMode"
                , ForceObserverMode_function_type( &::CBasePlayer::ForceObserverMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::CBasePlayer::ForceOrigin
        
            typedef void ( ::CBasePlayer::*ForceOrigin_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "ForceOrigin"
                , ForceOrigin_function_type( &::CBasePlayer::ForceOrigin )
                , ( bp::arg("vecOrigin") ) );
        
        }
        { //::CBasePlayer::ForceRespawn
        
            typedef void ( ::CBasePlayer::*ForceRespawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ForceRespawn"
                , ForceRespawn_function_type( &::CBasePlayer::ForceRespawn ) );
        
        }
        { //::CBasePlayer::ForceSimulation
        
            typedef void ( ::CBasePlayer::*ForceSimulation_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ForceSimulation"
                , ForceSimulation_function_type( &::CBasePlayer::ForceSimulation ) );
        
        }
        { //::CBasePlayer::FragCount
        
            typedef int ( ::CBasePlayer::*FragCount_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "FragCount"
                , FragCount_function_type( &::CBasePlayer::FragCount ) );
        
        }
        { //::CBasePlayer::GetActivity
        
            typedef ::Activity ( ::CBasePlayer::*GetActivity_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetActivity"
                , GetActivity_function_type( &::CBasePlayer::GetActivity ) );
        
        }
        { //::CBasePlayer::GetAutoaimVector
        
            typedef ::Vector ( ::CBasePlayer::*GetAutoaimVector_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "GetAutoaimVector"
                , GetAutoaimVector_function_type( &::CBasePlayer::GetAutoaimVector )
                , ( bp::arg("flScale") ) );
        
        }
        { //::CBasePlayer::GetAutoaimVector
        
            typedef ::Vector ( ::CBasePlayer::*GetAutoaimVector_function_type )( float,float ) ;
            
            CBasePlayer_exposer.def( 
                "GetAutoaimVector"
                , GetAutoaimVector_function_type( &::CBasePlayer::GetAutoaimVector )
                , ( bp::arg("flScale"), bp::arg("flMaxDist") ) );
        
        }
        { //::CBasePlayer::GetAutoaimVector
        
            typedef ::Vector ( ::CBasePlayer::*GetAutoaimVector_function_type )( float,float,float,::AimResults * ) ;
            
            CBasePlayer_exposer.def( 
                "GetAutoaimVector"
                , GetAutoaimVector_function_type( &::CBasePlayer::GetAutoaimVector )
                , ( bp::arg("flScale"), bp::arg("flMaxDist"), bp::arg("flMaxDeflection"), bp::arg("pAimResults") ) );
        
        }
        { //::CBasePlayer::GetAutoaimVector
        
            typedef void ( ::CBasePlayer::*GetAutoaimVector_function_type )( ::autoaim_params_t & ) ;
            
            CBasePlayer_exposer.def( 
                "GetAutoaimVector"
                , GetAutoaimVector_function_type( &::CBasePlayer::GetAutoaimVector )
                , ( bp::arg("params") ) );
        
        }
        { //::CBasePlayer::GetBonusChallenge
        
            typedef int ( ::CBasePlayer::*GetBonusChallenge_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetBonusChallenge"
                , GetBonusChallenge_function_type( &::CBasePlayer::GetBonusChallenge ) );
        
        }
        { //::CBasePlayer::GetBonusProgress
        
            typedef int ( ::CBasePlayer::*GetBonusProgress_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetBonusProgress"
                , GetBonusProgress_function_type( &::CBasePlayer::GetBonusProgress ) );
        
        }
        { //::CBasePlayer::GetCharacterDisplayName
        
            typedef char const * ( ::CBasePlayer::*GetCharacterDisplayName_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetCharacterDisplayName"
                , GetCharacterDisplayName_function_type( &::CBasePlayer::GetCharacterDisplayName ) );
        
        }
        { //::CBasePlayer::GetClientIndex
        
            typedef int ( ::CBasePlayer::*GetClientIndex_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetClientIndex"
                , GetClientIndex_function_type( &::CBasePlayer::GetClientIndex ) );
        
        }
        { //::CBasePlayer::GetDeathTime
        
            typedef float ( ::CBasePlayer::*GetDeathTime_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetDeathTime"
                , GetDeathTime_function_type( &::CBasePlayer::GetDeathTime ) );
        
        }
        { //::CBasePlayer::GetDefaultFOV
        
            typedef int ( ::CBasePlayer::*GetDefaultFOV_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetDefaultFOV"
                , GetDefaultFOV_function_type( &::CBasePlayer::GetDefaultFOV ) );
        
        }
        { //::CBasePlayer::GetDelayTicks
        
            typedef int ( ::CBasePlayer::*GetDelayTicks_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetDelayTicks"
                , GetDelayTicks_function_type( &::CBasePlayer::GetDelayTicks ) );
        
        }
        { //::CBasePlayer::GetEFNoInterpParity
        
            typedef int ( ::CBasePlayer::*GetEFNoInterpParity_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetEFNoInterpParity"
                , GetEFNoInterpParity_function_type( &::CBasePlayer::GetEFNoInterpParity ) );
        
        }
        { //::CBasePlayer::GetFOV
        
            typedef int ( ::CBasePlayer::*GetFOV_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOV"
                , GetFOV_function_type( &::CBasePlayer::GetFOV ) );
        
        }
        { //::CBasePlayer::GetFOVDistanceAdjustFactor
        
            typedef float ( ::CBasePlayer::*GetFOVDistanceAdjustFactor_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOVDistanceAdjustFactor"
                , GetFOVDistanceAdjustFactor_function_type( &::CBasePlayer::GetFOVDistanceAdjustFactor ) );
        
        }
        { //::CBasePlayer::GetFOVDistanceAdjustFactorForNetworking
        
            typedef float ( ::CBasePlayer::*GetFOVDistanceAdjustFactorForNetworking_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOVDistanceAdjustFactorForNetworking"
                , GetFOVDistanceAdjustFactorForNetworking_function_type( &::CBasePlayer::GetFOVDistanceAdjustFactorForNetworking ) );
        
        }
        { //::CBasePlayer::GetFOVForNetworking
        
            typedef int ( ::CBasePlayer::*GetFOVForNetworking_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOVForNetworking"
                , GetFOVForNetworking_function_type( &::CBasePlayer::GetFOVForNetworking ) );
        
        }
        { //::CBasePlayer::GetFOVOwner
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetFOVOwner_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOVOwner"
                , GetFOVOwner_function_type( &::CBasePlayer::GetFOVOwner )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetFOVTime
        
            typedef float ( ::CBasePlayer::*GetFOVTime_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetFOVTime"
                , GetFOVTime_function_type( &::CBasePlayer::GetFOVTime ) );
        
        }
        { //::CBasePlayer::GetGroundNormal
        
            typedef ::Vector const & ( ::CBasePlayer::*GetGroundNormal_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetGroundNormal"
                , GetGroundNormal_function_type( &::CBasePlayer::GetGroundNormal )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::GetHeldObjectMass
        
            typedef float ( ::CBasePlayer::*GetHeldObjectMass_function_type )( ::IPhysicsObject * ) ;
            
            CBasePlayer_exposer.def( 
                "GetHeldObjectMass"
                , GetHeldObjectMass_function_type( &::CBasePlayer::GetHeldObjectMass )
                , ( bp::arg("pHeldObject") ) );
        
        }
        { //::CBasePlayer::GetImpulse
        
            typedef int ( ::CBasePlayer::*GetImpulse_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetImpulse"
                , GetImpulse_function_type( &::CBasePlayer::GetImpulse ) );
        
        }
        { //::CBasePlayer::GetLaggedMovementValue
        
            typedef float ( ::CBasePlayer::*GetLaggedMovementValue_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetLaggedMovementValue"
                , GetLaggedMovementValue_function_type( &::CBasePlayer::GetLaggedMovementValue ) );
        
        }
        { //::CBasePlayer::GetLastKnownPlaceName
        
            typedef char const * ( ::CBasePlayer::*GetLastKnownPlaceName_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetLastKnownPlaceName"
                , GetLastKnownPlaceName_function_type( &::CBasePlayer::GetLastKnownPlaceName ) );
        
        }
        { //::CBasePlayer::GetMovementCollisionNormal
        
            typedef ::Vector const & ( ::CBasePlayer::*GetMovementCollisionNormal_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetMovementCollisionNormal"
                , GetMovementCollisionNormal_function_type( &::CBasePlayer::GetMovementCollisionNormal )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::GetNetworkIDString
        
            typedef char const * ( ::CBasePlayer::*GetNetworkIDString_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetNetworkIDString"
                , GetNetworkIDString_function_type( &::CBasePlayer::GetNetworkIDString ) );
        
        }
        { //::CBasePlayer::GetNextObserverSearchStartPoint
        
            typedef int ( ::CBasePlayer::*GetNextObserverSearchStartPoint_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "GetNextObserverSearchStartPoint"
                , GetNextObserverSearchStartPoint_function_type( &::CBasePlayer::GetNextObserverSearchStartPoint )
                , ( bp::arg("bReverse") ) );
        
        }
        { //::CBasePlayer::GetObserverMode
        
            typedef int ( ::CBasePlayer::*GetObserverMode_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetObserverMode"
                , GetObserverMode_function_type( &::CBasePlayer::GetObserverMode ) );
        
        }
        { //::CBasePlayer::GetObserverMode
        
            typedef int ( ::CBasePlayer::*GetObserverMode_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetObserverMode"
                , GetObserverMode_function_type( &::CBasePlayer::GetObserverMode ) );
        
        }
        { //::CBasePlayer::GetObserverTarget
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetObserverTarget_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetObserverTarget"
                , GetObserverTarget_function_type( &::CBasePlayer::GetObserverTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetObserverTarget
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetObserverTarget_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetObserverTarget"
                , GetObserverTarget_function_type( &::CBasePlayer::GetObserverTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetOffset_m_Local
        
            typedef int ( *GetOffset_m_Local_function_type )(  );
            
            CBasePlayer_exposer.def( 
                "GetOffset_m_Local"
                , GetOffset_m_Local_function_type( &::CBasePlayer::GetOffset_m_Local ) );
        
        }
        { //::CBasePlayer::GetOffset_m_PlayerFog
        
            typedef int ( *GetOffset_m_PlayerFog_function_type )(  );
            
            CBasePlayer_exposer.def( 
                "GetOffset_m_PlayerFog"
                , GetOffset_m_PlayerFog_function_type( &::CBasePlayer::GetOffset_m_PlayerFog ) );
        
        }
        { //::CBasePlayer::GetOffset_pl
        
            typedef int ( *GetOffset_pl_function_type )(  );
            
            CBasePlayer_exposer.def( 
                "GetOffset_pl"
                , GetOffset_pl_function_type( &::CBasePlayer::GetOffset_pl ) );
        
        }
        { //::CBasePlayer::GetPhysicsImpactDamageTable
        
            typedef ::impactdamagetable_t const & ( ::CBasePlayer::*GetPhysicsImpactDamageTable_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetPhysicsImpactDamageTable"
                , GetPhysicsImpactDamageTable_function_type( &::CBasePlayer::GetPhysicsImpactDamageTable )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::GetPlayerLocked
        
            typedef int ( ::CBasePlayer::*GetPlayerLocked_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetPlayerLocked"
                , GetPlayerLocked_function_type( &::CBasePlayer::GetPlayerLocked ) );
        
        }
        { //::CBasePlayer::GetPlayerMaxs
        
            typedef ::Vector const ( ::CBasePlayer::*GetPlayerMaxs_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetPlayerMaxs"
                , GetPlayerMaxs_function_type( &::CBasePlayer::GetPlayerMaxs ) );
        
        }
        { //::CBasePlayer::GetPlayerMins
        
            typedef ::Vector const ( ::CBasePlayer::*GetPlayerMins_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetPlayerMins"
                , GetPlayerMins_function_type( &::CBasePlayer::GetPlayerMins ) );
        
        }
        { //::CBasePlayer::GetPlayerName
        
            typedef char const * ( ::CBasePlayer::*GetPlayerName_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetPlayerName"
                , GetPlayerName_function_type( &::CBasePlayer::GetPlayerName ) );
        
        }
        { //::CBasePlayer::GetPotentialUseEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetPotentialUseEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetPotentialUseEntity"
                , GetPotentialUseEntity_function_type( &::CBasePlayer::GetPotentialUseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetPreviouslyPredictedOrigin
        
            typedef ::Vector const & ( ::CBasePlayer::*GetPreviouslyPredictedOrigin_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetPreviouslyPredictedOrigin"
                , GetPreviouslyPredictedOrigin_function_type( &::CBasePlayer::GetPreviouslyPredictedOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::GetPunchAngle
        
            typedef ::QAngle const & ( ::CBasePlayer::*GetPunchAngle_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetPunchAngle"
                , GetPunchAngle_function_type( &::CBasePlayer::GetPunchAngle )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::GetPyNetworkType
        
            typedef int ( *GetPyNetworkType_function_type )(  );
            
            CBasePlayer_exposer.def( 
                "GetPyNetworkType"
                , GetPyNetworkType_function_type( &::CBasePlayer::GetPyNetworkType ) );
        
        }
        { //::CBasePlayer::GetReplayEntity
        
            typedef int ( ::CBasePlayer::*GetReplayEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetReplayEntity"
                , GetReplayEntity_function_type( &::CBasePlayer::GetReplayEntity ) );
        
        }
        { //::CBasePlayer::GetSmoothedVelocity
        
            typedef ::Vector ( ::CBasePlayer::*GetSmoothedVelocity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetSmoothedVelocity"
                , GetSmoothedVelocity_function_type( &::CBasePlayer::GetSmoothedVelocity ) );
        
        }
        { //::CBasePlayer::GetSplitScreenPlayerSlot
        
            typedef int ( ::CBasePlayer::*GetSplitScreenPlayerSlot_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetSplitScreenPlayerSlot"
                , GetSplitScreenPlayerSlot_function_type( &::CBasePlayer::GetSplitScreenPlayerSlot ) );
        
        }
        { //::CBasePlayer::GetStepSoundVelocities
        
            typedef void ( ::CBasePlayer::*GetStepSoundVelocities_function_type )( float *,float * ) ;
            
            CBasePlayer_exposer.def( 
                "GetStepSoundVelocities"
                , GetStepSoundVelocities_function_type( &::CBasePlayer::GetStepSoundVelocities )
                , ( bp::arg("velwalk"), bp::arg("velrun") ) );
        
        }
        { //::CBasePlayer::GetStickDist
        
            typedef float ( ::CBasePlayer::*GetStickDist_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetStickDist"
                , GetStickDist_function_type( &::CBasePlayer::GetStickDist ) );
        
        }
        { //::CBasePlayer::GetSwimSoundTime
        
            typedef float ( ::CBasePlayer::*GetSwimSoundTime_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetSwimSoundTime"
                , GetSwimSoundTime_function_type( &::CBasePlayer::GetSwimSoundTime ) );
        
        }
        { //::CBasePlayer::GetTimeBase
        
            typedef float ( ::CBasePlayer::*GetTimeBase_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetTimeBase"
                , GetTimeBase_function_type( &::CBasePlayer::GetTimeBase ) );
        
        }
        { //::CBasePlayer::GetToggledDuckState
        
            typedef bool ( ::CBasePlayer::*GetToggledDuckState_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetToggledDuckState"
                , GetToggledDuckState_function_type( &::CBasePlayer::GetToggledDuckState ) );
        
        }
        { //::CBasePlayer::GetTracerType
        
            typedef char const * ( ::CBasePlayer::*GetTracerType_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type( &::CBasePlayer::GetTracerType ) );
        
        }
        { //::CBasePlayer::GetUseEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetUseEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetUseEntity"
                , GetUseEntity_function_type( &::CBasePlayer::GetUseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetUserID
        
            typedef int ( ::CBasePlayer::*GetUserID_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetUserID"
                , GetUserID_function_type( &::CBasePlayer::GetUserID ) );
        
        }
        { //::CBasePlayer::GetVehicleAnalogControlBias
        
            typedef int ( ::CBasePlayer::*GetVehicleAnalogControlBias_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetVehicleAnalogControlBias"
                , GetVehicleAnalogControlBias_function_type( &::CBasePlayer::GetVehicleAnalogControlBias ) );
        
        }
        { //::CBasePlayer::GetVehicleEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetVehicleEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetVehicleEntity"
                , GetVehicleEntity_function_type( &::CBasePlayer::GetVehicleEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetViewEntity
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GetViewEntity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetViewEntity"
                , GetViewEntity_function_type( &::CBasePlayer::GetViewEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::GetWaterJumpTime
        
            typedef float ( ::CBasePlayer::*GetWaterJumpTime_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "GetWaterJumpTime"
                , GetWaterJumpTime_function_type( &::CBasePlayer::GetWaterJumpTime ) );
        
        }
        { //::CBasePlayer::GiveNamedItem
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*GiveNamedItem_function_type )( char const *,int,bool ) ;
            
            CBasePlayer_exposer.def( 
                "GiveNamedItem"
                , GiveNamedItem_function_type( &::CBasePlayer::GiveNamedItem )
                , ( bp::arg("szName"), bp::arg("iSubType")=(int)(0), bp::arg("removeIfNotCarried")=(bool)(true) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::HUDNeedsRestart
        
            typedef bool ( ::CBasePlayer::*HUDNeedsRestart_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "HUDNeedsRestart"
                , HUDNeedsRestart_function_type( &::CBasePlayer::HUDNeedsRestart ) );
        
        }
        { //::CBasePlayer::HandleAnimEvent
        
            typedef void ( ::CBasePlayer::*HandleAnimEvent_function_type )( ::animevent_t * ) ;
            
            CBasePlayer_exposer.def( 
                "HandleAnimEvent"
                , HandleAnimEvent_function_type( &::CBasePlayer::HandleAnimEvent )
                , ( bp::arg("pEvent") ) );
        
        }
        { //::CBasePlayer::HasAnyAmmoOfType
        
            typedef bool ( ::CBasePlayer::*HasAnyAmmoOfType_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "HasAnyAmmoOfType"
                , HasAnyAmmoOfType_function_type( &::CBasePlayer::HasAnyAmmoOfType )
                , ( bp::arg("nAmmoIndex") ) );
        
        }
        { //::CBasePlayer::HasNamedPlayerItem
        
            typedef ::CBaseEntity * ( ::CBasePlayer::*HasNamedPlayerItem_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "HasNamedPlayerItem"
                , HasNamedPlayerItem_function_type( &::CBasePlayer::HasNamedPlayerItem )
                , ( bp::arg("pszItemName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::HasPhysicsFlag
        
            typedef bool ( ::CBasePlayer::*HasPhysicsFlag_function_type )( unsigned int ) ;
            
            CBasePlayer_exposer.def( 
                "HasPhysicsFlag"
                , HasPhysicsFlag_function_type( &::CBasePlayer::HasPhysicsFlag )
                , ( bp::arg("flag") ) );
        
        }
        { //::CBasePlayer::HasQueuedUsercmds
        
            typedef bool ( ::CBasePlayer::*HasQueuedUsercmds_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "HasQueuedUsercmds"
                , HasQueuedUsercmds_function_type( &::CBasePlayer::HasQueuedUsercmds ) );
        
        }
        { //::CBasePlayer::HasUnlockableWeapons
        
            typedef bool ( ::CBasePlayer::*HasUnlockableWeapons_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "HasUnlockableWeapons"
                , HasUnlockableWeapons_function_type( &::CBasePlayer::HasUnlockableWeapons )
                , ( bp::arg("iUnlockedableIndex") ) );
        
        }
        { //::CBasePlayer::HasUnlockedWpn
        
            typedef bool ( ::CBasePlayer::*HasUnlockedWpn_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "HasUnlockedWpn"
                , HasUnlockedWpn_function_type( &::CBasePlayer::HasUnlockedWpn )
                , ( bp::arg("iIndex") ) );
        
        }
        { //::CBasePlayer::HasWeapons
        
            typedef bool ( ::CBasePlayer::*HasWeapons_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "HasWeapons"
                , HasWeapons_function_type( &::CBasePlayer::HasWeapons ) );
        
        }
        { //::CBasePlayer::HideViewModels
        
            typedef void ( ::CBasePlayer::*HideViewModels_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "HideViewModels"
                , HideViewModels_function_type( &::CBasePlayer::HideViewModels ) );
        
        }
        { //::CBasePlayer::HintMessage
        
            typedef bool ( ::CBasePlayer::*HintMessage_function_type )( int,bool ) ;
            
            CBasePlayer_exposer.def( 
                "HintMessage"
                , HintMessage_function_type( &::CBasePlayer::HintMessage )
                , ( bp::arg("hint"), bp::arg("bForce")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::HintMessage
        
            typedef void ( ::CBasePlayer::*HintMessage_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "HintMessage"
                , HintMessage_function_type( &::CBasePlayer::HintMessage )
                , ( bp::arg("pMessage") ) );
        
        }
        { //::CBasePlayer::ImpulseCommands
        
            typedef void ( ::CBasePlayer::*ImpulseCommands_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ImpulseCommands"
                , ImpulseCommands_function_type( &::CBasePlayer::ImpulseCommands ) );
        
        }
        { //::CBasePlayer::IncrementArmorValue
        
            typedef void ( ::CBasePlayer::*IncrementArmorValue_function_type )( int,int ) ;
            
            CBasePlayer_exposer.def( 
                "IncrementArmorValue"
                , IncrementArmorValue_function_type( &::CBasePlayer::IncrementArmorValue )
                , ( bp::arg("nCount"), bp::arg("nMaxValue")=(int)(-0x000000001) ) );
        
        }
        { //::CBasePlayer::IncrementDeathCount
        
            typedef void ( ::CBasePlayer::*IncrementDeathCount_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "IncrementDeathCount"
                , IncrementDeathCount_function_type( &::CBasePlayer::IncrementDeathCount )
                , ( bp::arg("nCount") ) );
        
        }
        { //::CBasePlayer::IncrementEFNoInterpParity
        
            typedef void ( ::CBasePlayer::*IncrementEFNoInterpParity_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IncrementEFNoInterpParity"
                , IncrementEFNoInterpParity_function_type( &::CBasePlayer::IncrementEFNoInterpParity ) );
        
        }
        { //::CBasePlayer::IncrementFragCount
        
            typedef void ( ::CBasePlayer::*IncrementFragCount_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "IncrementFragCount"
                , IncrementFragCount_function_type( &::CBasePlayer::IncrementFragCount )
                , ( bp::arg("nCount") ) );
        
        }
        { //::CBasePlayer::InitColorCorrectionController
        
            typedef void ( ::CBasePlayer::*InitColorCorrectionController_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "InitColorCorrectionController"
                , InitColorCorrectionController_function_type( &::CBasePlayer::InitColorCorrectionController ) );
        
        }
        { //::CBasePlayer::InitFogController
        
            typedef void ( ::CBasePlayer::*InitFogController_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "InitFogController"
                , InitFogController_function_type( &::CBasePlayer::InitFogController ) );
        
        }
        { //::CBasePlayer::InitHUD
        
            typedef void ( ::CBasePlayer::*InitHUD_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "InitHUD"
                , InitHUD_function_type( &::CBasePlayer::InitHUD ) );
        
        }
        { //::CBasePlayer::InitPostProcessController
        
            typedef void ( ::CBasePlayer::*InitPostProcessController_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "InitPostProcessController"
                , InitPostProcessController_function_type( &::CBasePlayer::InitPostProcessController ) );
        
        }
        { //::CBasePlayer::InitVCollision
        
            typedef void ( ::CBasePlayer::*InitVCollision_function_type )( ::Vector const &,::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "InitVCollision"
                , InitVCollision_function_type( &::CBasePlayer::InitVCollision )
                , ( bp::arg("vecAbsOrigin"), bp::arg("vecAbsVelocity") ) );
        
        }
        { //::CBasePlayer::InitialSpawn
        
            typedef void ( ::CBasePlayer::*InitialSpawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "InitialSpawn"
                , InitialSpawn_function_type( &::CBasePlayer::InitialSpawn ) );
        
        }
        { //::CBasePlayer::InputSetColorCorrectionController
        
            typedef void ( ::CBasePlayer::*InputSetColorCorrectionController_function_type )( ::inputdata_t & ) ;
            
            CBasePlayer_exposer.def( 
                "InputSetColorCorrectionController"
                , InputSetColorCorrectionController_function_type( &::CBasePlayer::InputSetColorCorrectionController )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBasePlayer::InputSetFogController
        
            typedef void ( ::CBasePlayer::*InputSetFogController_function_type )( ::inputdata_t & ) ;
            
            CBasePlayer_exposer.def( 
                "InputSetFogController"
                , InputSetFogController_function_type( &::CBasePlayer::InputSetFogController )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBasePlayer::InputSetHUDVisibility
        
            typedef void ( ::CBasePlayer::*InputSetHUDVisibility_function_type )( ::inputdata_t & ) ;
            
            CBasePlayer_exposer.def( 
                "InputSetHUDVisibility"
                , InputSetHUDVisibility_function_type( &::CBasePlayer::InputSetHUDVisibility )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBasePlayer::InputSetHealth
        
            typedef void ( ::CBasePlayer::*InputSetHealth_function_type )( ::inputdata_t & ) ;
            
            CBasePlayer_exposer.def( 
                "InputSetHealth"
                , InputSetHealth_function_type( &::CBasePlayer::InputSetHealth )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBasePlayer::InputSetPostProcessController
        
            typedef void ( ::CBasePlayer::*InputSetPostProcessController_function_type )( ::inputdata_t & ) ;
            
            CBasePlayer_exposer.def( 
                "InputSetPostProcessController"
                , InputSetPostProcessController_function_type( &::CBasePlayer::InputSetPostProcessController )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBasePlayer::IsAutoKickDisabled
        
            typedef bool ( ::CBasePlayer::*IsAutoKickDisabled_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsAutoKickDisabled"
                , IsAutoKickDisabled_function_type( &::CBasePlayer::IsAutoKickDisabled ) );
        
        }
        { //::CBasePlayer::IsBot
        
            typedef bool ( ::CBasePlayer::*IsBot_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsBot"
                , IsBot_function_type( &::CBasePlayer::IsBot ) );
        
        }
        { //::CBasePlayer::IsConnected
        
            typedef bool ( ::CBasePlayer::*IsConnected_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsConnected"
                , IsConnected_function_type( &::CBasePlayer::IsConnected ) );
        
        }
        { //::CBasePlayer::IsDead
        
            typedef bool ( ::CBasePlayer::*IsDead_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsDead"
                , IsDead_function_type( &::CBasePlayer::IsDead ) );
        
        }
        { //::CBasePlayer::IsDisconnecting
        
            typedef bool ( ::CBasePlayer::*IsDisconnecting_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsDisconnecting"
                , IsDisconnecting_function_type( &::CBasePlayer::IsDisconnecting ) );
        
        }
        { //::CBasePlayer::IsFakeClient
        
            typedef bool ( ::CBasePlayer::*IsFakeClient_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsFakeClient"
                , IsFakeClient_function_type( &::CBasePlayer::IsFakeClient ) );
        
        }
        { //::CBasePlayer::IsFollowingPhysics
        
            typedef bool ( ::CBasePlayer::*IsFollowingPhysics_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsFollowingPhysics"
                , IsFollowingPhysics_function_type( &::CBasePlayer::IsFollowingPhysics ) );
        
        }
        { //::CBasePlayer::IsHLTV
        
            typedef bool ( ::CBasePlayer::*IsHLTV_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsHLTV"
                , IsHLTV_function_type( &::CBasePlayer::IsHLTV ) );
        
        }
        { //::CBasePlayer::IsIlluminatedByFlashlight
        
            typedef bool ( ::CBasePlayer::*IsIlluminatedByFlashlight_function_type )( ::CBaseEntity *,float * ) ;
            
            CBasePlayer_exposer.def( 
                "IsIlluminatedByFlashlight"
                , IsIlluminatedByFlashlight_function_type( &::CBasePlayer::IsIlluminatedByFlashlight )
                , ( bp::arg("pEntity"), bp::arg("flReturnDot") ) );
        
        }
        { //::CBasePlayer::IsInAVehicle
        
            typedef bool ( ::CBasePlayer::*IsInAVehicle_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsInAVehicle"
                , IsInAVehicle_function_type( &::CBasePlayer::IsInAVehicle ) );
        
        }
        { //::CBasePlayer::IsNetClient
        
            typedef bool ( ::CBasePlayer::*IsNetClient_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsNetClient"
                , IsNetClient_function_type( &::CBasePlayer::IsNetClient ) );
        
        }
        { //::CBasePlayer::IsObserver
        
            typedef bool ( ::CBasePlayer::*IsObserver_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsObserver"
                , IsObserver_function_type( &::CBasePlayer::IsObserver ) );
        
        }
        { //::CBasePlayer::IsOnLadder
        
            typedef bool ( ::CBasePlayer::*IsOnLadder_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsOnLadder"
                , IsOnLadder_function_type( &::CBasePlayer::IsOnLadder ) );
        
        }
        { //::CBasePlayer::IsOnTarget
        
            typedef bool ( ::CBasePlayer::*IsOnTarget_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsOnTarget"
                , IsOnTarget_function_type( &::CBasePlayer::IsOnTarget ) );
        
        }
        { //::CBasePlayer::IsPlayer
        
            typedef bool ( ::CBasePlayer::*IsPlayer_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsPlayer"
                , IsPlayer_function_type( &::CBasePlayer::IsPlayer ) );
        
        }
        { //::CBasePlayer::IsPlayerLockedInPlace
        
            typedef bool ( ::CBasePlayer::*IsPlayerLockedInPlace_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsPlayerLockedInPlace"
                , IsPlayerLockedInPlace_function_type( &::CBasePlayer::IsPlayerLockedInPlace ) );
        
        }
        { //::CBasePlayer::IsPlayerUnderwater
        
            typedef bool ( ::CBasePlayer::*IsPlayerUnderwater_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsPlayerUnderwater"
                , IsPlayerUnderwater_function_type( &::CBasePlayer::IsPlayerUnderwater ) );
        
        }
        { //::CBasePlayer::IsPredictingWeapons
        
            typedef bool ( ::CBasePlayer::*IsPredictingWeapons_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsPredictingWeapons"
                , IsPredictingWeapons_function_type( &::CBasePlayer::IsPredictingWeapons ) );
        
        }
        { //::CBasePlayer::IsReadyToPlay
        
            typedef bool ( ::CBasePlayer::*IsReadyToPlay_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsReadyToPlay"
                , IsReadyToPlay_function_type( &::CBasePlayer::IsReadyToPlay ) );
        
        }
        { //::CBasePlayer::IsReadyToSpawn
        
            typedef bool ( ::CBasePlayer::*IsReadyToSpawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsReadyToSpawn"
                , IsReadyToSpawn_function_type( &::CBasePlayer::IsReadyToSpawn ) );
        
        }
        { //::CBasePlayer::IsReplay
        
            typedef bool ( ::CBasePlayer::*IsReplay_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsReplay"
                , IsReplay_function_type( &::CBasePlayer::IsReplay ) );
        
        }
        { //::CBasePlayer::IsRideablePhysics
        
            typedef bool ( ::CBasePlayer::*IsRideablePhysics_function_type )( ::IPhysicsObject * ) ;
            
            CBasePlayer_exposer.def( 
                "IsRideablePhysics"
                , IsRideablePhysics_function_type( &::CBasePlayer::IsRideablePhysics )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBasePlayer::IsSinglePlayerGameEnding
        
            typedef bool ( ::CBasePlayer::*IsSinglePlayerGameEnding_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "IsSinglePlayerGameEnding"
                , IsSinglePlayerGameEnding_function_type( &::CBasePlayer::IsSinglePlayerGameEnding ) );
        
        }
        { //::CBasePlayer::IsSplitScreenPartner
        
            typedef bool ( ::CBasePlayer::*IsSplitScreenPartner_function_type )( ::CBasePlayer * ) ;
            
            CBasePlayer_exposer.def( 
                "IsSplitScreenPartner"
                , IsSplitScreenPartner_function_type( &::CBasePlayer::IsSplitScreenPartner )
                , ( bp::arg("pPlayer") ) );
        
        }
        { //::CBasePlayer::IsSplitScreenPlayer
        
            typedef bool ( ::CBasePlayer::*IsSplitScreenPlayer_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsSplitScreenPlayer"
                , IsSplitScreenPlayer_function_type( &::CBasePlayer::IsSplitScreenPlayer ) );
        
        }
        { //::CBasePlayer::IsSuitEquipped
        
            typedef bool ( ::CBasePlayer::*IsSuitEquipped_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "IsSuitEquipped"
                , IsSuitEquipped_function_type( &::CBasePlayer::IsSuitEquipped ) );
        
        }
        { //::CBasePlayer::IsUseableEntity
        
            typedef bool ( ::CBasePlayer::*IsUseableEntity_function_type )( ::CBaseEntity *,unsigned int ) ;
            
            CBasePlayer_exposer.def( 
                "IsUseableEntity"
                , IsUseableEntity_function_type( &::CBasePlayer::IsUseableEntity )
                , ( bp::arg("pEntity"), bp::arg("requiredCaps") ) );
        
        }
        { //::CBasePlayer::IsValidObserverTarget
        
            typedef bool ( ::CBasePlayer::*IsValidObserverTarget_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "IsValidObserverTarget"
                , IsValidObserverTarget_function_type( &::CBasePlayer::IsValidObserverTarget )
                , ( bp::arg("target") ) );
        
        }
        { //::CBasePlayer::ItemPostFrame
        
            typedef void ( ::CBasePlayer::*ItemPostFrame_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ItemPostFrame"
                , ItemPostFrame_function_type( &::CBasePlayer::ItemPostFrame ) );
        
        }
        { //::CBasePlayer::ItemPreFrame
        
            typedef void ( ::CBasePlayer::*ItemPreFrame_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ItemPreFrame"
                , ItemPreFrame_function_type( &::CBasePlayer::ItemPreFrame ) );
        
        }
        { //::CBasePlayer::Jump
        
            typedef void ( ::CBasePlayer::*Jump_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Jump"
                , Jump_function_type( &::CBasePlayer::Jump ) );
        
        }
        { //::CBasePlayer::JumptoPosition
        
            typedef void ( ::CBasePlayer::*JumptoPosition_function_type )( ::Vector const &,::QAngle const & ) ;
            
            CBasePlayer_exposer.def( 
                "JumptoPosition"
                , JumptoPosition_function_type( &::CBasePlayer::JumptoPosition )
                , ( bp::arg("origin"), bp::arg("angles") ) );
        
        }
        { //::CBasePlayer::LastTimePlayerTalked
        
            typedef float ( ::CBasePlayer::*LastTimePlayerTalked_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "LastTimePlayerTalked"
                , LastTimePlayerTalked_function_type( &::CBasePlayer::LastTimePlayerTalked ) );
        
        }
        { //::CBasePlayer::LeaveVehicle
        
            typedef void ( ::CBasePlayer::*LeaveVehicle_function_type )( ::Vector const &,::QAngle const & ) ;
            
            CBasePlayer_exposer.def( 
                "LeaveVehicle"
                , LeaveVehicle_function_type( &::CBasePlayer::LeaveVehicle )
                , ( bp::arg("vecExitPoint")=vec3_origin, bp::arg("vecExitAngles")=vec3_angle ) );
        
        }
        { //::CBasePlayer::LocalEyeAngles
        
            typedef ::QAngle const & ( ::CBasePlayer::*LocalEyeAngles_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::CBasePlayer::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBasePlayer::LockPlayerInPlace
        
            typedef void ( ::CBasePlayer::*LockPlayerInPlace_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "LockPlayerInPlace"
                , LockPlayerInPlace_function_type( &::CBasePlayer::LockPlayerInPlace ) );
        
        }
        { //::CBasePlayer::MakeTracer
        
            typedef void ( ::CBasePlayer::*MakeTracer_function_type )( ::Vector const &,::trace_t const &,int ) ;
            
            CBasePlayer_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type( &::CBasePlayer::MakeTracer )
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBasePlayer::MaxSpeed
        
            typedef float ( ::CBasePlayer::*MaxSpeed_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::CBasePlayer::MaxSpeed ) );
        
        }
        { //::CBasePlayer::ModeWantsSpectatorGUI
        
            typedef bool ( ::CBasePlayer::*ModeWantsSpectatorGUI_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "ModeWantsSpectatorGUI"
                , ModeWantsSpectatorGUI_function_type( &::CBasePlayer::ModeWantsSpectatorGUI )
                , ( bp::arg("iMode") ) );
        
        }
        { //::CBasePlayer::ModifyOrAppendPlayerCriteria
        
            typedef void ( ::CBasePlayer::*ModifyOrAppendPlayerCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBasePlayer_exposer.def( 
                "ModifyOrAppendPlayerCriteria"
                , ModifyOrAppendPlayerCriteria_function_type( &::CBasePlayer::ModifyOrAppendPlayerCriteria )
                , ( bp::arg("set") ) );
        
        }
        { //::CBasePlayer::MuzzleFlashTime
        
            typedef float ( ::CBasePlayer::*MuzzleFlashTime_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "MuzzleFlashTime"
                , MuzzleFlashTime_function_type( &::CBasePlayer::MuzzleFlashTime ) );
        
        }
        { //::CBasePlayer::NoClipStateChanged
        
            typedef void ( ::CBasePlayer::*NoClipStateChanged_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "NoClipStateChanged"
                , NoClipStateChanged_function_type( &::CBasePlayer::NoClipStateChanged ) );
        
        }
        { //::CBasePlayer::NotePlayerTalked
        
            typedef void ( ::CBasePlayer::*NotePlayerTalked_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "NotePlayerTalked"
                , NotePlayerTalked_function_type( &::CBasePlayer::NotePlayerTalked ) );
        
        }
        { //::CBasePlayer::NotifyNearbyRadiationSource
        
            typedef void ( ::CBasePlayer::*NotifyNearbyRadiationSource_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "NotifyNearbyRadiationSource"
                , NotifyNearbyRadiationSource_function_type( &::CBasePlayer::NotifyNearbyRadiationSource )
                , ( bp::arg("flRange") ) );
        
        }
        { //::CBasePlayer::NotifySinglePlayerGameEnding
        
            typedef void ( ::CBasePlayer::*NotifySinglePlayerGameEnding_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "NotifySinglePlayerGameEnding"
                , NotifySinglePlayerGameEnding_function_type( &::CBasePlayer::NotifySinglePlayerGameEnding ) );
        
        }
        { //::CBasePlayer::ObjectCaps
        
            typedef int ( ::CBasePlayer::*ObjectCaps_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CBasePlayer::ObjectCaps ) );
        
        }
        { //::CBasePlayer::ObserverUse
        
            typedef void ( ::CBasePlayer::*ObserverUse_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "ObserverUse"
                , ObserverUse_function_type( &::CBasePlayer::ObserverUse )
                , ( bp::arg("bIsPressed") ) );
        
        }
        { //::CBasePlayer::OnDamagedByExplosion
        
            typedef void ( ::CBasePlayer::*OnDamagedByExplosion_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "OnDamagedByExplosion"
                , OnDamagedByExplosion_function_type( &::CBasePlayer::OnDamagedByExplosion )
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::OnMainActivityComplete
        
            typedef void ( ::CBasePlayer::*OnMainActivityComplete_function_type )( ::Activity,::Activity ) ;
            
            CBasePlayer_exposer.def( 
                "OnMainActivityComplete"
                , OnMainActivityComplete_function_type( &::CBasePlayer::OnMainActivityComplete )
                , ( bp::arg("newActivity"), bp::arg("oldActivity") ) );
        
        }
        { //::CBasePlayer::OnMainActivityInterrupted
        
            typedef void ( ::CBasePlayer::*OnMainActivityInterrupted_function_type )( ::Activity,::Activity ) ;
            
            CBasePlayer_exposer.def( 
                "OnMainActivityInterrupted"
                , OnMainActivityInterrupted_function_type( &::CBasePlayer::OnMainActivityInterrupted )
                , ( bp::arg("newActivity"), bp::arg("oldActivity") ) );
        
        }
        { //::CBasePlayer::OnRestore
        
            typedef void ( ::CBasePlayer::*OnRestore_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "OnRestore"
                , OnRestore_function_type( &::CBasePlayer::OnRestore ) );
        
        }
        { //::CBasePlayer::OnSpeak
        
            typedef void ( ::CBasePlayer::*OnSpeak_function_type )( ::CBasePlayer *,char const *,float ) ;
            
            CBasePlayer_exposer.def( 
                "OnSpeak"
                , OnSpeak_function_type( &::CBasePlayer::OnSpeak )
                , ( bp::arg("actor"), bp::arg("sound"), bp::arg("duration") ) );
        
        }
        { //::CBasePlayer::OnTakeDamage
        
            typedef int ( ::CBasePlayer::*OnTakeDamage_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type( &::CBasePlayer::OnTakeDamage )
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::OnTakeDamage_Alive
        
            typedef int ( ::CBasePlayer::*OnTakeDamage_Alive_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "OnTakeDamage_Alive"
                , OnTakeDamage_Alive_function_type( &::CBasePlayer::OnTakeDamage_Alive )
                , ( bp::arg("info") ) );
        
        }
        { //::CBasePlayer::OnTonemapTriggerEndTouch
        
            typedef void ( ::CBasePlayer::*OnTonemapTriggerEndTouch_function_type )( ::CTonemapTrigger * ) ;
            
            CBasePlayer_exposer.def( 
                "OnTonemapTriggerEndTouch"
                , OnTonemapTriggerEndTouch_function_type( &::CBasePlayer::OnTonemapTriggerEndTouch )
                , ( bp::arg("pTonemapTrigger") ) );
        
        }
        { //::CBasePlayer::OnTonemapTriggerStartTouch
        
            typedef void ( ::CBasePlayer::*OnTonemapTriggerStartTouch_function_type )( ::CTonemapTrigger * ) ;
            
            CBasePlayer_exposer.def( 
                "OnTonemapTriggerStartTouch"
                , OnTonemapTriggerStartTouch_function_type( &::CBasePlayer::OnTonemapTriggerStartTouch )
                , ( bp::arg("pTonemapTrigger") ) );
        
        }
        { //::CBasePlayer::OnVehicleEnd
        
            typedef void ( ::CBasePlayer::*OnVehicleEnd_function_type )( ::Vector & ) ;
            
            CBasePlayer_exposer.def( 
                "OnVehicleEnd"
                , OnVehicleEnd_function_type( &::CBasePlayer::OnVehicleEnd )
                , ( bp::arg("playerDestPosition") ) );
        
        }
        { //::CBasePlayer::OnVehicleStart
        
            typedef void ( ::CBasePlayer::*OnVehicleStart_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "OnVehicleStart"
                , OnVehicleStart_function_type( &::CBasePlayer::OnVehicleStart ) );
        
        }
        { //::CBasePlayer::OnVoiceTransmit
        
            typedef void ( ::CBasePlayer::*OnVoiceTransmit_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "OnVoiceTransmit"
                , OnVoiceTransmit_function_type( &::CBasePlayer::OnVoiceTransmit ) );
        
        }
        { //::CBasePlayer::PackDeadPlayerItems
        
            typedef void ( ::CBasePlayer::*PackDeadPlayerItems_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PackDeadPlayerItems"
                , PackDeadPlayerItems_function_type( &::CBasePlayer::PackDeadPlayerItems ) );
        
        }
        { //::CBasePlayer::PassesObserverFilter
        
            typedef bool ( ::CBasePlayer::*PassesObserverFilter_function_type )( ::CBaseEntity const * ) ;
            
            CBasePlayer_exposer.def( 
                "PassesObserverFilter"
                , PassesObserverFilter_function_type( &::CBasePlayer::PassesObserverFilter )
                , ( bp::arg("entity") ) );
        
        }
        { //::CBasePlayer::PauseBonusProgress
        
            typedef void ( ::CBasePlayer::*PauseBonusProgress_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "PauseBonusProgress"
                , PauseBonusProgress_function_type( &::CBasePlayer::PauseBonusProgress )
                , ( bp::arg("bPause")=(bool)(true) ) );
        
        }
        { //::CBasePlayer::PhysicsSimulate
        
            typedef void ( ::CBasePlayer::*PhysicsSimulate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PhysicsSimulate"
                , PhysicsSimulate_function_type( &::CBasePlayer::PhysicsSimulate ) );
        
        }
        { //::CBasePlayer::PhysicsSolidMaskForEntity
        
            typedef unsigned int ( ::CBasePlayer::*PhysicsSolidMaskForEntity_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "PhysicsSolidMaskForEntity"
                , PhysicsSolidMaskForEntity_function_type( &::CBasePlayer::PhysicsSolidMaskForEntity ) );
        
        }
        { //::CBasePlayer::PickupObject
        
            typedef void ( ::CBasePlayer::*PickupObject_function_type )( ::CBaseEntity *,bool ) ;
            
            CBasePlayer_exposer.def( 
                "PickupObject"
                , PickupObject_function_type( &::CBasePlayer::PickupObject )
                , ( bp::arg("pObject"), bp::arg("bLimitMassAndSize")=(bool)(true) ) );
        
        }
        { //::CBasePlayer::PlayStepSound
        
            typedef void ( ::CBasePlayer::*PlayStepSound_function_type )( ::Vector &,::surfacedata_t *,float,bool ) ;
            
            CBasePlayer_exposer.def( 
                "PlayStepSound"
                , PlayStepSound_function_type( &::CBasePlayer::PlayStepSound )
                , ( bp::arg("vecOrigin"), bp::arg("psurface"), bp::arg("fvol"), bp::arg("force") ) );
        
        }
        { //::CBasePlayer::PlayUseDenySound
        
            typedef void ( ::CBasePlayer::*PlayUseDenySound_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PlayUseDenySound"
                , PlayUseDenySound_function_type( &::CBasePlayer::PlayUseDenySound ) );
        
        }
        { //::CBasePlayer::PlayerDeathThink
        
            typedef void ( ::CBasePlayer::*PlayerDeathThink_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PlayerDeathThink"
                , PlayerDeathThink_function_type( &::CBasePlayer::PlayerDeathThink ) );
        
        }
        { //::CBasePlayer::PlayerDrownTime
        
            typedef float ( ::CBasePlayer::*PlayerDrownTime_function_type )(  ) const;
            
            CBasePlayer_exposer.def( 
                "PlayerDrownTime"
                , PlayerDrownTime_function_type( &::CBasePlayer::PlayerDrownTime ) );
        
        }
        { //::CBasePlayer::PlayerSolidMask
        
            typedef unsigned int ( ::CBasePlayer::*PlayerSolidMask_function_type )( bool ) const;
            
            CBasePlayer_exposer.def( 
                "PlayerSolidMask"
                , PlayerSolidMask_function_type( &::CBasePlayer::PlayerSolidMask )
                , ( bp::arg("brushOnly")=(bool)(false) ) );
        
        }
        { //::CBasePlayer::PlayerUse
        
            typedef void ( ::CBasePlayer::*PlayerUse_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PlayerUse"
                , PlayerUse_function_type( &::CBasePlayer::PlayerUse ) );
        
        }
        { //::CBasePlayer::PostThink
        
            typedef void ( ::CBasePlayer::*PostThink_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PostThink"
                , PostThink_function_type( &::CBasePlayer::PostThink ) );
        
        }
        { //::CBasePlayer::PostThinkVPhysics
        
            typedef void ( ::CBasePlayer::*PostThinkVPhysics_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PostThinkVPhysics"
                , PostThinkVPhysics_function_type( &::CBasePlayer::PostThinkVPhysics ) );
        
        }
        { //::CBasePlayer::PreThink
        
            typedef void ( ::CBasePlayer::*PreThink_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PreThink"
                , PreThink_function_type( &::CBasePlayer::PreThink ) );
        
        }
        { //::CBasePlayer::Precache
        
            typedef void ( ::CBasePlayer::*Precache_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Precache"
                , Precache_function_type( &::CBasePlayer::Precache ) );
        
        }
        { //::CBasePlayer::PrepareForFullUpdate
        
            typedef void ( ::CBasePlayer::*PrepareForFullUpdate_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PrepareForFullUpdate"
                , PrepareForFullUpdate_function_type( &::CBasePlayer::PrepareForFullUpdate ) );
        
        }
        { //::CBasePlayer::RemoveAllItems
        
            typedef void ( ::CBasePlayer::*RemoveAllItems_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "RemoveAllItems"
                , RemoveAllItems_function_type( &::CBasePlayer::RemoveAllItems )
                , ( bp::arg("removeSuit") ) );
        
        }
        { //::CBasePlayer::RemoveFromPlayerSimulationList
        
            typedef void ( ::CBasePlayer::*RemoveFromPlayerSimulationList_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "RemoveFromPlayerSimulationList"
                , RemoveFromPlayerSimulationList_function_type( &::CBasePlayer::RemoveFromPlayerSimulationList )
                , ( bp::arg("other") ) );
        
        }
        { //::CBasePlayer::RemoveHintTimer
        
            typedef void ( ::CBasePlayer::*RemoveHintTimer_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "RemoveHintTimer"
                , RemoveHintTimer_function_type( &::CBasePlayer::RemoveHintTimer )
                , ( bp::arg("iHintID") ) );
        
        }
        { //::CBasePlayer::RemovePlayerItem
        
            typedef bool ( ::CBasePlayer::*RemovePlayerItem_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "RemovePlayerItem"
                , RemovePlayerItem_function_type( &::CBasePlayer::RemovePlayerItem )
                , ( bp::arg("pItem") ) );
        
        }
        { //::CBasePlayer::RemoveSplitScreenPlayer
        
            typedef void ( ::CBasePlayer::*RemoveSplitScreenPlayer_function_type )( ::CBasePlayer * ) ;
            
            CBasePlayer_exposer.def( 
                "RemoveSplitScreenPlayer"
                , RemoveSplitScreenPlayer_function_type( &::CBasePlayer::RemoveSplitScreenPlayer )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBasePlayer::RemoveSuit
        
            typedef void ( ::CBasePlayer::*RemoveSuit_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "RemoveSuit"
                , RemoveSuit_function_type( &::CBasePlayer::RemoveSuit ) );
        
        }
        { //::CBasePlayer::RequiredEdictIndex
        
            typedef int ( ::CBasePlayer::*RequiredEdictIndex_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "RequiredEdictIndex"
                , RequiredEdictIndex_function_type( &::CBasePlayer::RequiredEdictIndex ) );
        
        }
        { //::CBasePlayer::ResetAutoaim
        
            typedef void ( ::CBasePlayer::*ResetAutoaim_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetAutoaim"
                , ResetAutoaim_function_type( &::CBasePlayer::ResetAutoaim ) );
        
        }
        { //::CBasePlayer::ResetDeathCount
        
            typedef void ( ::CBasePlayer::*ResetDeathCount_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetDeathCount"
                , ResetDeathCount_function_type( &::CBasePlayer::ResetDeathCount ) );
        
        }
        { //::CBasePlayer::ResetFragCount
        
            typedef void ( ::CBasePlayer::*ResetFragCount_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetFragCount"
                , ResetFragCount_function_type( &::CBasePlayer::ResetFragCount ) );
        
        }
        { //::CBasePlayer::ResetObserverMode
        
            typedef void ( ::CBasePlayer::*ResetObserverMode_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetObserverMode"
                , ResetObserverMode_function_type( &::CBasePlayer::ResetObserverMode ) );
        
        }
        { //::CBasePlayer::ResetPerRoundStats
        
            typedef void ( ::CBasePlayer::*ResetPerRoundStats_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetPerRoundStats"
                , ResetPerRoundStats_function_type( &::CBasePlayer::ResetPerRoundStats ) );
        
        }
        { //::CBasePlayer::ResetScores
        
            typedef void ( ::CBasePlayer::*ResetScores_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ResetScores"
                , ResetScores_function_type( &::CBasePlayer::ResetScores ) );
        
        }
        { //::CBasePlayer::RumbleEffect
        
            typedef void ( ::CBasePlayer::*RumbleEffect_function_type )( unsigned char,unsigned char,unsigned char ) ;
            
            CBasePlayer_exposer.def( 
                "RumbleEffect"
                , RumbleEffect_function_type( &::CBasePlayer::RumbleEffect )
                , ( bp::arg("index"), bp::arg("rumbleData"), bp::arg("rumbleFlags") ) );
        
        }
        { //::CBasePlayer::RunNullCommand
        
            typedef void ( ::CBasePlayer::*RunNullCommand_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "RunNullCommand"
                , RunNullCommand_function_type( &::CBasePlayer::RunNullCommand ) );
        
        }
        { //::CBasePlayer::ScriptIsPlayerNoclipping
        
            typedef bool ( ::CBasePlayer::*ScriptIsPlayerNoclipping_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ScriptIsPlayerNoclipping"
                , ScriptIsPlayerNoclipping_function_type( &::CBasePlayer::ScriptIsPlayerNoclipping ) );
        
        }
        { //::CBasePlayer::SelectItem
        
            typedef void ( ::CBasePlayer::*SelectItem_function_type )( char const *,int ) ;
            
            CBasePlayer_exposer.def( 
                "SelectItem"
                , SelectItem_function_type( &::CBasePlayer::SelectItem )
                , ( bp::arg("pstr"), bp::arg("iSubType")=(int)(0) ) );
        
        }
        { //::CBasePlayer::SelectLastItem
        
            typedef void ( ::CBasePlayer::*SelectLastItem_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "SelectLastItem"
                , SelectLastItem_function_type( &::CBasePlayer::SelectLastItem ) );
        
        }
        { //::CBasePlayer::SetActivity
        
            typedef void ( ::CBasePlayer::*SetActivity_function_type )( ::Activity ) ;
            
            CBasePlayer_exposer.def( 
                "SetActivity"
                , SetActivity_function_type( &::CBasePlayer::SetActivity )
                , ( bp::arg("eActivity") ) );
        
        }
        { //::CBasePlayer::SetAdditionalPVSOrigin
        
            typedef void ( ::CBasePlayer::*SetAdditionalPVSOrigin_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "SetAdditionalPVSOrigin"
                , SetAdditionalPVSOrigin_function_type( &::CBasePlayer::SetAdditionalPVSOrigin )
                , ( bp::arg("vecOrigin") ) );
        
        }
        { //::CBasePlayer::SetAnimation
        
            typedef void ( ::CBasePlayer::*SetAnimation_function_type )( ::PLAYER_ANIM ) ;
            
            CBasePlayer_exposer.def( 
                "SetAnimation"
                , SetAnimation_function_type( &::CBasePlayer::SetAnimation )
                , ( bp::arg("playerAnim") ) );
        
        }
        { //::CBasePlayer::SetAnimationExtension
        
            typedef void ( ::CBasePlayer::*SetAnimationExtension_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "SetAnimationExtension"
                , SetAnimationExtension_function_type( &::CBasePlayer::SetAnimationExtension )
                , ( bp::arg("pExtension") ) );
        
        }
        { //::CBasePlayer::SetArmorValue
        
            typedef void ( ::CBasePlayer::*SetArmorValue_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetArmorValue"
                , SetArmorValue_function_type( &::CBasePlayer::SetArmorValue )
                , ( bp::arg("value") ) );
        
        }
        { //::CBasePlayer::SetBodyPitch
        
            typedef void ( ::CBasePlayer::*SetBodyPitch_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetBodyPitch"
                , SetBodyPitch_function_type( &::CBasePlayer::SetBodyPitch )
                , ( bp::arg("flPitch") ) );
        
        }
        { //::CBasePlayer::SetBonusChallenge
        
            typedef void ( ::CBasePlayer::*SetBonusChallenge_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetBonusChallenge"
                , SetBonusChallenge_function_type( &::CBasePlayer::SetBonusChallenge )
                , ( bp::arg("iBonusChallenge") ) );
        
        }
        { //::CBasePlayer::SetBonusProgress
        
            typedef void ( ::CBasePlayer::*SetBonusProgress_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetBonusProgress"
                , SetBonusProgress_function_type( &::CBasePlayer::SetBonusProgress )
                , ( bp::arg("iBonusProgress") ) );
        
        }
        { //::CBasePlayer::SetCameraPVSOrigin
        
            typedef void ( ::CBasePlayer::*SetCameraPVSOrigin_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "SetCameraPVSOrigin"
                , SetCameraPVSOrigin_function_type( &::CBasePlayer::SetCameraPVSOrigin )
                , ( bp::arg("vecOrigin") ) );
        
        }
        { //::CBasePlayer::SetConnected
        
            typedef void ( ::CBasePlayer::*SetConnected_function_type )( ::PlayerConnectedState ) ;
            
            CBasePlayer_exposer.def( 
                "SetConnected"
                , SetConnected_function_type( &::CBasePlayer::SetConnected )
                , ( bp::arg("iConnected") ) );
        
        }
        { //::CBasePlayer::SetDefaultFOV
        
            typedef void ( ::CBasePlayer::*SetDefaultFOV_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetDefaultFOV"
                , SetDefaultFOV_function_type( &::CBasePlayer::SetDefaultFOV )
                , ( bp::arg("FOV") ) );
        
        }
        { //::CBasePlayer::SetFOV
        
            typedef bool ( ::CBasePlayer::*SetFOV_function_type )( ::CBaseEntity *,int,float,int ) ;
            
            CBasePlayer_exposer.def( 
                "SetFOV"
                , SetFOV_function_type( &::CBasePlayer::SetFOV )
                , ( bp::arg("pRequester"), bp::arg("FOV"), bp::arg("zoomRate")=0.0f, bp::arg("iZoomStart")=(int)(0) ) );
        
        }
        { //::CBasePlayer::SetFlashlightEnabled
        
            typedef void ( ::CBasePlayer::*SetFlashlightEnabled_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetFlashlightEnabled"
                , SetFlashlightEnabled_function_type( &::CBasePlayer::SetFlashlightEnabled )
                , ( bp::arg("bState") ) );
        
        }
        { //::CBasePlayer::SetLadderNormal
        
            typedef void ( ::CBasePlayer::*SetLadderNormal_function_type )( ::Vector ) ;
            
            CBasePlayer_exposer.def( 
                "SetLadderNormal"
                , SetLadderNormal_function_type( &::CBasePlayer::SetLadderNormal )
                , ( bp::arg("vecLadderNormal") ) );
        
        }
        { //::CBasePlayer::SetLaggedMovementValue
        
            typedef void ( ::CBasePlayer::*SetLaggedMovementValue_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetLaggedMovementValue"
                , SetLaggedMovementValue_function_type( &::CBasePlayer::SetLaggedMovementValue )
                , ( bp::arg("flValue") ) );
        
        }
        { //::CBasePlayer::SetMaxSpeed
        
            typedef void ( ::CBasePlayer::*SetMaxSpeed_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetMaxSpeed"
                , SetMaxSpeed_function_type( &::CBasePlayer::SetMaxSpeed )
                , ( bp::arg("flMaxSpeed") ) );
        
        }
        { //::CBasePlayer::SetMuzzleFlashTime
        
            typedef void ( ::CBasePlayer::*SetMuzzleFlashTime_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetMuzzleFlashTime"
                , SetMuzzleFlashTime_function_type( &::CBasePlayer::SetMuzzleFlashTime )
                , ( bp::arg("flTime") ) );
        
        }
        { //::CBasePlayer::SetObserverMode
        
            typedef bool ( ::CBasePlayer::*SetObserverMode_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetObserverMode"
                , SetObserverMode_function_type( &::CBasePlayer::SetObserverMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::CBasePlayer::SetObserverTarget
        
            typedef bool ( ::CBasePlayer::*SetObserverTarget_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "SetObserverTarget"
                , SetObserverTarget_function_type( &::CBasePlayer::SetObserverTarget )
                , ( bp::arg("target") ) );
        
        }
        { //::CBasePlayer::SetPhysicsFlag
        
            typedef void ( ::CBasePlayer::*SetPhysicsFlag_function_type )( int,bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetPhysicsFlag"
                , SetPhysicsFlag_function_type( &::CBasePlayer::SetPhysicsFlag )
                , ( bp::arg("nFlag"), bp::arg("bSet") ) );
        
        }
        { //::CBasePlayer::SetPlayerLocked
        
            typedef void ( ::CBasePlayer::*SetPlayerLocked_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetPlayerLocked"
                , SetPlayerLocked_function_type( &::CBasePlayer::SetPlayerLocked )
                , ( bp::arg("nLock") ) );
        
        }
        { //::CBasePlayer::SetPlayerName
        
            typedef void ( ::CBasePlayer::*SetPlayerName_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "SetPlayerName"
                , SetPlayerName_function_type( &::CBasePlayer::SetPlayerName )
                , ( bp::arg("name") ) );
        
        }
        { //::CBasePlayer::SetPlayerUnderwater
        
            typedef void ( ::CBasePlayer::*SetPlayerUnderwater_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetPlayerUnderwater"
                , SetPlayerUnderwater_function_type( &::CBasePlayer::SetPlayerUnderwater )
                , ( bp::arg("state") ) );
        
        }
        { //::CBasePlayer::SetPreviouslyPredictedOrigin
        
            typedef void ( ::CBasePlayer::*SetPreviouslyPredictedOrigin_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "SetPreviouslyPredictedOrigin"
                , SetPreviouslyPredictedOrigin_function_type( &::CBasePlayer::SetPreviouslyPredictedOrigin )
                , ( bp::arg("vecAbsOrigin") ) );
        
        }
        { //::CBasePlayer::SetPunchAngle
        
            typedef void ( ::CBasePlayer::*SetPunchAngle_function_type )( ::QAngle const & ) ;
            
            CBasePlayer_exposer.def( 
                "SetPunchAngle"
                , SetPunchAngle_function_type( &::CBasePlayer::SetPunchAngle )
                , ( bp::arg("punchAngle") ) );
        
        }
        { //::CBasePlayer::SetPunchAngle
        
            typedef void ( ::CBasePlayer::*SetPunchAngle_function_type )( int,float ) ;
            
            CBasePlayer_exposer.def( 
                "SetPunchAngle"
                , SetPunchAngle_function_type( &::CBasePlayer::SetPunchAngle )
                , ( bp::arg("axis"), bp::arg("value") ) );
        
        }
        { //::CBasePlayer::SetShowHints
        
            typedef void ( ::CBasePlayer::*SetShowHints_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetShowHints"
                , SetShowHints_function_type( &::CBasePlayer::SetShowHints )
                , ( bp::arg("bShowHints") ) );
        
        }
        { //::CBasePlayer::SetSplitScreenPlayer
        
            typedef void ( ::CBasePlayer::*SetSplitScreenPlayer_function_type )( bool,::CBasePlayer * ) ;
            
            CBasePlayer_exposer.def( 
                "SetSplitScreenPlayer"
                , SetSplitScreenPlayer_function_type( &::CBasePlayer::SetSplitScreenPlayer )
                , ( bp::arg("bSplitScreenPlayer"), bp::arg("pOwner") ) );
        
        }
        { //::CBasePlayer::SetStepSoundTime
        
            typedef void ( ::CBasePlayer::*SetStepSoundTime_function_type )( ::stepsoundtimes_t,bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetStepSoundTime"
                , SetStepSoundTime_function_type( &::CBasePlayer::SetStepSoundTime )
                , ( bp::arg("iStepSoundTime"), bp::arg("bWalking") ) );
        
        }
        { //::CBasePlayer::SetSuitUpdate
        
            typedef void ( ::CBasePlayer::*SetSuitUpdate_function_type )( char *,int,int ) ;
            
            CBasePlayer_exposer.def( 
                "SetSuitUpdate"
                , SetSuitUpdate_function_type( &::CBasePlayer::SetSuitUpdate )
                , ( bp::arg("name"), bp::arg("fgroup"), bp::arg("iNoRepeat") ) );
        
        }
        { //::CBasePlayer::SetSwimSoundTime
        
            typedef void ( ::CBasePlayer::*SetSwimSoundTime_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetSwimSoundTime"
                , SetSwimSoundTime_function_type( &::CBasePlayer::SetSwimSoundTime )
                , ( bp::arg("flSwimSoundTime") ) );
        
        }
        { //::CBasePlayer::SetTimeBase
        
            typedef void ( ::CBasePlayer::*SetTimeBase_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetTimeBase"
                , SetTimeBase_function_type( &::CBasePlayer::SetTimeBase )
                , ( bp::arg("flTimeBase") ) );
        
        }
        { //::CBasePlayer::SetTouchedPhysics
        
            typedef void ( ::CBasePlayer::*SetTouchedPhysics_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "SetTouchedPhysics"
                , SetTouchedPhysics_function_type( &::CBasePlayer::SetTouchedPhysics )
                , ( bp::arg("bTouch") ) );
        
        }
        { //::CBasePlayer::SetUseEntity
        
            typedef void ( ::CBasePlayer::*SetUseEntity_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "SetUseEntity"
                , SetUseEntity_function_type( &::CBasePlayer::SetUseEntity )
                , ( bp::arg("pUseEntity") ) );
        
        }
        { //::CBasePlayer::SetVCollisionState
        
            typedef void ( ::CBasePlayer::*SetVCollisionState_function_type )( ::Vector const &,::Vector const &,int ) ;
            
            CBasePlayer_exposer.def( 
                "SetVCollisionState"
                , SetVCollisionState_function_type( &::CBasePlayer::SetVCollisionState )
                , ( bp::arg("vecAbsOrigin"), bp::arg("vecAbsVelocity"), bp::arg("collisionState") ) );
        
        }
        { //::CBasePlayer::SetVehicleAnalogControlBias
        
            typedef void ( ::CBasePlayer::*SetVehicleAnalogControlBias_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "SetVehicleAnalogControlBias"
                , SetVehicleAnalogControlBias_function_type( &::CBasePlayer::SetVehicleAnalogControlBias )
                , ( bp::arg("bias") ) );
        
        }
        { //::CBasePlayer::SetViewEntity
        
            typedef void ( ::CBasePlayer::*SetViewEntity_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "SetViewEntity"
                , SetViewEntity_function_type( &::CBasePlayer::SetViewEntity )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBasePlayer::SetWaterJumpTime
        
            typedef void ( ::CBasePlayer::*SetWaterJumpTime_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "SetWaterJumpTime"
                , SetWaterJumpTime_function_type( &::CBasePlayer::SetWaterJumpTime )
                , ( bp::arg("flWaterJumpTime") ) );
        
        }
        { //::CBasePlayer::SetupVisibility
        
            typedef void ( ::CBasePlayer::*SetupVisibility_function_type )( ::CBaseEntity *,unsigned char *,int ) ;
            
            CBasePlayer_exposer.def( 
                "SetupVisibility"
                , SetupVisibility_function_type( &::CBasePlayer::SetupVisibility )
                , ( bp::arg("pViewEntity"), bp::arg("pvs"), bp::arg("pvssize") ) );
        
        }
        { //::CBasePlayer::SharedSpawn
        
            typedef void ( ::CBasePlayer::*SharedSpawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "SharedSpawn"
                , SharedSpawn_function_type( &::CBasePlayer::SharedSpawn ) );
        
        }
        { //::CBasePlayer::ShouldAnnounceAchievement
        
            typedef bool ( ::CBasePlayer::*ShouldAnnounceAchievement_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldAnnounceAchievement"
                , ShouldAnnounceAchievement_function_type( &::CBasePlayer::ShouldAnnounceAchievement ) );
        
        }
        { //::CBasePlayer::ShouldAutoaim
        
            typedef bool ( ::CBasePlayer::*ShouldAutoaim_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldAutoaim"
                , ShouldAutoaim_function_type( &::CBasePlayer::ShouldAutoaim ) );
        
        }
        { //::CBasePlayer::ShouldFadeOnDeath
        
            typedef bool ( ::CBasePlayer::*ShouldFadeOnDeath_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldFadeOnDeath"
                , ShouldFadeOnDeath_function_type( &::CBasePlayer::ShouldFadeOnDeath ) );
        
        }
        { //::CBasePlayer::ShouldGainInstantSpawn
        
            typedef bool ( ::CBasePlayer::*ShouldGainInstantSpawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldGainInstantSpawn"
                , ShouldGainInstantSpawn_function_type( &::CBasePlayer::ShouldGainInstantSpawn ) );
        
        }
        { //::CBasePlayer::ShouldSavePhysics
        
            typedef bool ( ::CBasePlayer::*ShouldSavePhysics_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldSavePhysics"
                , ShouldSavePhysics_function_type( &::CBasePlayer::ShouldSavePhysics ) );
        
        }
        { //::CBasePlayer::ShouldShowHints
        
            typedef bool ( ::CBasePlayer::*ShouldShowHints_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldShowHints"
                , ShouldShowHints_function_type( &::CBasePlayer::ShouldShowHints ) );
        
        }
        { //::CBasePlayer::ShouldTakeDamageInCommentaryMode
        
            typedef bool ( ::CBasePlayer::*ShouldTakeDamageInCommentaryMode_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldTakeDamageInCommentaryMode"
                , ShouldTakeDamageInCommentaryMode_function_type( &::CBasePlayer::ShouldTakeDamageInCommentaryMode )
                , ( bp::arg("inputInfo") ) );
        
        }
        { //::CBasePlayer::ShouldThrottleUserMessage
        
            typedef bool ( ::CBasePlayer::*ShouldThrottleUserMessage_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldThrottleUserMessage"
                , ShouldThrottleUserMessage_function_type( &::CBasePlayer::ShouldThrottleUserMessage )
                , ( bp::arg("pchMessageName") ) );
        
        }
        { //::CBasePlayer::ShowCrosshair
        
            typedef void ( ::CBasePlayer::*ShowCrosshair_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "ShowCrosshair"
                , ShowCrosshair_function_type( &::CBasePlayer::ShowCrosshair )
                , ( bp::arg("bShow") ) );
        
        }
        { //::CBasePlayer::ShowViewModel
        
            typedef void ( ::CBasePlayer::*ShowViewModel_function_type )( bool ) ;
            
            CBasePlayer_exposer.def( 
                "ShowViewModel"
                , ShowViewModel_function_type( &::CBasePlayer::ShowViewModel )
                , ( bp::arg("bShow") ) );
        
        }
        { //::CBasePlayer::ShowViewPortPanel
        
            typedef void ( ::CBasePlayer::*ShowViewPortPanel_function_type )( char const *,bool,::KeyValues * ) ;
            
            CBasePlayer_exposer.def( 
                "ShowViewPortPanel"
                , ShowViewPortPanel_function_type( &::CBasePlayer::ShowViewPortPanel )
                , ( bp::arg("name"), bp::arg("bShow")=(bool)(true), bp::arg("data")=bp::object() ) );
        
        }
        { //::CBasePlayer::SimulatePlayerSimulatedEntities
        
            typedef void ( ::CBasePlayer::*SimulatePlayerSimulatedEntities_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "SimulatePlayerSimulatedEntities"
                , SimulatePlayerSimulatedEntities_function_type( &::CBasePlayer::SimulatePlayerSimulatedEntities ) );
        
        }
        { //::CBasePlayer::SmoothViewOnStairs
        
            typedef void ( ::CBasePlayer::*SmoothViewOnStairs_function_type )( ::Vector & ) ;
            
            CBasePlayer_exposer.def( 
                "SmoothViewOnStairs"
                , SmoothViewOnStairs_function_type( &::CBasePlayer::SmoothViewOnStairs )
                , ( bp::arg("eyeOrigin") ) );
        
        }
        { //::CBasePlayer::SnapEyeAngles
        
            typedef void ( ::CBasePlayer::*SnapEyeAngles_function_type )( ::QAngle const & ) ;
            
            CBasePlayer_exposer.def( 
                "SnapEyeAngles"
                , SnapEyeAngles_function_type( &::CBasePlayer::SnapEyeAngles )
                , ( bp::arg("viewAngles") ) );
        
        }
        { //::CBasePlayer::Spawn
        
            typedef void ( ::CBasePlayer::*Spawn_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Spawn"
                , Spawn_function_type( &::CBasePlayer::Spawn ) );
        
        }
        { //::CBasePlayer::StartHintTimer
        
            typedef void ( ::CBasePlayer::*StartHintTimer_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "StartHintTimer"
                , StartHintTimer_function_type( &::CBasePlayer::StartHintTimer )
                , ( bp::arg("iHintID") ) );
        
        }
        { //::CBasePlayer::StartObserverMode
        
            typedef bool ( ::CBasePlayer::*StartObserverMode_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "StartObserverMode"
                , StartObserverMode_function_type( &::CBasePlayer::StartObserverMode )
                , ( bp::arg("mode") ) );
        
        }
        { //::CBasePlayer::StartReplayMode
        
            typedef bool ( ::CBasePlayer::*StartReplayMode_function_type )( float,float,int ) ;
            
            CBasePlayer_exposer.def( 
                "StartReplayMode"
                , StartReplayMode_function_type( &::CBasePlayer::StartReplayMode )
                , ( bp::arg("fDelay"), bp::arg("fDuration"), bp::arg("iEntity") ) );
        
        }
        { //::CBasePlayer::StartUserMessageThrottling
        
            typedef void ( ::CBasePlayer::*StartUserMessageThrottling_function_type )( char const * *,int ) ;
            
            CBasePlayer_exposer.def( 
                "StartUserMessageThrottling"
                , StartUserMessageThrottling_function_type( &::CBasePlayer::StartUserMessageThrottling )
                , ( bp::arg("pchMessageNames"), bp::arg("nNumMessageNames") ) );
        
        }
        { //::CBasePlayer::StopHintTimer
        
            typedef void ( ::CBasePlayer::*StopHintTimer_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "StopHintTimer"
                , StopHintTimer_function_type( &::CBasePlayer::StopHintTimer )
                , ( bp::arg("iHintID") ) );
        
        }
        { //::CBasePlayer::StopObserverMode
        
            typedef void ( ::CBasePlayer::*StopObserverMode_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "StopObserverMode"
                , StopObserverMode_function_type( &::CBasePlayer::StopObserverMode ) );
        
        }
        { //::CBasePlayer::StopReplayMode
        
            typedef void ( ::CBasePlayer::*StopReplayMode_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "StopReplayMode"
                , StopReplayMode_function_type( &::CBasePlayer::StopReplayMode ) );
        
        }
        { //::CBasePlayer::TakeHealth
        
            typedef int ( ::CBasePlayer::*TakeHealth_function_type )( float,int ) ;
            
            CBasePlayer_exposer.def( 
                "TakeHealth"
                , TakeHealth_function_type( &::CBasePlayer::TakeHealth )
                , ( bp::arg("flHealth"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CBasePlayer::ToggleDuck
        
            typedef void ( ::CBasePlayer::*ToggleDuck_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ToggleDuck"
                , ToggleDuck_function_type( &::CBasePlayer::ToggleDuck ) );
        
        }
        { //::CBasePlayer::Touch
        
            typedef void ( ::CBasePlayer::*Touch_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "Touch"
                , Touch_function_type( &::CBasePlayer::Touch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBasePlayer::TouchedPhysics
        
            typedef bool ( ::CBasePlayer::*TouchedPhysics_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "TouchedPhysics"
                , TouchedPhysics_function_type( &::CBasePlayer::TouchedPhysics ) );
        
        }
        { //::CBasePlayer::TraceAttack
        
            typedef void ( ::CBasePlayer::*TraceAttack_function_type )( ::CTakeDamageInfo const &,::Vector const &,::trace_t * ) ;
            
            CBasePlayer_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &::CBasePlayer::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr") ) );
        
        }
        { //::CBasePlayer::UnforceButtons
        
            typedef void ( ::CBasePlayer::*UnforceButtons_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "UnforceButtons"
                , UnforceButtons_function_type( &::CBasePlayer::UnforceButtons )
                , ( bp::arg("nButtons") ) );
        
        }
        { //::CBasePlayer::UnlockPlayer
        
            typedef void ( ::CBasePlayer::*UnlockPlayer_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UnlockPlayer"
                , UnlockPlayer_function_type( &::CBasePlayer::UnlockPlayer ) );
        
        }
        { //::CBasePlayer::UpdateBattery
        
            typedef void ( ::CBasePlayer::*UpdateBattery_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateBattery"
                , UpdateBattery_function_type( &::CBasePlayer::UpdateBattery ) );
        
        }
        { //::CBasePlayer::UpdateClientData
        
            typedef void ( ::CBasePlayer::*UpdateClientData_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateClientData"
                , UpdateClientData_function_type( &::CBasePlayer::UpdateClientData ) );
        
        }
        { //::CBasePlayer::UpdateCollisionBounds
        
            typedef void ( ::CBasePlayer::*UpdateCollisionBounds_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateCollisionBounds"
                , UpdateCollisionBounds_function_type( &::CBasePlayer::UpdateCollisionBounds ) );
        
        }
        { //::CBasePlayer::UpdateFXVolume
        
            typedef void ( ::CBasePlayer::*UpdateFXVolume_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateFXVolume"
                , UpdateFXVolume_function_type( &::CBasePlayer::UpdateFXVolume ) );
        
        }
        { //::CBasePlayer::UpdateGeigerCounter
        
            typedef void ( ::CBasePlayer::*UpdateGeigerCounter_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateGeigerCounter"
                , UpdateGeigerCounter_function_type( &::CBasePlayer::UpdateGeigerCounter ) );
        
        }
        { //::CBasePlayer::UpdateOnRemove
        
            typedef void ( ::CBasePlayer::*UpdateOnRemove_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type( &::CBasePlayer::UpdateOnRemove ) );
        
        }
        { //::CBasePlayer::UpdatePhysicsShadowToCurrentPosition
        
            typedef void ( ::CBasePlayer::*UpdatePhysicsShadowToCurrentPosition_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdatePhysicsShadowToCurrentPosition"
                , UpdatePhysicsShadowToCurrentPosition_function_type( &::CBasePlayer::UpdatePhysicsShadowToCurrentPosition ) );
        
        }
        { //::CBasePlayer::UpdatePhysicsShadowToPosition
        
            typedef void ( ::CBasePlayer::*UpdatePhysicsShadowToPosition_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "UpdatePhysicsShadowToPosition"
                , UpdatePhysicsShadowToPosition_function_type( &::CBasePlayer::UpdatePhysicsShadowToPosition )
                , ( bp::arg("vecAbsOrigin") ) );
        
        }
        { //::CBasePlayer::UpdatePlayerSound
        
            typedef void ( ::CBasePlayer::*UpdatePlayerSound_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdatePlayerSound"
                , UpdatePlayerSound_function_type( &::CBasePlayer::UpdatePlayerSound ) );
        
        }
        { //::CBasePlayer::UpdateStepSound
        
            typedef void ( ::CBasePlayer::*UpdateStepSound_function_type )( ::surfacedata_t *,::Vector const &,::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateStepSound"
                , UpdateStepSound_function_type( &::CBasePlayer::UpdateStepSound )
                , ( bp::arg("psurface"), bp::arg("vecOrigin"), bp::arg("vecVelocity") ) );
        
        }
        { //::CBasePlayer::UpdateTransmitState
        
            typedef int ( ::CBasePlayer::*UpdateTransmitState_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type( &::CBasePlayer::UpdateTransmitState ) );
        
        }
        { //::CBasePlayer::UpdateUnderwaterState
        
            typedef void ( ::CBasePlayer::*UpdateUnderwaterState_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateUnderwaterState"
                , UpdateUnderwaterState_function_type( &::CBasePlayer::UpdateUnderwaterState ) );
        
        }
        { //::CBasePlayer::UpdateVPhysicsPosition
        
            typedef void ( ::CBasePlayer::*UpdateVPhysicsPosition_function_type )( ::Vector const &,::Vector const &,float ) ;
            
            CBasePlayer_exposer.def( 
                "UpdateVPhysicsPosition"
                , UpdateVPhysicsPosition_function_type( &::CBasePlayer::UpdateVPhysicsPosition )
                , ( bp::arg("position"), bp::arg("velocity"), bp::arg("secondsToArrival") ) );
        
        }
        { //::CBasePlayer::UsingStandardWeaponsInVehicle
        
            typedef bool ( ::CBasePlayer::*UsingStandardWeaponsInVehicle_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "UsingStandardWeaponsInVehicle"
                , UsingStandardWeaponsInVehicle_function_type( &::CBasePlayer::UsingStandardWeaponsInVehicle ) );
        
        }
        { //::CBasePlayer::VPhysicsCollision
        
            typedef void ( ::CBasePlayer::*VPhysicsCollision_function_type )( int,::gamevcollisionevent_t * ) ;
            
            CBasePlayer_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type( &::CBasePlayer::VPhysicsCollision )
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBasePlayer::VPhysicsDestroyObject
        
            typedef void ( ::CBasePlayer::*VPhysicsDestroyObject_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "VPhysicsDestroyObject"
                , VPhysicsDestroyObject_function_type( &::CBasePlayer::VPhysicsDestroyObject ) );
        
        }
        { //::CBasePlayer::VPhysicsShadowUpdate
        
            typedef void ( ::CBasePlayer::*VPhysicsShadowUpdate_function_type )( ::IPhysicsObject * ) ;
            
            CBasePlayer_exposer.def( 
                "VPhysicsShadowUpdate"
                , VPhysicsShadowUpdate_function_type( &::CBasePlayer::VPhysicsShadowUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBasePlayer::VPhysicsUpdate
        
            typedef void ( ::CBasePlayer::*VPhysicsUpdate_function_type )( ::IPhysicsObject * ) ;
            
            CBasePlayer_exposer.def( 
                "VPhysicsUpdate"
                , VPhysicsUpdate_function_type( &::CBasePlayer::VPhysicsUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBasePlayer::ValidateCurrentObserverTarget
        
            typedef void ( ::CBasePlayer::*ValidateCurrentObserverTarget_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "ValidateCurrentObserverTarget"
                , ValidateCurrentObserverTarget_function_type( &::CBasePlayer::ValidateCurrentObserverTarget ) );
        
        }
        { //::CBasePlayer::VelocityPunch
        
            typedef void ( ::CBasePlayer::*VelocityPunch_function_type )( ::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "VelocityPunch"
                , VelocityPunch_function_type( &::CBasePlayer::VelocityPunch )
                , ( bp::arg("vecForce") ) );
        
        }
        { //::CBasePlayer::ViewPunch
        
            typedef void ( ::CBasePlayer::*ViewPunch_function_type )( ::QAngle const & ) ;
            
            CBasePlayer_exposer.def( 
                "ViewPunch"
                , ViewPunch_function_type( &::CBasePlayer::ViewPunch )
                , ( bp::arg("angleOffset") ) );
        
        }
        { //::CBasePlayer::ViewPunchReset
        
            typedef void ( ::CBasePlayer::*ViewPunchReset_function_type )( float ) ;
            
            CBasePlayer_exposer.def( 
                "ViewPunchReset"
                , ViewPunchReset_function_type( &::CBasePlayer::ViewPunchReset )
                , ( bp::arg("tolerance")=0 ) );
        
        }
        { //::CBasePlayer::WaterMove
        
            typedef void ( ::CBasePlayer::*WaterMove_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "WaterMove"
                , WaterMove_function_type( &::CBasePlayer::WaterMove ) );
        
        }
        { //::CBasePlayer::Weapon_CanUse
        
            typedef bool ( ::CBasePlayer::*Weapon_CanUse_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_CanUse"
                , Weapon_CanUse_function_type( &::CBasePlayer::Weapon_CanUse )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_Drop
        
            typedef void ( ::CBasePlayer::*Weapon_Drop_function_type )( ::CBaseCombatWeapon *,::Vector const *,::Vector const * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_Drop"
                , Weapon_Drop_function_type( &::CBasePlayer::Weapon_Drop )
                , ( bp::arg("pWeapon"), bp::arg("pvecTarget"), bp::arg("pVelocity") ) );
        
        }
        { //::CBasePlayer::Weapon_DropSlot
        
            typedef void ( ::CBasePlayer::*Weapon_DropSlot_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_DropSlot"
                , Weapon_DropSlot_function_type( &::CBasePlayer::Weapon_DropSlot )
                , ( bp::arg("weaponSlot") ) );
        
        }
        { //::CBasePlayer::Weapon_Equip
        
            typedef void ( ::CBasePlayer::*Weapon_Equip_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_Equip"
                , Weapon_Equip_function_type( &::CBasePlayer::Weapon_Equip )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_GetLast
        
            typedef ::CBaseCombatWeapon * ( ::CBasePlayer::*Weapon_GetLast_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_GetLast"
                , Weapon_GetLast_function_type( &::CBasePlayer::Weapon_GetLast )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBasePlayer::Weapon_SetLast
        
            typedef void ( ::CBasePlayer::*Weapon_SetLast_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_SetLast"
                , Weapon_SetLast_function_type( &::CBasePlayer::Weapon_SetLast )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_ShootPosition
        
            typedef ::Vector ( ::CBasePlayer::*Weapon_ShootPosition_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_ShootPosition"
                , Weapon_ShootPosition_function_type( &::CBasePlayer::Weapon_ShootPosition ) );
        
        }
        { //::CBasePlayer::Weapon_ShouldSelectItem
        
            typedef bool ( ::CBasePlayer::*Weapon_ShouldSelectItem_function_type )( ::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_ShouldSelectItem"
                , Weapon_ShouldSelectItem_function_type( &::CBasePlayer::Weapon_ShouldSelectItem )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_ShouldSetLast
        
            typedef bool ( ::CBasePlayer::*Weapon_ShouldSetLast_function_type )( ::CBaseCombatWeapon *,::CBaseCombatWeapon * ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_ShouldSetLast"
                , Weapon_ShouldSetLast_function_type( &::CBasePlayer::Weapon_ShouldSetLast )
                , ( bp::arg("pOldWeapon"), bp::arg("pNewWeapon") ) );
        
        }
        { //::CBasePlayer::Weapon_Switch
        
            typedef bool ( ::CBasePlayer::*Weapon_Switch_function_type )( ::CBaseCombatWeapon *,int ) ;
            
            CBasePlayer_exposer.def( 
                "Weapon_Switch"
                , Weapon_Switch_function_type( &::CBasePlayer::Weapon_Switch )
                , ( bp::arg("pWeapon"), bp::arg("viewmodelindex")=(int)(0) ) );
        
        }
        CBasePlayer_exposer.def_readwrite( "m_Local", &CBasePlayer::m_Local );
        CBasePlayer_exposer.def_readwrite( "m_PlayerFog", &CBasePlayer::m_PlayerFog );
        CBasePlayer_exposer.def_readwrite( "m_StuckLast", &CBasePlayer::m_StuckLast );
        CBasePlayer_exposer.def_readwrite( "m_afButtonDisabled", &CBasePlayer::m_afButtonDisabled );
        CBasePlayer_exposer.def_readwrite( "m_afButtonForced", &CBasePlayer::m_afButtonForced );
        CBasePlayer_exposer.def_readwrite( "buttonslast", &CBasePlayer::m_afButtonLast );
        CBasePlayer_exposer.def_readwrite( "buttonspressed", &CBasePlayer::m_afButtonPressed );
        CBasePlayer_exposer.def_readwrite( "buttonsreleased", &CBasePlayer::m_afButtonReleased );
        CBasePlayer_exposer.def_readwrite( "m_bLagCompensation", &CBasePlayer::m_bLagCompensation );
        CBasePlayer_exposer.def_readwrite( "m_bPredictWeapons", &CBasePlayer::m_bPredictWeapons );
        CBasePlayer_exposer.def_readwrite( "m_fLerpTime", &CBasePlayer::m_fLerpTime );
        CBasePlayer_exposer.def_readwrite( "m_fOnTarget", &CBasePlayer::m_fOnTarget );
        CBasePlayer_exposer.def_readwrite( "m_flForwardMove", &CBasePlayer::m_flForwardMove );
        CBasePlayer_exposer.def_readwrite( "m_flSideMove", &CBasePlayer::m_flSideMove );
        CBasePlayer_exposer.def_readwrite( "m_hColorCorrectionCtrl", &CBasePlayer::m_hColorCorrectionCtrl );
        CBasePlayer_exposer.def_readwrite( "m_hPostProcessCtrl", &CBasePlayer::m_hPostProcessCtrl );
        CBasePlayer_exposer.def_readwrite( "m_hTriggerSoundscapeList", &CBasePlayer::m_hTriggerSoundscapeList );
        CBasePlayer_exposer.def_readwrite( "m_hTriggerTonemapList", &CBasePlayer::m_hTriggerTonemapList );
        CBasePlayer_exposer.def_readwrite( "buttons", &CBasePlayer::m_nButtons );
        CBasePlayer_exposer.def_readwrite( "m_nNumCrateHudHints", &CBasePlayer::m_nNumCrateHudHints );
        CBasePlayer_exposer.def_readwrite( "m_nUpdateRate", &CBasePlayer::m_nUpdateRate );
        pyplusplus::containers::static_sized::register_array_1< char, 32 >( "__array_1_char_32" );
        { //CBasePlayer::m_szAnimExtension [variable], type=char[32]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 32> ( *array_wrapper_creator )( ::CBasePlayer & );
            
            CBasePlayer_exposer.add_property( "m_szAnimExtension"
                , bp::make_function( array_wrapper_creator(&CBasePlayer_wrapper::pyplusplus_m_szAnimExtension_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        CBasePlayer_exposer.def_readwrite( "pl", &CBasePlayer::pl );
        { //::CBaseCombatCharacter::BecomeRagdoll
        
            typedef bool ( ::CBaseCombatCharacter::*BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_BecomeRagdoll_function_type )( ::CTakeDamageInfo const &,::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "BecomeRagdoll"
                , BecomeRagdoll_function_type(&::CBaseCombatCharacter::BecomeRagdoll)
                , default_BecomeRagdoll_function_type(&CBasePlayer_wrapper::default_BecomeRagdoll)
                , ( bp::arg("info"), bp::arg("forceVector") ) );
        
        }
        { //::CBaseAnimating::CanBecomeRagdoll
        
            typedef bool ( ::CBaseAnimating::*CanBecomeRagdoll_function_type )(  ) ;
            typedef bool ( CBasePlayer_wrapper::*default_CanBecomeRagdoll_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CanBecomeRagdoll"
                , CanBecomeRagdoll_function_type(&::CBaseAnimating::CanBecomeRagdoll)
                , default_CanBecomeRagdoll_function_type(&CBasePlayer_wrapper::default_CanBecomeRagdoll) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            typedef void ( CBasePlayer_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type )( ::Vector *,::Vector * ) ;
            
            CBasePlayer_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBasePlayer_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseCombatCharacter::CorpseGib
        
            typedef bool ( ::CBaseCombatCharacter::*CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_CorpseGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "CorpseGib"
                , CorpseGib_function_type(&::CBaseCombatCharacter::CorpseGib)
                , default_CorpseGib_function_type(&CBasePlayer_wrapper::default_CorpseGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type )(  ) ;
            typedef bool ( CBasePlayer_wrapper::*default_CreateVPhysics_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBasePlayer_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBasePlayer_wrapper::*default_DeathNotice_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBasePlayer_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseAnimating::DrawDebugTextOverlays
        
            typedef int ( ::CBaseAnimating::*DrawDebugTextOverlays_function_type )(  ) ;
            typedef int ( CBasePlayer_wrapper::*default_DrawDebugTextOverlays_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseAnimating::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBasePlayer_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBasePlayer_wrapper::*default_EndTouch_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBasePlayer_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseCombatCharacter::Event_Gibbed
        
            typedef bool ( ::CBaseCombatCharacter::*Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_Event_Gibbed_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "Event_Gibbed"
                , Event_Gibbed_function_type(&::CBaseCombatCharacter::Event_Gibbed)
                , default_Event_Gibbed_function_type(&CBasePlayer_wrapper::default_Event_Gibbed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetIMouse
        
            typedef ::IMouse * ( ::CBaseEntity::*GetIMouse_function_type )(  ) ;
            typedef ::IMouse * ( CBasePlayer_wrapper::*default_GetIMouse_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "GetIMouse"
                , GetIMouse_function_type(&::CBaseEntity::GetIMouse)
                , default_GetIMouse_function_type(&CBasePlayer_wrapper::default_GetIMouse)
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,char const * ) ;
            typedef bool ( CBasePlayer_wrapper::*default_KeyValue_function_type )( char const *,char const * ) ;
            
            CBasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,float ) ;
            typedef bool ( CBasePlayer_wrapper::*default_KeyValue_function_type )( char const *,float ) ;
            
            CBasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,int ) ;
            typedef bool ( CBasePlayer_wrapper::*default_KeyValue_function_type )( char const *,int ) ;
            
            CBasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type )( char const *,::Vector const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_KeyValue_function_type )( char const *,::Vector const & ) ;
            
            CBasePlayer_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBasePlayer_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseAnimating::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseAnimating::*ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            typedef void ( CBasePlayer_wrapper::*default_ModifyOrAppendCriteria_function_type )( ::ResponseRules::CriteriaSet & ) ;
            
            CBasePlayer_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseAnimating::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBasePlayer_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnChangeOwnerNumber
        
            typedef void ( ::CBaseEntity::*OnChangeOwnerNumber_function_type )( int ) ;
            typedef void ( CBasePlayer_wrapper::*default_OnChangeOwnerNumber_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "OnChangeOwnerNumber"
                , OnChangeOwnerNumber_function_type(&::CBaseEntity::OnChangeOwnerNumber)
                , default_OnChangeOwnerNumber_function_type(&CBasePlayer_wrapper::default_OnChangeOwnerNumber)
                , ( bp::arg("old_owner_number") ) );
        
        }
        { //::CBaseAnimating::OnSequenceSet
        
            typedef void ( ::CBaseAnimating::*OnSequenceSet_function_type )( int ) ;
            typedef void ( CBasePlayer_wrapper::*default_OnSequenceSet_function_type )( int ) ;
            
            CBasePlayer_exposer.def( 
                "OnSequenceSet"
                , OnSequenceSet_function_type(&::CBaseAnimating::OnSequenceSet)
                , default_OnSequenceSet_function_type(&CBasePlayer_wrapper::default_OnSequenceSet)
                , ( bp::arg("nOldSequence") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_PassesDamageFilter_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBasePlayer_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type )(  ) ;
            typedef void ( CBasePlayer_wrapper::*default_PostClientActive_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBasePlayer_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type )( char const * ) ;
            typedef void ( CBasePlayer_wrapper::*default_PostConstructor_function_type )( char const * ) ;
            
            CBasePlayer_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBasePlayer_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseAnimating::PyOnNewModel
        
            typedef void ( CBasePlayer_wrapper::*OnNewModel_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "OnNewModel"
                , OnNewModel_function_type( &CBasePlayer_wrapper::default_OnNewModel ) );
        
        }
        { //::CBaseCombatCharacter::ShouldGib
        
            typedef bool ( ::CBaseCombatCharacter::*ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBasePlayer_wrapper::*default_ShouldGib_function_type )( ::CTakeDamageInfo const & ) ;
            
            CBasePlayer_exposer.def( 
                "ShouldGib"
                , ShouldGib_function_type(&::CBaseCombatCharacter::ShouldGib)
                , default_ShouldGib_function_type(&CBasePlayer_wrapper::default_ShouldGib)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type )( ::CBaseEntity * ) ;
            typedef void ( CBasePlayer_wrapper::*default_StartTouch_function_type )( ::CBaseEntity * ) ;
            
            CBasePlayer_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBasePlayer_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type )(  ) ;
            typedef void ( CBasePlayer_wrapper::*default_StopLoopingSounds_function_type )(  ) ;
            
            CBasePlayer_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBasePlayer_wrapper::default_StopLoopingSounds) );
        
        }
        CBasePlayer_exposer.staticmethod( "CanPickupObject" );
        CBasePlayer_exposer.staticmethod( "GetOffset_m_Local" );
        CBasePlayer_exposer.staticmethod( "GetOffset_m_PlayerFog" );
        CBasePlayer_exposer.staticmethod( "GetOffset_pl" );
        CBasePlayer_exposer.staticmethod( "GetPyNetworkType" );
        { //::CBasePlayer::TestCollision
            
                typedef bool ( ::CBasePlayer::*TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;
                typedef bool ( CBasePlayer_wrapper::*default_TestCollision_function_type )( ::Ray_t const &,unsigned int,::trace_t & ) ;

                CBasePlayer_exposer.def( 
                    "TestCollision"
                    , TestCollision_function_type(&::CBasePlayer::TestCollision)
                    , default_TestCollision_function_type(&CBasePlayer_wrapper::default_TestCollision)
                    , ( bp::arg("ray"), bp::arg("mask"), bp::arg("trace") ) );

            }
    }

}

