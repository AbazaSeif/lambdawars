// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "editor/editorsystem.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_editorsystem){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< CEditorSystem >( "CEditorSystem" )    
        .def( 
            "GetCurrentVmfPath"
            , (char const * ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::GetCurrentVmfPath ) )    
        .def( 
            "IsMapLoaded"
            , (bool ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::IsMapLoaded ) )    
        .def( 
            "KeyValuesToVmf"
            , (void ( ::CEditorSystem::* )( ::KeyValues *,::CUtlBuffer & ) )( &::CEditorSystem::KeyValuesToVmf )
            , ( bp::arg("pKV"), bp::arg("vmf") ) )    
        .def( 
            "LoadCurrentVmf"
            , (void ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::LoadCurrentVmf ) )    
        .def( 
            "LoadVmf"
            , (void ( ::CEditorSystem::* )( char const * ) )( &::CEditorSystem::LoadVmf )
            , ( bp::arg("pszVmf") ) )    
        .def( 
            "VmfToKeyValues"
            , (::KeyValues * ( ::CEditorSystem::* )( char const * ) )( &::CEditorSystem::VmfToKeyValues )
            , ( bp::arg("pszVmf") )
            , bp::return_value_policy< bp::return_by_value >() );

    { //::EditorSystem
    
        typedef ::CEditorSystem * ( *EditorSystem_function_type )(  );
        
        bp::def( 
            "EditorSystem"
            , EditorSystem_function_type( &::EditorSystem )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }
}
#else
#include "cbase.h"

#include "editor/editorsystem.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_editorsystem){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< CEditorSystem >( "CEditorSystem" )    
        .def( 
            "GetCurrentVmfPath"
            , (char const * ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::GetCurrentVmfPath ) )    
        .def( 
            "IsMapLoaded"
            , (bool ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::IsMapLoaded ) )    
        .def( 
            "KeyValuesToVmf"
            , (void ( ::CEditorSystem::* )( ::KeyValues *,::CUtlBuffer & ) )( &::CEditorSystem::KeyValuesToVmf )
            , ( bp::arg("pKV"), bp::arg("vmf") ) )    
        .def( 
            "LoadCurrentVmf"
            , (void ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::LoadCurrentVmf ) )    
        .def( 
            "LoadVmf"
            , (void ( ::CEditorSystem::* )( char const * ) )( &::CEditorSystem::LoadVmf )
            , ( bp::arg("pszVmf") ) )    
        .def( 
            "SaveCurrentVmf"
            , (void ( ::CEditorSystem::* )(  ) )( &::CEditorSystem::SaveCurrentVmf ) )    
        .def( 
            "VmfToKeyValues"
            , (::KeyValues * ( ::CEditorSystem::* )( char const * ) )( &::CEditorSystem::VmfToKeyValues )
            , ( bp::arg("pszVmf") )
            , bp::return_value_policy< bp::return_by_value >() );

    { //::EditorSystem
    
        typedef ::CEditorSystem * ( *EditorSystem_function_type )(  );
        
        bp::def( 
            "EditorSystem"
            , EditorSystem_function_type( &::EditorSystem )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }
}
#endif

