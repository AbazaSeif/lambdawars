// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "steam/steam_api.h"

#include "steam/isteamfriends.h"

#include "steam/isteamutils.h"

#include "steam/isteamuser.h"

#include "steam/steamclientpublic.h"

#include "steam/isteamuserstats.h"

#include "srcpy_steam.h"

#include "vgui_avatarimage.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

PY_STEAM_CALLRESULT_WRAPPER( LobbyMatchList, LobbyMatchList_t );

struct LobbyMatchListCallResult_wrapper : LobbyMatchListCallResult, bp::wrapper< LobbyMatchListCallResult > {

    LobbyMatchListCallResult_wrapper(LobbyMatchListCallResult const & arg )
    : LobbyMatchListCallResult( arg )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // copy constructor
        
    }

    LobbyMatchListCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyMatchListCallResult( steamapicall )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyMatchListCallResult, OnLobbyMatchList )
        PY_OVERRIDE_LOG( _steam, LobbyMatchListCallResult, OnLobbyMatchList )
        bp::override func_OnLobbyMatchList = this->get_override( "OnLobbyMatchList" );
        if( func_OnLobbyMatchList.ptr() != Py_None )
            try {
                func_OnLobbyMatchList( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
            }
        else
            this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
    
    void default_OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyGameCreated, LobbyGameCreated_t );

struct LobbyGameCreatedCallResult_wrapper : LobbyGameCreatedCallResult, bp::wrapper< LobbyGameCreatedCallResult > {

    LobbyGameCreatedCallResult_wrapper(LobbyGameCreatedCallResult const & arg )
    : LobbyGameCreatedCallResult( arg )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // copy constructor
        
    }

    LobbyGameCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyGameCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyGameCreatedCallResult, OnLobbyGameCreated )
        PY_OVERRIDE_LOG( _steam, LobbyGameCreatedCallResult, OnLobbyGameCreated )
        bp::override func_OnLobbyGameCreated = this->get_override( "OnLobbyGameCreated" );
        if( func_OnLobbyGameCreated.ptr() != Py_None )
            try {
                func_OnLobbyGameCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
            }
        else
            this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyCreated, LobbyCreated_t );

struct LobbyCreatedCallResult_wrapper : LobbyCreatedCallResult, bp::wrapper< LobbyCreatedCallResult > {

    LobbyCreatedCallResult_wrapper(LobbyCreatedCallResult const & arg )
    : LobbyCreatedCallResult( arg )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // copy constructor
        
    }

    LobbyCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyCreatedCallResult, OnLobbyCreated )
        PY_OVERRIDE_LOG( _steam, LobbyCreatedCallResult, OnLobbyCreated )
        bp::override func_OnLobbyCreated = this->get_override( "OnLobbyCreated" );
        if( func_OnLobbyCreated.ptr() != Py_None )
            try {
                func_OnLobbyCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
            }
        else
            this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatUpdate, LobbyChatUpdate_t );

struct LobbyChatUpdateCallback_wrapper : LobbyChatUpdateCallback, bp::wrapper< LobbyChatUpdateCallback > {

    LobbyChatUpdateCallback_wrapper(LobbyChatUpdateCallback const & arg )
    : LobbyChatUpdateCallback( arg )
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // copy constructor
        
    }

    LobbyChatUpdateCallback_wrapper()
    : LobbyChatUpdateCallback()
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatUpdateCallback, OnLobbyChatUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyChatUpdateCallback, OnLobbyChatUpdate )
        bp::override func_OnLobbyChatUpdate = this->get_override( "OnLobbyChatUpdate" );
        if( func_OnLobbyChatUpdate.ptr() != Py_None )
            try {
                func_OnLobbyChatUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
            }
        else
            this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
    
    void default_OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatMsg, LobbyChatMsg_t );

struct LobbyChatMsgCallback_wrapper : LobbyChatMsgCallback, bp::wrapper< LobbyChatMsgCallback > {

    LobbyChatMsgCallback_wrapper(LobbyChatMsgCallback const & arg )
    : LobbyChatMsgCallback( arg )
      , bp::wrapper< LobbyChatMsgCallback >(){
        // copy constructor
        
    }

    LobbyChatMsgCallback_wrapper()
    : LobbyChatMsgCallback()
      , bp::wrapper< LobbyChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatMsgCallback, OnLobbyChatMsg )
        PY_OVERRIDE_LOG( _steam, LobbyChatMsgCallback, OnLobbyChatMsg )
        bp::override func_OnLobbyChatMsg = this->get_override( "OnLobbyChatMsg" );
        if( func_OnLobbyChatMsg.ptr() != Py_None )
            try {
                func_OnLobbyChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
            }
        else
            this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
    
    void default_OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyDataUpdate, LobbyDataUpdate_t );

struct LobbyDataUpdateCallback_wrapper : LobbyDataUpdateCallback, bp::wrapper< LobbyDataUpdateCallback > {

    LobbyDataUpdateCallback_wrapper(LobbyDataUpdateCallback const & arg )
    : LobbyDataUpdateCallback( arg )
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // copy constructor
        
    }

    LobbyDataUpdateCallback_wrapper()
    : LobbyDataUpdateCallback()
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyDataUpdateCallback, OnLobbyDataUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyDataUpdateCallback, OnLobbyDataUpdate )
        bp::override func_OnLobbyDataUpdate = this->get_override( "OnLobbyDataUpdate" );
        if( func_OnLobbyDataUpdate.ptr() != Py_None )
            try {
                func_OnLobbyDataUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
            }
        else
            this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
    
    void default_OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( NumberOfCurrentPlayers, NumberOfCurrentPlayers_t );

struct NumberOfCurrentPlayersCallResult_wrapper : NumberOfCurrentPlayersCallResult, bp::wrapper< NumberOfCurrentPlayersCallResult > {

    NumberOfCurrentPlayersCallResult_wrapper(NumberOfCurrentPlayersCallResult const & arg )
    : NumberOfCurrentPlayersCallResult( arg )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // copy constructor
        
    }

    NumberOfCurrentPlayersCallResult_wrapper(::SteamAPICall_t steamapicall )
    : NumberOfCurrentPlayersCallResult( steamapicall )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // constructor
    
    }

    virtual void OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        PY_OVERRIDE_LOG( _steam, NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        bp::override func_OnNumberOfCurrentPlayers = this->get_override( "OnNumberOfCurrentPlayers" );
        if( func_OnNumberOfCurrentPlayers.ptr() != Py_None )
            try {
                func_OnNumberOfCurrentPlayers( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
            }
        else
            this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
    
    void default_OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
};

BOOST_PYTHON_MODULE(_steam){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< EAccountType>("EAccountType")
        .value("k_EAccountTypeInvalid", k_EAccountTypeInvalid)
        .value("k_EAccountTypeIndividual", k_EAccountTypeIndividual)
        .value("k_EAccountTypeMultiseat", k_EAccountTypeMultiseat)
        .value("k_EAccountTypeGameServer", k_EAccountTypeGameServer)
        .value("k_EAccountTypeAnonGameServer", k_EAccountTypeAnonGameServer)
        .value("k_EAccountTypePending", k_EAccountTypePending)
        .value("k_EAccountTypeContentServer", k_EAccountTypeContentServer)
        .value("k_EAccountTypeClan", k_EAccountTypeClan)
        .value("k_EAccountTypeChat", k_EAccountTypeChat)
        .value("k_EAccountTypeConsoleUser", k_EAccountTypeConsoleUser)
        .value("k_EAccountTypeAnonUser", k_EAccountTypeAnonUser)
        .value("k_EAccountTypeMax", k_EAccountTypeMax)
        .export_values()
        ;

    bp::enum_< EChatEntryType>("EChatEntryType")
        .value("k_EChatEntryTypeInvalid", k_EChatEntryTypeInvalid)
        .value("k_EChatEntryTypeChatMsg", k_EChatEntryTypeChatMsg)
        .value("k_EChatEntryTypeTyping", k_EChatEntryTypeTyping)
        .value("k_EChatEntryTypeInviteGame", k_EChatEntryTypeInviteGame)
        .value("k_EChatEntryTypeEmote", k_EChatEntryTypeEmote)
        .value("k_EChatEntryTypeLeftConversation", k_EChatEntryTypeLeftConversation)
        .value("k_EChatEntryTypeEntered", k_EChatEntryTypeEntered)
        .value("k_EChatEntryTypeWasKicked", k_EChatEntryTypeWasKicked)
        .value("k_EChatEntryTypeWasBanned", k_EChatEntryTypeWasBanned)
        .value("k_EChatEntryTypeDisconnected", k_EChatEntryTypeDisconnected)
        .value("k_EChatEntryTypeHistoricalChat", k_EChatEntryTypeHistoricalChat)
        .export_values()
        ;

    bp::enum_< EChatMemberStateChange>("EChatMemberStateChange")
        .value("k_EChatMemberStateChangeEntered", k_EChatMemberStateChangeEntered)
        .value("k_EChatMemberStateChangeLeft", k_EChatMemberStateChangeLeft)
        .value("k_EChatMemberStateChangeDisconnected", k_EChatMemberStateChangeDisconnected)
        .value("k_EChatMemberStateChangeKicked", k_EChatMemberStateChangeKicked)
        .value("k_EChatMemberStateChangeBanned", k_EChatMemberStateChangeBanned)
        .export_values()
        ;

    bp::enum_< EChatRoomEnterResponse>("EChatRoomEnterResponse")
        .value("k_EChatRoomEnterResponseSuccess", k_EChatRoomEnterResponseSuccess)
        .value("k_EChatRoomEnterResponseDoesntExist", k_EChatRoomEnterResponseDoesntExist)
        .value("k_EChatRoomEnterResponseNotAllowed", k_EChatRoomEnterResponseNotAllowed)
        .value("k_EChatRoomEnterResponseFull", k_EChatRoomEnterResponseFull)
        .value("k_EChatRoomEnterResponseError", k_EChatRoomEnterResponseError)
        .value("k_EChatRoomEnterResponseBanned", k_EChatRoomEnterResponseBanned)
        .value("k_EChatRoomEnterResponseLimited", k_EChatRoomEnterResponseLimited)
        .value("k_EChatRoomEnterResponseClanDisabled", k_EChatRoomEnterResponseClanDisabled)
        .value("k_EChatRoomEnterResponseCommunityBan", k_EChatRoomEnterResponseCommunityBan)
        .value("k_EChatRoomEnterResponseMemberBlockedYou", k_EChatRoomEnterResponseMemberBlockedYou)
        .value("k_EChatRoomEnterResponseYouBlockedMember", k_EChatRoomEnterResponseYouBlockedMember)
        .export_values()
        ;

    bp::enum_< EDenyReason>("EDenyReason")
        .value("k_EDenyInvalid", k_EDenyInvalid)
        .value("k_EDenyInvalidVersion", k_EDenyInvalidVersion)
        .value("k_EDenyGeneric", k_EDenyGeneric)
        .value("k_EDenyNotLoggedOn", k_EDenyNotLoggedOn)
        .value("k_EDenyNoLicense", k_EDenyNoLicense)
        .value("k_EDenyCheater", k_EDenyCheater)
        .value("k_EDenyLoggedInElseWhere", k_EDenyLoggedInElseWhere)
        .value("k_EDenyUnknownText", k_EDenyUnknownText)
        .value("k_EDenyIncompatibleAnticheat", k_EDenyIncompatibleAnticheat)
        .value("k_EDenyMemoryCorruption", k_EDenyMemoryCorruption)
        .value("k_EDenyIncompatibleSoftware", k_EDenyIncompatibleSoftware)
        .value("k_EDenySteamConnectionLost", k_EDenySteamConnectionLost)
        .value("k_EDenySteamConnectionError", k_EDenySteamConnectionError)
        .value("k_EDenySteamResponseTimedOut", k_EDenySteamResponseTimedOut)
        .value("k_EDenySteamValidationStalled", k_EDenySteamValidationStalled)
        .value("k_EDenySteamOwnerLeftGuestUser", k_EDenySteamOwnerLeftGuestUser)
        .export_values()
        ;

    bp::enum_< EFriendRelationship>("EFriendRelationship")
        .value("k_EFriendRelationshipNone", k_EFriendRelationshipNone)
        .value("k_EFriendRelationshipBlocked", k_EFriendRelationshipBlocked)
        .value("k_EFriendRelationshipRequestRecipient", k_EFriendRelationshipRequestRecipient)
        .value("k_EFriendRelationshipFriend", k_EFriendRelationshipFriend)
        .value("k_EFriendRelationshipRequestInitiator", k_EFriendRelationshipRequestInitiator)
        .value("k_EFriendRelationshipIgnored", k_EFriendRelationshipIgnored)
        .value("k_EFriendRelationshipIgnoredFriend", k_EFriendRelationshipIgnoredFriend)
        .value("k_EFriendRelationshipSuggested", k_EFriendRelationshipSuggested)
        .value("k_EFriendRelationshipMax", k_EFriendRelationshipMax)
        .export_values()
        ;

    bp::enum_< ELobbyComparison>("ELobbyComparison")
        .value("k_ELobbyComparisonEqualToOrLessThan", k_ELobbyComparisonEqualToOrLessThan)
        .value("k_ELobbyComparisonLessThan", k_ELobbyComparisonLessThan)
        .value("k_ELobbyComparisonEqual", k_ELobbyComparisonEqual)
        .value("k_ELobbyComparisonGreaterThan", k_ELobbyComparisonGreaterThan)
        .value("k_ELobbyComparisonEqualToOrGreaterThan", k_ELobbyComparisonEqualToOrGreaterThan)
        .value("k_ELobbyComparisonNotEqual", k_ELobbyComparisonNotEqual)
        .export_values()
        ;

    bp::enum_< ELobbyDistanceFilter>("ELobbyDistanceFilter")
        .value("k_ELobbyDistanceFilterClose", k_ELobbyDistanceFilterClose)
        .value("k_ELobbyDistanceFilterDefault", k_ELobbyDistanceFilterDefault)
        .value("k_ELobbyDistanceFilterFar", k_ELobbyDistanceFilterFar)
        .value("k_ELobbyDistanceFilterWorldwide", k_ELobbyDistanceFilterWorldwide)
        .export_values()
        ;

    bp::enum_< ELobbyType>("ELobbyType")
        .value("k_ELobbyTypePrivate", k_ELobbyTypePrivate)
        .value("k_ELobbyTypeFriendsOnly", k_ELobbyTypeFriendsOnly)
        .value("k_ELobbyTypePublic", k_ELobbyTypePublic)
        .value("k_ELobbyTypeInvisible", k_ELobbyTypeInvisible)
        .export_values()
        ;

    bp::enum_< EPersonaState>("EPersonaState")
        .value("k_EPersonaStateOffline", k_EPersonaStateOffline)
        .value("k_EPersonaStateOnline", k_EPersonaStateOnline)
        .value("k_EPersonaStateBusy", k_EPersonaStateBusy)
        .value("k_EPersonaStateAway", k_EPersonaStateAway)
        .value("k_EPersonaStateSnooze", k_EPersonaStateSnooze)
        .value("k_EPersonaStateLookingToTrade", k_EPersonaStateLookingToTrade)
        .value("k_EPersonaStateLookingToPlay", k_EPersonaStateLookingToPlay)
        .value("k_EPersonaStateMax", k_EPersonaStateMax)
        .export_values()
        ;

    bp::enum_< EResult>("EResult")
        .value("k_EResultOK", k_EResultOK)
        .value("k_EResultFail", k_EResultFail)
        .value("k_EResultNoConnection", k_EResultNoConnection)
        .value("k_EResultInvalidPassword", k_EResultInvalidPassword)
        .value("k_EResultLoggedInElsewhere", k_EResultLoggedInElsewhere)
        .value("k_EResultInvalidProtocolVer", k_EResultInvalidProtocolVer)
        .value("k_EResultInvalidParam", k_EResultInvalidParam)
        .value("k_EResultFileNotFound", k_EResultFileNotFound)
        .value("k_EResultBusy", k_EResultBusy)
        .value("k_EResultInvalidState", k_EResultInvalidState)
        .value("k_EResultInvalidName", k_EResultInvalidName)
        .value("k_EResultInvalidEmail", k_EResultInvalidEmail)
        .value("k_EResultDuplicateName", k_EResultDuplicateName)
        .value("k_EResultAccessDenied", k_EResultAccessDenied)
        .value("k_EResultTimeout", k_EResultTimeout)
        .value("k_EResultBanned", k_EResultBanned)
        .value("k_EResultAccountNotFound", k_EResultAccountNotFound)
        .value("k_EResultInvalidSteamID", k_EResultInvalidSteamID)
        .value("k_EResultServiceUnavailable", k_EResultServiceUnavailable)
        .value("k_EResultNotLoggedOn", k_EResultNotLoggedOn)
        .value("k_EResultPending", k_EResultPending)
        .value("k_EResultEncryptionFailure", k_EResultEncryptionFailure)
        .value("k_EResultInsufficientPrivilege", k_EResultInsufficientPrivilege)
        .value("k_EResultLimitExceeded", k_EResultLimitExceeded)
        .value("k_EResultRevoked", k_EResultRevoked)
        .value("k_EResultExpired", k_EResultExpired)
        .value("k_EResultAlreadyRedeemed", k_EResultAlreadyRedeemed)
        .value("k_EResultDuplicateRequest", k_EResultDuplicateRequest)
        .value("k_EResultAlreadyOwned", k_EResultAlreadyOwned)
        .value("k_EResultIPNotFound", k_EResultIPNotFound)
        .value("k_EResultPersistFailed", k_EResultPersistFailed)
        .value("k_EResultLockingFailed", k_EResultLockingFailed)
        .value("k_EResultLogonSessionReplaced", k_EResultLogonSessionReplaced)
        .value("k_EResultConnectFailed", k_EResultConnectFailed)
        .value("k_EResultHandshakeFailed", k_EResultHandshakeFailed)
        .value("k_EResultIOFailure", k_EResultIOFailure)
        .value("k_EResultRemoteDisconnect", k_EResultRemoteDisconnect)
        .value("k_EResultShoppingCartNotFound", k_EResultShoppingCartNotFound)
        .value("k_EResultBlocked", k_EResultBlocked)
        .value("k_EResultIgnored", k_EResultIgnored)
        .value("k_EResultNoMatch", k_EResultNoMatch)
        .value("k_EResultAccountDisabled", k_EResultAccountDisabled)
        .value("k_EResultServiceReadOnly", k_EResultServiceReadOnly)
        .value("k_EResultAccountNotFeatured", k_EResultAccountNotFeatured)
        .value("k_EResultAdministratorOK", k_EResultAdministratorOK)
        .value("k_EResultContentVersion", k_EResultContentVersion)
        .value("k_EResultTryAnotherCM", k_EResultTryAnotherCM)
        .value("k_EResultPasswordRequiredToKickSession", k_EResultPasswordRequiredToKickSession)
        .value("k_EResultAlreadyLoggedInElsewhere", k_EResultAlreadyLoggedInElsewhere)
        .value("k_EResultSuspended", k_EResultSuspended)
        .value("k_EResultCancelled", k_EResultCancelled)
        .value("k_EResultDataCorruption", k_EResultDataCorruption)
        .value("k_EResultDiskFull", k_EResultDiskFull)
        .value("k_EResultRemoteCallFailed", k_EResultRemoteCallFailed)
        .value("k_EResultPasswordUnset", k_EResultPasswordUnset)
        .value("k_EResultExternalAccountUnlinked", k_EResultExternalAccountUnlinked)
        .value("k_EResultPSNTicketInvalid", k_EResultPSNTicketInvalid)
        .value("k_EResultExternalAccountAlreadyLinked", k_EResultExternalAccountAlreadyLinked)
        .value("k_EResultRemoteFileConflict", k_EResultRemoteFileConflict)
        .value("k_EResultIllegalPassword", k_EResultIllegalPassword)
        .value("k_EResultSameAsPreviousValue", k_EResultSameAsPreviousValue)
        .value("k_EResultAccountLogonDenied", k_EResultAccountLogonDenied)
        .value("k_EResultCannotUseOldPassword", k_EResultCannotUseOldPassword)
        .value("k_EResultInvalidLoginAuthCode", k_EResultInvalidLoginAuthCode)
        .value("k_EResultAccountLogonDeniedNoMail", k_EResultAccountLogonDeniedNoMail)
        .value("k_EResultHardwareNotCapableOfIPT", k_EResultHardwareNotCapableOfIPT)
        .value("k_EResultIPTInitError", k_EResultIPTInitError)
        .value("k_EResultParentalControlRestricted", k_EResultParentalControlRestricted)
        .value("k_EResultFacebookQueryError", k_EResultFacebookQueryError)
        .value("k_EResultExpiredLoginAuthCode", k_EResultExpiredLoginAuthCode)
        .value("k_EResultIPLoginRestrictionFailed", k_EResultIPLoginRestrictionFailed)
        .value("k_EResultAccountLockedDown", k_EResultAccountLockedDown)
        .value("k_EResultAccountLogonDeniedVerifiedEmailRequired", k_EResultAccountLogonDeniedVerifiedEmailRequired)
        .value("k_EResultNoMatchingURL", k_EResultNoMatchingURL)
        .value("k_EResultBadResponse", k_EResultBadResponse)
        .value("k_EResultRequirePasswordReEntry", k_EResultRequirePasswordReEntry)
        .value("k_EResultValueOutOfRange", k_EResultValueOutOfRange)
        .export_values()
        ;

    bp::enum_< ESteamUserStatType>("ESteamUserStatType")
        .value("k_ESteamUserStatTypeINVALID", k_ESteamUserStatTypeINVALID)
        .value("k_ESteamUserStatTypeINT", k_ESteamUserStatTypeINT)
        .value("k_ESteamUserStatTypeFLOAT", k_ESteamUserStatTypeFLOAT)
        .value("k_ESteamUserStatTypeAVGRATE", k_ESteamUserStatTypeAVGRATE)
        .value("k_ESteamUserStatTypeACHIEVEMENTS", k_ESteamUserStatTypeACHIEVEMENTS)
        .value("k_ESteamUserStatTypeGROUPACHIEVEMENTS", k_ESteamUserStatTypeGROUPACHIEVEMENTS)
        .value("k_ESteamUserStatTypeMAX", k_ESteamUserStatTypeMAX)
        .export_values()
        ;

    bp::enum_< EUniverse>("EUniverse")
        .value("k_EUniverseInvalid", k_EUniverseInvalid)
        .value("k_EUniversePublic", k_EUniversePublic)
        .value("k_EUniverseBeta", k_EUniverseBeta)
        .value("k_EUniverseInternal", k_EUniverseInternal)
        .value("k_EUniverseDev", k_EUniverseDev)
        .value("k_EUniverseMax", k_EUniverseMax)
        .export_values()
        ;

    bp::class_< CSteamAPIContext >( "CSteamAPIContext", bp::init< >() )    
        .def( 
            "SteamFriends"
            , (::ISteamFriends * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamFriends )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamMatchmaking"
            , (::ISteamMatchmaking * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamMatchmaking )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUser"
            , (::ISteamUser * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUser )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUserStats"
            , (::ISteamUserStats * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUserStats )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUtils"
            , (::ISteamUtils * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUtils )
            , bp::return_internal_reference< >() );

    { //::CSteamID
        typedef bp::class_< CSteamID > CSteamID_exposer_t;
        CSteamID_exposer_t CSteamID_exposer = CSteamID_exposer_t( "CSteamID", bp::init< >() );
        bp::scope CSteamID_scope( CSteamID_exposer );
        CSteamID_exposer.def( bp::init< uint32, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint32, unsigned int, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("unAccountInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint64 >(( bp::arg("ulSteamID") )) );
        bp::implicitly_convertible< uint64, CSteamID >();
        { //::CSteamID::BAnonAccount
        
            typedef bool ( ::CSteamID::*BAnonAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonAccount"
                , BAnonAccount_function_type( &::CSteamID::BAnonAccount ) );
        
        }
        { //::CSteamID::BAnonGameServerAccount
        
            typedef bool ( ::CSteamID::*BAnonGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonGameServerAccount"
                , BAnonGameServerAccount_function_type( &::CSteamID::BAnonGameServerAccount ) );
        
        }
        { //::CSteamID::BAnonUserAccount
        
            typedef bool ( ::CSteamID::*BAnonUserAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonUserAccount"
                , BAnonUserAccount_function_type( &::CSteamID::BAnonUserAccount ) );
        
        }
        { //::CSteamID::BBlankAnonAccount
        
            typedef bool ( ::CSteamID::*BBlankAnonAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BBlankAnonAccount"
                , BBlankAnonAccount_function_type( &::CSteamID::BBlankAnonAccount ) );
        
        }
        { //::CSteamID::BChatAccount
        
            typedef bool ( ::CSteamID::*BChatAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BChatAccount"
                , BChatAccount_function_type( &::CSteamID::BChatAccount ) );
        
        }
        { //::CSteamID::BClanAccount
        
            typedef bool ( ::CSteamID::*BClanAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BClanAccount"
                , BClanAccount_function_type( &::CSteamID::BClanAccount ) );
        
        }
        { //::CSteamID::BConsoleUserAccount
        
            typedef bool ( ::CSteamID::*BConsoleUserAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BConsoleUserAccount"
                , BConsoleUserAccount_function_type( &::CSteamID::BConsoleUserAccount ) );
        
        }
        { //::CSteamID::BContentServerAccount
        
            typedef bool ( ::CSteamID::*BContentServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BContentServerAccount"
                , BContentServerAccount_function_type( &::CSteamID::BContentServerAccount ) );
        
        }
        { //::CSteamID::BGameServerAccount
        
            typedef bool ( ::CSteamID::*BGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BGameServerAccount"
                , BGameServerAccount_function_type( &::CSteamID::BGameServerAccount ) );
        
        }
        { //::CSteamID::BIndividualAccount
        
            typedef bool ( ::CSteamID::*BIndividualAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BIndividualAccount"
                , BIndividualAccount_function_type( &::CSteamID::BIndividualAccount ) );
        
        }
        { //::CSteamID::BPersistentGameServerAccount
        
            typedef bool ( ::CSteamID::*BPersistentGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BPersistentGameServerAccount"
                , BPersistentGameServerAccount_function_type( &::CSteamID::BPersistentGameServerAccount ) );
        
        }
        { //::CSteamID::Clear
        
            typedef void ( ::CSteamID::*Clear_function_type )(  ) ;
            
            CSteamID_exposer.def( 
                "Clear"
                , Clear_function_type( &::CSteamID::Clear ) );
        
        }
        { //::CSteamID::ClearIndividualInstance
        
            typedef void ( ::CSteamID::*ClearIndividualInstance_function_type )(  ) ;
            
            CSteamID_exposer.def( 
                "ClearIndividualInstance"
                , ClearIndividualInstance_function_type( &::CSteamID::ClearIndividualInstance ) );
        
        }
        { //::CSteamID::ConvertToUint64
        
            typedef ::uint64 ( ::CSteamID::*ConvertToUint64_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "ConvertToUint64"
                , ConvertToUint64_function_type( &::CSteamID::ConvertToUint64 ) );
        
        }
        { //::CSteamID::CreateBlankAnonLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonLogon_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonLogon"
                , CreateBlankAnonLogon_function_type( &::CSteamID::CreateBlankAnonLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::CreateBlankAnonUserLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonUserLogon_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonUserLogon"
                , CreateBlankAnonUserLogon_function_type( &::CSteamID::CreateBlankAnonUserLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::FullSet
        
            typedef void ( ::CSteamID::*FullSet_function_type )( ::uint64,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "FullSet"
                , FullSet_function_type( &::CSteamID::FullSet )
                , ( bp::arg("ulIdentifier"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::GetAccountID
        
            typedef ::AccountID_t ( ::CSteamID::*GetAccountID_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetAccountID"
                , GetAccountID_function_type( &::CSteamID::GetAccountID ) );
        
        }
        { //::CSteamID::GetEAccountType
        
            typedef ::EAccountType ( ::CSteamID::*GetEAccountType_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetEAccountType"
                , GetEAccountType_function_type( &::CSteamID::GetEAccountType ) );
        
        }
        { //::CSteamID::GetEUniverse
        
            typedef ::EUniverse ( ::CSteamID::*GetEUniverse_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetEUniverse"
                , GetEUniverse_function_type( &::CSteamID::GetEUniverse ) );
        
        }
        { //::CSteamID::GetStaticAccountKey
        
            typedef ::uint64 ( ::CSteamID::*GetStaticAccountKey_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetStaticAccountKey"
                , GetStaticAccountKey_function_type( &::CSteamID::GetStaticAccountKey ) );
        
        }
        { //::CSteamID::GetUnAccountInstance
        
            typedef ::uint32 ( ::CSteamID::*GetUnAccountInstance_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetUnAccountInstance"
                , GetUnAccountInstance_function_type( &::CSteamID::GetUnAccountInstance ) );
        
        }
        { //::CSteamID::HasNoIndividualInstance
        
            typedef bool ( ::CSteamID::*HasNoIndividualInstance_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "HasNoIndividualInstance"
                , HasNoIndividualInstance_function_type( &::CSteamID::HasNoIndividualInstance ) );
        
        }
        { //::CSteamID::InstancedSet
        
            typedef void ( ::CSteamID::*InstancedSet_function_type )( ::uint32,::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "InstancedSet"
                , InstancedSet_function_type( &::CSteamID::InstancedSet )
                , ( bp::arg("unAccountID"), bp::arg("unInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::IsLobby
        
            typedef bool ( ::CSteamID::*IsLobby_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "IsLobby"
                , IsLobby_function_type( &::CSteamID::IsLobby ) );
        
        }
        { //::CSteamID::IsValid
        
            typedef bool ( ::CSteamID::*IsValid_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::CSteamID::IsValid ) );
        
        }
        { //::CSteamID::Set
        
            typedef void ( ::CSteamID::*Set_function_type )( ::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "Set"
                , Set_function_type( &::CSteamID::Set )
                , ( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::SetAccountID
        
            typedef void ( ::CSteamID::*SetAccountID_function_type )( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountID"
                , SetAccountID_function_type( &::CSteamID::SetAccountID )
                , ( bp::arg("unAccountID") ) );
        
        }
        { //::CSteamID::SetAccountInstance
        
            typedef void ( ::CSteamID::*SetAccountInstance_function_type )( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountInstance"
                , SetAccountInstance_function_type( &::CSteamID::SetAccountInstance )
                , ( bp::arg("unInstance") ) );
        
        }
        { //::CSteamID::SetEUniverse
        
            typedef void ( ::CSteamID::*SetEUniverse_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "SetEUniverse"
                , SetEUniverse_function_type( &::CSteamID::SetEUniverse )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::SetFromUint64
        
            typedef void ( ::CSteamID::*SetFromUint64_function_type )( ::uint64 ) ;
            
            CSteamID_exposer.def( 
                "SetFromUint64"
                , SetFromUint64_function_type( &::CSteamID::SetFromUint64 )
                , ( bp::arg("ulSteamID") ) );
        
        }
        CSteamID_exposer.def( bp::self != bp::self );
        CSteamID_exposer.def( bp::self < bp::self );
        CSteamID_exposer.def( bp::self == bp::self );
        CSteamID_exposer.def( bp::self > bp::self );
    }

    bp::class_< ISteamFriends, boost::noncopyable >( "ISteamFriends", bp::no_init )    
        .def( 
            "ActivateGameOverlay"
            , (void ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::ActivateGameOverlay )
            , ( bp::arg("pchDialog") ) )    
        .def( 
            "ActivateGameOverlayInviteDialog"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::ActivateGameOverlayInviteDialog )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "ActivateGameOverlayToStore"
            , (void ( ::ISteamFriends::* )( ::AppId_t,::EOverlayToStoreFlag ) )( &::ISteamFriends::ActivateGameOverlayToStore )
            , ( bp::arg("nAppID"), bp::arg("eFlag") ) )    
        .def( 
            "ActivateGameOverlayToUser"
            , (void ( ::ISteamFriends::* )( char const *,::CSteamID ) )( &::ISteamFriends::ActivateGameOverlayToUser )
            , ( bp::arg("pchDialog"), bp::arg("steamID") ) )    
        .def( 
            "ActivateGameOverlayToWebPage"
            , (void ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::ActivateGameOverlayToWebPage )
            , ( bp::arg("pchURL") ) )    
        .def( 
            "ClearRichPresence"
            , (void ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::ClearRichPresence ) )    
        .def( 
            "CloseClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::CloseClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "DownloadClanActivityCounts"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID *,int ) )( &::ISteamFriends::DownloadClanActivityCounts )
            , ( bp::arg("psteamIDClans"), bp::arg("cClansToRequest") ) )    
        .def( 
            "EnumerateFollowingList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::uint32 ) )( &::ISteamFriends::EnumerateFollowingList )
            , ( bp::arg("unStartIndex") ) )    
        .def( 
            "GetChatMemberByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetChatMemberByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iUser") ) )    
        .def( 
            "GetClanActivityCounts"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int *,int *,int * ) )( &::ISteamFriends::GetClanActivityCounts )
            , ( bp::arg("steamIDClan"), bp::arg("pnOnline"), bp::arg("pnInGame"), bp::arg("pnChatting") ) )    
        .def( 
            "GetClanByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetClanByIndex )
            , ( bp::arg("iClan") ) )    
        .def( 
            "GetClanChatMemberCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanChatMemberCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanChatMessage"
            , (int ( ::ISteamFriends::* )( ::CSteamID,int,void *,int,::EChatEntryType *,::CSteamID * ) )( &::ISteamFriends::GetClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("iMessage"), bp::arg("prgchText"), bp::arg("cchTextMax"), bp::arg("arg4"), bp::arg("arg5") ) )    
        .def( 
            "GetClanCount"
            , (int ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetClanCount ) )    
        .def( 
            "GetClanName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanName )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOfficerByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetClanOfficerByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iOfficer") ) )    
        .def( 
            "GetClanOfficerCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanOfficerCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOwner"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanOwner )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanTag"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanTag )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetCoplayFriend"
            , (::CSteamID ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetCoplayFriend )
            , ( bp::arg("iCoplayFriend") ) )    
        .def( 
            "GetCoplayFriendCount"
            , (int ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetCoplayFriendCount ) )    
        .def( 
            "GetFollowerCount"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFollowerCount )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetFriendByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int,int ) )( &::ISteamFriends::GetFriendByIndex )
            , ( bp::arg("iFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCoplayGame"
            , (::AppId_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCoplayGame )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCoplayTime"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCoplayTime )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCount"
            , (int ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetFriendCount )
            , ( bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCountFromSource"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCountFromSource )
            , ( bp::arg("steamIDSource") ) )    
        .def( 
            "GetFriendFromSourceByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendFromSourceByIndex )
            , ( bp::arg("steamIDSource"), bp::arg("iFriend") ) )    
        .def( 
            "GetFriendMessage"
            , (int ( ::ISteamFriends::* )( ::CSteamID,int,void *,int,::EChatEntryType * ) )( &::ISteamFriends::GetFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("iMessageID"), bp::arg("pvData"), bp::arg("cubData"), bp::arg("peChatEntryType") ) )    
        .def( 
            "GetFriendPersonaName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendPersonaName )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendPersonaNameHistory"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendPersonaNameHistory )
            , ( bp::arg("steamIDFriend"), bp::arg("iPersonaName") ) )    
        .def( 
            "GetFriendPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendPersonaState )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRelationship"
            , (::EFriendRelationship ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendRelationship )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRichPresence"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::GetFriendRichPresence )
            , ( bp::arg("steamIDFriend"), bp::arg("pchKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyByIndex"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendRichPresenceKeyByIndex )
            , ( bp::arg("steamIDFriend"), bp::arg("iKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendRichPresenceKeyCount )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetLargeFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetLargeFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetMediumFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetMediumFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetPersonaName"
            , (char const * ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetPersonaName ) )    
        .def( 
            "GetPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetPersonaState ) )    
        .def( 
            "GetSmallFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetSmallFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetUserRestrictions"
            , (::uint32 ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetUserRestrictions ) )    
        .def( 
            "HasFriend"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::HasFriend )
            , ( bp::arg("steamIDFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "InviteUserToGame"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::InviteUserToGame )
            , ( bp::arg("steamIDFriend"), bp::arg("pchConnectString") ) )    
        .def( 
            "IsClanChatAdmin"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ) )( &::ISteamFriends::IsClanChatAdmin )
            , ( bp::arg("steamIDClanChat"), bp::arg("steamIDUser") ) )    
        .def( 
            "IsClanChatWindowOpenInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::IsClanChatWindowOpenInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "IsFollowing"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::IsFollowing )
            , ( bp::arg("steamID") ) )    
        .def( 
            "IsUserInSource"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ) )( &::ISteamFriends::IsUserInSource )
            , ( bp::arg("steamIDUser"), bp::arg("steamIDSource") ) )    
        .def( 
            "JoinClanChatRoom"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::JoinClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "LeaveClanChatRoom"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::LeaveClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "OpenClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::OpenClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "ReplyToFriendMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::ReplyToFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("pchMsgToSend") ) )    
        .def( 
            "RequestClanOfficerList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::RequestClanOfficerList )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "RequestFriendRichPresence"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::RequestFriendRichPresence )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "RequestUserInformation"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,bool ) )( &::ISteamFriends::RequestUserInformation )
            , ( bp::arg("steamIDUser"), bp::arg("bRequireNameOnly") ) )    
        .def( 
            "SendClanChatMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::SendClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("pchText") ) )    
        .def( 
            "SetInGameVoiceSpeaking"
            , (void ( ::ISteamFriends::* )( ::CSteamID,bool ) )( &::ISteamFriends::SetInGameVoiceSpeaking )
            , ( bp::arg("steamIDUser"), bp::arg("bSpeaking") ) )    
        .def( 
            "SetListenForFriendsMessages"
            , (bool ( ::ISteamFriends::* )( bool ) )( &::ISteamFriends::SetListenForFriendsMessages )
            , ( bp::arg("bInterceptEnabled") ) )    
        .def( 
            "SetPersonaName"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::SetPersonaName )
            , ( bp::arg("pchPersonaName") ) )    
        .def( 
            "SetPlayedWith"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::SetPlayedWith )
            , ( bp::arg("steamIDUserPlayedWith") ) )    
        .def( 
            "SetRichPresence"
            , (bool ( ::ISteamFriends::* )( char const *,char const * ) )( &::ISteamFriends::SetRichPresence )
            , ( bp::arg("pchKey"), bp::arg("pchValue") ) );

    bp::class_< ISteamMatchmaking, boost::noncopyable >( "ISteamMatchmaking", bp::no_init )    
        .def( 
            "AddFavoriteGame"
            , (int ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32,::uint32 ) )( &::ISteamMatchmaking::AddFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags"), bp::arg("rTime32LastPlayedOnServer") ) )    
        .def( 
            "AddRequestLobbyListCompatibleMembersFilter"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::AddRequestLobbyListCompatibleMembersFilter )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "AddRequestLobbyListDistanceFilter"
            , (void ( ::ISteamMatchmaking::* )( ::ELobbyDistanceFilter ) )( &::ISteamMatchmaking::AddRequestLobbyListDistanceFilter )
            , ( bp::arg("eLobbyDistanceFilter") ) )    
        .def( 
            "AddRequestLobbyListFilterSlotsAvailable"
            , (void ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::AddRequestLobbyListFilterSlotsAvailable )
            , ( bp::arg("nSlotsAvailable") ) )    
        .def( 
            "AddRequestLobbyListNearValueFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int ) )( &::ISteamMatchmaking::AddRequestLobbyListNearValueFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToBeCloseTo") ) )    
        .def( 
            "AddRequestLobbyListNumericalFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int,::ELobbyComparison ) )( &::ISteamMatchmaking::AddRequestLobbyListNumericalFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "AddRequestLobbyListResultCountFilter"
            , (void ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::AddRequestLobbyListResultCountFilter )
            , ( bp::arg("cMaxResults") ) )    
        .def( 
            "AddRequestLobbyListStringFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,char const *,::ELobbyComparison ) )( &::ISteamMatchmaking::AddRequestLobbyListStringFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("pchValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "CreateLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::ELobbyType,int ) )( &::ISteamMatchmaking::CreateLobby )
            , ( bp::arg("eLobbyType"), bp::arg("cMaxMembers") ) )    
        .def( 
            "DeleteLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ) )( &::ISteamMatchmaking::DeleteLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( int,::AppId_t *,::uint32 *,::uint16 *,::uint16 *,::uint32 *,::uint32 * ) )( &::ISteamMatchmaking::GetFavoriteGame )
            , ( bp::arg("iGame"), bp::arg("pnAppID"), bp::arg("pnIP"), bp::arg("pnConnPort"), bp::arg("pnQueryPort"), bp::arg("punFlags"), bp::arg("pRTime32LastPlayedOnServer") ) )    
        .def( 
            "GetFavoriteGameCount"
            , (int ( ::ISteamMatchmaking::* )(  ) )( &::ISteamMatchmaking::GetFavoriteGameCount ) )    
        .def( 
            "GetLobbyByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::GetLobbyByIndex )
            , ( bp::arg("iLobby") ) )    
        .def( 
            "GetLobbyChatEntry"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID,int,::CSteamID *,void *,int,::EChatEntryType * ) )( &::ISteamMatchmaking::GetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser"), bp::arg("pvData"), bp::arg("cubData"), bp::arg("peChatEntryType") ) )    
        .def( 
            "GetLobbyData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ) )( &::ISteamMatchmaking::GetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyDataByIndex"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int,char *,int,char *,int ) )( &::ISteamMatchmaking::GetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData"), bp::arg("pchKey"), bp::arg("cchKeyBufferSize"), bp::arg("pchValue"), bp::arg("cchValueBufferSize") ) )    
        .def( 
            "GetLobbyDataCount"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyDataCount )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyGameServer"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32 *,::uint16 *,::CSteamID * ) )( &::ISteamMatchmaking::GetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("punGameServerIP"), bp::arg("punGameServerPort"), bp::arg("psteamIDGameServer") ) )    
        .def( 
            "GetLobbyMemberByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID,int ) )( &::ISteamMatchmaking::GetLobbyMemberByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iMember") ) )    
        .def( 
            "GetLobbyMemberData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID,char const * ) )( &::ISteamMatchmaking::GetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDUser"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyMemberLimit"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyOwner"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyOwner )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetNumLobbyMembers"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetNumLobbyMembers )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "InviteUserToLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::InviteUserToLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDInvitee") ) )    
        .def( 
            "JoinLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::JoinLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "LeaveLobby"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::LeaveLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RemoveFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32 ) )( &::ISteamMatchmaking::RemoveFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags") ) )    
        .def( 
            "RequestLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::RequestLobbyData )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RequestLobbyList"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )(  ) )( &::ISteamMatchmaking::RequestLobbyList ) )    
        .def( 
            "SendLobbyChatMsg"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,void const *,int ) )( &::ISteamMatchmaking::SendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody"), bp::arg("cubMsgBody") ) )    
        .def( 
            "SetLinkedLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::SetLinkedLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDLobbyDependent") ) )    
        .def( 
            "SetLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ) )( &::ISteamMatchmaking::SetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyGameServer"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32,::uint16,::CSteamID ) )( &::ISteamMatchmaking::SetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("unGameServerIP"), bp::arg("unGameServerPort"), bp::arg("steamIDGameServer") ) )    
        .def( 
            "SetLobbyJoinable"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,bool ) )( &::ISteamMatchmaking::SetLobbyJoinable )
            , ( bp::arg("steamIDLobby"), bp::arg("bLobbyJoinable") ) )    
        .def( 
            "SetLobbyMemberData"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ) )( &::ISteamMatchmaking::SetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyMemberLimit"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int ) )( &::ISteamMatchmaking::SetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby"), bp::arg("cMaxMembers") ) )    
        .def( 
            "SetLobbyOwner"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::SetLobbyOwner )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDNewOwner") ) )    
        .def( 
            "SetLobbyType"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::ELobbyType ) )( &::ISteamMatchmaking::SetLobbyType )
            , ( bp::arg("steamIDLobby"), bp::arg("eLobbyType") ) );

    bp::class_< ISteamUser, boost::noncopyable >( "ISteamUser", bp::no_init )    
        .def( 
            "AdvertiseGame"
            , (void ( ::ISteamUser::* )( ::CSteamID,::uint32,::uint16 ) )( &::ISteamUser::AdvertiseGame )
            , ( bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "BIsBehindNAT"
            , (bool ( ::ISteamUser::* )(  ) )( &::ISteamUser::BIsBehindNAT ) )    
        .def( 
            "BLoggedOn"
            , (bool ( ::ISteamUser::* )(  ) )( &::ISteamUser::BLoggedOn ) )    
        .def( 
            "BeginAuthSession"
            , (::EBeginAuthSessionResult ( ::ISteamUser::* )( void const *,int,::CSteamID ) )( &::ISteamUser::BeginAuthSession )
            , ( bp::arg("pAuthTicket"), bp::arg("cbAuthTicket"), bp::arg("steamID") ) )    
        .def( 
            "CancelAuthTicket"
            , (void ( ::ISteamUser::* )( ::HAuthTicket ) )( &::ISteamUser::CancelAuthTicket )
            , ( bp::arg("hAuthTicket") ) )    
        .def( 
            "DecompressVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( void const *,::uint32,void *,::uint32,::uint32 *,::uint32 ) )( &::ISteamUser::DecompressVoice )
            , ( bp::arg("pCompressed"), bp::arg("cbCompressed"), bp::arg("pDestBuffer"), bp::arg("cbDestBufferSize"), bp::arg("nBytesWritten"), bp::arg("nDesiredSampleRate") ) )    
        .def( 
            "EndAuthSession"
            , (void ( ::ISteamUser::* )( ::CSteamID ) )( &::ISteamUser::EndAuthSession )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetAuthSessionTicket"
            , (::HAuthTicket ( ::ISteamUser::* )( void *,int,::uint32 * ) )( &::ISteamUser::GetAuthSessionTicket )
            , ( bp::arg("pTicket"), bp::arg("cbMaxTicket"), bp::arg("pcbTicket") ) )    
        .def( 
            "GetAvailableVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( ::uint32 *,::uint32 *,::uint32 ) )( &::ISteamUser::GetAvailableVoice )
            , ( bp::arg("pcbCompressed"), bp::arg("pcbUncompressed"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetEncryptedAppTicket"
            , (bool ( ::ISteamUser::* )( void *,int,::uint32 * ) )( &::ISteamUser::GetEncryptedAppTicket )
            , ( bp::arg("pTicket"), bp::arg("cbMaxTicket"), bp::arg("pcbTicket") ) )    
        .def( 
            "GetHSteamUser"
            , (::HSteamUser ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetHSteamUser ) )    
        .def( 
            "GetSteamID"
            , (::CSteamID ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetSteamID ) )    
        .def( 
            "GetUserDataFolder"
            , (bool ( ::ISteamUser::* )( char *,int ) )( &::ISteamUser::GetUserDataFolder )
            , ( bp::arg("pchBuffer"), bp::arg("cubBuffer") ) )    
        .def( 
            "GetVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( bool,void *,::uint32,::uint32 *,bool,void *,::uint32,::uint32 *,::uint32 ) )( &::ISteamUser::GetVoice )
            , ( bp::arg("bWantCompressed"), bp::arg("pDestBuffer"), bp::arg("cbDestBufferSize"), bp::arg("nBytesWritten"), bp::arg("bWantUncompressed"), bp::arg("pUncompressedDestBuffer"), bp::arg("cbUncompressedDestBufferSize"), bp::arg("nUncompressBytesWritten"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetVoiceOptimalSampleRate"
            , (::uint32 ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetVoiceOptimalSampleRate ) )    
        .def( 
            "InitiateGameConnection"
            , (int ( ::ISteamUser::* )( void *,int,::CSteamID,::uint32,::uint16,bool ) )( &::ISteamUser::InitiateGameConnection )
            , ( bp::arg("pAuthBlob"), bp::arg("cbMaxAuthBlob"), bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer"), bp::arg("bSecure") ) )    
        .def( 
            "RequestEncryptedAppTicket"
            , (::SteamAPICall_t ( ::ISteamUser::* )( void *,int ) )( &::ISteamUser::RequestEncryptedAppTicket )
            , ( bp::arg("pDataToInclude"), bp::arg("cbDataToInclude") ) )    
        .def( 
            "StartVoiceRecording"
            , (void ( ::ISteamUser::* )(  ) )( &::ISteamUser::StartVoiceRecording ) )    
        .def( 
            "StopVoiceRecording"
            , (void ( ::ISteamUser::* )(  ) )( &::ISteamUser::StopVoiceRecording ) )    
        .def( 
            "TerminateGameConnection"
            , (void ( ::ISteamUser::* )( ::uint32,::uint16 ) )( &::ISteamUser::TerminateGameConnection )
            , ( bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "TrackAppUsageEvent"
            , (void ( ::ISteamUser::* )( ::CGameID,int,char const * ) )( &::ISteamUser::TrackAppUsageEvent )
            , ( bp::arg("gameID"), bp::arg("eAppUsageEvent"), bp::arg("pchExtraInfo")="" ) )    
        .def( 
            "UserHasLicenseForApp"
            , (::EUserHasLicenseForAppResult ( ::ISteamUser::* )( ::CSteamID,::AppId_t ) )( &::ISteamUser::UserHasLicenseForApp )
            , ( bp::arg("steamID"), bp::arg("appID") ) );

    bp::class_< ISteamUserStats, boost::noncopyable >( "ISteamUserStats", bp::no_init )    
        .def( 
            "AttachLeaderboardUGC"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::UGCHandle_t ) )( &::ISteamUserStats::AttachLeaderboardUGC )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("hUGC") ) )    
        .def( 
            "ClearAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::ClearAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "DownloadLeaderboardEntries"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardDataRequest,int,int ) )( &::ISteamUserStats::DownloadLeaderboardEntries )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardDataRequest"), bp::arg("nRangeStart"), bp::arg("nRangeEnd") ) )    
        .def( 
            "DownloadLeaderboardEntriesForUsers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::CSteamID *,int ) )( &::ISteamUserStats::DownloadLeaderboardEntriesForUsers )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("prgUsers"), bp::arg("cUsers") ) )    
        .def( 
            "FindLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::FindLeaderboard )
            , ( bp::arg("pchLeaderboardName") ) )    
        .def( 
            "FindOrCreateLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const *,::ELeaderboardSortMethod,::ELeaderboardDisplayType ) )( &::ISteamUserStats::FindOrCreateLeaderboard )
            , ( bp::arg("pchLeaderboardName"), bp::arg("eLeaderboardSortMethod"), bp::arg("eLeaderboardDisplayType") ) )    
        .def( 
            "GetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const *,bool * ) )( &::ISteamUserStats::GetAchievement )
            , ( bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetAchievementAchievedPercent"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ) )( &::ISteamUserStats::GetAchievementAchievedPercent )
            , ( bp::arg("pchName"), bp::arg("pflPercent") ) )    
        .def( 
            "GetAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( char const *,bool *,::uint32 * ) )( &::ISteamUserStats::GetAchievementAndUnlockTime )
            , ( bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetAchievementDisplayAttribute"
            , (char const * ( ::ISteamUserStats::* )( char const *,char const * ) )( &::ISteamUserStats::GetAchievementDisplayAttribute )
            , ( bp::arg("pchName"), bp::arg("pchKey") ) )    
        .def( 
            "GetAchievementIcon"
            , (int ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::GetAchievementIcon )
            , ( bp::arg("pchName") ) )    
        .def( 
            "GetAchievementName"
            , (char const * ( ::ISteamUserStats::* )( ::uint32 ) )( &::ISteamUserStats::GetAchievementName )
            , ( bp::arg("iAchievement") ) )    
        .def( 
            "GetDownloadedLeaderboardEntry"
            , (bool ( ::ISteamUserStats::* )( ::SteamLeaderboardEntries_t,int,::LeaderboardEntry_t *,::int32 *,int ) )( &::ISteamUserStats::GetDownloadedLeaderboardEntry )
            , ( bp::arg("hSteamLeaderboardEntries"), bp::arg("index"), bp::arg("pLeaderboardEntry"), bp::arg("pDetails"), bp::arg("cDetailsMax") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int64 * ) )( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,double * ) )( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,::int64 *,::uint32 ) )( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,double *,::uint32 ) )( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetLeaderboardDisplayType"
            , (::ELeaderboardDisplayType ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardDisplayType )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardEntryCount"
            , (int ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardEntryCount )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardName"
            , (char const * ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardName )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardSortMethod"
            , (::ELeaderboardSortMethod ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardSortMethod )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( char *,::uint32,float *,bool * ) )( &::ISteamUserStats::GetMostAchievedAchievementInfo )
            , ( bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNextMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( int,char *,::uint32,float *,bool * ) )( &::ISteamUserStats::GetNextMostAchievedAchievementInfo )
            , ( bp::arg("iIteratorPrevious"), bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNumAchievements"
            , (::uint32 ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::GetNumAchievements ) )    
        .def( 
            "GetNumberOfCurrentPlayers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::GetNumberOfCurrentPlayers ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 * ) )( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ) )( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserAchievement"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool * ) )( &::ISteamUserStats::GetUserAchievement )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetUserAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool *,::uint32 * ) )( &::ISteamUserStats::GetUserAchievementAndUnlockTime )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,::int32 * ) )( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,float * ) )( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "IndicateAchievementProgress"
            , (bool ( ::ISteamUserStats::* )( char const *,::uint32,::uint32 ) )( &::ISteamUserStats::IndicateAchievementProgress )
            , ( bp::arg("pchName"), bp::arg("nCurProgress"), bp::arg("nMaxProgress") ) )    
        .def( 
            "RequestCurrentStats"
            , (bool ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::RequestCurrentStats ) )    
        .def( 
            "RequestGlobalAchievementPercentages"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::RequestGlobalAchievementPercentages ) )    
        .def( 
            "RequestGlobalStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( int ) )( &::ISteamUserStats::RequestGlobalStats )
            , ( bp::arg("nHistoryDays") ) )    
        .def( 
            "RequestUserStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::CSteamID ) )( &::ISteamUserStats::RequestUserStats )
            , ( bp::arg("steamIDUser") ) )    
        .def( 
            "ResetAllStats"
            , (bool ( ::ISteamUserStats::* )( bool ) )( &::ISteamUserStats::ResetAllStats )
            , ( bp::arg("bAchievementsToo") ) )    
        .def( 
            "SetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::SetAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 ) )( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("nData") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float ) )( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("fData") ) )    
        .def( 
            "StoreStats"
            , (bool ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::StoreStats ) )    
        .def( 
            "UpdateAvgRateStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float,double ) )( &::ISteamUserStats::UpdateAvgRateStat )
            , ( bp::arg("pchName"), bp::arg("flCountThisSession"), bp::arg("dSessionLength") ) )    
        .def( 
            "UploadLeaderboardScore"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardUploadScoreMethod,::int32,::int32 const *,int ) )( &::ISteamUserStats::UploadLeaderboardScore )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardUploadScoreMethod"), bp::arg("nScore"), bp::arg("pScoreDetails"), bp::arg("cScoreDetailsCount") ) );

    bp::class_< ISteamUtils, boost::noncopyable >( "ISteamUtils", bp::no_init )    
        .def( 
            "BOverlayNeedsPresent"
            , (bool ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::BOverlayNeedsPresent ) )    
        .def( 
            "CheckFileSignature"
            , (::SteamAPICall_t ( ::ISteamUtils::* )( char const * ) )( &::ISteamUtils::CheckFileSignature )
            , ( bp::arg("szFileName") ) )    
        .def( 
            "GetAPICallFailureReason"
            , (::ESteamAPICallFailure ( ::ISteamUtils::* )( ::SteamAPICall_t ) )( &::ISteamUtils::GetAPICallFailureReason )
            , ( bp::arg("hSteamAPICall") ) )    
        .def( 
            "GetAPICallResult"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,void *,int,int,bool * ) )( &::ISteamUtils::GetAPICallResult )
            , ( bp::arg("hSteamAPICall"), bp::arg("pCallback"), bp::arg("cubCallback"), bp::arg("iCallbackExpected"), bp::arg("pbFailed") ) )    
        .def( 
            "GetAppID"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetAppID ) )    
        .def( 
            "GetCSERIPPort"
            , (bool ( ::ISteamUtils::* )( ::uint32 *,::uint16 * ) )( &::ISteamUtils::GetCSERIPPort )
            , ( bp::arg("unIP"), bp::arg("usPort") ) )    
        .def( 
            "GetConnectedUniverse"
            , (::EUniverse ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetConnectedUniverse ) )    
        .def( 
            "GetCurrentBatteryPower"
            , (::uint8 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetCurrentBatteryPower ) )    
        .def( 
            "GetEnteredGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( char *,::uint32 ) )( &::ISteamUtils::GetEnteredGamepadTextInput )
            , ( bp::arg("pchText"), bp::arg("cchText") ) )    
        .def( 
            "GetEnteredGamepadTextLength"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetEnteredGamepadTextLength ) )    
        .def( 
            "GetIPCCallCount"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetIPCCallCount ) )    
        .def( 
            "GetIPCountry"
            , (char const * ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetIPCountry ) )    
        .def( 
            "GetSecondsSinceAppActive"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSecondsSinceAppActive ) )    
        .def( 
            "GetSecondsSinceComputerActive"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSecondsSinceComputerActive ) )    
        .def( 
            "GetServerRealTime"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetServerRealTime ) )    
        .def( 
            "GetSteamUILanguage"
            , (char const * ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSteamUILanguage ) )    
        .def( 
            "IsAPICallCompleted"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,bool * ) )( &::ISteamUtils::IsAPICallCompleted )
            , ( bp::arg("hSteamAPICall"), bp::arg("pbFailed") ) )    
        .def( 
            "IsOverlayEnabled"
            , (bool ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::IsOverlayEnabled ) )    
        .def( 
            "RunFrame"
            , (void ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::RunFrame ) )    
        .def( 
            "SetOverlayNotificationPosition"
            , (void ( ::ISteamUtils::* )( ::ENotificationPosition ) )( &::ISteamUtils::SetOverlayNotificationPosition )
            , ( bp::arg("eNotificationPosition") ) )    
        .def( 
            "ShowGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( ::EGamepadTextInputMode,::EGamepadTextInputLineMode,char const *,::uint32 ) )( &::ISteamUtils::ShowGamepadTextInput )
            , ( bp::arg("eInputMode"), bp::arg("eLineInputMode"), bp::arg("pchDescription"), bp::arg("unCharMax") ) );

    { //::LobbyChatMsg_t
        typedef bp::class_< LobbyChatMsg_t > LobbyChatMsg_t_exposer_t;
        LobbyChatMsg_t_exposer_t LobbyChatMsg_t_exposer = LobbyChatMsg_t_exposer_t( "LobbyChatMsg_t" );
        bp::scope LobbyChatMsg_t_scope( LobbyChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatMsg_t::k_iCallback;
        LobbyChatMsg_t_exposer.def_readwrite( "chatentrytype", &LobbyChatMsg_t::m_eChatEntryType );
        LobbyChatMsg_t_exposer.def_readwrite( "chatid", &LobbyChatMsg_t::m_iChatID );
        LobbyChatMsg_t_exposer.def_readwrite( "steamidlobby", &LobbyChatMsg_t::m_ulSteamIDLobby );
        LobbyChatMsg_t_exposer.def_readwrite( "steamiduser", &LobbyChatMsg_t::m_ulSteamIDUser );
    }

    { //::LobbyChatUpdate_t
        typedef bp::class_< LobbyChatUpdate_t > LobbyChatUpdate_t_exposer_t;
        LobbyChatUpdate_t_exposer_t LobbyChatUpdate_t_exposer = LobbyChatUpdate_t_exposer_t( "LobbyChatUpdate_t" );
        bp::scope LobbyChatUpdate_t_scope( LobbyChatUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatUpdate_t::k_iCallback;
        LobbyChatUpdate_t_exposer.def_readwrite( "m_rgfchatmemberstatechange", &LobbyChatUpdate_t::m_rgfChatMemberStateChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyChatUpdate_t::m_ulSteamIDLobby );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidmakingchange", &LobbyChatUpdate_t::m_ulSteamIDMakingChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamiduserchanged", &LobbyChatUpdate_t::m_ulSteamIDUserChanged );
    }

    { //::LobbyCreated_t
        typedef bp::class_< LobbyCreated_t > LobbyCreated_t_exposer_t;
        LobbyCreated_t_exposer_t LobbyCreated_t_exposer = LobbyCreated_t_exposer_t( "LobbyCreated_t" );
        bp::scope LobbyCreated_t_scope( LobbyCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyCreated_t::k_iCallback;
        LobbyCreated_t_exposer.def_readwrite( "result", &LobbyCreated_t::m_eResult );
        LobbyCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyCreated_t::m_ulSteamIDLobby );
    }

    { //::LobbyDataUpdate_t
        typedef bp::class_< LobbyDataUpdate_t > LobbyDataUpdate_t_exposer_t;
        LobbyDataUpdate_t_exposer_t LobbyDataUpdate_t_exposer = LobbyDataUpdate_t_exposer_t( "LobbyDataUpdate_t" );
        bp::scope LobbyDataUpdate_t_scope( LobbyDataUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyDataUpdate_t::k_iCallback;
        LobbyDataUpdate_t_exposer.def_readwrite( "success", &LobbyDataUpdate_t::m_bSuccess );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyDataUpdate_t::m_ulSteamIDLobby );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidmember", &LobbyDataUpdate_t::m_ulSteamIDMember );
    }

    { //::LobbyGameCreated_t
        typedef bp::class_< LobbyGameCreated_t > LobbyGameCreated_t_exposer_t;
        LobbyGameCreated_t_exposer_t LobbyGameCreated_t_exposer = LobbyGameCreated_t_exposer_t( "LobbyGameCreated_t" );
        bp::scope LobbyGameCreated_t_scope( LobbyGameCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyGameCreated_t::k_iCallback;
        LobbyGameCreated_t_exposer.def_readwrite( "steamidgameserver", &LobbyGameCreated_t::m_ulSteamIDGameServer );
        LobbyGameCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyGameCreated_t::m_ulSteamIDLobby );
        LobbyGameCreated_t_exposer.def_readwrite( "ip", &LobbyGameCreated_t::m_unIP );
        LobbyGameCreated_t_exposer.def_readwrite( "port", &LobbyGameCreated_t::m_usPort );
    }

    { //::LobbyMatchList_t
        typedef bp::class_< LobbyMatchList_t > LobbyMatchList_t_exposer_t;
        LobbyMatchList_t_exposer_t LobbyMatchList_t_exposer = LobbyMatchList_t_exposer_t( "LobbyMatchList_t" );
        bp::scope LobbyMatchList_t_scope( LobbyMatchList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyMatchList_t::k_iCallback;
        LobbyMatchList_t_exposer.def_readwrite( "lobbiesmatching", &LobbyMatchList_t::m_nLobbiesMatching );
    }

    { //::NumberOfCurrentPlayers_t
        typedef bp::class_< NumberOfCurrentPlayers_t > NumberOfCurrentPlayers_t_exposer_t;
        NumberOfCurrentPlayers_t_exposer_t NumberOfCurrentPlayers_t_exposer = NumberOfCurrentPlayers_t_exposer_t( "NumberOfCurrentPlayers_t" );
        bp::scope NumberOfCurrentPlayers_t_scope( NumberOfCurrentPlayers_t_exposer );
        bp::scope().attr("k_iCallback") = (int)NumberOfCurrentPlayers_t::k_iCallback;
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "success", &NumberOfCurrentPlayers_t::m_bSuccess );
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "players", &NumberOfCurrentPlayers_t::m_cPlayers );
    }

    { //::PyGetLobbyChatEntry
    
        typedef ::boost::python::tuple ( *PyGetLobbyChatEntry_function_type )( ::CSteamID,int,::CSteamID * );
        
        bp::def( 
            "PyGetLobbyChatEntry"
            , PyGetLobbyChatEntry_function_type( &::PyGetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser") ) );
    
    }

    { //::PyGetLobbyDataByIndex
    
        typedef ::boost::python::tuple ( *PyGetLobbyDataByIndex_function_type )( ::CSteamID,int );
        
        bp::def( 
            "PyGetLobbyDataByIndex"
            , PyGetLobbyDataByIndex_function_type( &::PyGetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData") ) );
    
    }

    { //::PySendLobbyChatMsg
    
        typedef bool ( *PySendLobbyChatMsg_function_type )( ::CSteamID,char const * );
        
        bp::def( 
            "PySendLobbyChatMsg"
            , PySendLobbyChatMsg_function_type( &::PySendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody") ) );
    
    }

    { //::SteamAPI_RunCallbacks
    
        typedef void ( *SteamAPI_RunCallbacks_function_type )(  );
        
        bp::def( 
            "SteamAPI_RunCallbacks"
            , SteamAPI_RunCallbacks_function_type( &::SteamAPI_RunCallbacks ) );
    
    }

    bp::scope().attr( "steamapicontext" ) = boost::ref(steamapicontext);

    bp::scope().attr( "QUERY_PORT_NOT_INITIALIZED" ) = (int)QUERY_PORT_NOT_INITIALIZED;

    bp::scope().attr( "QUERY_PORT_ERROR" ) = (int)QUERY_PORT_ERROR;

    bp::scope().attr( "k_cchPersonaNameMax" ) = (int)k_cchPersonaNameMax;

    { //::LobbyMatchListCallResult
        typedef bp::class_< LobbyMatchListCallResult_wrapper > LobbyMatchListCallResult_exposer_t;
        LobbyMatchListCallResult_exposer_t LobbyMatchListCallResult_exposer = LobbyMatchListCallResult_exposer_t( "LobbyMatchListCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyMatchListCallResult_scope( LobbyMatchListCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyMatchListCallResult >();
        { //::LobbyMatchListCallResult::OnLobbyMatchList
        
            typedef void ( ::LobbyMatchListCallResult::*OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
            typedef void ( LobbyMatchListCallResult_wrapper::*default_OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
            
            LobbyMatchListCallResult_exposer.def( 
                "OnLobbyMatchList"
                , OnLobbyMatchList_function_type(&::LobbyMatchListCallResult::OnLobbyMatchList)
                , default_OnLobbyMatchList_function_type(&LobbyMatchListCallResult_wrapper::default_OnLobbyMatchList)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyGameCreatedCallResult
        typedef bp::class_< LobbyGameCreatedCallResult_wrapper > LobbyGameCreatedCallResult_exposer_t;
        LobbyGameCreatedCallResult_exposer_t LobbyGameCreatedCallResult_exposer = LobbyGameCreatedCallResult_exposer_t( "LobbyGameCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyGameCreatedCallResult_scope( LobbyGameCreatedCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyGameCreatedCallResult >();
        { //::LobbyGameCreatedCallResult::OnLobbyGameCreated
        
            typedef void ( ::LobbyGameCreatedCallResult::*OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
            typedef void ( LobbyGameCreatedCallResult_wrapper::*default_OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
            
            LobbyGameCreatedCallResult_exposer.def( 
                "OnLobbyGameCreated"
                , OnLobbyGameCreated_function_type(&::LobbyGameCreatedCallResult::OnLobbyGameCreated)
                , default_OnLobbyGameCreated_function_type(&LobbyGameCreatedCallResult_wrapper::default_OnLobbyGameCreated)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyCreatedCallResult
        typedef bp::class_< LobbyCreatedCallResult_wrapper > LobbyCreatedCallResult_exposer_t;
        LobbyCreatedCallResult_exposer_t LobbyCreatedCallResult_exposer = LobbyCreatedCallResult_exposer_t( "LobbyCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyCreatedCallResult_scope( LobbyCreatedCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyCreatedCallResult >();
        { //::LobbyCreatedCallResult::OnLobbyCreated
        
            typedef void ( ::LobbyCreatedCallResult::*OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
            typedef void ( LobbyCreatedCallResult_wrapper::*default_OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
            
            LobbyCreatedCallResult_exposer.def( 
                "OnLobbyCreated"
                , OnLobbyCreated_function_type(&::LobbyCreatedCallResult::OnLobbyCreated)
                , default_OnLobbyCreated_function_type(&LobbyCreatedCallResult_wrapper::default_OnLobbyCreated)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyChatUpdateCallback
        typedef bp::class_< LobbyChatUpdateCallback_wrapper > LobbyChatUpdateCallback_exposer_t;
        LobbyChatUpdateCallback_exposer_t LobbyChatUpdateCallback_exposer = LobbyChatUpdateCallback_exposer_t( "LobbyChatUpdateCallback", bp::init<>() );
        bp::scope LobbyChatUpdateCallback_scope( LobbyChatUpdateCallback_exposer );
        { //::LobbyChatUpdateCallback::OnLobbyChatUpdate
        
            typedef void ( ::LobbyChatUpdateCallback::*OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
            typedef void ( LobbyChatUpdateCallback_wrapper::*default_OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
            
            LobbyChatUpdateCallback_exposer.def( 
                "OnLobbyChatUpdate"
                , OnLobbyChatUpdate_function_type(&::LobbyChatUpdateCallback::OnLobbyChatUpdate)
                , default_OnLobbyChatUpdate_function_type(&LobbyChatUpdateCallback_wrapper::default_OnLobbyChatUpdate)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::LobbyChatMsgCallback
        typedef bp::class_< LobbyChatMsgCallback_wrapper > LobbyChatMsgCallback_exposer_t;
        LobbyChatMsgCallback_exposer_t LobbyChatMsgCallback_exposer = LobbyChatMsgCallback_exposer_t( "LobbyChatMsgCallback", bp::init<>() );
        bp::scope LobbyChatMsgCallback_scope( LobbyChatMsgCallback_exposer );
        { //::LobbyChatMsgCallback::OnLobbyChatMsg
        
            typedef void ( ::LobbyChatMsgCallback::*OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
            typedef void ( LobbyChatMsgCallback_wrapper::*default_OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
            
            LobbyChatMsgCallback_exposer.def( 
                "OnLobbyChatMsg"
                , OnLobbyChatMsg_function_type(&::LobbyChatMsgCallback::OnLobbyChatMsg)
                , default_OnLobbyChatMsg_function_type(&LobbyChatMsgCallback_wrapper::default_OnLobbyChatMsg)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::LobbyDataUpdateCallback
        typedef bp::class_< LobbyDataUpdateCallback_wrapper > LobbyDataUpdateCallback_exposer_t;
        LobbyDataUpdateCallback_exposer_t LobbyDataUpdateCallback_exposer = LobbyDataUpdateCallback_exposer_t( "LobbyDataUpdateCallback", bp::init<>() );
        bp::scope LobbyDataUpdateCallback_scope( LobbyDataUpdateCallback_exposer );
        { //::LobbyDataUpdateCallback::OnLobbyDataUpdate
        
            typedef void ( ::LobbyDataUpdateCallback::*OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
            typedef void ( LobbyDataUpdateCallback_wrapper::*default_OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
            
            LobbyDataUpdateCallback_exposer.def( 
                "OnLobbyDataUpdate"
                , OnLobbyDataUpdate_function_type(&::LobbyDataUpdateCallback::OnLobbyDataUpdate)
                , default_OnLobbyDataUpdate_function_type(&LobbyDataUpdateCallback_wrapper::default_OnLobbyDataUpdate)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::NumberOfCurrentPlayersCallResult
        typedef bp::class_< NumberOfCurrentPlayersCallResult_wrapper > NumberOfCurrentPlayersCallResult_exposer_t;
        NumberOfCurrentPlayersCallResult_exposer_t NumberOfCurrentPlayersCallResult_exposer = NumberOfCurrentPlayersCallResult_exposer_t( "NumberOfCurrentPlayersCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope NumberOfCurrentPlayersCallResult_scope( NumberOfCurrentPlayersCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, NumberOfCurrentPlayersCallResult >();
        { //::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers
        
            typedef void ( ::NumberOfCurrentPlayersCallResult::*OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
            typedef void ( NumberOfCurrentPlayersCallResult_wrapper::*default_OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
            
            NumberOfCurrentPlayersCallResult_exposer.def( 
                "OnNumberOfCurrentPlayers"
                , OnNumberOfCurrentPlayers_function_type(&::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers)
                , default_OnNumberOfCurrentPlayers_function_type(&NumberOfCurrentPlayersCallResult_wrapper::default_OnNumberOfCurrentPlayers)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    bp::scope().attr("k_uAPICallInvalid") = k_uAPICallInvalid;
}
#else
#include "cbase.h"

#include "steam/steam_api.h"

#include "steam/isteamfriends.h"

#include "steam/isteamutils.h"

#include "steam/isteamuser.h"

#include "steam/steamclientpublic.h"

#include "steam/isteamuserstats.h"

#include "srcpy_steam.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

PY_STEAM_CALLRESULT_WRAPPER( LobbyMatchList, LobbyMatchList_t );

struct LobbyMatchListCallResult_wrapper : LobbyMatchListCallResult, bp::wrapper< LobbyMatchListCallResult > {

    LobbyMatchListCallResult_wrapper(LobbyMatchListCallResult const & arg )
    : LobbyMatchListCallResult( arg )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // copy constructor
        
    }

    LobbyMatchListCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyMatchListCallResult( steamapicall )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyMatchListCallResult, OnLobbyMatchList )
        PY_OVERRIDE_LOG( _steam, LobbyMatchListCallResult, OnLobbyMatchList )
        bp::override func_OnLobbyMatchList = this->get_override( "OnLobbyMatchList" );
        if( func_OnLobbyMatchList.ptr() != Py_None )
            try {
                func_OnLobbyMatchList( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
            }
        else
            this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
    
    void default_OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyGameCreated, LobbyGameCreated_t );

struct LobbyGameCreatedCallResult_wrapper : LobbyGameCreatedCallResult, bp::wrapper< LobbyGameCreatedCallResult > {

    LobbyGameCreatedCallResult_wrapper(LobbyGameCreatedCallResult const & arg )
    : LobbyGameCreatedCallResult( arg )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // copy constructor
        
    }

    LobbyGameCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyGameCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyGameCreatedCallResult, OnLobbyGameCreated )
        PY_OVERRIDE_LOG( _steam, LobbyGameCreatedCallResult, OnLobbyGameCreated )
        bp::override func_OnLobbyGameCreated = this->get_override( "OnLobbyGameCreated" );
        if( func_OnLobbyGameCreated.ptr() != Py_None )
            try {
                func_OnLobbyGameCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
            }
        else
            this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyCreated, LobbyCreated_t );

struct LobbyCreatedCallResult_wrapper : LobbyCreatedCallResult, bp::wrapper< LobbyCreatedCallResult > {

    LobbyCreatedCallResult_wrapper(LobbyCreatedCallResult const & arg )
    : LobbyCreatedCallResult( arg )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // copy constructor
        
    }

    LobbyCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // constructor
    
    }

    virtual void OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyCreatedCallResult, OnLobbyCreated )
        PY_OVERRIDE_LOG( _steam, LobbyCreatedCallResult, OnLobbyCreated )
        bp::override func_OnLobbyCreated = this->get_override( "OnLobbyCreated" );
        if( func_OnLobbyCreated.ptr() != Py_None )
            try {
                func_OnLobbyCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
            }
        else
            this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatUpdate, LobbyChatUpdate_t );

struct LobbyChatUpdateCallback_wrapper : LobbyChatUpdateCallback, bp::wrapper< LobbyChatUpdateCallback > {

    LobbyChatUpdateCallback_wrapper(LobbyChatUpdateCallback const & arg )
    : LobbyChatUpdateCallback( arg )
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // copy constructor
        
    }

    LobbyChatUpdateCallback_wrapper()
    : LobbyChatUpdateCallback()
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatUpdateCallback, OnLobbyChatUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyChatUpdateCallback, OnLobbyChatUpdate )
        bp::override func_OnLobbyChatUpdate = this->get_override( "OnLobbyChatUpdate" );
        if( func_OnLobbyChatUpdate.ptr() != Py_None )
            try {
                func_OnLobbyChatUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
            }
        else
            this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
    
    void default_OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatMsg, LobbyChatMsg_t );

struct LobbyChatMsgCallback_wrapper : LobbyChatMsgCallback, bp::wrapper< LobbyChatMsgCallback > {

    LobbyChatMsgCallback_wrapper(LobbyChatMsgCallback const & arg )
    : LobbyChatMsgCallback( arg )
      , bp::wrapper< LobbyChatMsgCallback >(){
        // copy constructor
        
    }

    LobbyChatMsgCallback_wrapper()
    : LobbyChatMsgCallback()
      , bp::wrapper< LobbyChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatMsgCallback, OnLobbyChatMsg )
        PY_OVERRIDE_LOG( _steam, LobbyChatMsgCallback, OnLobbyChatMsg )
        bp::override func_OnLobbyChatMsg = this->get_override( "OnLobbyChatMsg" );
        if( func_OnLobbyChatMsg.ptr() != Py_None )
            try {
                func_OnLobbyChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
            }
        else
            this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
    
    void default_OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyDataUpdate, LobbyDataUpdate_t );

struct LobbyDataUpdateCallback_wrapper : LobbyDataUpdateCallback, bp::wrapper< LobbyDataUpdateCallback > {

    LobbyDataUpdateCallback_wrapper(LobbyDataUpdateCallback const & arg )
    : LobbyDataUpdateCallback( arg )
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // copy constructor
        
    }

    LobbyDataUpdateCallback_wrapper()
    : LobbyDataUpdateCallback()
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyDataUpdateCallback, OnLobbyDataUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyDataUpdateCallback, OnLobbyDataUpdate )
        bp::override func_OnLobbyDataUpdate = this->get_override( "OnLobbyDataUpdate" );
        if( func_OnLobbyDataUpdate.ptr() != Py_None )
            try {
                func_OnLobbyDataUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
            }
        else
            this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
    
    void default_OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( NumberOfCurrentPlayers, NumberOfCurrentPlayers_t );

struct NumberOfCurrentPlayersCallResult_wrapper : NumberOfCurrentPlayersCallResult, bp::wrapper< NumberOfCurrentPlayersCallResult > {

    NumberOfCurrentPlayersCallResult_wrapper(NumberOfCurrentPlayersCallResult const & arg )
    : NumberOfCurrentPlayersCallResult( arg )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // copy constructor
        
    }

    NumberOfCurrentPlayersCallResult_wrapper(::SteamAPICall_t steamapicall )
    : NumberOfCurrentPlayersCallResult( steamapicall )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // constructor
    
    }

    virtual void OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        PY_OVERRIDE_LOG( _steam, NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        bp::override func_OnNumberOfCurrentPlayers = this->get_override( "OnNumberOfCurrentPlayers" );
        if( func_OnNumberOfCurrentPlayers.ptr() != Py_None )
            try {
                func_OnNumberOfCurrentPlayers( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
            }
        else
            this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
    
    void default_OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
};

BOOST_PYTHON_MODULE(_steam){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< EAccountType>("EAccountType")
        .value("k_EAccountTypeInvalid", k_EAccountTypeInvalid)
        .value("k_EAccountTypeIndividual", k_EAccountTypeIndividual)
        .value("k_EAccountTypeMultiseat", k_EAccountTypeMultiseat)
        .value("k_EAccountTypeGameServer", k_EAccountTypeGameServer)
        .value("k_EAccountTypeAnonGameServer", k_EAccountTypeAnonGameServer)
        .value("k_EAccountTypePending", k_EAccountTypePending)
        .value("k_EAccountTypeContentServer", k_EAccountTypeContentServer)
        .value("k_EAccountTypeClan", k_EAccountTypeClan)
        .value("k_EAccountTypeChat", k_EAccountTypeChat)
        .value("k_EAccountTypeConsoleUser", k_EAccountTypeConsoleUser)
        .value("k_EAccountTypeAnonUser", k_EAccountTypeAnonUser)
        .value("k_EAccountTypeMax", k_EAccountTypeMax)
        .export_values()
        ;

    bp::enum_< EChatEntryType>("EChatEntryType")
        .value("k_EChatEntryTypeInvalid", k_EChatEntryTypeInvalid)
        .value("k_EChatEntryTypeChatMsg", k_EChatEntryTypeChatMsg)
        .value("k_EChatEntryTypeTyping", k_EChatEntryTypeTyping)
        .value("k_EChatEntryTypeInviteGame", k_EChatEntryTypeInviteGame)
        .value("k_EChatEntryTypeEmote", k_EChatEntryTypeEmote)
        .value("k_EChatEntryTypeLeftConversation", k_EChatEntryTypeLeftConversation)
        .value("k_EChatEntryTypeEntered", k_EChatEntryTypeEntered)
        .value("k_EChatEntryTypeWasKicked", k_EChatEntryTypeWasKicked)
        .value("k_EChatEntryTypeWasBanned", k_EChatEntryTypeWasBanned)
        .value("k_EChatEntryTypeDisconnected", k_EChatEntryTypeDisconnected)
        .value("k_EChatEntryTypeHistoricalChat", k_EChatEntryTypeHistoricalChat)
        .export_values()
        ;

    bp::enum_< EChatMemberStateChange>("EChatMemberStateChange")
        .value("k_EChatMemberStateChangeEntered", k_EChatMemberStateChangeEntered)
        .value("k_EChatMemberStateChangeLeft", k_EChatMemberStateChangeLeft)
        .value("k_EChatMemberStateChangeDisconnected", k_EChatMemberStateChangeDisconnected)
        .value("k_EChatMemberStateChangeKicked", k_EChatMemberStateChangeKicked)
        .value("k_EChatMemberStateChangeBanned", k_EChatMemberStateChangeBanned)
        .export_values()
        ;

    bp::enum_< EChatRoomEnterResponse>("EChatRoomEnterResponse")
        .value("k_EChatRoomEnterResponseSuccess", k_EChatRoomEnterResponseSuccess)
        .value("k_EChatRoomEnterResponseDoesntExist", k_EChatRoomEnterResponseDoesntExist)
        .value("k_EChatRoomEnterResponseNotAllowed", k_EChatRoomEnterResponseNotAllowed)
        .value("k_EChatRoomEnterResponseFull", k_EChatRoomEnterResponseFull)
        .value("k_EChatRoomEnterResponseError", k_EChatRoomEnterResponseError)
        .value("k_EChatRoomEnterResponseBanned", k_EChatRoomEnterResponseBanned)
        .value("k_EChatRoomEnterResponseLimited", k_EChatRoomEnterResponseLimited)
        .value("k_EChatRoomEnterResponseClanDisabled", k_EChatRoomEnterResponseClanDisabled)
        .value("k_EChatRoomEnterResponseCommunityBan", k_EChatRoomEnterResponseCommunityBan)
        .value("k_EChatRoomEnterResponseMemberBlockedYou", k_EChatRoomEnterResponseMemberBlockedYou)
        .value("k_EChatRoomEnterResponseYouBlockedMember", k_EChatRoomEnterResponseYouBlockedMember)
        .export_values()
        ;

    bp::enum_< EDenyReason>("EDenyReason")
        .value("k_EDenyInvalid", k_EDenyInvalid)
        .value("k_EDenyInvalidVersion", k_EDenyInvalidVersion)
        .value("k_EDenyGeneric", k_EDenyGeneric)
        .value("k_EDenyNotLoggedOn", k_EDenyNotLoggedOn)
        .value("k_EDenyNoLicense", k_EDenyNoLicense)
        .value("k_EDenyCheater", k_EDenyCheater)
        .value("k_EDenyLoggedInElseWhere", k_EDenyLoggedInElseWhere)
        .value("k_EDenyUnknownText", k_EDenyUnknownText)
        .value("k_EDenyIncompatibleAnticheat", k_EDenyIncompatibleAnticheat)
        .value("k_EDenyMemoryCorruption", k_EDenyMemoryCorruption)
        .value("k_EDenyIncompatibleSoftware", k_EDenyIncompatibleSoftware)
        .value("k_EDenySteamConnectionLost", k_EDenySteamConnectionLost)
        .value("k_EDenySteamConnectionError", k_EDenySteamConnectionError)
        .value("k_EDenySteamResponseTimedOut", k_EDenySteamResponseTimedOut)
        .value("k_EDenySteamValidationStalled", k_EDenySteamValidationStalled)
        .value("k_EDenySteamOwnerLeftGuestUser", k_EDenySteamOwnerLeftGuestUser)
        .export_values()
        ;

    bp::enum_< EFriendRelationship>("EFriendRelationship")
        .value("k_EFriendRelationshipNone", k_EFriendRelationshipNone)
        .value("k_EFriendRelationshipBlocked", k_EFriendRelationshipBlocked)
        .value("k_EFriendRelationshipRequestRecipient", k_EFriendRelationshipRequestRecipient)
        .value("k_EFriendRelationshipFriend", k_EFriendRelationshipFriend)
        .value("k_EFriendRelationshipRequestInitiator", k_EFriendRelationshipRequestInitiator)
        .value("k_EFriendRelationshipIgnored", k_EFriendRelationshipIgnored)
        .value("k_EFriendRelationshipIgnoredFriend", k_EFriendRelationshipIgnoredFriend)
        .value("k_EFriendRelationshipSuggested", k_EFriendRelationshipSuggested)
        .value("k_EFriendRelationshipMax", k_EFriendRelationshipMax)
        .export_values()
        ;

    bp::enum_< ELobbyComparison>("ELobbyComparison")
        .value("k_ELobbyComparisonEqualToOrLessThan", k_ELobbyComparisonEqualToOrLessThan)
        .value("k_ELobbyComparisonLessThan", k_ELobbyComparisonLessThan)
        .value("k_ELobbyComparisonEqual", k_ELobbyComparisonEqual)
        .value("k_ELobbyComparisonGreaterThan", k_ELobbyComparisonGreaterThan)
        .value("k_ELobbyComparisonEqualToOrGreaterThan", k_ELobbyComparisonEqualToOrGreaterThan)
        .value("k_ELobbyComparisonNotEqual", k_ELobbyComparisonNotEqual)
        .export_values()
        ;

    bp::enum_< ELobbyDistanceFilter>("ELobbyDistanceFilter")
        .value("k_ELobbyDistanceFilterClose", k_ELobbyDistanceFilterClose)
        .value("k_ELobbyDistanceFilterDefault", k_ELobbyDistanceFilterDefault)
        .value("k_ELobbyDistanceFilterFar", k_ELobbyDistanceFilterFar)
        .value("k_ELobbyDistanceFilterWorldwide", k_ELobbyDistanceFilterWorldwide)
        .export_values()
        ;

    bp::enum_< ELobbyType>("ELobbyType")
        .value("k_ELobbyTypePrivate", k_ELobbyTypePrivate)
        .value("k_ELobbyTypeFriendsOnly", k_ELobbyTypeFriendsOnly)
        .value("k_ELobbyTypePublic", k_ELobbyTypePublic)
        .value("k_ELobbyTypeInvisible", k_ELobbyTypeInvisible)
        .export_values()
        ;

    bp::enum_< EPersonaState>("EPersonaState")
        .value("k_EPersonaStateOffline", k_EPersonaStateOffline)
        .value("k_EPersonaStateOnline", k_EPersonaStateOnline)
        .value("k_EPersonaStateBusy", k_EPersonaStateBusy)
        .value("k_EPersonaStateAway", k_EPersonaStateAway)
        .value("k_EPersonaStateSnooze", k_EPersonaStateSnooze)
        .value("k_EPersonaStateLookingToTrade", k_EPersonaStateLookingToTrade)
        .value("k_EPersonaStateLookingToPlay", k_EPersonaStateLookingToPlay)
        .value("k_EPersonaStateMax", k_EPersonaStateMax)
        .export_values()
        ;

    bp::enum_< EResult>("EResult")
        .value("k_EResultOK", k_EResultOK)
        .value("k_EResultFail", k_EResultFail)
        .value("k_EResultNoConnection", k_EResultNoConnection)
        .value("k_EResultInvalidPassword", k_EResultInvalidPassword)
        .value("k_EResultLoggedInElsewhere", k_EResultLoggedInElsewhere)
        .value("k_EResultInvalidProtocolVer", k_EResultInvalidProtocolVer)
        .value("k_EResultInvalidParam", k_EResultInvalidParam)
        .value("k_EResultFileNotFound", k_EResultFileNotFound)
        .value("k_EResultBusy", k_EResultBusy)
        .value("k_EResultInvalidState", k_EResultInvalidState)
        .value("k_EResultInvalidName", k_EResultInvalidName)
        .value("k_EResultInvalidEmail", k_EResultInvalidEmail)
        .value("k_EResultDuplicateName", k_EResultDuplicateName)
        .value("k_EResultAccessDenied", k_EResultAccessDenied)
        .value("k_EResultTimeout", k_EResultTimeout)
        .value("k_EResultBanned", k_EResultBanned)
        .value("k_EResultAccountNotFound", k_EResultAccountNotFound)
        .value("k_EResultInvalidSteamID", k_EResultInvalidSteamID)
        .value("k_EResultServiceUnavailable", k_EResultServiceUnavailable)
        .value("k_EResultNotLoggedOn", k_EResultNotLoggedOn)
        .value("k_EResultPending", k_EResultPending)
        .value("k_EResultEncryptionFailure", k_EResultEncryptionFailure)
        .value("k_EResultInsufficientPrivilege", k_EResultInsufficientPrivilege)
        .value("k_EResultLimitExceeded", k_EResultLimitExceeded)
        .value("k_EResultRevoked", k_EResultRevoked)
        .value("k_EResultExpired", k_EResultExpired)
        .value("k_EResultAlreadyRedeemed", k_EResultAlreadyRedeemed)
        .value("k_EResultDuplicateRequest", k_EResultDuplicateRequest)
        .value("k_EResultAlreadyOwned", k_EResultAlreadyOwned)
        .value("k_EResultIPNotFound", k_EResultIPNotFound)
        .value("k_EResultPersistFailed", k_EResultPersistFailed)
        .value("k_EResultLockingFailed", k_EResultLockingFailed)
        .value("k_EResultLogonSessionReplaced", k_EResultLogonSessionReplaced)
        .value("k_EResultConnectFailed", k_EResultConnectFailed)
        .value("k_EResultHandshakeFailed", k_EResultHandshakeFailed)
        .value("k_EResultIOFailure", k_EResultIOFailure)
        .value("k_EResultRemoteDisconnect", k_EResultRemoteDisconnect)
        .value("k_EResultShoppingCartNotFound", k_EResultShoppingCartNotFound)
        .value("k_EResultBlocked", k_EResultBlocked)
        .value("k_EResultIgnored", k_EResultIgnored)
        .value("k_EResultNoMatch", k_EResultNoMatch)
        .value("k_EResultAccountDisabled", k_EResultAccountDisabled)
        .value("k_EResultServiceReadOnly", k_EResultServiceReadOnly)
        .value("k_EResultAccountNotFeatured", k_EResultAccountNotFeatured)
        .value("k_EResultAdministratorOK", k_EResultAdministratorOK)
        .value("k_EResultContentVersion", k_EResultContentVersion)
        .value("k_EResultTryAnotherCM", k_EResultTryAnotherCM)
        .value("k_EResultPasswordRequiredToKickSession", k_EResultPasswordRequiredToKickSession)
        .value("k_EResultAlreadyLoggedInElsewhere", k_EResultAlreadyLoggedInElsewhere)
        .value("k_EResultSuspended", k_EResultSuspended)
        .value("k_EResultCancelled", k_EResultCancelled)
        .value("k_EResultDataCorruption", k_EResultDataCorruption)
        .value("k_EResultDiskFull", k_EResultDiskFull)
        .value("k_EResultRemoteCallFailed", k_EResultRemoteCallFailed)
        .value("k_EResultPasswordUnset", k_EResultPasswordUnset)
        .value("k_EResultExternalAccountUnlinked", k_EResultExternalAccountUnlinked)
        .value("k_EResultPSNTicketInvalid", k_EResultPSNTicketInvalid)
        .value("k_EResultExternalAccountAlreadyLinked", k_EResultExternalAccountAlreadyLinked)
        .value("k_EResultRemoteFileConflict", k_EResultRemoteFileConflict)
        .value("k_EResultIllegalPassword", k_EResultIllegalPassword)
        .value("k_EResultSameAsPreviousValue", k_EResultSameAsPreviousValue)
        .value("k_EResultAccountLogonDenied", k_EResultAccountLogonDenied)
        .value("k_EResultCannotUseOldPassword", k_EResultCannotUseOldPassword)
        .value("k_EResultInvalidLoginAuthCode", k_EResultInvalidLoginAuthCode)
        .value("k_EResultAccountLogonDeniedNoMail", k_EResultAccountLogonDeniedNoMail)
        .value("k_EResultHardwareNotCapableOfIPT", k_EResultHardwareNotCapableOfIPT)
        .value("k_EResultIPTInitError", k_EResultIPTInitError)
        .value("k_EResultParentalControlRestricted", k_EResultParentalControlRestricted)
        .value("k_EResultFacebookQueryError", k_EResultFacebookQueryError)
        .value("k_EResultExpiredLoginAuthCode", k_EResultExpiredLoginAuthCode)
        .value("k_EResultIPLoginRestrictionFailed", k_EResultIPLoginRestrictionFailed)
        .value("k_EResultAccountLockedDown", k_EResultAccountLockedDown)
        .value("k_EResultAccountLogonDeniedVerifiedEmailRequired", k_EResultAccountLogonDeniedVerifiedEmailRequired)
        .value("k_EResultNoMatchingURL", k_EResultNoMatchingURL)
        .value("k_EResultBadResponse", k_EResultBadResponse)
        .value("k_EResultRequirePasswordReEntry", k_EResultRequirePasswordReEntry)
        .value("k_EResultValueOutOfRange", k_EResultValueOutOfRange)
        .export_values()
        ;

    bp::enum_< ESteamUserStatType>("ESteamUserStatType")
        .value("k_ESteamUserStatTypeINVALID", k_ESteamUserStatTypeINVALID)
        .value("k_ESteamUserStatTypeINT", k_ESteamUserStatTypeINT)
        .value("k_ESteamUserStatTypeFLOAT", k_ESteamUserStatTypeFLOAT)
        .value("k_ESteamUserStatTypeAVGRATE", k_ESteamUserStatTypeAVGRATE)
        .value("k_ESteamUserStatTypeACHIEVEMENTS", k_ESteamUserStatTypeACHIEVEMENTS)
        .value("k_ESteamUserStatTypeGROUPACHIEVEMENTS", k_ESteamUserStatTypeGROUPACHIEVEMENTS)
        .value("k_ESteamUserStatTypeMAX", k_ESteamUserStatTypeMAX)
        .export_values()
        ;

    bp::enum_< EUniverse>("EUniverse")
        .value("k_EUniverseInvalid", k_EUniverseInvalid)
        .value("k_EUniversePublic", k_EUniversePublic)
        .value("k_EUniverseBeta", k_EUniverseBeta)
        .value("k_EUniverseInternal", k_EUniverseInternal)
        .value("k_EUniverseDev", k_EUniverseDev)
        .value("k_EUniverseMax", k_EUniverseMax)
        .export_values()
        ;

    bp::class_< CSteamAPIContext >( "CSteamAPIContext", bp::init< >() )    
        .def( 
            "SteamFriends"
            , (::ISteamFriends * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamFriends )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamMatchmaking"
            , (::ISteamMatchmaking * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamMatchmaking )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUser"
            , (::ISteamUser * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUser )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUserStats"
            , (::ISteamUserStats * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUserStats )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUtils"
            , (::ISteamUtils * ( ::CSteamAPIContext::* )(  ) )( &::CSteamAPIContext::SteamUtils )
            , bp::return_internal_reference< >() );

    { //::CSteamID
        typedef bp::class_< CSteamID > CSteamID_exposer_t;
        CSteamID_exposer_t CSteamID_exposer = CSteamID_exposer_t( "CSteamID", bp::init< >() );
        bp::scope CSteamID_scope( CSteamID_exposer );
        CSteamID_exposer.def( bp::init< uint32, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint32, unsigned int, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("unAccountInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint64 >(( bp::arg("ulSteamID") )) );
        bp::implicitly_convertible< uint64, CSteamID >();
        { //::CSteamID::BAnonAccount
        
            typedef bool ( ::CSteamID::*BAnonAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonAccount"
                , BAnonAccount_function_type( &::CSteamID::BAnonAccount ) );
        
        }
        { //::CSteamID::BAnonGameServerAccount
        
            typedef bool ( ::CSteamID::*BAnonGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonGameServerAccount"
                , BAnonGameServerAccount_function_type( &::CSteamID::BAnonGameServerAccount ) );
        
        }
        { //::CSteamID::BAnonUserAccount
        
            typedef bool ( ::CSteamID::*BAnonUserAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonUserAccount"
                , BAnonUserAccount_function_type( &::CSteamID::BAnonUserAccount ) );
        
        }
        { //::CSteamID::BBlankAnonAccount
        
            typedef bool ( ::CSteamID::*BBlankAnonAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BBlankAnonAccount"
                , BBlankAnonAccount_function_type( &::CSteamID::BBlankAnonAccount ) );
        
        }
        { //::CSteamID::BChatAccount
        
            typedef bool ( ::CSteamID::*BChatAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BChatAccount"
                , BChatAccount_function_type( &::CSteamID::BChatAccount ) );
        
        }
        { //::CSteamID::BClanAccount
        
            typedef bool ( ::CSteamID::*BClanAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BClanAccount"
                , BClanAccount_function_type( &::CSteamID::BClanAccount ) );
        
        }
        { //::CSteamID::BConsoleUserAccount
        
            typedef bool ( ::CSteamID::*BConsoleUserAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BConsoleUserAccount"
                , BConsoleUserAccount_function_type( &::CSteamID::BConsoleUserAccount ) );
        
        }
        { //::CSteamID::BContentServerAccount
        
            typedef bool ( ::CSteamID::*BContentServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BContentServerAccount"
                , BContentServerAccount_function_type( &::CSteamID::BContentServerAccount ) );
        
        }
        { //::CSteamID::BGameServerAccount
        
            typedef bool ( ::CSteamID::*BGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BGameServerAccount"
                , BGameServerAccount_function_type( &::CSteamID::BGameServerAccount ) );
        
        }
        { //::CSteamID::BIndividualAccount
        
            typedef bool ( ::CSteamID::*BIndividualAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BIndividualAccount"
                , BIndividualAccount_function_type( &::CSteamID::BIndividualAccount ) );
        
        }
        { //::CSteamID::BPersistentGameServerAccount
        
            typedef bool ( ::CSteamID::*BPersistentGameServerAccount_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "BPersistentGameServerAccount"
                , BPersistentGameServerAccount_function_type( &::CSteamID::BPersistentGameServerAccount ) );
        
        }
        { //::CSteamID::Clear
        
            typedef void ( ::CSteamID::*Clear_function_type )(  ) ;
            
            CSteamID_exposer.def( 
                "Clear"
                , Clear_function_type( &::CSteamID::Clear ) );
        
        }
        { //::CSteamID::ClearIndividualInstance
        
            typedef void ( ::CSteamID::*ClearIndividualInstance_function_type )(  ) ;
            
            CSteamID_exposer.def( 
                "ClearIndividualInstance"
                , ClearIndividualInstance_function_type( &::CSteamID::ClearIndividualInstance ) );
        
        }
        { //::CSteamID::ConvertToUint64
        
            typedef ::uint64 ( ::CSteamID::*ConvertToUint64_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "ConvertToUint64"
                , ConvertToUint64_function_type( &::CSteamID::ConvertToUint64 ) );
        
        }
        { //::CSteamID::CreateBlankAnonLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonLogon_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonLogon"
                , CreateBlankAnonLogon_function_type( &::CSteamID::CreateBlankAnonLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::CreateBlankAnonUserLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonUserLogon_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonUserLogon"
                , CreateBlankAnonUserLogon_function_type( &::CSteamID::CreateBlankAnonUserLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::FullSet
        
            typedef void ( ::CSteamID::*FullSet_function_type )( ::uint64,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "FullSet"
                , FullSet_function_type( &::CSteamID::FullSet )
                , ( bp::arg("ulIdentifier"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::GetAccountID
        
            typedef ::AccountID_t ( ::CSteamID::*GetAccountID_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetAccountID"
                , GetAccountID_function_type( &::CSteamID::GetAccountID ) );
        
        }
        { //::CSteamID::GetEAccountType
        
            typedef ::EAccountType ( ::CSteamID::*GetEAccountType_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetEAccountType"
                , GetEAccountType_function_type( &::CSteamID::GetEAccountType ) );
        
        }
        { //::CSteamID::GetEUniverse
        
            typedef ::EUniverse ( ::CSteamID::*GetEUniverse_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetEUniverse"
                , GetEUniverse_function_type( &::CSteamID::GetEUniverse ) );
        
        }
        { //::CSteamID::GetStaticAccountKey
        
            typedef ::uint64 ( ::CSteamID::*GetStaticAccountKey_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetStaticAccountKey"
                , GetStaticAccountKey_function_type( &::CSteamID::GetStaticAccountKey ) );
        
        }
        { //::CSteamID::GetUnAccountInstance
        
            typedef ::uint32 ( ::CSteamID::*GetUnAccountInstance_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "GetUnAccountInstance"
                , GetUnAccountInstance_function_type( &::CSteamID::GetUnAccountInstance ) );
        
        }
        { //::CSteamID::HasNoIndividualInstance
        
            typedef bool ( ::CSteamID::*HasNoIndividualInstance_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "HasNoIndividualInstance"
                , HasNoIndividualInstance_function_type( &::CSteamID::HasNoIndividualInstance ) );
        
        }
        { //::CSteamID::InstancedSet
        
            typedef void ( ::CSteamID::*InstancedSet_function_type )( ::uint32,::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "InstancedSet"
                , InstancedSet_function_type( &::CSteamID::InstancedSet )
                , ( bp::arg("unAccountID"), bp::arg("unInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::IsLobby
        
            typedef bool ( ::CSteamID::*IsLobby_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "IsLobby"
                , IsLobby_function_type( &::CSteamID::IsLobby ) );
        
        }
        { //::CSteamID::IsValid
        
            typedef bool ( ::CSteamID::*IsValid_function_type )(  ) const;
            
            CSteamID_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::CSteamID::IsValid ) );
        
        }
        { //::CSteamID::Set
        
            typedef void ( ::CSteamID::*Set_function_type )( ::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "Set"
                , Set_function_type( &::CSteamID::Set )
                , ( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::SetAccountID
        
            typedef void ( ::CSteamID::*SetAccountID_function_type )( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountID"
                , SetAccountID_function_type( &::CSteamID::SetAccountID )
                , ( bp::arg("unAccountID") ) );
        
        }
        { //::CSteamID::SetAccountInstance
        
            typedef void ( ::CSteamID::*SetAccountInstance_function_type )( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountInstance"
                , SetAccountInstance_function_type( &::CSteamID::SetAccountInstance )
                , ( bp::arg("unInstance") ) );
        
        }
        { //::CSteamID::SetEUniverse
        
            typedef void ( ::CSteamID::*SetEUniverse_function_type )( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "SetEUniverse"
                , SetEUniverse_function_type( &::CSteamID::SetEUniverse )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::SetFromUint64
        
            typedef void ( ::CSteamID::*SetFromUint64_function_type )( ::uint64 ) ;
            
            CSteamID_exposer.def( 
                "SetFromUint64"
                , SetFromUint64_function_type( &::CSteamID::SetFromUint64 )
                , ( bp::arg("ulSteamID") ) );
        
        }
        CSteamID_exposer.def( bp::self != bp::self );
        CSteamID_exposer.def( bp::self < bp::self );
        CSteamID_exposer.def( bp::self == bp::self );
        CSteamID_exposer.def( bp::self > bp::self );
    }

    bp::class_< ISteamFriends, boost::noncopyable >( "ISteamFriends", bp::no_init )    
        .def( 
            "ActivateGameOverlay"
            , (void ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::ActivateGameOverlay )
            , ( bp::arg("pchDialog") ) )    
        .def( 
            "ActivateGameOverlayInviteDialog"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::ActivateGameOverlayInviteDialog )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "ActivateGameOverlayToStore"
            , (void ( ::ISteamFriends::* )( ::AppId_t,::EOverlayToStoreFlag ) )( &::ISteamFriends::ActivateGameOverlayToStore )
            , ( bp::arg("nAppID"), bp::arg("eFlag") ) )    
        .def( 
            "ActivateGameOverlayToUser"
            , (void ( ::ISteamFriends::* )( char const *,::CSteamID ) )( &::ISteamFriends::ActivateGameOverlayToUser )
            , ( bp::arg("pchDialog"), bp::arg("steamID") ) )    
        .def( 
            "ActivateGameOverlayToWebPage"
            , (void ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::ActivateGameOverlayToWebPage )
            , ( bp::arg("pchURL") ) )    
        .def( 
            "ClearRichPresence"
            , (void ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::ClearRichPresence ) )    
        .def( 
            "CloseClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::CloseClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "DownloadClanActivityCounts"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID *,int ) )( &::ISteamFriends::DownloadClanActivityCounts )
            , ( bp::arg("psteamIDClans"), bp::arg("cClansToRequest") ) )    
        .def( 
            "EnumerateFollowingList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::uint32 ) )( &::ISteamFriends::EnumerateFollowingList )
            , ( bp::arg("unStartIndex") ) )    
        .def( 
            "GetChatMemberByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetChatMemberByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iUser") ) )    
        .def( 
            "GetClanActivityCounts"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int *,int *,int * ) )( &::ISteamFriends::GetClanActivityCounts )
            , ( bp::arg("steamIDClan"), bp::arg("pnOnline"), bp::arg("pnInGame"), bp::arg("pnChatting") ) )    
        .def( 
            "GetClanByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetClanByIndex )
            , ( bp::arg("iClan") ) )    
        .def( 
            "GetClanChatMemberCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanChatMemberCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanChatMessage"
            , (int ( ::ISteamFriends::* )( ::CSteamID,int,void *,int,::EChatEntryType *,::CSteamID * ) )( &::ISteamFriends::GetClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("iMessage"), bp::arg("prgchText"), bp::arg("cchTextMax"), bp::arg("arg4"), bp::arg("arg5") ) )    
        .def( 
            "GetClanCount"
            , (int ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetClanCount ) )    
        .def( 
            "GetClanName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanName )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOfficerByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetClanOfficerByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iOfficer") ) )    
        .def( 
            "GetClanOfficerCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanOfficerCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOwner"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanOwner )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanTag"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetClanTag )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetCoplayFriend"
            , (::CSteamID ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetCoplayFriend )
            , ( bp::arg("iCoplayFriend") ) )    
        .def( 
            "GetCoplayFriendCount"
            , (int ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetCoplayFriendCount ) )    
        .def( 
            "GetFollowerCount"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFollowerCount )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetFriendByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int,int ) )( &::ISteamFriends::GetFriendByIndex )
            , ( bp::arg("iFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCoplayGame"
            , (::AppId_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCoplayGame )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCoplayTime"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCoplayTime )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCount"
            , (int ( ::ISteamFriends::* )( int ) )( &::ISteamFriends::GetFriendCount )
            , ( bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCountFromSource"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendCountFromSource )
            , ( bp::arg("steamIDSource") ) )    
        .def( 
            "GetFriendFromSourceByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendFromSourceByIndex )
            , ( bp::arg("steamIDSource"), bp::arg("iFriend") ) )    
        .def( 
            "GetFriendMessage"
            , (int ( ::ISteamFriends::* )( ::CSteamID,int,void *,int,::EChatEntryType * ) )( &::ISteamFriends::GetFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("iMessageID"), bp::arg("pvData"), bp::arg("cubData"), bp::arg("peChatEntryType") ) )    
        .def( 
            "GetFriendPersonaName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendPersonaName )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendPersonaNameHistory"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendPersonaNameHistory )
            , ( bp::arg("steamIDFriend"), bp::arg("iPersonaName") ) )    
        .def( 
            "GetFriendPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendPersonaState )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRelationship"
            , (::EFriendRelationship ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendRelationship )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRichPresence"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::GetFriendRichPresence )
            , ( bp::arg("steamIDFriend"), bp::arg("pchKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyByIndex"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::GetFriendRichPresenceKeyByIndex )
            , ( bp::arg("steamIDFriend"), bp::arg("iKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetFriendRichPresenceKeyCount )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetLargeFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetLargeFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetMediumFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetMediumFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetPersonaName"
            , (char const * ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetPersonaName ) )    
        .def( 
            "GetPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetPersonaState ) )    
        .def( 
            "GetSmallFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::GetSmallFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetUserRestrictions"
            , (::uint32 ( ::ISteamFriends::* )(  ) )( &::ISteamFriends::GetUserRestrictions ) )    
        .def( 
            "HasFriend"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int ) )( &::ISteamFriends::HasFriend )
            , ( bp::arg("steamIDFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "InviteUserToGame"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::InviteUserToGame )
            , ( bp::arg("steamIDFriend"), bp::arg("pchConnectString") ) )    
        .def( 
            "IsClanChatAdmin"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ) )( &::ISteamFriends::IsClanChatAdmin )
            , ( bp::arg("steamIDClanChat"), bp::arg("steamIDUser") ) )    
        .def( 
            "IsClanChatWindowOpenInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::IsClanChatWindowOpenInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "IsFollowing"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::IsFollowing )
            , ( bp::arg("steamID") ) )    
        .def( 
            "IsUserInSource"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ) )( &::ISteamFriends::IsUserInSource )
            , ( bp::arg("steamIDUser"), bp::arg("steamIDSource") ) )    
        .def( 
            "JoinClanChatRoom"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::JoinClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "LeaveClanChatRoom"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::LeaveClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "OpenClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::OpenClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "ReplyToFriendMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::ReplyToFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("pchMsgToSend") ) )    
        .def( 
            "RequestClanOfficerList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::RequestClanOfficerList )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "RequestFriendRichPresence"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::RequestFriendRichPresence )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "RequestUserInformation"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,bool ) )( &::ISteamFriends::RequestUserInformation )
            , ( bp::arg("steamIDUser"), bp::arg("bRequireNameOnly") ) )    
        .def( 
            "SendClanChatMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ) )( &::ISteamFriends::SendClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("pchText") ) )    
        .def( 
            "SetInGameVoiceSpeaking"
            , (void ( ::ISteamFriends::* )( ::CSteamID,bool ) )( &::ISteamFriends::SetInGameVoiceSpeaking )
            , ( bp::arg("steamIDUser"), bp::arg("bSpeaking") ) )    
        .def( 
            "SetListenForFriendsMessages"
            , (bool ( ::ISteamFriends::* )( bool ) )( &::ISteamFriends::SetListenForFriendsMessages )
            , ( bp::arg("bInterceptEnabled") ) )    
        .def( 
            "SetPersonaName"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( char const * ) )( &::ISteamFriends::SetPersonaName )
            , ( bp::arg("pchPersonaName") ) )    
        .def( 
            "SetPlayedWith"
            , (void ( ::ISteamFriends::* )( ::CSteamID ) )( &::ISteamFriends::SetPlayedWith )
            , ( bp::arg("steamIDUserPlayedWith") ) )    
        .def( 
            "SetRichPresence"
            , (bool ( ::ISteamFriends::* )( char const *,char const * ) )( &::ISteamFriends::SetRichPresence )
            , ( bp::arg("pchKey"), bp::arg("pchValue") ) );

    bp::class_< ISteamMatchmaking, boost::noncopyable >( "ISteamMatchmaking", bp::no_init )    
        .def( 
            "AddFavoriteGame"
            , (int ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32,::uint32 ) )( &::ISteamMatchmaking::AddFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags"), bp::arg("rTime32LastPlayedOnServer") ) )    
        .def( 
            "AddRequestLobbyListCompatibleMembersFilter"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::AddRequestLobbyListCompatibleMembersFilter )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "AddRequestLobbyListDistanceFilter"
            , (void ( ::ISteamMatchmaking::* )( ::ELobbyDistanceFilter ) )( &::ISteamMatchmaking::AddRequestLobbyListDistanceFilter )
            , ( bp::arg("eLobbyDistanceFilter") ) )    
        .def( 
            "AddRequestLobbyListFilterSlotsAvailable"
            , (void ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::AddRequestLobbyListFilterSlotsAvailable )
            , ( bp::arg("nSlotsAvailable") ) )    
        .def( 
            "AddRequestLobbyListNearValueFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int ) )( &::ISteamMatchmaking::AddRequestLobbyListNearValueFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToBeCloseTo") ) )    
        .def( 
            "AddRequestLobbyListNumericalFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int,::ELobbyComparison ) )( &::ISteamMatchmaking::AddRequestLobbyListNumericalFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "AddRequestLobbyListResultCountFilter"
            , (void ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::AddRequestLobbyListResultCountFilter )
            , ( bp::arg("cMaxResults") ) )    
        .def( 
            "AddRequestLobbyListStringFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,char const *,::ELobbyComparison ) )( &::ISteamMatchmaking::AddRequestLobbyListStringFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("pchValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "CreateLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::ELobbyType,int ) )( &::ISteamMatchmaking::CreateLobby )
            , ( bp::arg("eLobbyType"), bp::arg("cMaxMembers") ) )    
        .def( 
            "DeleteLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ) )( &::ISteamMatchmaking::DeleteLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( int,::AppId_t *,::uint32 *,::uint16 *,::uint16 *,::uint32 *,::uint32 * ) )( &::ISteamMatchmaking::GetFavoriteGame )
            , ( bp::arg("iGame"), bp::arg("pnAppID"), bp::arg("pnIP"), bp::arg("pnConnPort"), bp::arg("pnQueryPort"), bp::arg("punFlags"), bp::arg("pRTime32LastPlayedOnServer") ) )    
        .def( 
            "GetFavoriteGameCount"
            , (int ( ::ISteamMatchmaking::* )(  ) )( &::ISteamMatchmaking::GetFavoriteGameCount ) )    
        .def( 
            "GetLobbyByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( int ) )( &::ISteamMatchmaking::GetLobbyByIndex )
            , ( bp::arg("iLobby") ) )    
        .def( 
            "GetLobbyChatEntry"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID,int,::CSteamID *,void *,int,::EChatEntryType * ) )( &::ISteamMatchmaking::GetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser"), bp::arg("pvData"), bp::arg("cubData"), bp::arg("peChatEntryType") ) )    
        .def( 
            "GetLobbyData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ) )( &::ISteamMatchmaking::GetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyDataByIndex"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int,char *,int,char *,int ) )( &::ISteamMatchmaking::GetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData"), bp::arg("pchKey"), bp::arg("cchKeyBufferSize"), bp::arg("pchValue"), bp::arg("cchValueBufferSize") ) )    
        .def( 
            "GetLobbyDataCount"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyDataCount )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyGameServer"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32 *,::uint16 *,::CSteamID * ) )( &::ISteamMatchmaking::GetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("punGameServerIP"), bp::arg("punGameServerPort"), bp::arg("psteamIDGameServer") ) )    
        .def( 
            "GetLobbyMemberByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID,int ) )( &::ISteamMatchmaking::GetLobbyMemberByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iMember") ) )    
        .def( 
            "GetLobbyMemberData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID,char const * ) )( &::ISteamMatchmaking::GetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDUser"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyMemberLimit"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyOwner"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetLobbyOwner )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetNumLobbyMembers"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::GetNumLobbyMembers )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "InviteUserToLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::InviteUserToLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDInvitee") ) )    
        .def( 
            "JoinLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::JoinLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "LeaveLobby"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::LeaveLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RemoveFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32 ) )( &::ISteamMatchmaking::RemoveFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags") ) )    
        .def( 
            "RequestLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID ) )( &::ISteamMatchmaking::RequestLobbyData )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RequestLobbyList"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )(  ) )( &::ISteamMatchmaking::RequestLobbyList ) )    
        .def( 
            "SendLobbyChatMsg"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,void const *,int ) )( &::ISteamMatchmaking::SendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody"), bp::arg("cubMsgBody") ) )    
        .def( 
            "SetLinkedLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::SetLinkedLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDLobbyDependent") ) )    
        .def( 
            "SetLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ) )( &::ISteamMatchmaking::SetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyGameServer"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32,::uint16,::CSteamID ) )( &::ISteamMatchmaking::SetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("unGameServerIP"), bp::arg("unGameServerPort"), bp::arg("steamIDGameServer") ) )    
        .def( 
            "SetLobbyJoinable"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,bool ) )( &::ISteamMatchmaking::SetLobbyJoinable )
            , ( bp::arg("steamIDLobby"), bp::arg("bLobbyJoinable") ) )    
        .def( 
            "SetLobbyMemberData"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ) )( &::ISteamMatchmaking::SetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyMemberLimit"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int ) )( &::ISteamMatchmaking::SetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby"), bp::arg("cMaxMembers") ) )    
        .def( 
            "SetLobbyOwner"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ) )( &::ISteamMatchmaking::SetLobbyOwner )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDNewOwner") ) )    
        .def( 
            "SetLobbyType"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::ELobbyType ) )( &::ISteamMatchmaking::SetLobbyType )
            , ( bp::arg("steamIDLobby"), bp::arg("eLobbyType") ) );

    bp::class_< ISteamUser, boost::noncopyable >( "ISteamUser", bp::no_init )    
        .def( 
            "AdvertiseGame"
            , (void ( ::ISteamUser::* )( ::CSteamID,::uint32,::uint16 ) )( &::ISteamUser::AdvertiseGame )
            , ( bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "BIsBehindNAT"
            , (bool ( ::ISteamUser::* )(  ) )( &::ISteamUser::BIsBehindNAT ) )    
        .def( 
            "BLoggedOn"
            , (bool ( ::ISteamUser::* )(  ) )( &::ISteamUser::BLoggedOn ) )    
        .def( 
            "BeginAuthSession"
            , (::EBeginAuthSessionResult ( ::ISteamUser::* )( void const *,int,::CSteamID ) )( &::ISteamUser::BeginAuthSession )
            , ( bp::arg("pAuthTicket"), bp::arg("cbAuthTicket"), bp::arg("steamID") ) )    
        .def( 
            "CancelAuthTicket"
            , (void ( ::ISteamUser::* )( ::HAuthTicket ) )( &::ISteamUser::CancelAuthTicket )
            , ( bp::arg("hAuthTicket") ) )    
        .def( 
            "DecompressVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( void const *,::uint32,void *,::uint32,::uint32 *,::uint32 ) )( &::ISteamUser::DecompressVoice )
            , ( bp::arg("pCompressed"), bp::arg("cbCompressed"), bp::arg("pDestBuffer"), bp::arg("cbDestBufferSize"), bp::arg("nBytesWritten"), bp::arg("nDesiredSampleRate") ) )    
        .def( 
            "EndAuthSession"
            , (void ( ::ISteamUser::* )( ::CSteamID ) )( &::ISteamUser::EndAuthSession )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetAuthSessionTicket"
            , (::HAuthTicket ( ::ISteamUser::* )( void *,int,::uint32 * ) )( &::ISteamUser::GetAuthSessionTicket )
            , ( bp::arg("pTicket"), bp::arg("cbMaxTicket"), bp::arg("pcbTicket") ) )    
        .def( 
            "GetAvailableVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( ::uint32 *,::uint32 *,::uint32 ) )( &::ISteamUser::GetAvailableVoice )
            , ( bp::arg("pcbCompressed"), bp::arg("pcbUncompressed"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetEncryptedAppTicket"
            , (bool ( ::ISteamUser::* )( void *,int,::uint32 * ) )( &::ISteamUser::GetEncryptedAppTicket )
            , ( bp::arg("pTicket"), bp::arg("cbMaxTicket"), bp::arg("pcbTicket") ) )    
        .def( 
            "GetHSteamUser"
            , (::HSteamUser ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetHSteamUser ) )    
        .def( 
            "GetSteamID"
            , (::CSteamID ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetSteamID ) )    
        .def( 
            "GetUserDataFolder"
            , (bool ( ::ISteamUser::* )( char *,int ) )( &::ISteamUser::GetUserDataFolder )
            , ( bp::arg("pchBuffer"), bp::arg("cubBuffer") ) )    
        .def( 
            "GetVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( bool,void *,::uint32,::uint32 *,bool,void *,::uint32,::uint32 *,::uint32 ) )( &::ISteamUser::GetVoice )
            , ( bp::arg("bWantCompressed"), bp::arg("pDestBuffer"), bp::arg("cbDestBufferSize"), bp::arg("nBytesWritten"), bp::arg("bWantUncompressed"), bp::arg("pUncompressedDestBuffer"), bp::arg("cbUncompressedDestBufferSize"), bp::arg("nUncompressBytesWritten"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetVoiceOptimalSampleRate"
            , (::uint32 ( ::ISteamUser::* )(  ) )( &::ISteamUser::GetVoiceOptimalSampleRate ) )    
        .def( 
            "InitiateGameConnection"
            , (int ( ::ISteamUser::* )( void *,int,::CSteamID,::uint32,::uint16,bool ) )( &::ISteamUser::InitiateGameConnection )
            , ( bp::arg("pAuthBlob"), bp::arg("cbMaxAuthBlob"), bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer"), bp::arg("bSecure") ) )    
        .def( 
            "RequestEncryptedAppTicket"
            , (::SteamAPICall_t ( ::ISteamUser::* )( void *,int ) )( &::ISteamUser::RequestEncryptedAppTicket )
            , ( bp::arg("pDataToInclude"), bp::arg("cbDataToInclude") ) )    
        .def( 
            "StartVoiceRecording"
            , (void ( ::ISteamUser::* )(  ) )( &::ISteamUser::StartVoiceRecording ) )    
        .def( 
            "StopVoiceRecording"
            , (void ( ::ISteamUser::* )(  ) )( &::ISteamUser::StopVoiceRecording ) )    
        .def( 
            "TerminateGameConnection"
            , (void ( ::ISteamUser::* )( ::uint32,::uint16 ) )( &::ISteamUser::TerminateGameConnection )
            , ( bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "TrackAppUsageEvent"
            , (void ( ::ISteamUser::* )( ::CGameID,int,char const * ) )( &::ISteamUser::TrackAppUsageEvent )
            , ( bp::arg("gameID"), bp::arg("eAppUsageEvent"), bp::arg("pchExtraInfo")="" ) )    
        .def( 
            "UserHasLicenseForApp"
            , (::EUserHasLicenseForAppResult ( ::ISteamUser::* )( ::CSteamID,::AppId_t ) )( &::ISteamUser::UserHasLicenseForApp )
            , ( bp::arg("steamID"), bp::arg("appID") ) );

    bp::class_< ISteamUserStats, boost::noncopyable >( "ISteamUserStats", bp::no_init )    
        .def( 
            "AttachLeaderboardUGC"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::UGCHandle_t ) )( &::ISteamUserStats::AttachLeaderboardUGC )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("hUGC") ) )    
        .def( 
            "ClearAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::ClearAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "DownloadLeaderboardEntries"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardDataRequest,int,int ) )( &::ISteamUserStats::DownloadLeaderboardEntries )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardDataRequest"), bp::arg("nRangeStart"), bp::arg("nRangeEnd") ) )    
        .def( 
            "DownloadLeaderboardEntriesForUsers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::CSteamID *,int ) )( &::ISteamUserStats::DownloadLeaderboardEntriesForUsers )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("prgUsers"), bp::arg("cUsers") ) )    
        .def( 
            "FindLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::FindLeaderboard )
            , ( bp::arg("pchLeaderboardName") ) )    
        .def( 
            "FindOrCreateLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const *,::ELeaderboardSortMethod,::ELeaderboardDisplayType ) )( &::ISteamUserStats::FindOrCreateLeaderboard )
            , ( bp::arg("pchLeaderboardName"), bp::arg("eLeaderboardSortMethod"), bp::arg("eLeaderboardDisplayType") ) )    
        .def( 
            "GetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const *,bool * ) )( &::ISteamUserStats::GetAchievement )
            , ( bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetAchievementAchievedPercent"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ) )( &::ISteamUserStats::GetAchievementAchievedPercent )
            , ( bp::arg("pchName"), bp::arg("pflPercent") ) )    
        .def( 
            "GetAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( char const *,bool *,::uint32 * ) )( &::ISteamUserStats::GetAchievementAndUnlockTime )
            , ( bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetAchievementDisplayAttribute"
            , (char const * ( ::ISteamUserStats::* )( char const *,char const * ) )( &::ISteamUserStats::GetAchievementDisplayAttribute )
            , ( bp::arg("pchName"), bp::arg("pchKey") ) )    
        .def( 
            "GetAchievementIcon"
            , (int ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::GetAchievementIcon )
            , ( bp::arg("pchName") ) )    
        .def( 
            "GetAchievementName"
            , (char const * ( ::ISteamUserStats::* )( ::uint32 ) )( &::ISteamUserStats::GetAchievementName )
            , ( bp::arg("iAchievement") ) )    
        .def( 
            "GetDownloadedLeaderboardEntry"
            , (bool ( ::ISteamUserStats::* )( ::SteamLeaderboardEntries_t,int,::LeaderboardEntry_t *,::int32 *,int ) )( &::ISteamUserStats::GetDownloadedLeaderboardEntry )
            , ( bp::arg("hSteamLeaderboardEntries"), bp::arg("index"), bp::arg("pLeaderboardEntry"), bp::arg("pDetails"), bp::arg("cDetailsMax") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int64 * ) )( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,double * ) )( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,::int64 *,::uint32 ) )( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,double *,::uint32 ) )( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetLeaderboardDisplayType"
            , (::ELeaderboardDisplayType ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardDisplayType )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardEntryCount"
            , (int ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardEntryCount )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardName"
            , (char const * ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardName )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardSortMethod"
            , (::ELeaderboardSortMethod ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ) )( &::ISteamUserStats::GetLeaderboardSortMethod )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( char *,::uint32,float *,bool * ) )( &::ISteamUserStats::GetMostAchievedAchievementInfo )
            , ( bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNextMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( int,char *,::uint32,float *,bool * ) )( &::ISteamUserStats::GetNextMostAchievedAchievementInfo )
            , ( bp::arg("iIteratorPrevious"), bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNumAchievements"
            , (::uint32 ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::GetNumAchievements ) )    
        .def( 
            "GetNumberOfCurrentPlayers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::GetNumberOfCurrentPlayers ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 * ) )( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ) )( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserAchievement"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool * ) )( &::ISteamUserStats::GetUserAchievement )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetUserAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool *,::uint32 * ) )( &::ISteamUserStats::GetUserAchievementAndUnlockTime )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,::int32 * ) )( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,float * ) )( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "IndicateAchievementProgress"
            , (bool ( ::ISteamUserStats::* )( char const *,::uint32,::uint32 ) )( &::ISteamUserStats::IndicateAchievementProgress )
            , ( bp::arg("pchName"), bp::arg("nCurProgress"), bp::arg("nMaxProgress") ) )    
        .def( 
            "RequestCurrentStats"
            , (bool ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::RequestCurrentStats ) )    
        .def( 
            "RequestGlobalAchievementPercentages"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::RequestGlobalAchievementPercentages ) )    
        .def( 
            "RequestGlobalStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( int ) )( &::ISteamUserStats::RequestGlobalStats )
            , ( bp::arg("nHistoryDays") ) )    
        .def( 
            "RequestUserStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::CSteamID ) )( &::ISteamUserStats::RequestUserStats )
            , ( bp::arg("steamIDUser") ) )    
        .def( 
            "ResetAllStats"
            , (bool ( ::ISteamUserStats::* )( bool ) )( &::ISteamUserStats::ResetAllStats )
            , ( bp::arg("bAchievementsToo") ) )    
        .def( 
            "SetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ) )( &::ISteamUserStats::SetAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 ) )( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("nData") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float ) )( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("fData") ) )    
        .def( 
            "StoreStats"
            , (bool ( ::ISteamUserStats::* )(  ) )( &::ISteamUserStats::StoreStats ) )    
        .def( 
            "UpdateAvgRateStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float,double ) )( &::ISteamUserStats::UpdateAvgRateStat )
            , ( bp::arg("pchName"), bp::arg("flCountThisSession"), bp::arg("dSessionLength") ) )    
        .def( 
            "UploadLeaderboardScore"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardUploadScoreMethod,::int32,::int32 const *,int ) )( &::ISteamUserStats::UploadLeaderboardScore )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardUploadScoreMethod"), bp::arg("nScore"), bp::arg("pScoreDetails"), bp::arg("cScoreDetailsCount") ) );

    bp::class_< ISteamUtils, boost::noncopyable >( "ISteamUtils", bp::no_init )    
        .def( 
            "BOverlayNeedsPresent"
            , (bool ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::BOverlayNeedsPresent ) )    
        .def( 
            "CheckFileSignature"
            , (::SteamAPICall_t ( ::ISteamUtils::* )( char const * ) )( &::ISteamUtils::CheckFileSignature )
            , ( bp::arg("szFileName") ) )    
        .def( 
            "GetAPICallFailureReason"
            , (::ESteamAPICallFailure ( ::ISteamUtils::* )( ::SteamAPICall_t ) )( &::ISteamUtils::GetAPICallFailureReason )
            , ( bp::arg("hSteamAPICall") ) )    
        .def( 
            "GetAPICallResult"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,void *,int,int,bool * ) )( &::ISteamUtils::GetAPICallResult )
            , ( bp::arg("hSteamAPICall"), bp::arg("pCallback"), bp::arg("cubCallback"), bp::arg("iCallbackExpected"), bp::arg("pbFailed") ) )    
        .def( 
            "GetAppID"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetAppID ) )    
        .def( 
            "GetCSERIPPort"
            , (bool ( ::ISteamUtils::* )( ::uint32 *,::uint16 * ) )( &::ISteamUtils::GetCSERIPPort )
            , ( bp::arg("unIP"), bp::arg("usPort") ) )    
        .def( 
            "GetConnectedUniverse"
            , (::EUniverse ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetConnectedUniverse ) )    
        .def( 
            "GetCurrentBatteryPower"
            , (::uint8 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetCurrentBatteryPower ) )    
        .def( 
            "GetEnteredGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( char *,::uint32 ) )( &::ISteamUtils::GetEnteredGamepadTextInput )
            , ( bp::arg("pchText"), bp::arg("cchText") ) )    
        .def( 
            "GetEnteredGamepadTextLength"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetEnteredGamepadTextLength ) )    
        .def( 
            "GetIPCCallCount"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetIPCCallCount ) )    
        .def( 
            "GetIPCountry"
            , (char const * ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetIPCountry ) )    
        .def( 
            "GetSecondsSinceAppActive"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSecondsSinceAppActive ) )    
        .def( 
            "GetSecondsSinceComputerActive"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSecondsSinceComputerActive ) )    
        .def( 
            "GetServerRealTime"
            , (::uint32 ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetServerRealTime ) )    
        .def( 
            "GetSteamUILanguage"
            , (char const * ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::GetSteamUILanguage ) )    
        .def( 
            "IsAPICallCompleted"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,bool * ) )( &::ISteamUtils::IsAPICallCompleted )
            , ( bp::arg("hSteamAPICall"), bp::arg("pbFailed") ) )    
        .def( 
            "IsOverlayEnabled"
            , (bool ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::IsOverlayEnabled ) )    
        .def( 
            "RunFrame"
            , (void ( ::ISteamUtils::* )(  ) )( &::ISteamUtils::RunFrame ) )    
        .def( 
            "SetOverlayNotificationPosition"
            , (void ( ::ISteamUtils::* )( ::ENotificationPosition ) )( &::ISteamUtils::SetOverlayNotificationPosition )
            , ( bp::arg("eNotificationPosition") ) )    
        .def( 
            "ShowGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( ::EGamepadTextInputMode,::EGamepadTextInputLineMode,char const *,::uint32 ) )( &::ISteamUtils::ShowGamepadTextInput )
            , ( bp::arg("eInputMode"), bp::arg("eLineInputMode"), bp::arg("pchDescription"), bp::arg("unCharMax") ) );

    { //::LobbyChatMsg_t
        typedef bp::class_< LobbyChatMsg_t > LobbyChatMsg_t_exposer_t;
        LobbyChatMsg_t_exposer_t LobbyChatMsg_t_exposer = LobbyChatMsg_t_exposer_t( "LobbyChatMsg_t" );
        bp::scope LobbyChatMsg_t_scope( LobbyChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatMsg_t::k_iCallback;
        LobbyChatMsg_t_exposer.def_readwrite( "chatentrytype", &LobbyChatMsg_t::m_eChatEntryType );
        LobbyChatMsg_t_exposer.def_readwrite( "chatid", &LobbyChatMsg_t::m_iChatID );
        LobbyChatMsg_t_exposer.def_readwrite( "steamidlobby", &LobbyChatMsg_t::m_ulSteamIDLobby );
        LobbyChatMsg_t_exposer.def_readwrite( "steamiduser", &LobbyChatMsg_t::m_ulSteamIDUser );
    }

    { //::LobbyChatUpdate_t
        typedef bp::class_< LobbyChatUpdate_t > LobbyChatUpdate_t_exposer_t;
        LobbyChatUpdate_t_exposer_t LobbyChatUpdate_t_exposer = LobbyChatUpdate_t_exposer_t( "LobbyChatUpdate_t" );
        bp::scope LobbyChatUpdate_t_scope( LobbyChatUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatUpdate_t::k_iCallback;
        LobbyChatUpdate_t_exposer.def_readwrite( "m_rgfchatmemberstatechange", &LobbyChatUpdate_t::m_rgfChatMemberStateChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyChatUpdate_t::m_ulSteamIDLobby );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidmakingchange", &LobbyChatUpdate_t::m_ulSteamIDMakingChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamiduserchanged", &LobbyChatUpdate_t::m_ulSteamIDUserChanged );
    }

    { //::LobbyCreated_t
        typedef bp::class_< LobbyCreated_t > LobbyCreated_t_exposer_t;
        LobbyCreated_t_exposer_t LobbyCreated_t_exposer = LobbyCreated_t_exposer_t( "LobbyCreated_t" );
        bp::scope LobbyCreated_t_scope( LobbyCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyCreated_t::k_iCallback;
        LobbyCreated_t_exposer.def_readwrite( "result", &LobbyCreated_t::m_eResult );
        LobbyCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyCreated_t::m_ulSteamIDLobby );
    }

    { //::LobbyDataUpdate_t
        typedef bp::class_< LobbyDataUpdate_t > LobbyDataUpdate_t_exposer_t;
        LobbyDataUpdate_t_exposer_t LobbyDataUpdate_t_exposer = LobbyDataUpdate_t_exposer_t( "LobbyDataUpdate_t" );
        bp::scope LobbyDataUpdate_t_scope( LobbyDataUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyDataUpdate_t::k_iCallback;
        LobbyDataUpdate_t_exposer.def_readwrite( "success", &LobbyDataUpdate_t::m_bSuccess );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyDataUpdate_t::m_ulSteamIDLobby );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidmember", &LobbyDataUpdate_t::m_ulSteamIDMember );
    }

    { //::LobbyGameCreated_t
        typedef bp::class_< LobbyGameCreated_t > LobbyGameCreated_t_exposer_t;
        LobbyGameCreated_t_exposer_t LobbyGameCreated_t_exposer = LobbyGameCreated_t_exposer_t( "LobbyGameCreated_t" );
        bp::scope LobbyGameCreated_t_scope( LobbyGameCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyGameCreated_t::k_iCallback;
        LobbyGameCreated_t_exposer.def_readwrite( "steamidgameserver", &LobbyGameCreated_t::m_ulSteamIDGameServer );
        LobbyGameCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyGameCreated_t::m_ulSteamIDLobby );
        LobbyGameCreated_t_exposer.def_readwrite( "ip", &LobbyGameCreated_t::m_unIP );
        LobbyGameCreated_t_exposer.def_readwrite( "port", &LobbyGameCreated_t::m_usPort );
    }

    { //::LobbyMatchList_t
        typedef bp::class_< LobbyMatchList_t > LobbyMatchList_t_exposer_t;
        LobbyMatchList_t_exposer_t LobbyMatchList_t_exposer = LobbyMatchList_t_exposer_t( "LobbyMatchList_t" );
        bp::scope LobbyMatchList_t_scope( LobbyMatchList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyMatchList_t::k_iCallback;
        LobbyMatchList_t_exposer.def_readwrite( "lobbiesmatching", &LobbyMatchList_t::m_nLobbiesMatching );
    }

    { //::NumberOfCurrentPlayers_t
        typedef bp::class_< NumberOfCurrentPlayers_t > NumberOfCurrentPlayers_t_exposer_t;
        NumberOfCurrentPlayers_t_exposer_t NumberOfCurrentPlayers_t_exposer = NumberOfCurrentPlayers_t_exposer_t( "NumberOfCurrentPlayers_t" );
        bp::scope NumberOfCurrentPlayers_t_scope( NumberOfCurrentPlayers_t_exposer );
        bp::scope().attr("k_iCallback") = (int)NumberOfCurrentPlayers_t::k_iCallback;
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "success", &NumberOfCurrentPlayers_t::m_bSuccess );
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "players", &NumberOfCurrentPlayers_t::m_cPlayers );
    }

    { //::PyGetLobbyChatEntry
    
        typedef ::boost::python::tuple ( *PyGetLobbyChatEntry_function_type )( ::CSteamID,int,::CSteamID * );
        
        bp::def( 
            "PyGetLobbyChatEntry"
            , PyGetLobbyChatEntry_function_type( &::PyGetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser") ) );
    
    }

    { //::PyGetLobbyDataByIndex
    
        typedef ::boost::python::tuple ( *PyGetLobbyDataByIndex_function_type )( ::CSteamID,int );
        
        bp::def( 
            "PyGetLobbyDataByIndex"
            , PyGetLobbyDataByIndex_function_type( &::PyGetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData") ) );
    
    }

    { //::PySendLobbyChatMsg
    
        typedef bool ( *PySendLobbyChatMsg_function_type )( ::CSteamID,char const * );
        
        bp::def( 
            "PySendLobbyChatMsg"
            , PySendLobbyChatMsg_function_type( &::PySendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody") ) );
    
    }

    { //::SteamAPI_RunCallbacks
    
        typedef void ( *SteamAPI_RunCallbacks_function_type )(  );
        
        bp::def( 
            "SteamAPI_RunCallbacks"
            , SteamAPI_RunCallbacks_function_type( &::SteamAPI_RunCallbacks ) );
    
    }

    bp::scope().attr( "steamapicontext" ) = boost::ref(steamapicontext);

    bp::scope().attr( "QUERY_PORT_NOT_INITIALIZED" ) = (int)QUERY_PORT_NOT_INITIALIZED;

    bp::scope().attr( "QUERY_PORT_ERROR" ) = (int)QUERY_PORT_ERROR;

    bp::scope().attr( "k_cchPersonaNameMax" ) = (int)k_cchPersonaNameMax;

    { //::LobbyMatchListCallResult
        typedef bp::class_< LobbyMatchListCallResult_wrapper > LobbyMatchListCallResult_exposer_t;
        LobbyMatchListCallResult_exposer_t LobbyMatchListCallResult_exposer = LobbyMatchListCallResult_exposer_t( "LobbyMatchListCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyMatchListCallResult_scope( LobbyMatchListCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyMatchListCallResult >();
        { //::LobbyMatchListCallResult::OnLobbyMatchList
        
            typedef void ( ::LobbyMatchListCallResult::*OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
            typedef void ( LobbyMatchListCallResult_wrapper::*default_OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
            
            LobbyMatchListCallResult_exposer.def( 
                "OnLobbyMatchList"
                , OnLobbyMatchList_function_type(&::LobbyMatchListCallResult::OnLobbyMatchList)
                , default_OnLobbyMatchList_function_type(&LobbyMatchListCallResult_wrapper::default_OnLobbyMatchList)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyGameCreatedCallResult
        typedef bp::class_< LobbyGameCreatedCallResult_wrapper > LobbyGameCreatedCallResult_exposer_t;
        LobbyGameCreatedCallResult_exposer_t LobbyGameCreatedCallResult_exposer = LobbyGameCreatedCallResult_exposer_t( "LobbyGameCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyGameCreatedCallResult_scope( LobbyGameCreatedCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyGameCreatedCallResult >();
        { //::LobbyGameCreatedCallResult::OnLobbyGameCreated
        
            typedef void ( ::LobbyGameCreatedCallResult::*OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
            typedef void ( LobbyGameCreatedCallResult_wrapper::*default_OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
            
            LobbyGameCreatedCallResult_exposer.def( 
                "OnLobbyGameCreated"
                , OnLobbyGameCreated_function_type(&::LobbyGameCreatedCallResult::OnLobbyGameCreated)
                , default_OnLobbyGameCreated_function_type(&LobbyGameCreatedCallResult_wrapper::default_OnLobbyGameCreated)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyCreatedCallResult
        typedef bp::class_< LobbyCreatedCallResult_wrapper > LobbyCreatedCallResult_exposer_t;
        LobbyCreatedCallResult_exposer_t LobbyCreatedCallResult_exposer = LobbyCreatedCallResult_exposer_t( "LobbyCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope LobbyCreatedCallResult_scope( LobbyCreatedCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, LobbyCreatedCallResult >();
        { //::LobbyCreatedCallResult::OnLobbyCreated
        
            typedef void ( ::LobbyCreatedCallResult::*OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
            typedef void ( LobbyCreatedCallResult_wrapper::*default_OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
            
            LobbyCreatedCallResult_exposer.def( 
                "OnLobbyCreated"
                , OnLobbyCreated_function_type(&::LobbyCreatedCallResult::OnLobbyCreated)
                , default_OnLobbyCreated_function_type(&LobbyCreatedCallResult_wrapper::default_OnLobbyCreated)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    { //::LobbyChatUpdateCallback
        typedef bp::class_< LobbyChatUpdateCallback_wrapper > LobbyChatUpdateCallback_exposer_t;
        LobbyChatUpdateCallback_exposer_t LobbyChatUpdateCallback_exposer = LobbyChatUpdateCallback_exposer_t( "LobbyChatUpdateCallback", bp::init<>() );
        bp::scope LobbyChatUpdateCallback_scope( LobbyChatUpdateCallback_exposer );
        { //::LobbyChatUpdateCallback::OnLobbyChatUpdate
        
            typedef void ( ::LobbyChatUpdateCallback::*OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
            typedef void ( LobbyChatUpdateCallback_wrapper::*default_OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
            
            LobbyChatUpdateCallback_exposer.def( 
                "OnLobbyChatUpdate"
                , OnLobbyChatUpdate_function_type(&::LobbyChatUpdateCallback::OnLobbyChatUpdate)
                , default_OnLobbyChatUpdate_function_type(&LobbyChatUpdateCallback_wrapper::default_OnLobbyChatUpdate)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::LobbyChatMsgCallback
        typedef bp::class_< LobbyChatMsgCallback_wrapper > LobbyChatMsgCallback_exposer_t;
        LobbyChatMsgCallback_exposer_t LobbyChatMsgCallback_exposer = LobbyChatMsgCallback_exposer_t( "LobbyChatMsgCallback", bp::init<>() );
        bp::scope LobbyChatMsgCallback_scope( LobbyChatMsgCallback_exposer );
        { //::LobbyChatMsgCallback::OnLobbyChatMsg
        
            typedef void ( ::LobbyChatMsgCallback::*OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
            typedef void ( LobbyChatMsgCallback_wrapper::*default_OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
            
            LobbyChatMsgCallback_exposer.def( 
                "OnLobbyChatMsg"
                , OnLobbyChatMsg_function_type(&::LobbyChatMsgCallback::OnLobbyChatMsg)
                , default_OnLobbyChatMsg_function_type(&LobbyChatMsgCallback_wrapper::default_OnLobbyChatMsg)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::LobbyDataUpdateCallback
        typedef bp::class_< LobbyDataUpdateCallback_wrapper > LobbyDataUpdateCallback_exposer_t;
        LobbyDataUpdateCallback_exposer_t LobbyDataUpdateCallback_exposer = LobbyDataUpdateCallback_exposer_t( "LobbyDataUpdateCallback", bp::init<>() );
        bp::scope LobbyDataUpdateCallback_scope( LobbyDataUpdateCallback_exposer );
        { //::LobbyDataUpdateCallback::OnLobbyDataUpdate
        
            typedef void ( ::LobbyDataUpdateCallback::*OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
            typedef void ( LobbyDataUpdateCallback_wrapper::*default_OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
            
            LobbyDataUpdateCallback_exposer.def( 
                "OnLobbyDataUpdate"
                , OnLobbyDataUpdate_function_type(&::LobbyDataUpdateCallback::OnLobbyDataUpdate)
                , default_OnLobbyDataUpdate_function_type(&LobbyDataUpdateCallback_wrapper::default_OnLobbyDataUpdate)
                , ( bp::arg("data") ) );
        
        }
    }

    { //::NumberOfCurrentPlayersCallResult
        typedef bp::class_< NumberOfCurrentPlayersCallResult_wrapper > NumberOfCurrentPlayersCallResult_exposer_t;
        NumberOfCurrentPlayersCallResult_exposer_t NumberOfCurrentPlayersCallResult_exposer = NumberOfCurrentPlayersCallResult_exposer_t( "NumberOfCurrentPlayersCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
        bp::scope NumberOfCurrentPlayersCallResult_scope( NumberOfCurrentPlayersCallResult_exposer );
        bp::implicitly_convertible< SteamAPICall_t, NumberOfCurrentPlayersCallResult >();
        { //::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers
        
            typedef void ( ::NumberOfCurrentPlayersCallResult::*OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
            typedef void ( NumberOfCurrentPlayersCallResult_wrapper::*default_OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
            
            NumberOfCurrentPlayersCallResult_exposer.def( 
                "OnNumberOfCurrentPlayers"
                , OnNumberOfCurrentPlayers_function_type(&::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers)
                , default_OnNumberOfCurrentPlayers_function_type(&NumberOfCurrentPlayersCallResult_wrapper::default_OnNumberOfCurrentPlayers)
                , ( bp::arg("data"), bp::arg("iofailure") ) );
        
        }
    }

    bp::scope().attr("k_uAPICallInvalid") = k_uAPICallInvalid;
}
#endif

