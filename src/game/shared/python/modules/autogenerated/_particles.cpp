// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "__array_1.pypp.hpp"

#include "tier1/utlvector.h"

#include "tier1/UtlSortVector.h"

#include "tier1/utlobjectreference.h"

#include "cbase.h"

#include "particles_ez.h"

#include "icliententityinternal.h"

#include "convar.h"

#include "fx.h"

#include "particle_parse.h"

#include "srcpy_particles.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CNewParticleEffect_wrapper : CNewParticleEffect, bp::wrapper< CNewParticleEffect > {

    CNewParticleEffect_wrapper(::C_BaseEntity * pOwner, char const * pEffectName )
    : CNewParticleEffect( pOwner, pEffectName )
      , bp::wrapper< CNewParticleEffect >(){
        // constructor
    
    }

    CNewParticleEffect_wrapper(::C_BaseEntity * pOwner, ::CParticleSystemDefinition * pEffect )
    : CNewParticleEffect( pOwner, pEffect )
      , bp::wrapper< CNewParticleEffect >(){
        // constructor
    
    }

    CNewParticleEffect_wrapper(::C_BaseEntity * pOwner, int nPrecacheIndex )
    : CNewParticleEffect( pOwner, nPrecacheIndex )
      , bp::wrapper< CNewParticleEffect >(){
        // constructor
    
    }

    int IsReleased(  ){
        return CNewParticleEffect::IsReleased(  );
    }

};

struct SimpleParticle_wrapper : SimpleParticle, bp::wrapper< SimpleParticle > {

    SimpleParticle_wrapper(SimpleParticle const & arg )
    : SimpleParticle( arg )
      , bp::wrapper< SimpleParticle >(){
        // copy constructor
        
    }

    SimpleParticle_wrapper( )
    : SimpleParticle( )
      , bp::wrapper< SimpleParticle >(){
        // null constructor
    
    }

    static pyplusplus::containers::static_sized::array_1_t< unsigned char, 3>
    pyplusplus_m_uchColor_wrapper( ::SimpleParticle & inst ){
        return pyplusplus::containers::static_sized::array_1_t< unsigned char, 3>( inst.m_uchColor );
    }

};

BOOST_PYTHON_MODULE(_particles){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< ParticleAttachment_t>("ParticleAttachment_t")
        .value("PATTACH_ABSORIGIN", PATTACH_ABSORIGIN)
        .value("PATTACH_ABSORIGIN_FOLLOW", PATTACH_ABSORIGIN_FOLLOW)
        .value("PATTACH_CUSTOMORIGIN", PATTACH_CUSTOMORIGIN)
        .value("PATTACH_CUSTOMORIGIN_FOLLOW", PATTACH_CUSTOMORIGIN_FOLLOW)
        .value("PATTACH_POINT", PATTACH_POINT)
        .value("PATTACH_POINT_FOLLOW", PATTACH_POINT_FOLLOW)
        .value("PATTACH_EYES_FOLLOW", PATTACH_EYES_FOLLOW)
        .value("PATTACH_WORLDORIGIN", PATTACH_WORLDORIGIN)
        .value("MAX_PATTACH_TYPES", MAX_PATTACH_TYPES)
        .export_values()
        ;

    bp::enum_< SimpleParticleFlag_t>("SimpleParticleFlag_t")
        .value("SIMPLE_PARTICLE_FLAG_WINDBLOWN", SIMPLE_PARTICLE_FLAG_WINDBLOWN)
        .value("SIMPLE_PARTICLE_FLAG_NO_VEL_DECAY", SIMPLE_PARTICLE_FLAG_NO_VEL_DECAY)
        .export_values()
        ;

    bp::class_< CNewParticleEffect_wrapper, boost::noncopyable >( "CNewParticleEffect", bp::no_init )    
        .def( bp::init< C_BaseEntity *, char const * >(( bp::arg("pOwner"), bp::arg("pEffectName") )) )    
        .def( bp::init< C_BaseEntity *, CParticleSystemDefinition * >(( bp::arg("pOwner"), bp::arg("pEffect") )) )    
        .def( bp::init< C_BaseEntity *, int >(( bp::arg("pOwner"), bp::arg("nPrecacheIndex") )) )    
        .def( 
            "AllocateToolParticleEffectId"
            , (int ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::AllocateToolParticleEffectId ) )    
        .def( 
            "Create"
            , (::CNewParticleEffect * (*)( ::C_BaseEntity *,char const *,char const * ))( &::CNewParticleEffect::Create )
            , ( bp::arg("pOwner"), bp::arg("pParticleSystemName"), bp::arg("pDebugName")=bp::object() )
            , bp::return_internal_reference< >() )    
        .def( 
            "Create"
            , (::CNewParticleEffect * (*)( ::C_BaseEntity *,::CParticleSystemDefinition *,char const * ))( &::CNewParticleEffect::Create )
            , ( bp::arg("pOwner"), bp::arg("pDef"), bp::arg("pDebugName")=bp::object() )
            , bp::return_internal_reference< >() )    
        .def( 
            "CreateOrAggregate"
            , (::CNewParticleEffect * (*)( ::C_BaseEntity *,char const *,::Vector const &,char const *,int ))( &::CNewParticleEffect::CreateOrAggregate )
            , ( bp::arg("pOwner"), bp::arg("pParticleSystemName"), bp::arg("vecAggregatePosition"), bp::arg("pDebugName")=bp::object(), bp::arg("nSplitScreenUser")=(int)(-0x000000001) )
            , bp::return_internal_reference< >() )    
        .def( 
            "CreateOrAggregate"
            , (::CNewParticleEffect * (*)( ::C_BaseEntity *,::CParticleSystemDefinition *,::Vector const &,char const *,int ))( &::CNewParticleEffect::CreateOrAggregate )
            , ( bp::arg("pOwner"), bp::arg("pDef"), bp::arg("vecAggregatePosition"), bp::arg("pDebugName")=bp::object(), bp::arg("nSplitScreenUser")=(int)(-0x000000001) )
            , bp::return_internal_reference< >() )    
        .def( 
            "CreateOrAggregatePrecached"
            , (::CNewParticleEffect * (*)( ::C_BaseEntity *,int,::Vector const &,char const *,int ))( &::CNewParticleEffect::CreateOrAggregatePrecached )
            , ( bp::arg("pOwner"), bp::arg("nPrecacheIndex"), bp::arg("vecAggregatePosition"), bp::arg("pDebugName")=bp::object(), bp::arg("nSplitScreenUser")=(int)(-0x000000001) )
            , bp::return_internal_reference< >() )    
        .def( 
            "DetectChanges"
            , (void ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::DetectChanges ) )    
        .def( 
            "DrawModel"
            , (int ( ::CNewParticleEffect::* )( int,::RenderableInstance_t const & ) )( &::CNewParticleEffect::DrawModel )
            , ( bp::arg("flags"), bp::arg("instance") ) )    
        .def( 
            "GetAutoUpdateBBox"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetAutoUpdateBBox ) )    
        .def( 
            "GetControlPointEntity"
            , (::EHANDLE const & ( ::CNewParticleEffect::* )( int ) )( &::CNewParticleEffect::GetControlPointEntity )
            , ( bp::arg("nWhichPoint") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetEffectName"
            , (char const * ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetEffectName ) )    
        .def( 
            "GetFirstFrameFlag"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetFirstFrameFlag ) )    
        .def( 
            "GetNeedsBBoxUpdate"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetNeedsBBoxUpdate ) )    
        .def( 
            "GetOwner"
            , (::C_BaseEntity * ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetOwner )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetPMaterial"
            , (::PMaterialHandle ( ::CNewParticleEffect::* )( char const * ) )( &::CNewParticleEffect::GetPMaterial )
            , ( bp::arg("name") )
            , bp::return_internal_reference< >() )    
        .def( 
            "GetRemoveFlag"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetRemoveFlag ) )    
        .def( 
            "GetRenderAngles"
            , (::QAngle const & ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetRenderAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRenderBounds"
            , (void ( ::CNewParticleEffect::* )( ::Vector &,::Vector & ) )( &::CNewParticleEffect::GetRenderBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "GetRenderFlags"
            , (int ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetRenderFlags ) )    
        .def( 
            "GetRenderOrigin"
            , (::Vector const & ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetRenderOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetSortOrigin"
            , (::Vector const & ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::GetSortOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetToolParticleEffectId"
            , (int ( ::CNewParticleEffect::* )(  ) const)( &::CNewParticleEffect::GetToolParticleEffectId ) )    
        .def( 
            "IsReleased"
            , (int ( CNewParticleEffect_wrapper::* )(  ) )(&CNewParticleEffect_wrapper::IsReleased) )    
        .def( 
            "MarkShouldPerformCullCheck"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::MarkShouldPerformCullCheck )
            , ( bp::arg("bEnable") ) )    
        .def( 
            "NotifyRemove"
            , (void ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::NotifyRemove ) )    
        .def( 
            "RecalculateBoundingBox"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::RecalculateBoundingBox ) )    
        .def( 
            "RemoveParticleEffect"
            , (void (*)( int ))( &::CNewParticleEffect::RemoveParticleEffect )
            , ( bp::arg("nPrecacheIndex") ) )    
        .def( 
            "RenderParticles"
            , (void ( ::CNewParticleEffect::* )( ::CParticleRenderIterator * ) )( &::CNewParticleEffect::RenderParticles )
            , ( bp::arg("pIterator") ) )    
        .def( 
            "RenderableToWorldTransform"
            , (::matrix3x4_t const & ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::RenderableToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "SetAutoUpdateBBox"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetAutoUpdateBBox )
            , ( bp::arg("bNeedsUpdate") ) )    
        .def( 
            "SetControlPoint"
            , (void ( ::CNewParticleEffect::* )( int,::Vector const & ) )( &::CNewParticleEffect::SetControlPoint )
            , ( bp::arg("nWhichPoint"), bp::arg("v") ) )    
        .def( 
            "SetControlPointEntity"
            , (void ( ::CNewParticleEffect::* )( int,::C_BaseEntity * ) )( &::CNewParticleEffect::SetControlPointEntity )
            , ( bp::arg("nWhichPoint"), bp::arg("pEntity") ) )    
        .def( 
            "SetControlPointForwardVector"
            , (void ( ::CNewParticleEffect::* )( int,::Vector const & ) )( &::CNewParticleEffect::SetControlPointForwardVector )
            , ( bp::arg("nWhichPoint"), bp::arg("v") ) )    
        .def( 
            "SetControlPointOrientation"
            , (void ( ::CNewParticleEffect::* )( int,::Quaternion const & ) )( &::CNewParticleEffect::SetControlPointOrientation )
            , ( bp::arg("nWhichPoint"), bp::arg("q") ) )    
        .def( 
            "SetControlPointOrientation"
            , (void ( ::CNewParticleEffect::* )( int,::Vector const &,::Vector const &,::Vector const & ) )( &::CNewParticleEffect::SetControlPointOrientation )
            , ( bp::arg("nWhichPoint"), bp::arg("forward"), bp::arg("right"), bp::arg("up") ) )    
        .def( 
            "SetControlPointRightVector"
            , (void ( ::CNewParticleEffect::* )( int,::Vector const & ) )( &::CNewParticleEffect::SetControlPointRightVector )
            , ( bp::arg("nWhichPoint"), bp::arg("v") ) )    
        .def( 
            "SetControlPointUpVector"
            , (void ( ::CNewParticleEffect::* )( int,::Vector const & ) )( &::CNewParticleEffect::SetControlPointUpVector )
            , ( bp::arg("nWhichPoint"), bp::arg("v") ) )    
        .def( 
            "SetDontRemove"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetDontRemove )
            , ( bp::arg("bSet") ) )    
        .def( 
            "SetDormant"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetDormant )
            , ( bp::arg("bDormant") ) )    
        .def( 
            "SetDrawOnlyForSplitScreenUser"
            , (void ( ::CNewParticleEffect::* )( int ) )( &::CNewParticleEffect::SetDrawOnlyForSplitScreenUser )
            , ( bp::arg("nSlot") ) )    
        .def( 
            "SetDrawn"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetDrawn )
            , ( bp::arg("bDrawn") ) )    
        .def( 
            "SetDynamicallyAllocated"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetDynamicallyAllocated )
            , ( bp::arg("bDynamic")=(bool)(true) ) )    
        .def( 
            "SetFirstFrameFlag"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetFirstFrameFlag )
            , ( bp::arg("bFirst") ) )    
        .def( 
            "SetNeedsBBoxUpdate"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetNeedsBBoxUpdate )
            , ( bp::arg("bNeedsUpdate") ) )    
        .def( 
            "SetOwner"
            , (void ( ::CNewParticleEffect::* )( ::C_BaseEntity * ) )( &::CNewParticleEffect::SetOwner )
            , ( bp::arg("pOwner") ) )    
        .def( 
            "SetParticleCullRadius"
            , (void ( ::CNewParticleEffect::* )( float ) )( &::CNewParticleEffect::SetParticleCullRadius )
            , ( bp::arg("radius") ) )    
        .def( 
            "SetRemoveFlag"
            , (void ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::SetRemoveFlag ) )    
        .def( 
            "SetShouldSimulate"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetShouldSimulate )
            , ( bp::arg("bSim") ) )    
        .def( 
            "SetSortOrigin"
            , (void ( ::CNewParticleEffect::* )( ::Vector const & ) )( &::CNewParticleEffect::SetSortOrigin )
            , ( bp::arg("vSortOrigin") ) )    
        .def( 
            "SetToolRecording"
            , (void ( ::CNewParticleEffect::* )( bool ) )( &::CNewParticleEffect::SetToolRecording )
            , ( bp::arg("bRecord") ) )    
        .def( 
            "SetupBones"
            , (bool ( ::CNewParticleEffect::* )( ::matrix3x4a_t *,int,int,float ) )( &::CNewParticleEffect::SetupBones )
            , ( bp::arg("pBoneToWorldOut"), bp::arg("nMaxBones"), bp::arg("boneMask"), bp::arg("currentTime") ) )    
        .def( 
            "ShouldDraw"
            , (bool ( ::CNewParticleEffect::* )(  ) )( &::CNewParticleEffect::ShouldDraw ) )    
        .def( 
            "ShouldDrawForSplitScreenUser"
            , (bool ( ::CNewParticleEffect::* )( int ) )( &::CNewParticleEffect::ShouldDrawForSplitScreenUser )
            , ( bp::arg("nSlot") ) )    
        .def( 
            "ShouldPerformCullCheck"
            , (bool ( ::CNewParticleEffect::* )(  ) const)( &::CNewParticleEffect::ShouldPerformCullCheck ) )    
        .def( 
            "ShouldSimulate"
            , (bool ( ::CNewParticleEffect::* )(  ) const)( &::CNewParticleEffect::ShouldSimulate ) )    
        .def( 
            "SimulateParticles"
            , (void ( ::CNewParticleEffect::* )( ::CParticleSimulateIterator * ) )( &::CNewParticleEffect::SimulateParticles )
            , ( bp::arg("pIterator") ) )    
        .def( 
            "StopEmission"
            , (void ( ::CNewParticleEffect::* )( bool,bool,bool,bool ) )( &::CNewParticleEffect::StopEmission )
            , ( bp::arg("bInfiniteOnly")=(bool)(false), bp::arg("bRemoveAllParticles")=(bool)(false), bp::arg("bWakeOnStop")=(bool)(false), bp::arg("bPlayEndCap")=(bool)(false) ) )    
        .def( 
            "Update"
            , (void ( ::CNewParticleEffect::* )( float ) )( &::CNewParticleEffect::Update )
            , ( bp::arg("flTimeDelta") ) )    
        .staticmethod( "Create" )    
        .staticmethod( "CreateOrAggregate" )    
        .staticmethod( "CreateOrAggregatePrecached" )    
        .staticmethod( "RemoveParticleEffect" );

    bp::class_< CParticleMgr, boost::noncopyable >( "CParticleMgr", bp::no_init )    
        .def( 
            "AddEffect"
            , (bool ( ::CParticleMgr::* )( ::CParticleEffectBinding *,::IParticleEffect * ) )( &::CParticleMgr::AddEffect )
            , ( bp::arg("pEffect"), bp::arg("pSim") ) )    
        .def( 
            "AddEffect"
            , (void ( ::CParticleMgr::* )( ::CNewParticleEffect * ) )( &::CParticleMgr::AddEffect )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "AddEffectListener"
            , (void ( ::CParticleMgr::* )( ::IClientParticleListener * ) )( &::CParticleMgr::AddEffectListener )
            , ( bp::arg("pListener") ) )    
        .def( 
            "AllocateToolParticleEffectId"
            , (int ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::AllocateToolParticleEffectId ) )    
        .def( 
            "CreateNonDrawingEffect"
            , (::CNonDrawingParticleSystem * ( ::CParticleMgr::* )( char const * ) )( &::CParticleMgr::CreateNonDrawingEffect )
            , ( bp::arg("pEffectName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "DrawBeforeViewModelEffects"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::DrawBeforeViewModelEffects ) )    
        .def( 
            "FirstNewEffect"
            , (::CNewParticleEffect * ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::FirstNewEffect )
            , bp::return_internal_reference< >() )    
        .def( 
            "FreeParticle"
            , (void ( ::CParticleMgr::* )( ::Particle * ) )( &::CParticleMgr::FreeParticle )
            , ( bp::arg("arg0") ) )    
        .def( 
            "GetDirectionalLightInfo"
            , (void ( ::CParticleMgr::* )( ::CParticleLightInfo & ) const)( &::CParticleMgr::GetDirectionalLightInfo )
            , ( bp::arg("info") ) )    
        .def( 
            "GetNumParticles"
            , (int ( ::CParticleMgr::* )(  ) const)( &::CParticleMgr::GetNumParticles ) )    
        .def( 
            "GetPMaterial"
            , (::PMaterialHandle ( ::CParticleMgr::* )( char const * ) )( &::CParticleMgr::GetPMaterial )
            , ( bp::arg("pMaterialName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "IncrementFrameCode"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::IncrementFrameCode ) )    
        .def( 
            "Init"
            , (bool ( ::CParticleMgr::* )( long unsigned int,::IMaterialSystem * ) )( &::CParticleMgr::Init )
            , ( bp::arg("nPreallocatedParticles"), bp::arg("pMaterial") ) )    
        .def( 
            "LevelInit"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::LevelInit ) )    
        .def( 
            "NextNewEffect"
            , (::CNewParticleEffect * ( ::CParticleMgr::* )( ::CNewParticleEffect * ) )( &::CParticleMgr::NextNewEffect )
            , ( bp::arg("pEffect") )
            , bp::return_internal_reference< >() )    
        .def( 
            "PostRender"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::PostRender ) )    
        .def( 
            "RemoveAllEffects"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::RemoveAllEffects ) )    
        .def( 
            "RemoveAllNewEffects"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::RemoveAllNewEffects ) )    
        .def( 
            "RemoveEffect"
            , (void ( ::CParticleMgr::* )( ::CParticleEffectBinding * ) )( &::CParticleMgr::RemoveEffect )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "RemoveEffect"
            , (void ( ::CParticleMgr::* )( ::CNewParticleEffect * ) )( &::CParticleMgr::RemoveEffect )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "RemoveEffectListener"
            , (void ( ::CParticleMgr::* )( ::IClientParticleListener * ) )( &::CParticleMgr::RemoveEffectListener )
            , ( bp::arg("pListener") ) )    
        .def( 
            "RemoveOldParticleEffects"
            , (void ( ::CParticleMgr::* )( float ) )( &::CParticleMgr::RemoveOldParticleEffects )
            , ( bp::arg("flTime") ) )    
        .def( 
            "RenderParticleSystems"
            , (void ( ::CParticleMgr::* )( bool ) )( &::CParticleMgr::RenderParticleSystems )
            , ( bp::arg("bEnable") ) )    
        .def( 
            "RepairPMaterial"
            , (void ( ::CParticleMgr::* )( ::PMaterialHandle ) )( &::CParticleMgr::RepairPMaterial )
            , ( bp::arg("hMaterial") ) )    
        .def( 
            "SetDirectionalLightInfo"
            , (void ( ::CParticleMgr::* )( ::CParticleLightInfo const & ) )( &::CParticleMgr::SetDirectionalLightInfo )
            , ( bp::arg("info") ) )    
        .def( 
            "ShouldRenderParticleSystems"
            , (bool ( ::CParticleMgr::* )(  ) const)( &::CParticleMgr::ShouldRenderParticleSystems ) )    
        .def( 
            "Simulate"
            , (void ( ::CParticleMgr::* )( float ) )( &::CParticleMgr::Simulate )
            , ( bp::arg("fTimeDelta") ) )    
        .def( 
            "SpewInfo"
            , (void ( ::CParticleMgr::* )( bool ) )( &::CParticleMgr::SpewInfo )
            , ( bp::arg("bDetail") ) )    
        .def( 
            "Term"
            , (void ( ::CParticleMgr::* )(  ) )( &::CParticleMgr::Term ) );

    bp::class_< CParticleProperty, boost::noncopyable >( "CParticleProperty", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddControlPoint"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect *,int,::C_BaseEntity *,::ParticleAttachment_t,char const *,::Vector,::matrix3x4_t * ) )( &::CParticleProperty::AddControlPoint )
            , ( bp::arg("pEffect"), bp::arg("iPoint"), bp::arg("pEntity"), bp::arg("iAttachType"), bp::arg("pszAttachmentName")=bp::object(), bp::arg("vecOriginOffset")=vec3_origin, bp::arg("vecOffsetMatrix")=bp::object() ) )    
        .def( 
            "AddControlPoint"
            , (void ( ::CParticleProperty::* )( int,int,::C_BaseEntity *,::ParticleAttachment_t,int,::Vector,::matrix3x4_t * ) )( &::CParticleProperty::AddControlPoint )
            , ( bp::arg("iEffectIndex"), bp::arg("iPoint"), bp::arg("pEntity"), bp::arg("iAttachType"), bp::arg("iAttachmentPoint")=(int)(-0x000000001), bp::arg("vecOriginOffset")=vec3_origin, bp::arg("vecOffsetMatrix")=bp::object() ) )    
        .def( 
            "Create"
            , (::CNewParticleEffect * ( ::CParticleProperty::* )( char const *,::ParticleAttachment_t,char const * ) )( &::CParticleProperty::Create )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("pszAttachmentName") )
            , bp::return_internal_reference< >() )    
        .def( 
            "Create"
            , (::CNewParticleEffect * ( ::CParticleProperty::* )( char const *,::ParticleAttachment_t,int,::Vector,::matrix3x4_t * ) )( &::CParticleProperty::Create )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("iAttachmentPoint")=(int)(-0x000000001), bp::arg("vecOriginOffset")=vec3_origin, bp::arg("vecOffsetMatrix")=bp::object() )
            , bp::return_internal_reference< >() )    
        .def( 
            "DebugPrintEffects"
            , (void ( ::CParticleProperty::* )(  ) )( &::CParticleProperty::DebugPrintEffects ) )    
        .def( 
            "FindEffect"
            , (int ( ::CParticleProperty::* )( ::CNewParticleEffect * ) )( &::CParticleProperty::FindEffect )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "FindEffect"
            , (int ( ::CParticleProperty::* )( char const * ) )( &::CParticleProperty::FindEffect )
            , ( bp::arg("pEffectName") ) )    
        .def( 
            "GetAllParticleEffectRenderables"
            , (int ( ::CParticleProperty::* )( ::IClientRenderable * *,int ) )( &::CParticleProperty::GetAllParticleEffectRenderables )
            , ( bp::arg("pOutput"), bp::arg("iMaxOutput") ) )    
        .def( 
            "GetOuter"
            , (::C_BaseEntity * ( ::CParticleProperty::* )(  ) )( &::CParticleProperty::GetOuter )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "Init"
            , (void ( ::CParticleProperty::* )( ::C_BaseEntity * ) )( &::CParticleProperty::Init )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsValidEffect"
            , (bool ( ::CParticleProperty::* )( ::CNewParticleEffect const * ) )( &::CParticleProperty::IsValidEffect )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "OnParticleSystemDeleted"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect * ) )( &::CParticleProperty::OnParticleSystemDeleted )
            , ( bp::arg("pEffect") ) )    
        .def( 
            "OnParticleSystemUpdated"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect *,float ) )( &::CParticleProperty::OnParticleSystemUpdated )
            , ( bp::arg("pEffect"), bp::arg("flTimeDelta") ) )    
        .def( 
            "OwnerSetDormantTo"
            , (void ( ::CParticleProperty::* )( bool ) )( &::CParticleProperty::OwnerSetDormantTo )
            , ( bp::arg("bDormant") ) )    
        .def( 
            "ReplaceParticleEffect"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect *,::CNewParticleEffect * ) )( &::CParticleProperty::ReplaceParticleEffect )
            , ( bp::arg("pOldEffect"), bp::arg("pNewEffect") ) )    
        .def( 
            "SetControlPointParent"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect *,int,int ) )( &::CParticleProperty::SetControlPointParent )
            , ( bp::arg("pEffect"), bp::arg("whichControlPoint"), bp::arg("parentIdx") ) )    
        .def( 
            "SetControlPointParent"
            , (void ( ::CParticleProperty::* )( int,int,int ) )( &::CParticleProperty::SetControlPointParent )
            , ( bp::arg("iEffectIndex"), bp::arg("whichControlPoint"), bp::arg("parentIdx") ) )    
        .def( 
            "StopEmission"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect *,bool,bool,bool,bool ) )( &::CParticleProperty::StopEmission )
            , ( bp::arg("pEffect")=bp::object(), bp::arg("bWakeOnStop")=(bool)(false), bp::arg("bDestroyAsleepSystems")=(bool)(false), bp::arg("bForceRemoveInstantly")=(bool)(false), bp::arg("bPlayEndCap")=(bool)(false) ) )    
        .def( 
            "StopEmissionAndDestroyImmediately"
            , (void ( ::CParticleProperty::* )( ::CNewParticleEffect * ) )( &::CParticleProperty::StopEmissionAndDestroyImmediately )
            , ( bp::arg("pEffect")=bp::object() ) )    
        .def( 
            "StopParticlesInvolving"
            , (void ( ::CParticleProperty::* )( ::C_BaseEntity *,bool ) )( &::CParticleProperty::StopParticlesInvolving )
            , ( bp::arg("pEntity"), bp::arg("bForceRemoveInstantly")=(bool)(false) ) )    
        .def( 
            "StopParticlesNamed"
            , (void ( ::CParticleProperty::* )( char const *,bool,int ) )( &::CParticleProperty::StopParticlesNamed )
            , ( bp::arg("pszEffectName"), bp::arg("bForceRemoveInstantly")=(bool)(false), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) )    
        .def_readwrite( "m_DataMap", CParticleProperty::m_DataMap )    
        .def_readwrite( "m_PredMap", CParticleProperty::m_PredMap );

    bp::class_< CParticleSubTexture >( "CParticleSubTexture", bp::no_init );

    bp::class_< CParticleSubTextureGroup >( "CParticleSubTextureGroup", bp::no_init );

    bp::class_< Particle >( "Particle" )    
        .def_readwrite( "pos", &Particle::m_Pos );

    { //::PyDBaseLight
        typedef bp::class_< PyDBaseLight > DBaseLight_exposer_t;
        DBaseLight_exposer_t DBaseLight_exposer = DBaseLight_exposer_t( "DBaseLight", bp::init< C_BaseEntity * >(( bp::arg("owner") )) );
        bp::scope DBaseLight_scope( DBaseLight_exposer );
        bp::implicitly_convertible< C_BaseEntity *, PyDBaseLight >();
        { //property "origin"[fget=::PyDBaseLight::GetOrigin, fset=::PyDBaseLight::SetOrigin]
        
            typedef ::Vector & ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( ::Vector & ) ;
            
            DBaseLight_exposer.add_property( 
                "origin"
                , bp::make_function( 
                      fget( &::PyDBaseLight::GetOrigin )
                    , bp::return_internal_reference< >() ) 
                , fset( &::PyDBaseLight::SetOrigin ) );
        
        }
        { //property "color"[fget=::PyDBaseLight::GetColor, fset=::PyDBaseLight::SetColor]
        
            typedef ::ColorRGBExp32 & ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( ::ColorRGBExp32 & ) ;
            
            DBaseLight_exposer.add_property( 
                "color"
                , bp::make_function( 
                      fget( &::PyDBaseLight::GetColor )
                    , bp::return_internal_reference< >() ) 
                , fset( &::PyDBaseLight::SetColor ) );
        
        }
        { //property "die"[fget=::PyDBaseLight::GetDie, fset=::PyDBaseLight::SetDie]
        
            typedef float ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( float ) ;
            
            DBaseLight_exposer.add_property( 
                "die"
                , fget( &::PyDBaseLight::GetDie )
                , fset( &::PyDBaseLight::SetDie ) );
        
        }
        { //property "radius"[fget=::PyDBaseLight::GetRadius, fset=::PyDBaseLight::SetRadius]
        
            typedef float ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( float ) ;
            
            DBaseLight_exposer.add_property( 
                "radius"
                , fget( &::PyDBaseLight::GetRadius )
                , fset( &::PyDBaseLight::SetRadius ) );
        
        }
        { //property "flags"[fget=::PyDBaseLight::GetFlags, fset=::PyDBaseLight::SetFlags]
        
            typedef int ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( int ) ;
            
            DBaseLight_exposer.add_property( 
                "flags"
                , fget( &::PyDBaseLight::GetFlags )
                , fset( &::PyDBaseLight::SetFlags ) );
        
        }
        { //property "minlight"[fget=::PyDBaseLight::GetMinlight, fset=::PyDBaseLight::SetMinlight]
        
            typedef int ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( int ) ;
            
            DBaseLight_exposer.add_property( 
                "minlight"
                , fget( &::PyDBaseLight::GetMinlight )
                , fset( &::PyDBaseLight::SetMinlight ) );
        
        }
        { //property "decay"[fget=::PyDBaseLight::GetDecay, fset=::PyDBaseLight::SetDecay]
        
            typedef float ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( float ) ;
            
            DBaseLight_exposer.add_property( 
                "decay"
                , fget( &::PyDBaseLight::GetDecay )
                , fset( &::PyDBaseLight::SetDecay ) );
        
        }
        { //property "style"[fget=::PyDBaseLight::GetStyle, fset=::PyDBaseLight::SetStyle]
        
            typedef int ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( int ) ;
            
            DBaseLight_exposer.add_property( 
                "style"
                , fget( &::PyDBaseLight::GetStyle )
                , fset( &::PyDBaseLight::SetStyle ) );
        
        }
        { //property "direction"[fget=::PyDBaseLight::GetDirection, fset=::PyDBaseLight::SetDirection]
        
            typedef ::Vector & ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( ::Vector & ) ;
            
            DBaseLight_exposer.add_property( 
                "direction"
                , bp::make_function( 
                      fget( &::PyDBaseLight::GetDirection )
                    , bp::return_internal_reference< >() ) 
                , fset( &::PyDBaseLight::SetDirection ) );
        
        }
        { //property "innerangle"[fget=::PyDBaseLight::GetInnerAngle, fset=::PyDBaseLight::SetInnerAngle]
        
            typedef float ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( float ) ;
            
            DBaseLight_exposer.add_property( 
                "innerangle"
                , fget( &::PyDBaseLight::GetInnerAngle )
                , fset( &::PyDBaseLight::SetInnerAngle ) );
        
        }
        { //property "outerangle"[fget=::PyDBaseLight::GetOuterAngle, fset=::PyDBaseLight::SetOuterAngle]
        
            typedef float ( ::PyDBaseLight::*fget )(  ) ;
            typedef void ( ::PyDBaseLight::*fset )( float ) ;
            
            DBaseLight_exposer.add_property( 
                "outerangle"
                , fget( &::PyDBaseLight::GetOuterAngle )
                , fset( &::PyDBaseLight::SetOuterAngle ) );
        
        }
    }

    { //::PyDLight
        typedef bp::class_< PyDLight, bp::bases< PyDBaseLight > > DLight_exposer_t;
        DLight_exposer_t DLight_exposer = DLight_exposer_t( "DLight", bp::init< C_BaseEntity * >(( bp::arg("owner") )) );
        bp::scope DLight_scope( DLight_exposer );
        bp::implicitly_convertible< C_BaseEntity *, PyDLight >();
    }

    { //::PyELight
        typedef bp::class_< PyELight, bp::bases< PyDBaseLight > > ELight_exposer_t;
        ELight_exposer_t ELight_exposer = ELight_exposer_t( "ELight", bp::init< C_BaseEntity * >(( bp::arg("owner") )) );
        bp::scope ELight_scope( ELight_exposer );
        bp::implicitly_convertible< C_BaseEntity *, PyELight >();
    }

    { //::SimpleParticle
        typedef bp::class_< SimpleParticle_wrapper, bp::bases< Particle > > SimpleParticle_exposer_t;
        SimpleParticle_exposer_t SimpleParticle_exposer = SimpleParticle_exposer_t( "SimpleParticle", bp::init< >() );
        bp::scope SimpleParticle_scope( SimpleParticle_exposer );
        SimpleParticle_exposer.def_readwrite( "dietime", &SimpleParticle::m_flDieTime );
        SimpleParticle_exposer.def_readwrite( "lifetime", &SimpleParticle::m_flLifetime );
        SimpleParticle_exposer.def_readwrite( "roll", &SimpleParticle::m_flRoll );
        SimpleParticle_exposer.def_readwrite( "rolldelta", &SimpleParticle::m_flRollDelta );
        SimpleParticle_exposer.def_readwrite( "flags", &SimpleParticle::m_iFlags );
        pyplusplus::containers::static_sized::register_array_1< unsigned char, 3 >( "__array_1_unsigned_char_3" );
        { //SimpleParticle::m_uchColor [variable], type=unsigned char[3]
        
            typedef pyplusplus::containers::static_sized::array_1_t< unsigned char, 3> ( *array_wrapper_creator )( ::SimpleParticle & );
            
            SimpleParticle_exposer.add_property( "color"
                , bp::make_function( array_wrapper_creator(&SimpleParticle_wrapper::pyplusplus_m_uchColor_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        SimpleParticle_exposer.def_readwrite( "endalpha", &SimpleParticle::m_uchEndAlpha );
        SimpleParticle_exposer.def_readwrite( "endsize", &SimpleParticle::m_uchEndSize );
        SimpleParticle_exposer.def_readwrite( "startalpha", &SimpleParticle::m_uchStartAlpha );
        SimpleParticle_exposer.def_readwrite( "startsize", &SimpleParticle::m_uchStartSize );
        SimpleParticle_exposer.def_readwrite( "velocity", &SimpleParticle::m_vecVelocity );
    }

    { //::AddEmberParticle
    
        typedef void ( *AddEmberParticle_function_type )( ::SimpleParticle const *,::PMaterialHandle,bool );
        
        bp::def( 
            "AddEmberParticle"
            , AddEmberParticle_function_type( &::AddEmberParticle )
            , ( bp::arg("pParticle"), bp::arg("hMaterial"), bp::arg("bInSkybox")=(bool)(false) ) );
    
    }

    { //::AddFireParticle
    
        typedef void ( *AddFireParticle_function_type )( ::SimpleParticle const *,::PMaterialHandle,bool );
        
        bp::def( 
            "AddFireParticle"
            , AddFireParticle_function_type( &::AddFireParticle )
            , ( bp::arg("pParticle"), bp::arg("hMaterial"), bp::arg("bInSkybox")=(bool)(false) ) );
    
    }

    { //::AddFireSmokeParticle
    
        typedef void ( *AddFireSmokeParticle_function_type )( ::SimpleParticle const *,::PMaterialHandle,bool );
        
        bp::def( 
            "AddFireSmokeParticle"
            , AddFireSmokeParticle_function_type( &::AddFireSmokeParticle )
            , ( bp::arg("pParticle"), bp::arg("hMaterial"), bp::arg("bInSkybox")=(bool)(false) ) );
    
    }

    { //::AddSimpleParticle
    
        typedef void ( *AddSimpleParticle_function_type )( ::SimpleParticle const *,::PMaterialHandle,bool );
        
        bp::def( 
            "AddSimpleParticle"
            , AddSimpleParticle_function_type( &::AddSimpleParticle )
            , ( bp::arg("pParticle"), bp::arg("hMaterial"), bp::arg("bInSkybox")=(bool)(false) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( int,::Vector const &,::QAngle const &,::ParticleAttachment_t,::C_BaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("iEffectIndex"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( int,::Vector,::Vector,::QAngle,::C_BaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("iEffectIndex"), bp::arg("vecOrigin"), bp::arg("vecStart"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector,::Vector,::QAngle,::C_BaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecStart"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector const &,::QAngle const &,::ParticleAttachment_t,::C_BaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector,::QAngle,::C_BaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::ParticleAttachment_t,::C_BaseEntity *,int,bool,int,::IRecipientFilter * );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("iAttachmentPoint")=(int)(-0x000000001), bp::arg("bResetAllParticlesOnEntity")=(bool)(false), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001), bp::arg("filter")=bp::object() ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::ParticleAttachment_t,::C_BaseEntity *,char const *,bool,int,::IRecipientFilter * );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("pEntity"), bp::arg("pszAttachmentName"), bp::arg("bResetAllParticlesOnEntity")=(bool)(false), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001), bp::arg("filter")=bp::object() ) );
    
    }

    { //::GetAttachTypeFromString
    
        typedef int ( *GetAttachTypeFromString_function_type )( char const * );
        
        bp::def( 
            "GetAttachTypeFromString"
            , GetAttachTypeFromString_function_type( &::GetAttachTypeFromString )
            , ( bp::arg("pszString") ) );
    
    }

    { //::ParticleMgr
    
        typedef ::CParticleMgr * ( *ParticleMgr_function_type )(  );
        
        bp::def( 
            "ParticleMgr"
            , ParticleMgr_function_type( &::ParticleMgr )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::PrecacheParticleSystem
    
        typedef int ( *PrecacheParticleSystem_function_type )( char const * );
        
        bp::def( 
            "PrecacheParticleSystem"
            , PrecacheParticleSystem_function_type( &::PrecacheParticleSystem )
            , ( bp::arg("pParticleSystemName") ) );
    
    }

    { //::PyDecommitTempMemory
    
        typedef void ( *DecommitTempMemory_function_type )(  );
        
        bp::def( 
            "DecommitTempMemory"
            , DecommitTempMemory_function_type( &::PyDecommitTempMemory ) );
    
    }

    { //::PyReadParticleConfigFile
    
        typedef bool ( *ReadParticleConfigFile_function_type )( char const *,bool,bool );
        
        bp::def( 
            "ReadParticleConfigFile"
            , ReadParticleConfigFile_function_type( &::PyReadParticleConfigFile )
            , ( bp::arg("filename"), bp::arg("precache")=(bool)(false), bp::arg("decommittempmemory")=(bool)(false) ) );
    
    }

    { //::PyShouldLoadSheets
    
        typedef void ( *ShouldLoadSheets_function_type )( bool );
        
        bp::def( 
            "ShouldLoadSheets"
            , ShouldLoadSheets_function_type( &::PyShouldLoadSheets )
            , ( bp::arg("bLoadSheets") ) );
    
    }

    { //::StopParticleEffect
    
        typedef void ( *StopParticleEffect_function_type )( ::C_BaseEntity *,char const * );
        
        bp::def( 
            "StopParticleEffect"
            , StopParticleEffect_function_type( &::StopParticleEffect )
            , ( bp::arg("pEntity"), bp::arg("pszParticleName") ) );
    
    }

    bp::scope().attr( "DLIGHT_NO_WORLD_ILLUMINATION" ) = (int)DLIGHT_NO_WORLD_ILLUMINATION;

    bp::scope().attr( "DLIGHT_NO_MODEL_ILLUMINATION" ) = (int)DLIGHT_NO_MODEL_ILLUMINATION;

    bp::scope().attr( "DLIGHT_ADD_DISPLACEMENT_ALPHA" ) = (int)DLIGHT_ADD_DISPLACEMENT_ALPHA;

    bp::scope().attr( "DLIGHT_SUBTRACT_DISPLACEMENT_ALPHA" ) = (int)DLIGHT_SUBTRACT_DISPLACEMENT_ALPHA;

    bp::scope().attr( "DLIGHT_DISPLACEMENT_MASK" ) = (int)DLIGHT_DISPLACEMENT_MASK;

    { //::StopParticleEffects
    
        typedef void ( *StopParticleEffects_function_type )( ::C_BaseEntity * );
        
        bp::def( 
            "StopParticleEffects"
            , StopParticleEffects_function_type( &::StopParticleEffects )
            , ( bp::arg("pEntity") ) );
    
    }
}
#else
#include "cbase.h"

#include "gameinterface.h"

#include "particle_parse.h"

#include "srcpy_particles.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_particles){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< ParticleAttachment_t>("ParticleAttachment_t")
        .value("PATTACH_ABSORIGIN", PATTACH_ABSORIGIN)
        .value("PATTACH_ABSORIGIN_FOLLOW", PATTACH_ABSORIGIN_FOLLOW)
        .value("PATTACH_CUSTOMORIGIN", PATTACH_CUSTOMORIGIN)
        .value("PATTACH_CUSTOMORIGIN_FOLLOW", PATTACH_CUSTOMORIGIN_FOLLOW)
        .value("PATTACH_POINT", PATTACH_POINT)
        .value("PATTACH_POINT_FOLLOW", PATTACH_POINT_FOLLOW)
        .value("PATTACH_EYES_FOLLOW", PATTACH_EYES_FOLLOW)
        .value("PATTACH_WORLDORIGIN", PATTACH_WORLDORIGIN)
        .value("MAX_PATTACH_TYPES", MAX_PATTACH_TYPES)
        .export_values()
        ;

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( int,::Vector const &,::QAngle const &,::ParticleAttachment_t,::CBaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("iEffectIndex"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( int,::Vector,::Vector,::QAngle,::CBaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("iEffectIndex"), bp::arg("vecOrigin"), bp::arg("vecStart"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector,::Vector,::QAngle,::CBaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecStart"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector const &,::QAngle const &,::ParticleAttachment_t,::CBaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::Vector,::QAngle,::CBaseEntity *,int );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("pEntity")=bp::object(), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001) ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::ParticleAttachment_t,::CBaseEntity *,int,bool,int,::IRecipientFilter * );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("pEntity")=bp::object(), bp::arg("iAttachmentPoint")=(int)(-0x000000001), bp::arg("bResetAllParticlesOnEntity")=(bool)(false), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001), bp::arg("filter")=bp::object() ) );
    
    }

    { //::DispatchParticleEffect
    
        typedef void ( *DispatchParticleEffect_function_type )( char const *,::ParticleAttachment_t,::CBaseEntity *,char const *,bool,int,::IRecipientFilter * );
        
        bp::def( 
            "DispatchParticleEffect"
            , DispatchParticleEffect_function_type( &::DispatchParticleEffect )
            , ( bp::arg("pszParticleName"), bp::arg("iAttachType"), bp::arg("pEntity"), bp::arg("pszAttachmentName"), bp::arg("bResetAllParticlesOnEntity")=(bool)(false), bp::arg("nSplitScreenPlayerSlot")=(int)(-0x000000001), bp::arg("filter")=bp::object() ) );
    
    }

    { //::GetAttachTypeFromString
    
        typedef int ( *GetAttachTypeFromString_function_type )( char const * );
        
        bp::def( 
            "GetAttachTypeFromString"
            , GetAttachTypeFromString_function_type( &::GetAttachTypeFromString )
            , ( bp::arg("pszString") ) );
    
    }

    { //::PrecacheParticleSystem
    
        typedef int ( *PrecacheParticleSystem_function_type )( char const * );
        
        bp::def( 
            "PrecacheParticleSystem"
            , PrecacheParticleSystem_function_type( &::PrecacheParticleSystem )
            , ( bp::arg("pParticleSystemName") ) );
    
    }

    { //::PyDecommitTempMemory
    
        typedef void ( *DecommitTempMemory_function_type )(  );
        
        bp::def( 
            "DecommitTempMemory"
            , DecommitTempMemory_function_type( &::PyDecommitTempMemory ) );
    
    }

    { //::PyReadParticleConfigFile
    
        typedef bool ( *ReadParticleConfigFile_function_type )( char const *,bool,bool );
        
        bp::def( 
            "ReadParticleConfigFile"
            , ReadParticleConfigFile_function_type( &::PyReadParticleConfigFile )
            , ( bp::arg("filename"), bp::arg("precache")=(bool)(false), bp::arg("decommittempmemory")=(bool)(false) ) );
    
    }

    { //::PyShouldLoadSheets
    
        typedef void ( *ShouldLoadSheets_function_type )( bool );
        
        bp::def( 
            "ShouldLoadSheets"
            , ShouldLoadSheets_function_type( &::PyShouldLoadSheets )
            , ( bp::arg("bLoadSheets") ) );
    
    }

    { //::StopParticleEffect
    
        typedef void ( *StopParticleEffect_function_type )( ::CBaseEntity *,char const * );
        
        bp::def( 
            "StopParticleEffect"
            , StopParticleEffect_function_type( &::StopParticleEffect )
            , ( bp::arg("pEntity"), bp::arg("pszParticleName") ) );
    
    }

    { //::StopParticleEffects
    
        typedef void ( *StopParticleEffects_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "StopParticleEffects"
            , StopParticleEffects_function_type( &::StopParticleEffects )
            , ( bp::arg("pEntity") ) );
    
    }
}
#endif

