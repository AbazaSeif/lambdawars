// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "srcpy_matchmaking.h"

#include "wars_matchmaking.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(matchmaking){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< PyMatchSession >( "matchsession" )    
        .def( 
            "Command"
            , (void (*)( ::KeyValues * ))( &::PyMatchSession::Command )
            , ( bp::arg("pCommand") ) )    
        .def( 
            "GetSessionSettings"
            , (::KeyValues * (*)(  ))( &::PyMatchSession::GetSessionSettings )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSessionSystemData"
            , (::KeyValues * (*)(  ))( &::PyMatchSession::GetSessionSystemData )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "UpdateSessionSettings"
            , (void (*)( ::KeyValues * ))( &::PyMatchSession::UpdateSessionSettings )
            , ( bp::arg("pSettings") ) )    
        .staticmethod( "Command" )    
        .staticmethod( "GetSessionSettings" )    
        .staticmethod( "GetSessionSystemData" )    
        .staticmethod( "UpdateSessionSettings" );

    { //::PyMKCloseSession
    
        typedef void ( *CloseSession_function_type )(  );
        
        bp::def( 
            "CloseSession"
            , CloseSession_function_type( &::PyMKCloseSession ) );
    
    }

    { //::PyMKCreateSession
    
        typedef void ( *CreateSession_function_type )( ::KeyValues * );
        
        bp::def( 
            "CreateSession"
            , CreateSession_function_type( &::PyMKCreateSession )
            , ( bp::arg("pSettings") ) );
    
    }

    { //::PyMKIsSessionActive
    
        typedef bool ( *IsSessionActive_function_type )(  );
        
        bp::def( 
            "IsSessionActive"
            , IsSessionActive_function_type( &::PyMKIsSessionActive ) );
    
    }

    { //::PyMKMatchSession
    
        typedef void ( *MatchSession_function_type )( ::KeyValues * );
        
        bp::def( 
            "MatchSession"
            , MatchSession_function_type( &::PyMKMatchSession )
            , ( bp::arg("pSettings") ) );
    
    }

    { //::WarsRequestGameServer
    
        typedef void ( *WarsRequestGameServer_function_type )( ::CSteamID,::CSteamID,::KeyValues * );
        
        bp::def( 
            "WarsRequestGameServer"
            , WarsRequestGameServer_function_type( &::WarsRequestGameServer )
            , ( bp::arg("serverSteamId"), bp::arg("lobbySteamId"), bp::arg("pGameData") ) );
    
    }

    { //::WarsSendPingMessage
    
        typedef void ( *WarsSendPingMessage_function_type )( ::CSteamID );
        
        bp::def( 
            "WarsSendPingMessage"
            , WarsSendPingMessage_function_type( &::WarsSendPingMessage )
            , ( bp::arg("steamId") ) );
    
    }

    { //::WarsSendPongMessage
    
        typedef void ( *WarsSendPongMessage_function_type )( ::CSteamID );
        
        bp::def( 
            "WarsSendPongMessage"
            , WarsSendPongMessage_function_type( &::WarsSendPongMessage )
            , ( bp::arg("steamId") ) );
    
    }
}
#else
#include "cbase.h"

#include "srcpy_matchmaking.h"

#include "wars_matchmaking.h"

#include "wars_gameserver.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(matchmaking){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< EGameServerState>("EGameServerState")
        .value("k_EGameServer_Error", k_EGameServer_Error)
        .value("k_EGameServer_Available", k_EGameServer_Available)
        .value("k_EGameServer_InGame", k_EGameServer_InGame)
        .value("k_EGameServer_InGameFreeStyle", k_EGameServer_InGameFreeStyle)
        .value("k_EGameServer_StartingGame", k_EGameServer_StartingGame)
        .value("k_EGameServer_GameEnded", k_EGameServer_GameEnded)
        .export_values()
        ;

    bp::class_< PyMatchSession >( "matchsession" )    
        .def( 
            "Command"
            , (void (*)( ::KeyValues * ))( &::PyMatchSession::Command )
            , ( bp::arg("pCommand") ) )    
        .def( 
            "GetSessionSettings"
            , (::KeyValues * (*)(  ))( &::PyMatchSession::GetSessionSettings )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSessionSystemData"
            , (::KeyValues * (*)(  ))( &::PyMatchSession::GetSessionSystemData )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "UpdateSessionSettings"
            , (void (*)( ::KeyValues * ))( &::PyMatchSession::UpdateSessionSettings )
            , ( bp::arg("pSettings") ) )    
        .staticmethod( "Command" )    
        .staticmethod( "GetSessionSettings" )    
        .staticmethod( "GetSessionSystemData" )    
        .staticmethod( "UpdateSessionSettings" );

    { //::GetActiveGameLobbySteamID
    
        typedef ::CSteamID ( *GetActiveGameLobbySteamID_function_type )(  );
        
        bp::def( 
            "GetActiveGameLobbySteamID"
            , GetActiveGameLobbySteamID_function_type( &::GetActiveGameLobbySteamID ) );
    
    }

    { //::GetWarsGameServerState
    
        typedef ::EGameServerState ( *GetWarsGameServerState_function_type )(  );
        
        bp::def( 
            "GetWarsGameServerState"
            , GetWarsGameServerState_function_type( &::GetWarsGameServerState ) );
    
    }

    { //::PyMKCloseSession
    
        typedef void ( *CloseSession_function_type )(  );
        
        bp::def( 
            "CloseSession"
            , CloseSession_function_type( &::PyMKCloseSession ) );
    
    }

    { //::PyMKCreateSession
    
        typedef void ( *CreateSession_function_type )( ::KeyValues * );
        
        bp::def( 
            "CreateSession"
            , CreateSession_function_type( &::PyMKCreateSession )
            , ( bp::arg("pSettings") ) );
    
    }

    { //::PyMKIsSessionActive
    
        typedef bool ( *IsSessionActive_function_type )(  );
        
        bp::def( 
            "IsSessionActive"
            , IsSessionActive_function_type( &::PyMKIsSessionActive ) );
    
    }

    { //::PyMKMatchSession
    
        typedef void ( *MatchSession_function_type )( ::KeyValues * );
        
        bp::def( 
            "MatchSession"
            , MatchSession_function_type( &::PyMKMatchSession )
            , ( bp::arg("pSettings") ) );
    
    }

    { //::SetWarsGameServerState
    
        typedef void ( *SetWarsGameServerState_function_type )( ::EGameServerState );
        
        bp::def( 
            "SetWarsGameServerState"
            , SetWarsGameServerState_function_type( &::SetWarsGameServerState )
            , ( bp::arg("state") ) );
    
    }

    { //::WarsInitGameServer
    
        typedef void ( *WarsInitGameServer_function_type )(  );
        
        bp::def( 
            "WarsInitGameServer"
            , WarsInitGameServer_function_type( &::WarsInitGameServer ) );
    
    }

    { //::WarsRequestGameServer
    
        typedef void ( *WarsRequestGameServer_function_type )( ::CSteamID,::CSteamID,::KeyValues * );
        
        bp::def( 
            "WarsRequestGameServer"
            , WarsRequestGameServer_function_type( &::WarsRequestGameServer )
            , ( bp::arg("serverSteamId"), bp::arg("lobbySteamId"), bp::arg("pGameData") ) );
    
    }

    { //::WarsShutdownGameServer
    
        typedef void ( *WarsShutdownGameServer_function_type )(  );
        
        bp::def( 
            "WarsShutdownGameServer"
            , WarsShutdownGameServer_function_type( &::WarsShutdownGameServer ) );
    
    }
}
#endif

