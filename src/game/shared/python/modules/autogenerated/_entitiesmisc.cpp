// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "__array_1.pypp.hpp"

#include "cbase.h"

#include "takedamageinfo.h"

#include "cliententitylist.h"

#include "soundinfo.h"

#include "shared_classnames.h"

#include "npcevent.h"

#include "studio.h"

#include "srcpy_entities.h"

#include "isaverestore.h"

#include "saverestore.h"

#include "mapentities_shared.h"

#include "vcollide_parse.h"

#include "props_shared.h"

#include "beam_shared.h"

#include "shot_manipulator.h"

#include "imouse.h"

#include "c_hl2wars_player.h"

#include "srcpy_converters_ents.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CClientEntityList_wrapper : CClientEntityList, bp::wrapper< CClientEntityList > {

    struct CPVSNotifyInfo_wrapper : CClientEntityList::CPVSNotifyInfo, bp::wrapper< CClientEntityList::CPVSNotifyInfo > {
    
        CPVSNotifyInfo_wrapper(CClientEntityList::CPVSNotifyInfo const & arg )
        : CClientEntityList::CPVSNotifyInfo( arg )
          , bp::wrapper< CClientEntityList::CPVSNotifyInfo >(){
            // copy constructor
            
        }
    
        CPVSNotifyInfo_wrapper()
        : CClientEntityList::CPVSNotifyInfo()
          , bp::wrapper< CClientEntityList::CPVSNotifyInfo >(){
            // null constructor
            
        }
    
        static ::IPVSNotify * get_m_pNotify(CClientEntityList::CPVSNotifyInfo const & inst ){
            return inst.m_pNotify;
        }
        
        static void set_m_pNotify( CClientEntityList::CPVSNotifyInfo & inst, ::IPVSNotify * new_value ){ 
            inst.m_pNotify = new_value;
        }
    
        static ::IClientRenderable * get_m_pRenderable(CClientEntityList::CPVSNotifyInfo const & inst ){
            return inst.m_pRenderable;
        }
        
        static void set_m_pRenderable( CClientEntityList::CPVSNotifyInfo & inst, ::IClientRenderable * new_value ){ 
            inst.m_pRenderable = new_value;
        }
    
    };

    CClientEntityList_wrapper( )
    : CClientEntityList( )
      , bp::wrapper< CClientEntityList >(){
        // null constructor
    
    }

};

struct FireBulletsInfo_t_wrapper : FireBulletsInfo_t, bp::wrapper< FireBulletsInfo_t > {

    FireBulletsInfo_t_wrapper(FireBulletsInfo_t const & arg )
    : FireBulletsInfo_t( arg )
      , bp::wrapper< FireBulletsInfo_t >(){
        // copy constructor
        
    }

    FireBulletsInfo_t_wrapper( )
    : FireBulletsInfo_t( )
      , bp::wrapper< FireBulletsInfo_t >(){
        // null constructor
    
    }

    FireBulletsInfo_t_wrapper(int nShots, ::Vector const & vecSrc, ::Vector const & vecDir, ::Vector const & vecSpread, float flDistance, int nAmmoType, bool bPrimaryAttack=true )
    : FireBulletsInfo_t( nShots, vecSrc, vecDir, vecSpread, flDistance, nAmmoType, bPrimaryAttack )
      , bp::wrapper< FireBulletsInfo_t >(){
        // constructor
    
    }

    static ::C_BaseEntity * get_m_pAdditionalIgnoreEnt(FireBulletsInfo_t const & inst ){
        return inst.m_pAdditionalIgnoreEnt;
    }
    
    static void set_m_pAdditionalIgnoreEnt( FireBulletsInfo_t & inst, ::C_BaseEntity * new_value ){ 
        inst.m_pAdditionalIgnoreEnt = new_value;
    }

    static ::C_BaseEntity * get_m_pAttacker(FireBulletsInfo_t const & inst ){
        return inst.m_pAttacker;
    }
    
    static void set_m_pAttacker( FireBulletsInfo_t & inst, ::C_BaseEntity * new_value ){ 
        inst.m_pAttacker = new_value;
    }

};

struct IMouse_wrapper : IMouse, bp::wrapper< IMouse > {

    IMouse_wrapper()
    : IMouse()
      , bp::wrapper< IMouse >(){
        // null constructor
        
    }

    virtual long unsigned int GetCursor(  ){
        bp::override func_GetCursor = this->get_override( "GetCursor" );
        try {
            return func_GetCursor(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( IMouse, GetIMouse )
        PY_OVERRIDE_LOG( _entitiesmisc, IMouse, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->IMouse::GetIMouse(  );
            }
        else
            return this->IMouse::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return IMouse::GetIMouse( );
    }

    virtual void OnClickLeftDoublePressed( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        try {
            func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickLeftPressed( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        try {
            func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickLeftReleased( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        try {
            func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightDoublePressed( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        try {
            func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightPressed( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        try {
            func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightReleased( ::C_HL2WarsPlayer * player ){
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        try {
            func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnCursorEntered( ::C_HL2WarsPlayer * player ){
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        try {
            func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnCursorExited( ::C_HL2WarsPlayer * player ){
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        try {
            func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnHoverPaint(  ){
        bp::override func_OnHoverPaint = this->get_override( "OnHoverPaint" );
        try {
            func_OnHoverPaint(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

struct PyMouse_wrapper : PyMouse, bp::wrapper< PyMouse > {

    PyMouse_wrapper(PyMouse const & arg )
    : PyMouse( arg )
      , bp::wrapper< PyMouse >(){
        // copy constructor
        
    }

    PyMouse_wrapper()
    : PyMouse()
      , bp::wrapper< PyMouse >(){
        // null constructor
        
    }

    virtual long unsigned int GetCursor(  ) {
        PY_OVERRIDE_CHECK( PyMouse, GetCursor )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, GetCursor )
        bp::override func_GetCursor = this->get_override( "GetCursor" );
        if( func_GetCursor.ptr() != Py_None )
            try {
                return func_GetCursor(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->PyMouse::GetCursor(  );
            }
        else
            return this->PyMouse::GetCursor(  );
    }
    
    long unsigned int default_GetCursor(  ) {
        return PyMouse::GetCursor( );
    }

    virtual void OnClickLeftDoublePressed( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftDoublePressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftDoublePressed )
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        if( func_OnClickLeftDoublePressed.ptr() != Py_None )
            try {
                func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftDoublePressed( player );
            }
        else
            this->PyMouse::OnClickLeftDoublePressed( player );
    }
    
    void default_OnClickLeftDoublePressed( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickLeftDoublePressed( player );
    }

    virtual void OnClickLeftPressed( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftPressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftPressed )
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        if( func_OnClickLeftPressed.ptr() != Py_None )
            try {
                func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftPressed( player );
            }
        else
            this->PyMouse::OnClickLeftPressed( player );
    }
    
    void default_OnClickLeftPressed( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickLeftPressed( player );
    }

    virtual void OnClickLeftReleased( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftReleased )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftReleased )
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        if( func_OnClickLeftReleased.ptr() != Py_None )
            try {
                func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftReleased( player );
            }
        else
            this->PyMouse::OnClickLeftReleased( player );
    }
    
    void default_OnClickLeftReleased( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickLeftReleased( player );
    }

    virtual void OnClickRightDoublePressed( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightDoublePressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightDoublePressed )
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        if( func_OnClickRightDoublePressed.ptr() != Py_None )
            try {
                func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightDoublePressed( player );
            }
        else
            this->PyMouse::OnClickRightDoublePressed( player );
    }
    
    void default_OnClickRightDoublePressed( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickRightDoublePressed( player );
    }

    virtual void OnClickRightPressed( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightPressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightPressed )
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        if( func_OnClickRightPressed.ptr() != Py_None )
            try {
                func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightPressed( player );
            }
        else
            this->PyMouse::OnClickRightPressed( player );
    }
    
    void default_OnClickRightPressed( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickRightPressed( player );
    }

    virtual void OnClickRightReleased( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightReleased )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightReleased )
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        if( func_OnClickRightReleased.ptr() != Py_None )
            try {
                func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightReleased( player );
            }
        else
            this->PyMouse::OnClickRightReleased( player );
    }
    
    void default_OnClickRightReleased( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnClickRightReleased( player );
    }

    virtual void OnCursorEntered( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnCursorEntered )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnCursorEntered( player );
            }
        else
            this->PyMouse::OnCursorEntered( player );
    }
    
    void default_OnCursorEntered( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnCursorEntered( player );
    }

    virtual void OnCursorExited( ::C_HL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnCursorExited )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnCursorExited( player );
            }
        else
            this->PyMouse::OnCursorExited( player );
    }
    
    void default_OnCursorExited( ::C_HL2WarsPlayer * player ) {
        PyMouse::OnCursorExited( player );
    }

    virtual void OnHoverPaint(  ) {
        PY_OVERRIDE_CHECK( PyMouse, OnHoverPaint )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnHoverPaint )
        bp::override func_OnHoverPaint = this->get_override( "OnHoverPaint" );
        if( func_OnHoverPaint.ptr() != Py_None )
            try {
                func_OnHoverPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnHoverPaint(  );
            }
        else
            this->PyMouse::OnHoverPaint(  );
    }
    
    void default_OnHoverPaint(  ) {
        PyMouse::OnHoverPaint( );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( IMouse, GetIMouse )
        PY_OVERRIDE_LOG( _entitiesmisc, IMouse, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->IMouse::GetIMouse(  );
            }
        else
            return this->IMouse::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return IMouse::GetIMouse( );
    }

};

struct animevent_t_wrapper : animevent_t, bp::wrapper< animevent_t > {

    animevent_t_wrapper(animevent_t const & arg )
    : animevent_t( arg )
      , bp::wrapper< animevent_t >(){
        // copy constructor
        
    }

    animevent_t_wrapper()
    : animevent_t()
      , bp::wrapper< animevent_t >(){
        // null constructor
        
    }

    static ::C_BaseAnimating * get_pSource(animevent_t const & inst ){
        return inst.pSource;
    }
    
    static void set_pSource( animevent_t & inst, ::C_BaseAnimating * new_value ){ 
        inst.pSource = new_value;
    }

    static bp::object get_options(animevent_t const & inst){
        return bp::object(inst.options);
    }

};

struct breakablepropparams_t_wrapper : breakablepropparams_t, bp::wrapper< breakablepropparams_t > {

    breakablepropparams_t_wrapper(::Vector const & _origin, ::QAngle const & _angles, ::Vector const & _velocity, ::AngularImpulse const & _angularVelocity )
    : breakablepropparams_t( _origin, _angles, _velocity, _angularVelocity )
      , bp::wrapper< breakablepropparams_t >(){
        // constructor
    
    }

    static ::QAngle const & get_angles( breakablepropparams_t& inst ) {
        return inst.angles;
    }

    static ::AngularImpulse const & get_angularVelocity( breakablepropparams_t& inst ) {
        return inst.angularVelocity;
    }

    static ::Vector const & get_origin( breakablepropparams_t& inst ) {
        return inst.origin;
    }

    static ::Vector const & get_velocity( breakablepropparams_t& inst ) {
        return inst.velocity;
    }

};

struct solid_t_wrapper : solid_t, bp::wrapper< solid_t > {

    solid_t_wrapper(solid_t const & arg )
    : solid_t( arg )
      , bp::wrapper< solid_t >(){
        // copy constructor
        
    }

    solid_t_wrapper()
    : solid_t()
      , bp::wrapper< solid_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_name_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.name );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_parent_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.parent );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_surfaceprop_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.surfaceprop );
    }

};

BOOST_PYTHON_MODULE(_entitiesmisc){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< Activity>("Activity")
        .value("ACT_INVALID", ACT_INVALID)
        .value("ACT_RESET", ACT_RESET)
        .value("ACT_IDLE", ACT_IDLE)
        .value("ACT_TRANSITION", ACT_TRANSITION)
        .value("ACT_COVER", ACT_COVER)
        .value("ACT_COVER_MED", ACT_COVER_MED)
        .value("ACT_COVER_LOW", ACT_COVER_LOW)
        .value("ACT_WALK", ACT_WALK)
        .value("ACT_WALK_AIM", ACT_WALK_AIM)
        .value("ACT_WALK_CROUCH", ACT_WALK_CROUCH)
        .value("ACT_WALK_CROUCH_AIM", ACT_WALK_CROUCH_AIM)
        .value("ACT_RUN", ACT_RUN)
        .value("ACT_RUN_AIM", ACT_RUN_AIM)
        .value("ACT_RUN_CROUCH", ACT_RUN_CROUCH)
        .value("ACT_RUN_CROUCH_AIM", ACT_RUN_CROUCH_AIM)
        .value("ACT_RUN_PROTECTED", ACT_RUN_PROTECTED)
        .value("ACT_SCRIPT_CUSTOM_MOVE", ACT_SCRIPT_CUSTOM_MOVE)
        .value("ACT_RANGE_ATTACK1", ACT_RANGE_ATTACK1)
        .value("ACT_RANGE_ATTACK2", ACT_RANGE_ATTACK2)
        .value("ACT_RANGE_ATTACK1_LOW", ACT_RANGE_ATTACK1_LOW)
        .value("ACT_RANGE_ATTACK2_LOW", ACT_RANGE_ATTACK2_LOW)
        .value("ACT_DIESIMPLE", ACT_DIESIMPLE)
        .value("ACT_DIEBACKWARD", ACT_DIEBACKWARD)
        .value("ACT_DIEFORWARD", ACT_DIEFORWARD)
        .value("ACT_DIEVIOLENT", ACT_DIEVIOLENT)
        .value("ACT_DIERAGDOLL", ACT_DIERAGDOLL)
        .value("ACT_FLY", ACT_FLY)
        .value("ACT_HOVER", ACT_HOVER)
        .value("ACT_GLIDE", ACT_GLIDE)
        .value("ACT_SWIM", ACT_SWIM)
        .value("ACT_JUMP", ACT_JUMP)
        .value("ACT_HOP", ACT_HOP)
        .value("ACT_LEAP", ACT_LEAP)
        .value("ACT_LAND", ACT_LAND)
        .value("ACT_CLIMB_UP", ACT_CLIMB_UP)
        .value("ACT_CLIMB_DOWN", ACT_CLIMB_DOWN)
        .value("ACT_CLIMB_DISMOUNT", ACT_CLIMB_DISMOUNT)
        .value("ACT_SHIPLADDER_UP", ACT_SHIPLADDER_UP)
        .value("ACT_SHIPLADDER_DOWN", ACT_SHIPLADDER_DOWN)
        .value("ACT_STRAFE_LEFT", ACT_STRAFE_LEFT)
        .value("ACT_STRAFE_RIGHT", ACT_STRAFE_RIGHT)
        .value("ACT_ROLL_LEFT", ACT_ROLL_LEFT)
        .value("ACT_ROLL_RIGHT", ACT_ROLL_RIGHT)
        .value("ACT_TURN_LEFT", ACT_TURN_LEFT)
        .value("ACT_TURN_RIGHT", ACT_TURN_RIGHT)
        .value("ACT_CROUCH", ACT_CROUCH)
        .value("ACT_CROUCHIDLE", ACT_CROUCHIDLE)
        .value("ACT_STAND", ACT_STAND)
        .value("ACT_USE", ACT_USE)
        .value("ACT_ALIEN_BURROW_IDLE", ACT_ALIEN_BURROW_IDLE)
        .value("ACT_ALIEN_BURROW_OUT", ACT_ALIEN_BURROW_OUT)
        .value("ACT_SIGNAL1", ACT_SIGNAL1)
        .value("ACT_SIGNAL2", ACT_SIGNAL2)
        .value("ACT_SIGNAL3", ACT_SIGNAL3)
        .value("ACT_SIGNAL_ADVANCE", ACT_SIGNAL_ADVANCE)
        .value("ACT_SIGNAL_FORWARD", ACT_SIGNAL_FORWARD)
        .value("ACT_SIGNAL_GROUP", ACT_SIGNAL_GROUP)
        .value("ACT_SIGNAL_HALT", ACT_SIGNAL_HALT)
        .value("ACT_SIGNAL_LEFT", ACT_SIGNAL_LEFT)
        .value("ACT_SIGNAL_RIGHT", ACT_SIGNAL_RIGHT)
        .value("ACT_SIGNAL_TAKECOVER", ACT_SIGNAL_TAKECOVER)
        .value("ACT_LOOKBACK_RIGHT", ACT_LOOKBACK_RIGHT)
        .value("ACT_LOOKBACK_LEFT", ACT_LOOKBACK_LEFT)
        .value("ACT_COWER", ACT_COWER)
        .value("ACT_SMALL_FLINCH", ACT_SMALL_FLINCH)
        .value("ACT_BIG_FLINCH", ACT_BIG_FLINCH)
        .value("ACT_MELEE_ATTACK1", ACT_MELEE_ATTACK1)
        .value("ACT_MELEE_ATTACK2", ACT_MELEE_ATTACK2)
        .value("ACT_RELOAD", ACT_RELOAD)
        .value("ACT_RELOAD_START", ACT_RELOAD_START)
        .value("ACT_RELOAD_FINISH", ACT_RELOAD_FINISH)
        .value("ACT_RELOAD_LOW", ACT_RELOAD_LOW)
        .value("ACT_ARM", ACT_ARM)
        .value("ACT_DISARM", ACT_DISARM)
        .value("ACT_DROP_WEAPON", ACT_DROP_WEAPON)
        .value("ACT_DROP_WEAPON_SHOTGUN", ACT_DROP_WEAPON_SHOTGUN)
        .value("ACT_PICKUP_GROUND", ACT_PICKUP_GROUND)
        .value("ACT_PICKUP_RACK", ACT_PICKUP_RACK)
        .value("ACT_IDLE_ANGRY", ACT_IDLE_ANGRY)
        .value("ACT_IDLE_RELAXED", ACT_IDLE_RELAXED)
        .value("ACT_IDLE_STIMULATED", ACT_IDLE_STIMULATED)
        .value("ACT_IDLE_AGITATED", ACT_IDLE_AGITATED)
        .value("ACT_IDLE_STEALTH", ACT_IDLE_STEALTH)
        .value("ACT_IDLE_HURT", ACT_IDLE_HURT)
        .value("ACT_WALK_RELAXED", ACT_WALK_RELAXED)
        .value("ACT_WALK_STIMULATED", ACT_WALK_STIMULATED)
        .value("ACT_WALK_AGITATED", ACT_WALK_AGITATED)
        .value("ACT_WALK_STEALTH", ACT_WALK_STEALTH)
        .value("ACT_RUN_RELAXED", ACT_RUN_RELAXED)
        .value("ACT_RUN_STIMULATED", ACT_RUN_STIMULATED)
        .value("ACT_RUN_AGITATED", ACT_RUN_AGITATED)
        .value("ACT_RUN_STEALTH", ACT_RUN_STEALTH)
        .value("ACT_IDLE_AIM_RELAXED", ACT_IDLE_AIM_RELAXED)
        .value("ACT_IDLE_AIM_STIMULATED", ACT_IDLE_AIM_STIMULATED)
        .value("ACT_IDLE_AIM_AGITATED", ACT_IDLE_AIM_AGITATED)
        .value("ACT_IDLE_AIM_STEALTH", ACT_IDLE_AIM_STEALTH)
        .value("ACT_WALK_AIM_RELAXED", ACT_WALK_AIM_RELAXED)
        .value("ACT_WALK_AIM_STIMULATED", ACT_WALK_AIM_STIMULATED)
        .value("ACT_WALK_AIM_AGITATED", ACT_WALK_AIM_AGITATED)
        .value("ACT_WALK_AIM_STEALTH", ACT_WALK_AIM_STEALTH)
        .value("ACT_RUN_AIM_RELAXED", ACT_RUN_AIM_RELAXED)
        .value("ACT_RUN_AIM_STIMULATED", ACT_RUN_AIM_STIMULATED)
        .value("ACT_RUN_AIM_AGITATED", ACT_RUN_AIM_AGITATED)
        .value("ACT_RUN_AIM_STEALTH", ACT_RUN_AIM_STEALTH)
        .value("ACT_CROUCHIDLE_STIMULATED", ACT_CROUCHIDLE_STIMULATED)
        .value("ACT_CROUCHIDLE_AIM_STIMULATED", ACT_CROUCHIDLE_AIM_STIMULATED)
        .value("ACT_CROUCHIDLE_AGITATED", ACT_CROUCHIDLE_AGITATED)
        .value("ACT_WALK_HURT", ACT_WALK_HURT)
        .value("ACT_RUN_HURT", ACT_RUN_HURT)
        .value("ACT_SPECIAL_ATTACK1", ACT_SPECIAL_ATTACK1)
        .value("ACT_SPECIAL_ATTACK2", ACT_SPECIAL_ATTACK2)
        .value("ACT_COMBAT_IDLE", ACT_COMBAT_IDLE)
        .value("ACT_WALK_SCARED", ACT_WALK_SCARED)
        .value("ACT_RUN_SCARED", ACT_RUN_SCARED)
        .value("ACT_VICTORY_DANCE", ACT_VICTORY_DANCE)
        .value("ACT_DIE_HEADSHOT", ACT_DIE_HEADSHOT)
        .value("ACT_DIE_CHESTSHOT", ACT_DIE_CHESTSHOT)
        .value("ACT_DIE_GUTSHOT", ACT_DIE_GUTSHOT)
        .value("ACT_DIE_BACKSHOT", ACT_DIE_BACKSHOT)
        .value("ACT_FLINCH_HEAD", ACT_FLINCH_HEAD)
        .value("ACT_FLINCH_CHEST", ACT_FLINCH_CHEST)
        .value("ACT_FLINCH_STOMACH", ACT_FLINCH_STOMACH)
        .value("ACT_FLINCH_LEFTARM", ACT_FLINCH_LEFTARM)
        .value("ACT_FLINCH_RIGHTARM", ACT_FLINCH_RIGHTARM)
        .value("ACT_FLINCH_LEFTLEG", ACT_FLINCH_LEFTLEG)
        .value("ACT_FLINCH_RIGHTLEG", ACT_FLINCH_RIGHTLEG)
        .value("ACT_FLINCH_PHYSICS", ACT_FLINCH_PHYSICS)
        .value("ACT_FLINCH_HEAD_BACK", ACT_FLINCH_HEAD_BACK)
        .value("ACT_FLINCH_CHEST_BACK", ACT_FLINCH_CHEST_BACK)
        .value("ACT_FLINCH_STOMACH_BACK", ACT_FLINCH_STOMACH_BACK)
        .value("ACT_FLINCH_CROUCH_FRONT", ACT_FLINCH_CROUCH_FRONT)
        .value("ACT_FLINCH_CROUCH_BACK", ACT_FLINCH_CROUCH_BACK)
        .value("ACT_FLINCH_CROUCH_LEFT", ACT_FLINCH_CROUCH_LEFT)
        .value("ACT_FLINCH_CROUCH_RIGHT", ACT_FLINCH_CROUCH_RIGHT)
        .value("ACT_IDLE_ON_FIRE", ACT_IDLE_ON_FIRE)
        .value("ACT_WALK_ON_FIRE", ACT_WALK_ON_FIRE)
        .value("ACT_RUN_ON_FIRE", ACT_RUN_ON_FIRE)
        .value("ACT_RAPPEL_LOOP", ACT_RAPPEL_LOOP)
        .value("ACT_180_LEFT", ACT_180_LEFT)
        .value("ACT_180_RIGHT", ACT_180_RIGHT)
        .value("ACT_90_LEFT", ACT_90_LEFT)
        .value("ACT_90_RIGHT", ACT_90_RIGHT)
        .value("ACT_STEP_LEFT", ACT_STEP_LEFT)
        .value("ACT_STEP_RIGHT", ACT_STEP_RIGHT)
        .value("ACT_STEP_BACK", ACT_STEP_BACK)
        .value("ACT_STEP_FORE", ACT_STEP_FORE)
        .value("ACT_GESTURE_RANGE_ATTACK1", ACT_GESTURE_RANGE_ATTACK1)
        .value("ACT_GESTURE_RANGE_ATTACK2", ACT_GESTURE_RANGE_ATTACK2)
        .value("ACT_GESTURE_MELEE_ATTACK1", ACT_GESTURE_MELEE_ATTACK1)
        .value("ACT_GESTURE_MELEE_ATTACK2", ACT_GESTURE_MELEE_ATTACK2)
        .value("ACT_GESTURE_RANGE_ATTACK1_LOW", ACT_GESTURE_RANGE_ATTACK1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK2_LOW", ACT_GESTURE_RANGE_ATTACK2_LOW)
        .value("ACT_MELEE_ATTACK_SWING_GESTURE", ACT_MELEE_ATTACK_SWING_GESTURE)
        .value("ACT_GESTURE_SMALL_FLINCH", ACT_GESTURE_SMALL_FLINCH)
        .value("ACT_GESTURE_BIG_FLINCH", ACT_GESTURE_BIG_FLINCH)
        .value("ACT_GESTURE_FLINCH_BLAST", ACT_GESTURE_FLINCH_BLAST)
        .value("ACT_GESTURE_FLINCH_BLAST_SHOTGUN", ACT_GESTURE_FLINCH_BLAST_SHOTGUN)
        .value("ACT_GESTURE_FLINCH_BLAST_DAMAGED", ACT_GESTURE_FLINCH_BLAST_DAMAGED)
        .value("ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN", ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN)
        .value("ACT_GESTURE_FLINCH_HEAD", ACT_GESTURE_FLINCH_HEAD)
        .value("ACT_GESTURE_FLINCH_CHEST", ACT_GESTURE_FLINCH_CHEST)
        .value("ACT_GESTURE_FLINCH_STOMACH", ACT_GESTURE_FLINCH_STOMACH)
        .value("ACT_GESTURE_FLINCH_LEFTARM", ACT_GESTURE_FLINCH_LEFTARM)
        .value("ACT_GESTURE_FLINCH_RIGHTARM", ACT_GESTURE_FLINCH_RIGHTARM)
        .value("ACT_GESTURE_FLINCH_LEFTLEG", ACT_GESTURE_FLINCH_LEFTLEG)
        .value("ACT_GESTURE_FLINCH_RIGHTLEG", ACT_GESTURE_FLINCH_RIGHTLEG)
        .value("ACT_GESTURE_TURN_LEFT", ACT_GESTURE_TURN_LEFT)
        .value("ACT_GESTURE_TURN_RIGHT", ACT_GESTURE_TURN_RIGHT)
        .value("ACT_GESTURE_TURN_LEFT45", ACT_GESTURE_TURN_LEFT45)
        .value("ACT_GESTURE_TURN_RIGHT45", ACT_GESTURE_TURN_RIGHT45)
        .value("ACT_GESTURE_TURN_LEFT90", ACT_GESTURE_TURN_LEFT90)
        .value("ACT_GESTURE_TURN_RIGHT90", ACT_GESTURE_TURN_RIGHT90)
        .value("ACT_GESTURE_TURN_LEFT45_FLAT", ACT_GESTURE_TURN_LEFT45_FLAT)
        .value("ACT_GESTURE_TURN_RIGHT45_FLAT", ACT_GESTURE_TURN_RIGHT45_FLAT)
        .value("ACT_GESTURE_TURN_LEFT90_FLAT", ACT_GESTURE_TURN_LEFT90_FLAT)
        .value("ACT_GESTURE_TURN_RIGHT90_FLAT", ACT_GESTURE_TURN_RIGHT90_FLAT)
        .value("ACT_BARNACLE_HIT", ACT_BARNACLE_HIT)
        .value("ACT_BARNACLE_PULL", ACT_BARNACLE_PULL)
        .value("ACT_BARNACLE_CHOMP", ACT_BARNACLE_CHOMP)
        .value("ACT_BARNACLE_CHEW", ACT_BARNACLE_CHEW)
        .value("ACT_DO_NOT_DISTURB", ACT_DO_NOT_DISTURB)
        .value("ACT_SPECIFIC_SEQUENCE", ACT_SPECIFIC_SEQUENCE)
        .value("ACT_VM_DRAW", ACT_VM_DRAW)
        .value("ACT_VM_HOLSTER", ACT_VM_HOLSTER)
        .value("ACT_VM_IDLE", ACT_VM_IDLE)
        .value("ACT_VM_FIDGET", ACT_VM_FIDGET)
        .value("ACT_VM_PULLBACK", ACT_VM_PULLBACK)
        .value("ACT_VM_PULLBACK_HIGH", ACT_VM_PULLBACK_HIGH)
        .value("ACT_VM_PULLBACK_LOW", ACT_VM_PULLBACK_LOW)
        .value("ACT_VM_THROW", ACT_VM_THROW)
        .value("ACT_VM_PULLPIN", ACT_VM_PULLPIN)
        .value("ACT_VM_PRIMARYATTACK", ACT_VM_PRIMARYATTACK)
        .value("ACT_VM_SECONDARYATTACK", ACT_VM_SECONDARYATTACK)
        .value("ACT_VM_RELOAD", ACT_VM_RELOAD)
        .value("ACT_VM_DRYFIRE", ACT_VM_DRYFIRE)
        .value("ACT_VM_HITLEFT", ACT_VM_HITLEFT)
        .value("ACT_VM_HITLEFT2", ACT_VM_HITLEFT2)
        .value("ACT_VM_HITRIGHT", ACT_VM_HITRIGHT)
        .value("ACT_VM_HITRIGHT2", ACT_VM_HITRIGHT2)
        .value("ACT_VM_HITCENTER", ACT_VM_HITCENTER)
        .value("ACT_VM_HITCENTER2", ACT_VM_HITCENTER2)
        .value("ACT_VM_MISSLEFT", ACT_VM_MISSLEFT)
        .value("ACT_VM_MISSLEFT2", ACT_VM_MISSLEFT2)
        .value("ACT_VM_MISSRIGHT", ACT_VM_MISSRIGHT)
        .value("ACT_VM_MISSRIGHT2", ACT_VM_MISSRIGHT2)
        .value("ACT_VM_MISSCENTER", ACT_VM_MISSCENTER)
        .value("ACT_VM_MISSCENTER2", ACT_VM_MISSCENTER2)
        .value("ACT_VM_HAULBACK", ACT_VM_HAULBACK)
        .value("ACT_VM_SWINGHARD", ACT_VM_SWINGHARD)
        .value("ACT_VM_SWINGMISS", ACT_VM_SWINGMISS)
        .value("ACT_VM_SWINGHIT", ACT_VM_SWINGHIT)
        .value("ACT_VM_IDLE_TO_LOWERED", ACT_VM_IDLE_TO_LOWERED)
        .value("ACT_VM_IDLE_LOWERED", ACT_VM_IDLE_LOWERED)
        .value("ACT_VM_LOWERED_TO_IDLE", ACT_VM_LOWERED_TO_IDLE)
        .value("ACT_VM_RECOIL1", ACT_VM_RECOIL1)
        .value("ACT_VM_RECOIL2", ACT_VM_RECOIL2)
        .value("ACT_VM_RECOIL3", ACT_VM_RECOIL3)
        .value("ACT_VM_PICKUP", ACT_VM_PICKUP)
        .value("ACT_VM_RELEASE", ACT_VM_RELEASE)
        .value("ACT_VM_ATTACH_SILENCER", ACT_VM_ATTACH_SILENCER)
        .value("ACT_VM_DETACH_SILENCER", ACT_VM_DETACH_SILENCER)
        .value("ACT_SLAM_STICKWALL_IDLE", ACT_SLAM_STICKWALL_IDLE)
        .value("ACT_SLAM_STICKWALL_ND_IDLE", ACT_SLAM_STICKWALL_ND_IDLE)
        .value("ACT_SLAM_STICKWALL_ATTACH", ACT_SLAM_STICKWALL_ATTACH)
        .value("ACT_SLAM_STICKWALL_ATTACH2", ACT_SLAM_STICKWALL_ATTACH2)
        .value("ACT_SLAM_STICKWALL_ND_ATTACH", ACT_SLAM_STICKWALL_ND_ATTACH)
        .value("ACT_SLAM_STICKWALL_ND_ATTACH2", ACT_SLAM_STICKWALL_ND_ATTACH2)
        .value("ACT_SLAM_STICKWALL_DETONATE", ACT_SLAM_STICKWALL_DETONATE)
        .value("ACT_SLAM_STICKWALL_DETONATOR_HOLSTER", ACT_SLAM_STICKWALL_DETONATOR_HOLSTER)
        .value("ACT_SLAM_STICKWALL_DRAW", ACT_SLAM_STICKWALL_DRAW)
        .value("ACT_SLAM_STICKWALL_ND_DRAW", ACT_SLAM_STICKWALL_ND_DRAW)
        .value("ACT_SLAM_STICKWALL_TO_THROW", ACT_SLAM_STICKWALL_TO_THROW)
        .value("ACT_SLAM_STICKWALL_TO_THROW_ND", ACT_SLAM_STICKWALL_TO_THROW_ND)
        .value("ACT_SLAM_STICKWALL_TO_TRIPMINE_ND", ACT_SLAM_STICKWALL_TO_TRIPMINE_ND)
        .value("ACT_SLAM_THROW_IDLE", ACT_SLAM_THROW_IDLE)
        .value("ACT_SLAM_THROW_ND_IDLE", ACT_SLAM_THROW_ND_IDLE)
        .value("ACT_SLAM_THROW_THROW", ACT_SLAM_THROW_THROW)
        .value("ACT_SLAM_THROW_THROW2", ACT_SLAM_THROW_THROW2)
        .value("ACT_SLAM_THROW_THROW_ND", ACT_SLAM_THROW_THROW_ND)
        .value("ACT_SLAM_THROW_THROW_ND2", ACT_SLAM_THROW_THROW_ND2)
        .value("ACT_SLAM_THROW_DRAW", ACT_SLAM_THROW_DRAW)
        .value("ACT_SLAM_THROW_ND_DRAW", ACT_SLAM_THROW_ND_DRAW)
        .value("ACT_SLAM_THROW_TO_STICKWALL", ACT_SLAM_THROW_TO_STICKWALL)
        .value("ACT_SLAM_THROW_TO_STICKWALL_ND", ACT_SLAM_THROW_TO_STICKWALL_ND)
        .value("ACT_SLAM_THROW_DETONATE", ACT_SLAM_THROW_DETONATE)
        .value("ACT_SLAM_THROW_DETONATOR_HOLSTER", ACT_SLAM_THROW_DETONATOR_HOLSTER)
        .value("ACT_SLAM_THROW_TO_TRIPMINE_ND", ACT_SLAM_THROW_TO_TRIPMINE_ND)
        .value("ACT_SLAM_TRIPMINE_IDLE", ACT_SLAM_TRIPMINE_IDLE)
        .value("ACT_SLAM_TRIPMINE_DRAW", ACT_SLAM_TRIPMINE_DRAW)
        .value("ACT_SLAM_TRIPMINE_ATTACH", ACT_SLAM_TRIPMINE_ATTACH)
        .value("ACT_SLAM_TRIPMINE_ATTACH2", ACT_SLAM_TRIPMINE_ATTACH2)
        .value("ACT_SLAM_TRIPMINE_TO_STICKWALL_ND", ACT_SLAM_TRIPMINE_TO_STICKWALL_ND)
        .value("ACT_SLAM_TRIPMINE_TO_THROW_ND", ACT_SLAM_TRIPMINE_TO_THROW_ND)
        .value("ACT_SLAM_DETONATOR_IDLE", ACT_SLAM_DETONATOR_IDLE)
        .value("ACT_SLAM_DETONATOR_DRAW", ACT_SLAM_DETONATOR_DRAW)
        .value("ACT_SLAM_DETONATOR_DETONATE", ACT_SLAM_DETONATOR_DETONATE)
        .value("ACT_SLAM_DETONATOR_HOLSTER", ACT_SLAM_DETONATOR_HOLSTER)
        .value("ACT_SLAM_DETONATOR_STICKWALL_DRAW", ACT_SLAM_DETONATOR_STICKWALL_DRAW)
        .value("ACT_SLAM_DETONATOR_THROW_DRAW", ACT_SLAM_DETONATOR_THROW_DRAW)
        .value("ACT_SHOTGUN_RELOAD_START", ACT_SHOTGUN_RELOAD_START)
        .value("ACT_SHOTGUN_RELOAD_FINISH", ACT_SHOTGUN_RELOAD_FINISH)
        .value("ACT_SHOTGUN_PUMP", ACT_SHOTGUN_PUMP)
        .value("ACT_SMG2_IDLE2", ACT_SMG2_IDLE2)
        .value("ACT_SMG2_FIRE2", ACT_SMG2_FIRE2)
        .value("ACT_SMG2_DRAW2", ACT_SMG2_DRAW2)
        .value("ACT_SMG2_RELOAD2", ACT_SMG2_RELOAD2)
        .value("ACT_SMG2_DRYFIRE2", ACT_SMG2_DRYFIRE2)
        .value("ACT_SMG2_TOAUTO", ACT_SMG2_TOAUTO)
        .value("ACT_SMG2_TOBURST", ACT_SMG2_TOBURST)
        .value("ACT_PHYSCANNON_UPGRADE", ACT_PHYSCANNON_UPGRADE)
        .value("ACT_RANGE_ATTACK_AR1", ACT_RANGE_ATTACK_AR1)
        .value("ACT_RANGE_ATTACK_AR2", ACT_RANGE_ATTACK_AR2)
        .value("ACT_RANGE_ATTACK_AR2_LOW", ACT_RANGE_ATTACK_AR2_LOW)
        .value("ACT_RANGE_ATTACK_AR2_GRENADE", ACT_RANGE_ATTACK_AR2_GRENADE)
        .value("ACT_RANGE_ATTACK_HMG1", ACT_RANGE_ATTACK_HMG1)
        .value("ACT_RANGE_ATTACK_ML", ACT_RANGE_ATTACK_ML)
        .value("ACT_RANGE_ATTACK_SMG1", ACT_RANGE_ATTACK_SMG1)
        .value("ACT_RANGE_ATTACK_SMG1_LOW", ACT_RANGE_ATTACK_SMG1_LOW)
        .value("ACT_RANGE_ATTACK_SMG2", ACT_RANGE_ATTACK_SMG2)
        .value("ACT_RANGE_ATTACK_SHOTGUN", ACT_RANGE_ATTACK_SHOTGUN)
        .value("ACT_RANGE_ATTACK_SHOTGUN_LOW", ACT_RANGE_ATTACK_SHOTGUN_LOW)
        .value("ACT_RANGE_ATTACK_PISTOL", ACT_RANGE_ATTACK_PISTOL)
        .value("ACT_RANGE_ATTACK_PISTOL_LOW", ACT_RANGE_ATTACK_PISTOL_LOW)
        .value("ACT_RANGE_ATTACK_SLAM", ACT_RANGE_ATTACK_SLAM)
        .value("ACT_RANGE_ATTACK_TRIPWIRE", ACT_RANGE_ATTACK_TRIPWIRE)
        .value("ACT_RANGE_ATTACK_THROW", ACT_RANGE_ATTACK_THROW)
        .value("ACT_RANGE_ATTACK_SNIPER_RIFLE", ACT_RANGE_ATTACK_SNIPER_RIFLE)
        .value("ACT_RANGE_ATTACK_RPG", ACT_RANGE_ATTACK_RPG)
        .value("ACT_MELEE_ATTACK_SWING", ACT_MELEE_ATTACK_SWING)
        .value("ACT_RANGE_AIM_LOW", ACT_RANGE_AIM_LOW)
        .value("ACT_RANGE_AIM_SMG1_LOW", ACT_RANGE_AIM_SMG1_LOW)
        .value("ACT_RANGE_AIM_PISTOL_LOW", ACT_RANGE_AIM_PISTOL_LOW)
        .value("ACT_RANGE_AIM_AR2_LOW", ACT_RANGE_AIM_AR2_LOW)
        .value("ACT_COVER_PISTOL_LOW", ACT_COVER_PISTOL_LOW)
        .value("ACT_COVER_SMG1_LOW", ACT_COVER_SMG1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_AR1", ACT_GESTURE_RANGE_ATTACK_AR1)
        .value("ACT_GESTURE_RANGE_ATTACK_AR2", ACT_GESTURE_RANGE_ATTACK_AR2)
        .value("ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE", ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE)
        .value("ACT_GESTURE_RANGE_ATTACK_HMG1", ACT_GESTURE_RANGE_ATTACK_HMG1)
        .value("ACT_GESTURE_RANGE_ATTACK_ML", ACT_GESTURE_RANGE_ATTACK_ML)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG1", ACT_GESTURE_RANGE_ATTACK_SMG1)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG1_LOW", ACT_GESTURE_RANGE_ATTACK_SMG1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG2", ACT_GESTURE_RANGE_ATTACK_SMG2)
        .value("ACT_GESTURE_RANGE_ATTACK_SHOTGUN", ACT_GESTURE_RANGE_ATTACK_SHOTGUN)
        .value("ACT_GESTURE_RANGE_ATTACK_PISTOL", ACT_GESTURE_RANGE_ATTACK_PISTOL)
        .value("ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW", ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_SLAM", ACT_GESTURE_RANGE_ATTACK_SLAM)
        .value("ACT_GESTURE_RANGE_ATTACK_TRIPWIRE", ACT_GESTURE_RANGE_ATTACK_TRIPWIRE)
        .value("ACT_GESTURE_RANGE_ATTACK_THROW", ACT_GESTURE_RANGE_ATTACK_THROW)
        .value("ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE", ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE)
        .value("ACT_GESTURE_MELEE_ATTACK_SWING", ACT_GESTURE_MELEE_ATTACK_SWING)
        .value("ACT_IDLE_RIFLE", ACT_IDLE_RIFLE)
        .value("ACT_IDLE_SMG1", ACT_IDLE_SMG1)
        .value("ACT_IDLE_ANGRY_SMG1", ACT_IDLE_ANGRY_SMG1)
        .value("ACT_IDLE_PISTOL", ACT_IDLE_PISTOL)
        .value("ACT_IDLE_ANGRY_PISTOL", ACT_IDLE_ANGRY_PISTOL)
        .value("ACT_IDLE_ANGRY_SHOTGUN", ACT_IDLE_ANGRY_SHOTGUN)
        .value("ACT_IDLE_STEALTH_PISTOL", ACT_IDLE_STEALTH_PISTOL)
        .value("ACT_IDLE_PACKAGE", ACT_IDLE_PACKAGE)
        .value("ACT_WALK_PACKAGE", ACT_WALK_PACKAGE)
        .value("ACT_IDLE_SUITCASE", ACT_IDLE_SUITCASE)
        .value("ACT_WALK_SUITCASE", ACT_WALK_SUITCASE)
        .value("ACT_IDLE_SMG1_RELAXED", ACT_IDLE_SMG1_RELAXED)
        .value("ACT_IDLE_SMG1_STIMULATED", ACT_IDLE_SMG1_STIMULATED)
        .value("ACT_WALK_RIFLE_RELAXED", ACT_WALK_RIFLE_RELAXED)
        .value("ACT_RUN_RIFLE_RELAXED", ACT_RUN_RIFLE_RELAXED)
        .value("ACT_WALK_RIFLE_STIMULATED", ACT_WALK_RIFLE_STIMULATED)
        .value("ACT_RUN_RIFLE_STIMULATED", ACT_RUN_RIFLE_STIMULATED)
        .value("ACT_IDLE_AIM_RIFLE_STIMULATED", ACT_IDLE_AIM_RIFLE_STIMULATED)
        .value("ACT_WALK_AIM_RIFLE_STIMULATED", ACT_WALK_AIM_RIFLE_STIMULATED)
        .value("ACT_RUN_AIM_RIFLE_STIMULATED", ACT_RUN_AIM_RIFLE_STIMULATED)
        .value("ACT_IDLE_SHOTGUN_RELAXED", ACT_IDLE_SHOTGUN_RELAXED)
        .value("ACT_IDLE_SHOTGUN_STIMULATED", ACT_IDLE_SHOTGUN_STIMULATED)
        .value("ACT_IDLE_SHOTGUN_AGITATED", ACT_IDLE_SHOTGUN_AGITATED)
        .value("ACT_WALK_ANGRY", ACT_WALK_ANGRY)
        .value("ACT_POLICE_HARASS1", ACT_POLICE_HARASS1)
        .value("ACT_POLICE_HARASS2", ACT_POLICE_HARASS2)
        .value("ACT_IDLE_MANNEDGUN", ACT_IDLE_MANNEDGUN)
        .value("ACT_IDLE_MELEE", ACT_IDLE_MELEE)
        .value("ACT_IDLE_ANGRY_MELEE", ACT_IDLE_ANGRY_MELEE)
        .value("ACT_IDLE_RPG_RELAXED", ACT_IDLE_RPG_RELAXED)
        .value("ACT_IDLE_RPG", ACT_IDLE_RPG)
        .value("ACT_IDLE_ANGRY_RPG", ACT_IDLE_ANGRY_RPG)
        .value("ACT_COVER_LOW_RPG", ACT_COVER_LOW_RPG)
        .value("ACT_WALK_RPG", ACT_WALK_RPG)
        .value("ACT_RUN_RPG", ACT_RUN_RPG)
        .value("ACT_WALK_CROUCH_RPG", ACT_WALK_CROUCH_RPG)
        .value("ACT_RUN_CROUCH_RPG", ACT_RUN_CROUCH_RPG)
        .value("ACT_WALK_RPG_RELAXED", ACT_WALK_RPG_RELAXED)
        .value("ACT_RUN_RPG_RELAXED", ACT_RUN_RPG_RELAXED)
        .value("ACT_WALK_RIFLE", ACT_WALK_RIFLE)
        .value("ACT_WALK_AIM_RIFLE", ACT_WALK_AIM_RIFLE)
        .value("ACT_WALK_CROUCH_RIFLE", ACT_WALK_CROUCH_RIFLE)
        .value("ACT_WALK_CROUCH_AIM_RIFLE", ACT_WALK_CROUCH_AIM_RIFLE)
        .value("ACT_RUN_RIFLE", ACT_RUN_RIFLE)
        .value("ACT_RUN_AIM_RIFLE", ACT_RUN_AIM_RIFLE)
        .value("ACT_RUN_CROUCH_RIFLE", ACT_RUN_CROUCH_RIFLE)
        .value("ACT_RUN_CROUCH_AIM_RIFLE", ACT_RUN_CROUCH_AIM_RIFLE)
        .value("ACT_RUN_STEALTH_PISTOL", ACT_RUN_STEALTH_PISTOL)
        .value("ACT_WALK_AIM_SHOTGUN", ACT_WALK_AIM_SHOTGUN)
        .value("ACT_RUN_AIM_SHOTGUN", ACT_RUN_AIM_SHOTGUN)
        .value("ACT_WALK_PISTOL", ACT_WALK_PISTOL)
        .value("ACT_RUN_PISTOL", ACT_RUN_PISTOL)
        .value("ACT_WALK_AIM_PISTOL", ACT_WALK_AIM_PISTOL)
        .value("ACT_RUN_AIM_PISTOL", ACT_RUN_AIM_PISTOL)
        .value("ACT_WALK_STEALTH_PISTOL", ACT_WALK_STEALTH_PISTOL)
        .value("ACT_WALK_AIM_STEALTH_PISTOL", ACT_WALK_AIM_STEALTH_PISTOL)
        .value("ACT_RUN_AIM_STEALTH_PISTOL", ACT_RUN_AIM_STEALTH_PISTOL)
        .value("ACT_RELOAD_PISTOL", ACT_RELOAD_PISTOL)
        .value("ACT_RELOAD_PISTOL_LOW", ACT_RELOAD_PISTOL_LOW)
        .value("ACT_RELOAD_SMG1", ACT_RELOAD_SMG1)
        .value("ACT_RELOAD_SMG1_LOW", ACT_RELOAD_SMG1_LOW)
        .value("ACT_RELOAD_SHOTGUN", ACT_RELOAD_SHOTGUN)
        .value("ACT_RELOAD_SHOTGUN_LOW", ACT_RELOAD_SHOTGUN_LOW)
        .value("ACT_GESTURE_RELOAD", ACT_GESTURE_RELOAD)
        .value("ACT_GESTURE_RELOAD_PISTOL", ACT_GESTURE_RELOAD_PISTOL)
        .value("ACT_GESTURE_RELOAD_SMG1", ACT_GESTURE_RELOAD_SMG1)
        .value("ACT_GESTURE_RELOAD_SHOTGUN", ACT_GESTURE_RELOAD_SHOTGUN)
        .value("ACT_BUSY_LEAN_LEFT", ACT_BUSY_LEAN_LEFT)
        .value("ACT_BUSY_LEAN_LEFT_ENTRY", ACT_BUSY_LEAN_LEFT_ENTRY)
        .value("ACT_BUSY_LEAN_LEFT_EXIT", ACT_BUSY_LEAN_LEFT_EXIT)
        .value("ACT_BUSY_LEAN_BACK", ACT_BUSY_LEAN_BACK)
        .value("ACT_BUSY_LEAN_BACK_ENTRY", ACT_BUSY_LEAN_BACK_ENTRY)
        .value("ACT_BUSY_LEAN_BACK_EXIT", ACT_BUSY_LEAN_BACK_EXIT)
        .value("ACT_BUSY_SIT_GROUND", ACT_BUSY_SIT_GROUND)
        .value("ACT_BUSY_SIT_GROUND_ENTRY", ACT_BUSY_SIT_GROUND_ENTRY)
        .value("ACT_BUSY_SIT_GROUND_EXIT", ACT_BUSY_SIT_GROUND_EXIT)
        .value("ACT_BUSY_SIT_CHAIR", ACT_BUSY_SIT_CHAIR)
        .value("ACT_BUSY_SIT_CHAIR_ENTRY", ACT_BUSY_SIT_CHAIR_ENTRY)
        .value("ACT_BUSY_SIT_CHAIR_EXIT", ACT_BUSY_SIT_CHAIR_EXIT)
        .value("ACT_BUSY_STAND", ACT_BUSY_STAND)
        .value("ACT_BUSY_QUEUE", ACT_BUSY_QUEUE)
        .value("ACT_DUCK_DODGE", ACT_DUCK_DODGE)
        .value("ACT_DIE_BARNACLE_SWALLOW", ACT_DIE_BARNACLE_SWALLOW)
        .value("ACT_GESTURE_BARNACLE_STRANGLE", ACT_GESTURE_BARNACLE_STRANGLE)
        .value("ACT_PHYSCANNON_DETACH", ACT_PHYSCANNON_DETACH)
        .value("ACT_PHYSCANNON_ANIMATE", ACT_PHYSCANNON_ANIMATE)
        .value("ACT_PHYSCANNON_ANIMATE_PRE", ACT_PHYSCANNON_ANIMATE_PRE)
        .value("ACT_PHYSCANNON_ANIMATE_POST", ACT_PHYSCANNON_ANIMATE_POST)
        .value("ACT_DIE_FRONTSIDE", ACT_DIE_FRONTSIDE)
        .value("ACT_DIE_RIGHTSIDE", ACT_DIE_RIGHTSIDE)
        .value("ACT_DIE_BACKSIDE", ACT_DIE_BACKSIDE)
        .value("ACT_DIE_LEFTSIDE", ACT_DIE_LEFTSIDE)
        .value("ACT_OPEN_DOOR", ACT_OPEN_DOOR)
        .value("ACT_DI_ALYX_ZOMBIE_MELEE", ACT_DI_ALYX_ZOMBIE_MELEE)
        .value("ACT_DI_ALYX_ZOMBIE_TORSO_MELEE", ACT_DI_ALYX_ZOMBIE_TORSO_MELEE)
        .value("ACT_DI_ALYX_HEADCRAB_MELEE", ACT_DI_ALYX_HEADCRAB_MELEE)
        .value("ACT_DI_ALYX_ANTLION", ACT_DI_ALYX_ANTLION)
        .value("ACT_DI_ALYX_ZOMBIE_SHOTGUN64", ACT_DI_ALYX_ZOMBIE_SHOTGUN64)
        .value("ACT_DI_ALYX_ZOMBIE_SHOTGUN26", ACT_DI_ALYX_ZOMBIE_SHOTGUN26)
        .value("ACT_READINESS_RELAXED_TO_STIMULATED", ACT_READINESS_RELAXED_TO_STIMULATED)
        .value("ACT_READINESS_RELAXED_TO_STIMULATED_WALK", ACT_READINESS_RELAXED_TO_STIMULATED_WALK)
        .value("ACT_READINESS_AGITATED_TO_STIMULATED", ACT_READINESS_AGITATED_TO_STIMULATED)
        .value("ACT_READINESS_STIMULATED_TO_RELAXED", ACT_READINESS_STIMULATED_TO_RELAXED)
        .value("ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED", ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED)
        .value("ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK", ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK)
        .value("ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED", ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED)
        .value("ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED", ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED)
        .value("ACT_IDLE_CARRY", ACT_IDLE_CARRY)
        .value("ACT_WALK_CARRY", ACT_WALK_CARRY)
        .value("ACT_STARTDYING", ACT_STARTDYING)
        .value("ACT_DYINGLOOP", ACT_DYINGLOOP)
        .value("ACT_DYINGTODEAD", ACT_DYINGTODEAD)
        .value("ACT_RIDE_MANNED_GUN", ACT_RIDE_MANNED_GUN)
        .value("ACT_VM_SPRINT_ENTER", ACT_VM_SPRINT_ENTER)
        .value("ACT_VM_SPRINT_IDLE", ACT_VM_SPRINT_IDLE)
        .value("ACT_VM_SPRINT_LEAVE", ACT_VM_SPRINT_LEAVE)
        .value("ACT_FIRE_START", ACT_FIRE_START)
        .value("ACT_FIRE_LOOP", ACT_FIRE_LOOP)
        .value("ACT_FIRE_END", ACT_FIRE_END)
        .value("ACT_CROUCHING_GRENADEIDLE", ACT_CROUCHING_GRENADEIDLE)
        .value("ACT_CROUCHING_GRENADEREADY", ACT_CROUCHING_GRENADEREADY)
        .value("ACT_CROUCHING_PRIMARYATTACK", ACT_CROUCHING_PRIMARYATTACK)
        .value("ACT_OVERLAY_GRENADEIDLE", ACT_OVERLAY_GRENADEIDLE)
        .value("ACT_OVERLAY_GRENADEREADY", ACT_OVERLAY_GRENADEREADY)
        .value("ACT_OVERLAY_PRIMARYATTACK", ACT_OVERLAY_PRIMARYATTACK)
        .value("ACT_OVERLAY_SHIELD_UP", ACT_OVERLAY_SHIELD_UP)
        .value("ACT_OVERLAY_SHIELD_DOWN", ACT_OVERLAY_SHIELD_DOWN)
        .value("ACT_OVERLAY_SHIELD_UP_IDLE", ACT_OVERLAY_SHIELD_UP_IDLE)
        .value("ACT_OVERLAY_SHIELD_ATTACK", ACT_OVERLAY_SHIELD_ATTACK)
        .value("ACT_OVERLAY_SHIELD_KNOCKBACK", ACT_OVERLAY_SHIELD_KNOCKBACK)
        .value("ACT_SHIELD_UP", ACT_SHIELD_UP)
        .value("ACT_SHIELD_DOWN", ACT_SHIELD_DOWN)
        .value("ACT_SHIELD_UP_IDLE", ACT_SHIELD_UP_IDLE)
        .value("ACT_SHIELD_ATTACK", ACT_SHIELD_ATTACK)
        .value("ACT_SHIELD_KNOCKBACK", ACT_SHIELD_KNOCKBACK)
        .value("ACT_CROUCHING_SHIELD_UP", ACT_CROUCHING_SHIELD_UP)
        .value("ACT_CROUCHING_SHIELD_DOWN", ACT_CROUCHING_SHIELD_DOWN)
        .value("ACT_CROUCHING_SHIELD_UP_IDLE", ACT_CROUCHING_SHIELD_UP_IDLE)
        .value("ACT_CROUCHING_SHIELD_ATTACK", ACT_CROUCHING_SHIELD_ATTACK)
        .value("ACT_CROUCHING_SHIELD_KNOCKBACK", ACT_CROUCHING_SHIELD_KNOCKBACK)
        .value("ACT_TURNRIGHT45", ACT_TURNRIGHT45)
        .value("ACT_TURNLEFT45", ACT_TURNLEFT45)
        .value("ACT_TURN", ACT_TURN)
        .value("ACT_OBJ_ASSEMBLING", ACT_OBJ_ASSEMBLING)
        .value("ACT_OBJ_DISMANTLING", ACT_OBJ_DISMANTLING)
        .value("ACT_OBJ_STARTUP", ACT_OBJ_STARTUP)
        .value("ACT_OBJ_RUNNING", ACT_OBJ_RUNNING)
        .value("ACT_OBJ_IDLE", ACT_OBJ_IDLE)
        .value("ACT_OBJ_PLACING", ACT_OBJ_PLACING)
        .value("ACT_OBJ_DETERIORATING", ACT_OBJ_DETERIORATING)
        .value("ACT_OBJ_UPGRADING", ACT_OBJ_UPGRADING)
        .value("ACT_DEPLOY", ACT_DEPLOY)
        .value("ACT_DEPLOY_IDLE", ACT_DEPLOY_IDLE)
        .value("ACT_UNDEPLOY", ACT_UNDEPLOY)
        .value("ACT_CROSSBOW_DRAW_UNLOADED", ACT_CROSSBOW_DRAW_UNLOADED)
        .value("ACT_GAUSS_SPINUP", ACT_GAUSS_SPINUP)
        .value("ACT_GAUSS_SPINCYCLE", ACT_GAUSS_SPINCYCLE)
        .value("ACT_VM_PRIMARYATTACK_SILENCED", ACT_VM_PRIMARYATTACK_SILENCED)
        .value("ACT_VM_RELOAD_SILENCED", ACT_VM_RELOAD_SILENCED)
        .value("ACT_VM_DRYFIRE_SILENCED", ACT_VM_DRYFIRE_SILENCED)
        .value("ACT_VM_IDLE_SILENCED", ACT_VM_IDLE_SILENCED)
        .value("ACT_VM_DRAW_SILENCED", ACT_VM_DRAW_SILENCED)
        .value("ACT_VM_IDLE_EMPTY_LEFT", ACT_VM_IDLE_EMPTY_LEFT)
        .value("ACT_VM_DRYFIRE_LEFT", ACT_VM_DRYFIRE_LEFT)
        .value("ACT_VM_IS_DRAW", ACT_VM_IS_DRAW)
        .value("ACT_VM_IS_HOLSTER", ACT_VM_IS_HOLSTER)
        .value("ACT_VM_IS_IDLE", ACT_VM_IS_IDLE)
        .value("ACT_VM_IS_PRIMARYATTACK", ACT_VM_IS_PRIMARYATTACK)
        .value("ACT_PLAYER_IDLE_FIRE", ACT_PLAYER_IDLE_FIRE)
        .value("ACT_PLAYER_CROUCH_FIRE", ACT_PLAYER_CROUCH_FIRE)
        .value("ACT_PLAYER_CROUCH_WALK_FIRE", ACT_PLAYER_CROUCH_WALK_FIRE)
        .value("ACT_PLAYER_WALK_FIRE", ACT_PLAYER_WALK_FIRE)
        .value("ACT_PLAYER_RUN_FIRE", ACT_PLAYER_RUN_FIRE)
        .value("ACT_IDLETORUN", ACT_IDLETORUN)
        .value("ACT_RUNTOIDLE", ACT_RUNTOIDLE)
        .value("ACT_VM_DRAW_DEPLOYED", ACT_VM_DRAW_DEPLOYED)
        .value("ACT_HL2MP_IDLE_MELEE", ACT_HL2MP_IDLE_MELEE)
        .value("ACT_HL2MP_RUN_MELEE", ACT_HL2MP_RUN_MELEE)
        .value("ACT_HL2MP_IDLE_CROUCH_MELEE", ACT_HL2MP_IDLE_CROUCH_MELEE)
        .value("ACT_HL2MP_WALK_CROUCH_MELEE", ACT_HL2MP_WALK_CROUCH_MELEE)
        .value("ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE", ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE)
        .value("ACT_HL2MP_GESTURE_RELOAD_MELEE", ACT_HL2MP_GESTURE_RELOAD_MELEE)
        .value("ACT_HL2MP_JUMP_MELEE", ACT_HL2MP_JUMP_MELEE)
        .value("ACT_VM_FIZZLE", ACT_VM_FIZZLE)
        .value("ACT_MP_STAND_IDLE", ACT_MP_STAND_IDLE)
        .value("ACT_MP_CROUCH_IDLE", ACT_MP_CROUCH_IDLE)
        .value("ACT_MP_CROUCH_DEPLOYED_IDLE", ACT_MP_CROUCH_DEPLOYED_IDLE)
        .value("ACT_MP_CROUCH_DEPLOYED", ACT_MP_CROUCH_DEPLOYED)
        .value("ACT_MP_DEPLOYED_IDLE", ACT_MP_DEPLOYED_IDLE)
        .value("ACT_MP_RUN", ACT_MP_RUN)
        .value("ACT_MP_WALK", ACT_MP_WALK)
        .value("ACT_MP_AIRWALK", ACT_MP_AIRWALK)
        .value("ACT_MP_CROUCHWALK", ACT_MP_CROUCHWALK)
        .value("ACT_MP_SPRINT", ACT_MP_SPRINT)
        .value("ACT_MP_JUMP", ACT_MP_JUMP)
        .value("ACT_MP_JUMP_START", ACT_MP_JUMP_START)
        .value("ACT_MP_JUMP_FLOAT", ACT_MP_JUMP_FLOAT)
        .value("ACT_MP_JUMP_LAND", ACT_MP_JUMP_LAND)
        .value("ACT_MP_DOUBLEJUMP", ACT_MP_DOUBLEJUMP)
        .value("ACT_MP_SWIM", ACT_MP_SWIM)
        .value("ACT_MP_DEPLOYED", ACT_MP_DEPLOYED)
        .value("ACT_MP_SWIM_DEPLOYED", ACT_MP_SWIM_DEPLOYED)
        .value("ACT_MP_VCD", ACT_MP_VCD)
        .value("ACT_MP_ATTACK_STAND_PRIMARYFIRE", ACT_MP_ATTACK_STAND_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED", ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED)
        .value("ACT_MP_ATTACK_STAND_SECONDARYFIRE", ACT_MP_ATTACK_STAND_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_STAND_GRENADE", ACT_MP_ATTACK_STAND_GRENADE)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARYFIRE", ACT_MP_ATTACK_CROUCH_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED", ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED)
        .value("ACT_MP_ATTACK_CROUCH_SECONDARYFIRE", ACT_MP_ATTACK_CROUCH_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE", ACT_MP_ATTACK_CROUCH_GRENADE)
        .value("ACT_MP_ATTACK_SWIM_PRIMARYFIRE", ACT_MP_ATTACK_SWIM_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_SWIM_SECONDARYFIRE", ACT_MP_ATTACK_SWIM_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_SWIM_GRENADE", ACT_MP_ATTACK_SWIM_GRENADE)
        .value("ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE", ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE", ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE", ACT_MP_ATTACK_AIRWALK_GRENADE)
        .value("ACT_MP_RELOAD_STAND", ACT_MP_RELOAD_STAND)
        .value("ACT_MP_RELOAD_STAND_LOOP", ACT_MP_RELOAD_STAND_LOOP)
        .value("ACT_MP_RELOAD_STAND_END", ACT_MP_RELOAD_STAND_END)
        .value("ACT_MP_RELOAD_CROUCH", ACT_MP_RELOAD_CROUCH)
        .value("ACT_MP_RELOAD_CROUCH_LOOP", ACT_MP_RELOAD_CROUCH_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_END", ACT_MP_RELOAD_CROUCH_END)
        .value("ACT_MP_RELOAD_SWIM", ACT_MP_RELOAD_SWIM)
        .value("ACT_MP_RELOAD_SWIM_LOOP", ACT_MP_RELOAD_SWIM_LOOP)
        .value("ACT_MP_RELOAD_SWIM_END", ACT_MP_RELOAD_SWIM_END)
        .value("ACT_MP_RELOAD_AIRWALK", ACT_MP_RELOAD_AIRWALK)
        .value("ACT_MP_RELOAD_AIRWALK_LOOP", ACT_MP_RELOAD_AIRWALK_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_END", ACT_MP_RELOAD_AIRWALK_END)
        .value("ACT_MP_ATTACK_STAND_PREFIRE", ACT_MP_ATTACK_STAND_PREFIRE)
        .value("ACT_MP_ATTACK_STAND_POSTFIRE", ACT_MP_ATTACK_STAND_POSTFIRE)
        .value("ACT_MP_ATTACK_STAND_STARTFIRE", ACT_MP_ATTACK_STAND_STARTFIRE)
        .value("ACT_MP_ATTACK_CROUCH_PREFIRE", ACT_MP_ATTACK_CROUCH_PREFIRE)
        .value("ACT_MP_ATTACK_CROUCH_POSTFIRE", ACT_MP_ATTACK_CROUCH_POSTFIRE)
        .value("ACT_MP_ATTACK_SWIM_PREFIRE", ACT_MP_ATTACK_SWIM_PREFIRE)
        .value("ACT_MP_ATTACK_SWIM_POSTFIRE", ACT_MP_ATTACK_SWIM_POSTFIRE)
        .value("ACT_MP_STAND_PRIMARY", ACT_MP_STAND_PRIMARY)
        .value("ACT_MP_CROUCH_PRIMARY", ACT_MP_CROUCH_PRIMARY)
        .value("ACT_MP_RUN_PRIMARY", ACT_MP_RUN_PRIMARY)
        .value("ACT_MP_WALK_PRIMARY", ACT_MP_WALK_PRIMARY)
        .value("ACT_MP_AIRWALK_PRIMARY", ACT_MP_AIRWALK_PRIMARY)
        .value("ACT_MP_CROUCHWALK_PRIMARY", ACT_MP_CROUCHWALK_PRIMARY)
        .value("ACT_MP_JUMP_PRIMARY", ACT_MP_JUMP_PRIMARY)
        .value("ACT_MP_JUMP_START_PRIMARY", ACT_MP_JUMP_START_PRIMARY)
        .value("ACT_MP_JUMP_FLOAT_PRIMARY", ACT_MP_JUMP_FLOAT_PRIMARY)
        .value("ACT_MP_JUMP_LAND_PRIMARY", ACT_MP_JUMP_LAND_PRIMARY)
        .value("ACT_MP_SWIM_PRIMARY", ACT_MP_SWIM_PRIMARY)
        .value("ACT_MP_DEPLOYED_PRIMARY", ACT_MP_DEPLOYED_PRIMARY)
        .value("ACT_MP_SWIM_DEPLOYED_PRIMARY", ACT_MP_SWIM_DEPLOYED_PRIMARY)
        .value("ACT_MP_ATTACK_STAND_PRIMARY", ACT_MP_ATTACK_STAND_PRIMARY)
        .value("ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED", ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARY", ACT_MP_ATTACK_CROUCH_PRIMARY)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED", ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED)
        .value("ACT_MP_ATTACK_SWIM_PRIMARY", ACT_MP_ATTACK_SWIM_PRIMARY)
        .value("ACT_MP_ATTACK_AIRWALK_PRIMARY", ACT_MP_ATTACK_AIRWALK_PRIMARY)
        .value("ACT_MP_RELOAD_STAND_PRIMARY", ACT_MP_RELOAD_STAND_PRIMARY)
        .value("ACT_MP_RELOAD_STAND_PRIMARY_LOOP", ACT_MP_RELOAD_STAND_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_STAND_PRIMARY_END", ACT_MP_RELOAD_STAND_PRIMARY_END)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY", ACT_MP_RELOAD_CROUCH_PRIMARY)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP", ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY_END", ACT_MP_RELOAD_CROUCH_PRIMARY_END)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY", ACT_MP_RELOAD_SWIM_PRIMARY)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY_LOOP", ACT_MP_RELOAD_SWIM_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY_END", ACT_MP_RELOAD_SWIM_PRIMARY_END)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY", ACT_MP_RELOAD_AIRWALK_PRIMARY)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP", ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY_END", ACT_MP_RELOAD_AIRWALK_PRIMARY_END)
        .value("ACT_MP_ATTACK_STAND_GRENADE_PRIMARY", ACT_MP_ATTACK_STAND_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY", ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY", ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY", ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY)
        .value("ACT_MP_STAND_SECONDARY", ACT_MP_STAND_SECONDARY)
        .value("ACT_MP_CROUCH_SECONDARY", ACT_MP_CROUCH_SECONDARY)
        .value("ACT_MP_RUN_SECONDARY", ACT_MP_RUN_SECONDARY)
        .value("ACT_MP_WALK_SECONDARY", ACT_MP_WALK_SECONDARY)
        .value("ACT_MP_AIRWALK_SECONDARY", ACT_MP_AIRWALK_SECONDARY)
        .value("ACT_MP_CROUCHWALK_SECONDARY", ACT_MP_CROUCHWALK_SECONDARY)
        .value("ACT_MP_JUMP_SECONDARY", ACT_MP_JUMP_SECONDARY)
        .value("ACT_MP_JUMP_START_SECONDARY", ACT_MP_JUMP_START_SECONDARY)
        .value("ACT_MP_JUMP_FLOAT_SECONDARY", ACT_MP_JUMP_FLOAT_SECONDARY)
        .value("ACT_MP_JUMP_LAND_SECONDARY", ACT_MP_JUMP_LAND_SECONDARY)
        .value("ACT_MP_SWIM_SECONDARY", ACT_MP_SWIM_SECONDARY)
        .value("ACT_MP_ATTACK_STAND_SECONDARY", ACT_MP_ATTACK_STAND_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_SECONDARY", ACT_MP_ATTACK_CROUCH_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_SECONDARY", ACT_MP_ATTACK_SWIM_SECONDARY)
        .value("ACT_MP_ATTACK_AIRWALK_SECONDARY", ACT_MP_ATTACK_AIRWALK_SECONDARY)
        .value("ACT_MP_RELOAD_STAND_SECONDARY", ACT_MP_RELOAD_STAND_SECONDARY)
        .value("ACT_MP_RELOAD_STAND_SECONDARY_LOOP", ACT_MP_RELOAD_STAND_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_STAND_SECONDARY_END", ACT_MP_RELOAD_STAND_SECONDARY_END)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY", ACT_MP_RELOAD_CROUCH_SECONDARY)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP", ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY_END", ACT_MP_RELOAD_CROUCH_SECONDARY_END)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY", ACT_MP_RELOAD_SWIM_SECONDARY)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY_LOOP", ACT_MP_RELOAD_SWIM_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY_END", ACT_MP_RELOAD_SWIM_SECONDARY_END)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY", ACT_MP_RELOAD_AIRWALK_SECONDARY)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP", ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY_END", ACT_MP_RELOAD_AIRWALK_SECONDARY_END)
        .value("ACT_MP_ATTACK_STAND_GRENADE_SECONDARY", ACT_MP_ATTACK_STAND_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY", ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY", ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY", ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY)
        .value("ACT_MP_STAND_MELEE", ACT_MP_STAND_MELEE)
        .value("ACT_MP_CROUCH_MELEE", ACT_MP_CROUCH_MELEE)
        .value("ACT_MP_RUN_MELEE", ACT_MP_RUN_MELEE)
        .value("ACT_MP_WALK_MELEE", ACT_MP_WALK_MELEE)
        .value("ACT_MP_AIRWALK_MELEE", ACT_MP_AIRWALK_MELEE)
        .value("ACT_MP_CROUCHWALK_MELEE", ACT_MP_CROUCHWALK_MELEE)
        .value("ACT_MP_JUMP_MELEE", ACT_MP_JUMP_MELEE)
        .value("ACT_MP_JUMP_START_MELEE", ACT_MP_JUMP_START_MELEE)
        .value("ACT_MP_JUMP_FLOAT_MELEE", ACT_MP_JUMP_FLOAT_MELEE)
        .value("ACT_MP_JUMP_LAND_MELEE", ACT_MP_JUMP_LAND_MELEE)
        .value("ACT_MP_SWIM_MELEE", ACT_MP_SWIM_MELEE)
        .value("ACT_MP_ATTACK_STAND_MELEE", ACT_MP_ATTACK_STAND_MELEE)
        .value("ACT_MP_ATTACK_STAND_MELEE_SECONDARY", ACT_MP_ATTACK_STAND_MELEE_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_MELEE", ACT_MP_ATTACK_CROUCH_MELEE)
        .value("ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY", ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_MELEE", ACT_MP_ATTACK_SWIM_MELEE)
        .value("ACT_MP_ATTACK_AIRWALK_MELEE", ACT_MP_ATTACK_AIRWALK_MELEE)
        .value("ACT_MP_ATTACK_STAND_GRENADE_MELEE", ACT_MP_ATTACK_STAND_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_MELEE", ACT_MP_ATTACK_CROUCH_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_MELEE", ACT_MP_ATTACK_SWIM_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE", ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE)
        .value("ACT_MP_STAND_ITEM1", ACT_MP_STAND_ITEM1)
        .value("ACT_MP_CROUCH_ITEM1", ACT_MP_CROUCH_ITEM1)
        .value("ACT_MP_RUN_ITEM1", ACT_MP_RUN_ITEM1)
        .value("ACT_MP_WALK_ITEM1", ACT_MP_WALK_ITEM1)
        .value("ACT_MP_AIRWALK_ITEM1", ACT_MP_AIRWALK_ITEM1)
        .value("ACT_MP_CROUCHWALK_ITEM1", ACT_MP_CROUCHWALK_ITEM1)
        .value("ACT_MP_JUMP_ITEM1", ACT_MP_JUMP_ITEM1)
        .value("ACT_MP_JUMP_START_ITEM1", ACT_MP_JUMP_START_ITEM1)
        .value("ACT_MP_JUMP_FLOAT_ITEM1", ACT_MP_JUMP_FLOAT_ITEM1)
        .value("ACT_MP_JUMP_LAND_ITEM1", ACT_MP_JUMP_LAND_ITEM1)
        .value("ACT_MP_SWIM_ITEM1", ACT_MP_SWIM_ITEM1)
        .value("ACT_MP_ATTACK_STAND_ITEM1", ACT_MP_ATTACK_STAND_ITEM1)
        .value("ACT_MP_ATTACK_STAND_ITEM1_SECONDARY", ACT_MP_ATTACK_STAND_ITEM1_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_ITEM1", ACT_MP_ATTACK_CROUCH_ITEM1)
        .value("ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY", ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_ITEM1", ACT_MP_ATTACK_SWIM_ITEM1)
        .value("ACT_MP_ATTACK_AIRWALK_ITEM1", ACT_MP_ATTACK_AIRWALK_ITEM1)
        .value("ACT_MP_STAND_ITEM2", ACT_MP_STAND_ITEM2)
        .value("ACT_MP_CROUCH_ITEM2", ACT_MP_CROUCH_ITEM2)
        .value("ACT_MP_RUN_ITEM2", ACT_MP_RUN_ITEM2)
        .value("ACT_MP_WALK_ITEM2", ACT_MP_WALK_ITEM2)
        .value("ACT_MP_AIRWALK_ITEM2", ACT_MP_AIRWALK_ITEM2)
        .value("ACT_MP_CROUCHWALK_ITEM2", ACT_MP_CROUCHWALK_ITEM2)
        .value("ACT_MP_JUMP_ITEM2", ACT_MP_JUMP_ITEM2)
        .value("ACT_MP_JUMP_START_ITEM2", ACT_MP_JUMP_START_ITEM2)
        .value("ACT_MP_JUMP_FLOAT_ITEM2", ACT_MP_JUMP_FLOAT_ITEM2)
        .value("ACT_MP_JUMP_LAND_ITEM2", ACT_MP_JUMP_LAND_ITEM2)
        .value("ACT_MP_SWIM_ITEM2", ACT_MP_SWIM_ITEM2)
        .value("ACT_MP_ATTACK_STAND_ITEM2", ACT_MP_ATTACK_STAND_ITEM2)
        .value("ACT_MP_ATTACK_STAND_ITEM2_SECONDARY", ACT_MP_ATTACK_STAND_ITEM2_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_ITEM2", ACT_MP_ATTACK_CROUCH_ITEM2)
        .value("ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY", ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_ITEM2", ACT_MP_ATTACK_SWIM_ITEM2)
        .value("ACT_MP_ATTACK_AIRWALK_ITEM2", ACT_MP_ATTACK_AIRWALK_ITEM2)
        .value("ACT_MP_GESTURE_FLINCH", ACT_MP_GESTURE_FLINCH)
        .value("ACT_MP_GESTURE_FLINCH_PRIMARY", ACT_MP_GESTURE_FLINCH_PRIMARY)
        .value("ACT_MP_GESTURE_FLINCH_SECONDARY", ACT_MP_GESTURE_FLINCH_SECONDARY)
        .value("ACT_MP_GESTURE_FLINCH_MELEE", ACT_MP_GESTURE_FLINCH_MELEE)
        .value("ACT_MP_GESTURE_FLINCH_ITEM1", ACT_MP_GESTURE_FLINCH_ITEM1)
        .value("ACT_MP_GESTURE_FLINCH_ITEM2", ACT_MP_GESTURE_FLINCH_ITEM2)
        .value("ACT_MP_GESTURE_FLINCH_HEAD", ACT_MP_GESTURE_FLINCH_HEAD)
        .value("ACT_MP_GESTURE_FLINCH_CHEST", ACT_MP_GESTURE_FLINCH_CHEST)
        .value("ACT_MP_GESTURE_FLINCH_STOMACH", ACT_MP_GESTURE_FLINCH_STOMACH)
        .value("ACT_MP_GESTURE_FLINCH_LEFTARM", ACT_MP_GESTURE_FLINCH_LEFTARM)
        .value("ACT_MP_GESTURE_FLINCH_RIGHTARM", ACT_MP_GESTURE_FLINCH_RIGHTARM)
        .value("ACT_MP_GESTURE_FLINCH_LEFTLEG", ACT_MP_GESTURE_FLINCH_LEFTLEG)
        .value("ACT_MP_GESTURE_FLINCH_RIGHTLEG", ACT_MP_GESTURE_FLINCH_RIGHTLEG)
        .value("ACT_MP_GRENADE1_DRAW", ACT_MP_GRENADE1_DRAW)
        .value("ACT_MP_GRENADE1_IDLE", ACT_MP_GRENADE1_IDLE)
        .value("ACT_MP_GRENADE1_ATTACK", ACT_MP_GRENADE1_ATTACK)
        .value("ACT_MP_GRENADE2_DRAW", ACT_MP_GRENADE2_DRAW)
        .value("ACT_MP_GRENADE2_IDLE", ACT_MP_GRENADE2_IDLE)
        .value("ACT_MP_GRENADE2_ATTACK", ACT_MP_GRENADE2_ATTACK)
        .value("ACT_MP_PRIMARY_GRENADE1_DRAW", ACT_MP_PRIMARY_GRENADE1_DRAW)
        .value("ACT_MP_PRIMARY_GRENADE1_IDLE", ACT_MP_PRIMARY_GRENADE1_IDLE)
        .value("ACT_MP_PRIMARY_GRENADE1_ATTACK", ACT_MP_PRIMARY_GRENADE1_ATTACK)
        .value("ACT_MP_PRIMARY_GRENADE2_DRAW", ACT_MP_PRIMARY_GRENADE2_DRAW)
        .value("ACT_MP_PRIMARY_GRENADE2_IDLE", ACT_MP_PRIMARY_GRENADE2_IDLE)
        .value("ACT_MP_PRIMARY_GRENADE2_ATTACK", ACT_MP_PRIMARY_GRENADE2_ATTACK)
        .value("ACT_MP_SECONDARY_GRENADE1_DRAW", ACT_MP_SECONDARY_GRENADE1_DRAW)
        .value("ACT_MP_SECONDARY_GRENADE1_IDLE", ACT_MP_SECONDARY_GRENADE1_IDLE)
        .value("ACT_MP_SECONDARY_GRENADE1_ATTACK", ACT_MP_SECONDARY_GRENADE1_ATTACK)
        .value("ACT_MP_SECONDARY_GRENADE2_DRAW", ACT_MP_SECONDARY_GRENADE2_DRAW)
        .value("ACT_MP_SECONDARY_GRENADE2_IDLE", ACT_MP_SECONDARY_GRENADE2_IDLE)
        .value("ACT_MP_SECONDARY_GRENADE2_ATTACK", ACT_MP_SECONDARY_GRENADE2_ATTACK)
        .value("ACT_MP_MELEE_GRENADE1_DRAW", ACT_MP_MELEE_GRENADE1_DRAW)
        .value("ACT_MP_MELEE_GRENADE1_IDLE", ACT_MP_MELEE_GRENADE1_IDLE)
        .value("ACT_MP_MELEE_GRENADE1_ATTACK", ACT_MP_MELEE_GRENADE1_ATTACK)
        .value("ACT_MP_MELEE_GRENADE2_DRAW", ACT_MP_MELEE_GRENADE2_DRAW)
        .value("ACT_MP_MELEE_GRENADE2_IDLE", ACT_MP_MELEE_GRENADE2_IDLE)
        .value("ACT_MP_MELEE_GRENADE2_ATTACK", ACT_MP_MELEE_GRENADE2_ATTACK)
        .value("ACT_MP_ITEM1_GRENADE1_DRAW", ACT_MP_ITEM1_GRENADE1_DRAW)
        .value("ACT_MP_ITEM1_GRENADE1_IDLE", ACT_MP_ITEM1_GRENADE1_IDLE)
        .value("ACT_MP_ITEM1_GRENADE1_ATTACK", ACT_MP_ITEM1_GRENADE1_ATTACK)
        .value("ACT_MP_ITEM1_GRENADE2_DRAW", ACT_MP_ITEM1_GRENADE2_DRAW)
        .value("ACT_MP_ITEM1_GRENADE2_IDLE", ACT_MP_ITEM1_GRENADE2_IDLE)
        .value("ACT_MP_ITEM1_GRENADE2_ATTACK", ACT_MP_ITEM1_GRENADE2_ATTACK)
        .value("ACT_MP_ITEM2_GRENADE1_DRAW", ACT_MP_ITEM2_GRENADE1_DRAW)
        .value("ACT_MP_ITEM2_GRENADE1_IDLE", ACT_MP_ITEM2_GRENADE1_IDLE)
        .value("ACT_MP_ITEM2_GRENADE1_ATTACK", ACT_MP_ITEM2_GRENADE1_ATTACK)
        .value("ACT_MP_ITEM2_GRENADE2_DRAW", ACT_MP_ITEM2_GRENADE2_DRAW)
        .value("ACT_MP_ITEM2_GRENADE2_IDLE", ACT_MP_ITEM2_GRENADE2_IDLE)
        .value("ACT_MP_ITEM2_GRENADE2_ATTACK", ACT_MP_ITEM2_GRENADE2_ATTACK)
        .value("ACT_MP_STAND_BUILDING", ACT_MP_STAND_BUILDING)
        .value("ACT_MP_CROUCH_BUILDING", ACT_MP_CROUCH_BUILDING)
        .value("ACT_MP_RUN_BUILDING", ACT_MP_RUN_BUILDING)
        .value("ACT_MP_WALK_BUILDING", ACT_MP_WALK_BUILDING)
        .value("ACT_MP_AIRWALK_BUILDING", ACT_MP_AIRWALK_BUILDING)
        .value("ACT_MP_CROUCHWALK_BUILDING", ACT_MP_CROUCHWALK_BUILDING)
        .value("ACT_MP_JUMP_BUILDING", ACT_MP_JUMP_BUILDING)
        .value("ACT_MP_JUMP_START_BUILDING", ACT_MP_JUMP_START_BUILDING)
        .value("ACT_MP_JUMP_FLOAT_BUILDING", ACT_MP_JUMP_FLOAT_BUILDING)
        .value("ACT_MP_JUMP_LAND_BUILDING", ACT_MP_JUMP_LAND_BUILDING)
        .value("ACT_MP_SWIM_BUILDING", ACT_MP_SWIM_BUILDING)
        .value("ACT_MP_ATTACK_STAND_BUILDING", ACT_MP_ATTACK_STAND_BUILDING)
        .value("ACT_MP_ATTACK_CROUCH_BUILDING", ACT_MP_ATTACK_CROUCH_BUILDING)
        .value("ACT_MP_ATTACK_SWIM_BUILDING", ACT_MP_ATTACK_SWIM_BUILDING)
        .value("ACT_MP_ATTACK_AIRWALK_BUILDING", ACT_MP_ATTACK_AIRWALK_BUILDING)
        .value("ACT_MP_ATTACK_STAND_GRENADE_BUILDING", ACT_MP_ATTACK_STAND_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING", ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_BUILDING", ACT_MP_ATTACK_SWIM_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING", ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING)
        .value("ACT_MP_STAND_PDA", ACT_MP_STAND_PDA)
        .value("ACT_MP_CROUCH_PDA", ACT_MP_CROUCH_PDA)
        .value("ACT_MP_RUN_PDA", ACT_MP_RUN_PDA)
        .value("ACT_MP_WALK_PDA", ACT_MP_WALK_PDA)
        .value("ACT_MP_AIRWALK_PDA", ACT_MP_AIRWALK_PDA)
        .value("ACT_MP_CROUCHWALK_PDA", ACT_MP_CROUCHWALK_PDA)
        .value("ACT_MP_JUMP_PDA", ACT_MP_JUMP_PDA)
        .value("ACT_MP_JUMP_START_PDA", ACT_MP_JUMP_START_PDA)
        .value("ACT_MP_JUMP_FLOAT_PDA", ACT_MP_JUMP_FLOAT_PDA)
        .value("ACT_MP_JUMP_LAND_PDA", ACT_MP_JUMP_LAND_PDA)
        .value("ACT_MP_SWIM_PDA", ACT_MP_SWIM_PDA)
        .value("ACT_MP_ATTACK_STAND_PDA", ACT_MP_ATTACK_STAND_PDA)
        .value("ACT_MP_ATTACK_SWIM_PDA", ACT_MP_ATTACK_SWIM_PDA)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH", ACT_MP_GESTURE_VC_HANDMOUTH)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT", ACT_MP_GESTURE_VC_FINGERPOINT)
        .value("ACT_MP_GESTURE_VC_FISTPUMP", ACT_MP_GESTURE_VC_FISTPUMP)
        .value("ACT_MP_GESTURE_VC_THUMBSUP", ACT_MP_GESTURE_VC_THUMBSUP)
        .value("ACT_MP_GESTURE_VC_NODYES", ACT_MP_GESTURE_VC_NODYES)
        .value("ACT_MP_GESTURE_VC_NODNO", ACT_MP_GESTURE_VC_NODNO)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY", ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY", ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY", ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY", ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY)
        .value("ACT_MP_GESTURE_VC_NODYES_PRIMARY", ACT_MP_GESTURE_VC_NODYES_PRIMARY)
        .value("ACT_MP_GESTURE_VC_NODNO_PRIMARY", ACT_MP_GESTURE_VC_NODNO_PRIMARY)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY", ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY", ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY", ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY", ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY)
        .value("ACT_MP_GESTURE_VC_NODYES_SECONDARY", ACT_MP_GESTURE_VC_NODYES_SECONDARY)
        .value("ACT_MP_GESTURE_VC_NODNO_SECONDARY", ACT_MP_GESTURE_VC_NODNO_SECONDARY)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_MELEE", ACT_MP_GESTURE_VC_HANDMOUTH_MELEE)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_MELEE", ACT_MP_GESTURE_VC_FINGERPOINT_MELEE)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_MELEE", ACT_MP_GESTURE_VC_FISTPUMP_MELEE)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_MELEE", ACT_MP_GESTURE_VC_THUMBSUP_MELEE)
        .value("ACT_MP_GESTURE_VC_NODYES_MELEE", ACT_MP_GESTURE_VC_NODYES_MELEE)
        .value("ACT_MP_GESTURE_VC_NODNO_MELEE", ACT_MP_GESTURE_VC_NODNO_MELEE)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1", ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1", ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_ITEM1", ACT_MP_GESTURE_VC_FISTPUMP_ITEM1)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_ITEM1", ACT_MP_GESTURE_VC_THUMBSUP_ITEM1)
        .value("ACT_MP_GESTURE_VC_NODYES_ITEM1", ACT_MP_GESTURE_VC_NODYES_ITEM1)
        .value("ACT_MP_GESTURE_VC_NODNO_ITEM1", ACT_MP_GESTURE_VC_NODNO_ITEM1)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2", ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2", ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_ITEM2", ACT_MP_GESTURE_VC_FISTPUMP_ITEM2)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_ITEM2", ACT_MP_GESTURE_VC_THUMBSUP_ITEM2)
        .value("ACT_MP_GESTURE_VC_NODYES_ITEM2", ACT_MP_GESTURE_VC_NODYES_ITEM2)
        .value("ACT_MP_GESTURE_VC_NODNO_ITEM2", ACT_MP_GESTURE_VC_NODNO_ITEM2)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING", ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING", ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_BUILDING", ACT_MP_GESTURE_VC_FISTPUMP_BUILDING)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_BUILDING", ACT_MP_GESTURE_VC_THUMBSUP_BUILDING)
        .value("ACT_MP_GESTURE_VC_NODYES_BUILDING", ACT_MP_GESTURE_VC_NODYES_BUILDING)
        .value("ACT_MP_GESTURE_VC_NODNO_BUILDING", ACT_MP_GESTURE_VC_NODNO_BUILDING)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_PDA", ACT_MP_GESTURE_VC_HANDMOUTH_PDA)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_PDA", ACT_MP_GESTURE_VC_FINGERPOINT_PDA)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_PDA", ACT_MP_GESTURE_VC_FISTPUMP_PDA)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_PDA", ACT_MP_GESTURE_VC_THUMBSUP_PDA)
        .value("ACT_MP_GESTURE_VC_NODYES_PDA", ACT_MP_GESTURE_VC_NODYES_PDA)
        .value("ACT_MP_GESTURE_VC_NODNO_PDA", ACT_MP_GESTURE_VC_NODNO_PDA)
        .value("ACT_VM_UNUSABLE", ACT_VM_UNUSABLE)
        .value("ACT_VM_UNUSABLE_TO_USABLE", ACT_VM_UNUSABLE_TO_USABLE)
        .value("ACT_VM_USABLE_TO_UNUSABLE", ACT_VM_USABLE_TO_UNUSABLE)
        .value("ACT_PRIMARY_VM_DRAW", ACT_PRIMARY_VM_DRAW)
        .value("ACT_PRIMARY_VM_HOLSTER", ACT_PRIMARY_VM_HOLSTER)
        .value("ACT_PRIMARY_VM_IDLE", ACT_PRIMARY_VM_IDLE)
        .value("ACT_PRIMARY_VM_PULLBACK", ACT_PRIMARY_VM_PULLBACK)
        .value("ACT_PRIMARY_VM_PRIMARYATTACK", ACT_PRIMARY_VM_PRIMARYATTACK)
        .value("ACT_PRIMARY_VM_SECONDARYATTACK", ACT_PRIMARY_VM_SECONDARYATTACK)
        .value("ACT_PRIMARY_VM_RELOAD", ACT_PRIMARY_VM_RELOAD)
        .value("ACT_PRIMARY_VM_DRYFIRE", ACT_PRIMARY_VM_DRYFIRE)
        .value("ACT_PRIMARY_VM_IDLE_TO_LOWERED", ACT_PRIMARY_VM_IDLE_TO_LOWERED)
        .value("ACT_PRIMARY_VM_IDLE_LOWERED", ACT_PRIMARY_VM_IDLE_LOWERED)
        .value("ACT_PRIMARY_VM_LOWERED_TO_IDLE", ACT_PRIMARY_VM_LOWERED_TO_IDLE)
        .value("ACT_SECONDARY_VM_DRAW", ACT_SECONDARY_VM_DRAW)
        .value("ACT_SECONDARY_VM_HOLSTER", ACT_SECONDARY_VM_HOLSTER)
        .value("ACT_SECONDARY_VM_IDLE", ACT_SECONDARY_VM_IDLE)
        .value("ACT_SECONDARY_VM_PULLBACK", ACT_SECONDARY_VM_PULLBACK)
        .value("ACT_SECONDARY_VM_PRIMARYATTACK", ACT_SECONDARY_VM_PRIMARYATTACK)
        .value("ACT_SECONDARY_VM_SECONDARYATTACK", ACT_SECONDARY_VM_SECONDARYATTACK)
        .value("ACT_SECONDARY_VM_RELOAD", ACT_SECONDARY_VM_RELOAD)
        .value("ACT_SECONDARY_VM_DRYFIRE", ACT_SECONDARY_VM_DRYFIRE)
        .value("ACT_SECONDARY_VM_IDLE_TO_LOWERED", ACT_SECONDARY_VM_IDLE_TO_LOWERED)
        .value("ACT_SECONDARY_VM_IDLE_LOWERED", ACT_SECONDARY_VM_IDLE_LOWERED)
        .value("ACT_SECONDARY_VM_LOWERED_TO_IDLE", ACT_SECONDARY_VM_LOWERED_TO_IDLE)
        .value("ACT_MELEE_VM_DRAW", ACT_MELEE_VM_DRAW)
        .value("ACT_MELEE_VM_HOLSTER", ACT_MELEE_VM_HOLSTER)
        .value("ACT_MELEE_VM_IDLE", ACT_MELEE_VM_IDLE)
        .value("ACT_MELEE_VM_PULLBACK", ACT_MELEE_VM_PULLBACK)
        .value("ACT_MELEE_VM_PRIMARYATTACK", ACT_MELEE_VM_PRIMARYATTACK)
        .value("ACT_MELEE_VM_SECONDARYATTACK", ACT_MELEE_VM_SECONDARYATTACK)
        .value("ACT_MELEE_VM_RELOAD", ACT_MELEE_VM_RELOAD)
        .value("ACT_MELEE_VM_DRYFIRE", ACT_MELEE_VM_DRYFIRE)
        .value("ACT_MELEE_VM_IDLE_TO_LOWERED", ACT_MELEE_VM_IDLE_TO_LOWERED)
        .value("ACT_MELEE_VM_IDLE_LOWERED", ACT_MELEE_VM_IDLE_LOWERED)
        .value("ACT_MELEE_VM_LOWERED_TO_IDLE", ACT_MELEE_VM_LOWERED_TO_IDLE)
        .value("ACT_PDA_VM_DRAW", ACT_PDA_VM_DRAW)
        .value("ACT_PDA_VM_HOLSTER", ACT_PDA_VM_HOLSTER)
        .value("ACT_PDA_VM_IDLE", ACT_PDA_VM_IDLE)
        .value("ACT_PDA_VM_PULLBACK", ACT_PDA_VM_PULLBACK)
        .value("ACT_PDA_VM_PRIMARYATTACK", ACT_PDA_VM_PRIMARYATTACK)
        .value("ACT_PDA_VM_SECONDARYATTACK", ACT_PDA_VM_SECONDARYATTACK)
        .value("ACT_PDA_VM_RELOAD", ACT_PDA_VM_RELOAD)
        .value("ACT_PDA_VM_DRYFIRE", ACT_PDA_VM_DRYFIRE)
        .value("ACT_PDA_VM_IDLE_TO_LOWERED", ACT_PDA_VM_IDLE_TO_LOWERED)
        .value("ACT_PDA_VM_IDLE_LOWERED", ACT_PDA_VM_IDLE_LOWERED)
        .value("ACT_PDA_VM_LOWERED_TO_IDLE", ACT_PDA_VM_LOWERED_TO_IDLE)
        .value("ACT_ITEM1_VM_DRAW", ACT_ITEM1_VM_DRAW)
        .value("ACT_ITEM1_VM_HOLSTER", ACT_ITEM1_VM_HOLSTER)
        .value("ACT_ITEM1_VM_IDLE", ACT_ITEM1_VM_IDLE)
        .value("ACT_ITEM1_VM_PULLBACK", ACT_ITEM1_VM_PULLBACK)
        .value("ACT_ITEM1_VM_PRIMARYATTACK", ACT_ITEM1_VM_PRIMARYATTACK)
        .value("ACT_ITEM1_VM_SECONDARYATTACK", ACT_ITEM1_VM_SECONDARYATTACK)
        .value("ACT_ITEM1_VM_RELOAD", ACT_ITEM1_VM_RELOAD)
        .value("ACT_ITEM1_VM_DRYFIRE", ACT_ITEM1_VM_DRYFIRE)
        .value("ACT_ITEM1_VM_IDLE_TO_LOWERED", ACT_ITEM1_VM_IDLE_TO_LOWERED)
        .value("ACT_ITEM1_VM_IDLE_LOWERED", ACT_ITEM1_VM_IDLE_LOWERED)
        .value("ACT_ITEM1_VM_LOWERED_TO_IDLE", ACT_ITEM1_VM_LOWERED_TO_IDLE)
        .value("ACT_ITEM2_VM_DRAW", ACT_ITEM2_VM_DRAW)
        .value("ACT_ITEM2_VM_HOLSTER", ACT_ITEM2_VM_HOLSTER)
        .value("ACT_ITEM2_VM_IDLE", ACT_ITEM2_VM_IDLE)
        .value("ACT_ITEM2_VM_PULLBACK", ACT_ITEM2_VM_PULLBACK)
        .value("ACT_ITEM2_VM_PRIMARYATTACK", ACT_ITEM2_VM_PRIMARYATTACK)
        .value("ACT_ITEM2_VM_SECONDARYATTACK", ACT_ITEM2_VM_SECONDARYATTACK)
        .value("ACT_ITEM2_VM_RELOAD", ACT_ITEM2_VM_RELOAD)
        .value("ACT_ITEM2_VM_DRYFIRE", ACT_ITEM2_VM_DRYFIRE)
        .value("ACT_ITEM2_VM_IDLE_TO_LOWERED", ACT_ITEM2_VM_IDLE_TO_LOWERED)
        .value("ACT_ITEM2_VM_IDLE_LOWERED", ACT_ITEM2_VM_IDLE_LOWERED)
        .value("ACT_ITEM2_VM_LOWERED_TO_IDLE", ACT_ITEM2_VM_LOWERED_TO_IDLE)
        .value("ACT_RELOAD_SUCCEED", ACT_RELOAD_SUCCEED)
        .value("ACT_RELOAD_FAIL", ACT_RELOAD_FAIL)
        .value("ACT_WALK_AIM_AUTOGUN", ACT_WALK_AIM_AUTOGUN)
        .value("ACT_RUN_AIM_AUTOGUN", ACT_RUN_AIM_AUTOGUN)
        .value("ACT_IDLE_AUTOGUN", ACT_IDLE_AUTOGUN)
        .value("ACT_IDLE_AIM_AUTOGUN", ACT_IDLE_AIM_AUTOGUN)
        .value("ACT_RELOAD_AUTOGUN", ACT_RELOAD_AUTOGUN)
        .value("ACT_CROUCH_IDLE_AUTOGUN", ACT_CROUCH_IDLE_AUTOGUN)
        .value("ACT_RANGE_ATTACK_AUTOGUN", ACT_RANGE_ATTACK_AUTOGUN)
        .value("ACT_JUMP_AUTOGUN", ACT_JUMP_AUTOGUN)
        .value("ACT_IDLE_AIM_PISTOL", ACT_IDLE_AIM_PISTOL)
        .value("ACT_WALK_AIM_DUAL", ACT_WALK_AIM_DUAL)
        .value("ACT_RUN_AIM_DUAL", ACT_RUN_AIM_DUAL)
        .value("ACT_IDLE_DUAL", ACT_IDLE_DUAL)
        .value("ACT_IDLE_AIM_DUAL", ACT_IDLE_AIM_DUAL)
        .value("ACT_RELOAD_DUAL", ACT_RELOAD_DUAL)
        .value("ACT_CROUCH_IDLE_DUAL", ACT_CROUCH_IDLE_DUAL)
        .value("ACT_RANGE_ATTACK_DUAL", ACT_RANGE_ATTACK_DUAL)
        .value("ACT_JUMP_DUAL", ACT_JUMP_DUAL)
        .value("ACT_IDLE_SHOTGUN", ACT_IDLE_SHOTGUN)
        .value("ACT_IDLE_AIM_SHOTGUN", ACT_IDLE_AIM_SHOTGUN)
        .value("ACT_CROUCH_IDLE_SHOTGUN", ACT_CROUCH_IDLE_SHOTGUN)
        .value("ACT_JUMP_SHOTGUN", ACT_JUMP_SHOTGUN)
        .value("ACT_IDLE_AIM_RIFLE", ACT_IDLE_AIM_RIFLE)
        .value("ACT_RELOAD_RIFLE", ACT_RELOAD_RIFLE)
        .value("ACT_CROUCH_IDLE_RIFLE", ACT_CROUCH_IDLE_RIFLE)
        .value("ACT_RANGE_ATTACK_RIFLE", ACT_RANGE_ATTACK_RIFLE)
        .value("ACT_JUMP_RIFLE", ACT_JUMP_RIFLE)
        .value("ACT_SLEEP", ACT_SLEEP)
        .value("ACT_WAKE", ACT_WAKE)
        .value("ACT_FLICK_LEFT", ACT_FLICK_LEFT)
        .value("ACT_FLICK_LEFT_MIDDLE", ACT_FLICK_LEFT_MIDDLE)
        .value("ACT_FLICK_RIGHT_MIDDLE", ACT_FLICK_RIGHT_MIDDLE)
        .value("ACT_FLICK_RIGHT", ACT_FLICK_RIGHT)
        .value("ACT_SPINAROUND", ACT_SPINAROUND)
        .value("ACT_PREP_TO_FIRE", ACT_PREP_TO_FIRE)
        .value("ACT_FIRE", ACT_FIRE)
        .value("ACT_FIRE_RECOVER", ACT_FIRE_RECOVER)
        .value("ACT_SPRAY", ACT_SPRAY)
        .value("ACT_PREP_EXPLODE", ACT_PREP_EXPLODE)
        .value("ACT_EXPLODE", ACT_EXPLODE)
        .value("LAST_SHARED_ACTIVITY", LAST_SHARED_ACTIVITY)
        .export_values()
        ;

    bp::enum_< CollideType_t>("CollideType_t")
        .value("ENTITY_SHOULD_NOT_COLLIDE", ENTITY_SHOULD_NOT_COLLIDE)
        .value("ENTITY_SHOULD_COLLIDE", ENTITY_SHOULD_COLLIDE)
        .value("ENTITY_SHOULD_RESPOND", ENTITY_SHOULD_RESPOND)
        .export_values()
        ;

    bp::enum_< Collision_Group_t>("Collision_Group_t")
        .value("COLLISION_GROUP_NONE", COLLISION_GROUP_NONE)
        .value("COLLISION_GROUP_DEBRIS", COLLISION_GROUP_DEBRIS)
        .value("COLLISION_GROUP_DEBRIS_TRIGGER", COLLISION_GROUP_DEBRIS_TRIGGER)
        .value("COLLISION_GROUP_INTERACTIVE_DEBRIS", COLLISION_GROUP_INTERACTIVE_DEBRIS)
        .value("COLLISION_GROUP_INTERACTIVE", COLLISION_GROUP_INTERACTIVE)
        .value("COLLISION_GROUP_PLAYER", COLLISION_GROUP_PLAYER)
        .value("COLLISION_GROUP_BREAKABLE_GLASS", COLLISION_GROUP_BREAKABLE_GLASS)
        .value("COLLISION_GROUP_VEHICLE", COLLISION_GROUP_VEHICLE)
        .value("COLLISION_GROUP_PLAYER_MOVEMENT", COLLISION_GROUP_PLAYER_MOVEMENT)
        .value("COLLISION_GROUP_NPC", COLLISION_GROUP_NPC)
        .value("COLLISION_GROUP_IN_VEHICLE", COLLISION_GROUP_IN_VEHICLE)
        .value("COLLISION_GROUP_WEAPON", COLLISION_GROUP_WEAPON)
        .value("COLLISION_GROUP_VEHICLE_CLIP", COLLISION_GROUP_VEHICLE_CLIP)
        .value("COLLISION_GROUP_PROJECTILE", COLLISION_GROUP_PROJECTILE)
        .value("COLLISION_GROUP_DOOR_BLOCKER", COLLISION_GROUP_DOOR_BLOCKER)
        .value("COLLISION_GROUP_PASSABLE_DOOR", COLLISION_GROUP_PASSABLE_DOOR)
        .value("COLLISION_GROUP_DISSOLVING", COLLISION_GROUP_DISSOLVING)
        .value("COLLISION_GROUP_PUSHAWAY", COLLISION_GROUP_PUSHAWAY)
        .value("COLLISION_GROUP_NPC_ACTOR", COLLISION_GROUP_NPC_ACTOR)
        .value("COLLISION_GROUP_NPC_SCRIPTED", COLLISION_GROUP_NPC_SCRIPTED)
        .value("COLLISION_GROUP_PZ_CLIP", COLLISION_GROUP_PZ_CLIP)
        .value("COLLISION_GROUP_DEBRIS_BLOCK_PROJECTILE", COLLISION_GROUP_DEBRIS_BLOCK_PROJECTILE)
        .value("LAST_SHARED_COLLISION_GROUP", LAST_SHARED_COLLISION_GROUP)
        .export_values()
        ;

    bp::enum_< DataUpdateType_t>("DataUpdateType_t")
        .value("DATA_UPDATE_CREATED", DATA_UPDATE_CREATED)
        .value("DATA_UPDATE_DATATABLE_CHANGED", DATA_UPDATE_DATATABLE_CHANGED)
        .export_values()
        ;

    bp::enum_< MoveCollide_t>("MoveCollide_t")
        .value("MOVECOLLIDE_DEFAULT", MOVECOLLIDE_DEFAULT)
        .value("MOVECOLLIDE_FLY_BOUNCE", MOVECOLLIDE_FLY_BOUNCE)
        .value("MOVECOLLIDE_FLY_CUSTOM", MOVECOLLIDE_FLY_CUSTOM)
        .value("MOVECOLLIDE_FLY_SLIDE", MOVECOLLIDE_FLY_SLIDE)
        .value("MOVECOLLIDE_COUNT", MOVECOLLIDE_COUNT)
        .value("MOVECOLLIDE_MAX_BITS", MOVECOLLIDE_MAX_BITS)
        .export_values()
        ;

    bp::enum_< MoveType_t>("MoveType_t")
        .value("MOVETYPE_NONE", MOVETYPE_NONE)
        .value("MOVETYPE_ISOMETRIC", MOVETYPE_ISOMETRIC)
        .value("MOVETYPE_WALK", MOVETYPE_WALK)
        .value("MOVETYPE_STEP", MOVETYPE_STEP)
        .value("MOVETYPE_FLY", MOVETYPE_FLY)
        .value("MOVETYPE_FLYGRAVITY", MOVETYPE_FLYGRAVITY)
        .value("MOVETYPE_VPHYSICS", MOVETYPE_VPHYSICS)
        .value("MOVETYPE_PUSH", MOVETYPE_PUSH)
        .value("MOVETYPE_NOCLIP", MOVETYPE_NOCLIP)
        .value("MOVETYPE_LADDER", MOVETYPE_LADDER)
        .value("MOVETYPE_OBSERVER", MOVETYPE_OBSERVER)
        .value("MOVETYPE_CUSTOM", MOVETYPE_CUSTOM)
        .value("MOVETYPE_STRATEGIC", MOVETYPE_STRATEGIC)
        .value("MOVETYPE_LAST", MOVETYPE_LAST)
        .value("MOVETYPE_MAX_BITS", MOVETYPE_MAX_BITS)
        .export_values()
        ;

    bp::enum_< OverrideType_t>("OverrideType_t")
        .value("OVERRIDE_NORMAL", OVERRIDE_NORMAL)
        .value("OVERRIDE_BUILD_SHADOWS", OVERRIDE_BUILD_SHADOWS)
        .value("OVERRIDE_DEPTH_WRITE", OVERRIDE_DEPTH_WRITE)
        .export_values()
        ;

    bp::enum_< RenderFx_t>("RenderFx_t")
        .value("kRenderFxNone", kRenderFxNone)
        .value("kRenderFxPulseSlow", kRenderFxPulseSlow)
        .value("kRenderFxPulseFast", kRenderFxPulseFast)
        .value("kRenderFxPulseSlowWide", kRenderFxPulseSlowWide)
        .value("kRenderFxPulseFastWide", kRenderFxPulseFastWide)
        .value("kRenderFxFadeSlow", kRenderFxFadeSlow)
        .value("kRenderFxFadeFast", kRenderFxFadeFast)
        .value("kRenderFxSolidSlow", kRenderFxSolidSlow)
        .value("kRenderFxSolidFast", kRenderFxSolidFast)
        .value("kRenderFxStrobeSlow", kRenderFxStrobeSlow)
        .value("kRenderFxStrobeFast", kRenderFxStrobeFast)
        .value("kRenderFxStrobeFaster", kRenderFxStrobeFaster)
        .value("kRenderFxFlickerSlow", kRenderFxFlickerSlow)
        .value("kRenderFxFlickerFast", kRenderFxFlickerFast)
        .value("kRenderFxNoDissipation", kRenderFxNoDissipation)
        .value("kRenderFxFadeOut", kRenderFxFadeOut)
        .value("kRenderFxFadeIn", kRenderFxFadeIn)
        .value("kRenderFxPulseFastWider", kRenderFxPulseFastWider)
        .value("kRenderFxGlowShell", kRenderFxGlowShell)
        .value("kRenderFxMax", kRenderFxMax)
        .export_values()
        ;

    bp::enum_< RenderGroup_t>("RenderGroup_t")
        .value("RENDER_GROUP_OPAQUE", RENDER_GROUP_OPAQUE)
        .value("RENDER_GROUP_TRANSLUCENT", RENDER_GROUP_TRANSLUCENT)
        .value("RENDER_GROUP_TRANSLUCENT_IGNOREZ", RENDER_GROUP_TRANSLUCENT_IGNOREZ)
        .value("RENDER_GROUP_COUNT", RENDER_GROUP_COUNT)
        .export_values()
        ;

    bp::enum_< RenderMode_t>("RenderMode_t")
        .value("kRenderNormal", kRenderNormal)
        .value("kRenderTransColor", kRenderTransColor)
        .value("kRenderTransTexture", kRenderTransTexture)
        .value("kRenderGlow", kRenderGlow)
        .value("kRenderTransAlpha", kRenderTransAlpha)
        .value("kRenderTransAdd", kRenderTransAdd)
        .value("kRenderEnvironmental", kRenderEnvironmental)
        .value("kRenderTransAddFrameBlend", kRenderTransAddFrameBlend)
        .value("kRenderTransAlphaAdd", kRenderTransAlphaAdd)
        .value("kRenderWorldGlow", kRenderWorldGlow)
        .value("kRenderNone", kRenderNone)
        .value("kRenderModeCount", kRenderModeCount)
        .export_values()
        ;

    bp::enum_< ShadowType_t>("ShadowType_t")
        .value("SHADOWS_NONE", SHADOWS_NONE)
        .value("SHADOWS_SIMPLE", SHADOWS_SIMPLE)
        .value("SHADOWS_RENDER_TO_TEXTURE", SHADOWS_RENDER_TO_TEXTURE)
        .value("SHADOWS_RENDER_TO_TEXTURE_DYNAMIC", SHADOWS_RENDER_TO_TEXTURE_DYNAMIC)
        .value("SHADOWS_RENDER_TO_DEPTH_TEXTURE", SHADOWS_RENDER_TO_DEPTH_TEXTURE)
        .value("SHADOWS_RENDER_TO_TEXTURE_DYNAMIC_CUSTOM", SHADOWS_RENDER_TO_TEXTURE_DYNAMIC_CUSTOM)
        .export_values()
        ;

    bp::enum_< ShouldTransmitState_t>("ShouldTransmitState_t")
        .value("SHOULDTRANSMIT_START", SHOULDTRANSMIT_START)
        .value("SHOULDTRANSMIT_END", SHOULDTRANSMIT_END)
        .export_values()
        ;

    bp::enum_< SolidFlags_t>("SolidFlags_t")
        .value("FSOLID_CUSTOMRAYTEST", FSOLID_CUSTOMRAYTEST)
        .value("FSOLID_CUSTOMBOXTEST", FSOLID_CUSTOMBOXTEST)
        .value("FSOLID_NOT_SOLID", FSOLID_NOT_SOLID)
        .value("FSOLID_TRIGGER", FSOLID_TRIGGER)
        .value("FSOLID_NOT_STANDABLE", FSOLID_NOT_STANDABLE)
        .value("FSOLID_VOLUME_CONTENTS", FSOLID_VOLUME_CONTENTS)
        .value("FSOLID_FORCE_WORLD_ALIGNED", FSOLID_FORCE_WORLD_ALIGNED)
        .value("FSOLID_USE_TRIGGER_BOUNDS", FSOLID_USE_TRIGGER_BOUNDS)
        .value("FSOLID_ROOT_PARENT_ALIGNED", FSOLID_ROOT_PARENT_ALIGNED)
        .value("FSOLID_TRIGGER_TOUCH_DEBRIS", FSOLID_TRIGGER_TOUCH_DEBRIS)
        .value("FSOLID_TRIGGER_TOUCH_PLAYER", FSOLID_TRIGGER_TOUCH_PLAYER)
        .value("FSOLID_NOT_MOVEABLE", FSOLID_NOT_MOVEABLE)
        .value("FSOLID_MAX_BITS", FSOLID_MAX_BITS)
        .export_values()
        ;

    bp::enum_< SolidType_t>("SolidType_t")
        .value("SOLID_NONE", SOLID_NONE)
        .value("SOLID_BSP", SOLID_BSP)
        .value("SOLID_BBOX", SOLID_BBOX)
        .value("SOLID_OBB", SOLID_OBB)
        .value("SOLID_OBB_YAW", SOLID_OBB_YAW)
        .value("SOLID_CUSTOM", SOLID_CUSTOM)
        .value("SOLID_VPHYSICS", SOLID_VPHYSICS)
        .value("SOLID_LAST", SOLID_LAST)
        .export_values()
        ;

    bp::enum_< USE_TYPE>("USE_TYPE")
        .value("USE_OFF", USE_OFF)
        .value("USE_ON", USE_ON)
        .value("USE_SET", USE_SET)
        .value("USE_TOGGLE", USE_TOGGLE)
        .export_values()
        ;

    bp::enum_< WarsCollision_Group_t>("WarsCollision_Group_t")
        .value("WARS_COLLISION_GROUP_IGNORE_UNIT_START", WARS_COLLISION_GROUP_IGNORE_UNIT_START)
        .value("WARS_COLLISION_GROUP_IGNORE_UNIT_END", WARS_COLLISION_GROUP_IGNORE_UNIT_END)
        .value("WARS_COLLISION_GROUP_UNIT_START", WARS_COLLISION_GROUP_UNIT_START)
        .value("WARS_COLLISION_GROUP_UNIT_END", WARS_COLLISION_GROUP_UNIT_END)
        .value("WARS_COLLISION_GROUP_IGNORE_ALL_UNITS", WARS_COLLISION_GROUP_IGNORE_ALL_UNITS)
        .value("WARS_COLLISION_GROUP_BUILDING", WARS_COLLISION_GROUP_BUILDING)
        .value("WARS_COLLISION_GROUP_IGNORE_ALL_UNITS_AND_BUILD", WARS_COLLISION_GROUP_IGNORE_ALL_UNITS_AND_BUILD)
        .export_values()
        ;

    bp::enum_< _fieldtypes>("_fieldtypes")
        .value("FIELD_VOID", FIELD_VOID)
        .value("FIELD_FLOAT", FIELD_FLOAT)
        .value("FIELD_STRING", FIELD_STRING)
        .value("FIELD_VECTOR", FIELD_VECTOR)
        .value("FIELD_QUATERNION", FIELD_QUATERNION)
        .value("FIELD_INTEGER", FIELD_INTEGER)
        .value("FIELD_BOOLEAN", FIELD_BOOLEAN)
        .value("FIELD_SHORT", FIELD_SHORT)
        .value("FIELD_CHARACTER", FIELD_CHARACTER)
        .value("FIELD_COLOR32", FIELD_COLOR32)
        .value("FIELD_EMBEDDED", FIELD_EMBEDDED)
        .value("FIELD_CUSTOM", FIELD_CUSTOM)
        .value("FIELD_CLASSPTR", FIELD_CLASSPTR)
        .value("FIELD_EHANDLE", FIELD_EHANDLE)
        .value("FIELD_EDICT", FIELD_EDICT)
        .value("FIELD_POSITION_VECTOR", FIELD_POSITION_VECTOR)
        .value("FIELD_TIME", FIELD_TIME)
        .value("FIELD_TICK", FIELD_TICK)
        .value("FIELD_MODELNAME", FIELD_MODELNAME)
        .value("FIELD_SOUNDNAME", FIELD_SOUNDNAME)
        .value("FIELD_INPUT", FIELD_INPUT)
        .value("FIELD_FUNCTION", FIELD_FUNCTION)
        .value("FIELD_VMATRIX", FIELD_VMATRIX)
        .value("FIELD_VMATRIX_WORLDSPACE", FIELD_VMATRIX_WORLDSPACE)
        .value("FIELD_MATRIX3X4_WORLDSPACE", FIELD_MATRIX3X4_WORLDSPACE)
        .value("FIELD_INTERVAL", FIELD_INTERVAL)
        .value("FIELD_MODELINDEX", FIELD_MODELINDEX)
        .value("FIELD_MATERIALINDEX", FIELD_MATERIALINDEX)
        .value("FIELD_VECTOR2D", FIELD_VECTOR2D)
        .value("FIELD_INTEGER64", FIELD_INTEGER64)
        .value("FIELD_VECTOR4D", FIELD_VECTOR4D)
        .value("FIELD_TYPECOUNT", FIELD_TYPECOUNT)
        .export_values()
        ;

    { //::CClientEntityList
        typedef bp::class_< CClientEntityList_wrapper, boost::noncopyable > CClientEntityList_exposer_t;
        CClientEntityList_exposer_t CClientEntityList_exposer = CClientEntityList_exposer_t( "CClientEntityList", bp::no_init );
        bp::scope CClientEntityList_scope( CClientEntityList_exposer );
        bp::class_< CClientEntityList_wrapper::CPVSNotifyInfo_wrapper >( "CPVSNotifyInfo" )    
            .def_readwrite( "m_InPVSStatus", &CClientEntityList::CPVSNotifyInfo::m_InPVSStatus )    
            .def_readwrite( "m_PVSNotifiersLink", &CClientEntityList::CPVSNotifyInfo::m_PVSNotifiersLink )    
            .add_property( "m_pNotify"
                        , bp::make_function( (::IPVSNotify * (*)( ::CClientEntityList::CPVSNotifyInfo const & ))(&CClientEntityList_wrapper::CPVSNotifyInfo_wrapper::get_m_pNotify), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::CClientEntityList::CPVSNotifyInfo &,::IPVSNotify * ))(&CClientEntityList_wrapper::CPVSNotifyInfo_wrapper::set_m_pNotify), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
            .add_property( "m_pRenderable"
                        , bp::make_function( (::IClientRenderable * (*)( ::CClientEntityList::CPVSNotifyInfo const & ))(&CClientEntityList_wrapper::CPVSNotifyInfo_wrapper::get_m_pRenderable), bp::return_internal_reference< >() )
                        , bp::make_function( (void (*)( ::CClientEntityList::CPVSNotifyInfo &,::IClientRenderable * ))(&CClientEntityList_wrapper::CPVSNotifyInfo_wrapper::set_m_pRenderable), bp::with_custodian_and_ward_postcall< 1, 2 >() ) );
        CClientEntityList_exposer.def( bp::init< >() );
        { //::CClientEntityList::EntIndexToHandle
        
            typedef ::ClientEntityHandle_t ( ::CClientEntityList::*EntIndexToHandle_function_type )( int ) ;
            
            CClientEntityList_exposer.def( 
                "EntIndexToHandle"
                , EntIndexToHandle_function_type( &::CClientEntityList::EntIndexToHandle )
                , ( bp::arg("entnum") ) );
        
        }
        { //::CClientEntityList::FirstBaseEntity
        
            typedef ::C_BaseEntity * ( ::CClientEntityList::*FirstBaseEntity_function_type )(  ) const;
            
            CClientEntityList_exposer.def( 
                "FirstBaseEntity"
                , FirstBaseEntity_function_type( &::CClientEntityList::FirstBaseEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CClientEntityList::GetBaseEntity
        
            typedef ::C_BaseEntity * ( ::CClientEntityList::*GetBaseEntity_function_type )( int ) ;
            
            CClientEntityList_exposer.def( 
                "GetBaseEntity"
                , GetBaseEntity_function_type( &::CClientEntityList::GetBaseEntity )
                , ( bp::arg("entnum") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CClientEntityList::GetBaseEntityFromHandle
        
            typedef ::C_BaseEntity * ( ::CClientEntityList::*GetBaseEntityFromHandle_function_type )( ::ClientEntityHandle_t ) ;
            
            CClientEntityList_exposer.def( 
                "GetBaseEntityFromHandle"
                , GetBaseEntityFromHandle_function_type( &::CClientEntityList::GetBaseEntityFromHandle )
                , ( bp::arg("hEnt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CClientEntityList::GetHighestEntityIndex
        
            typedef int ( ::CClientEntityList::*GetHighestEntityIndex_function_type )(  ) ;
            
            CClientEntityList_exposer.def( 
                "GetHighestEntityIndex"
                , GetHighestEntityIndex_function_type( &::CClientEntityList::GetHighestEntityIndex ) );
        
        }
        { //::CClientEntityList::HandleToEntIndex
        
            typedef int ( ::CClientEntityList::*HandleToEntIndex_function_type )( ::ClientEntityHandle_t ) ;
            
            CClientEntityList_exposer.def( 
                "HandleToEntIndex"
                , HandleToEntIndex_function_type( &::CClientEntityList::HandleToEntIndex )
                , ( bp::arg("handle") ) );
        
        }
        { //::CClientEntityList::IsHandleValid
        
            typedef bool ( ::CClientEntityList::*IsHandleValid_function_type )( ::ClientEntityHandle_t ) const;
            
            CClientEntityList_exposer.def( 
                "IsHandleValid"
                , IsHandleValid_function_type( &::CClientEntityList::IsHandleValid )
                , ( bp::arg("handle") ) );
        
        }
        { //::CClientEntityList::NextBaseEntity
        
            typedef ::C_BaseEntity * ( ::CClientEntityList::*NextBaseEntity_function_type )( ::C_BaseEntity * ) const;
            
            CClientEntityList_exposer.def( 
                "NextBaseEntity"
                , NextBaseEntity_function_type( &::CClientEntityList::NextBaseEntity )
                , ( bp::arg("pEnt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CClientEntityList::NumberOfEntities
        
            typedef int ( ::CClientEntityList::*NumberOfEntities_function_type )( bool ) ;
            
            CClientEntityList_exposer.def( 
                "NumberOfEntities"
                , NumberOfEntities_function_type( &::CClientEntityList::NumberOfEntities )
                , ( bp::arg("bIncludeNonNetworkable")=(bool)(false) ) );
        
        }
        CClientEntityList_exposer.def_readwrite( "m_entityListeners", &CClientEntityList::m_entityListeners );
    }

    { //::CTakeDamageInfo
        typedef bp::class_< CTakeDamageInfo > CTakeDamageInfo_exposer_t;
        CTakeDamageInfo_exposer_t CTakeDamageInfo_exposer = CTakeDamageInfo_exposer_t( "CTakeDamageInfo", bp::init< >() );
        bp::scope CTakeDamageInfo_scope( CTakeDamageInfo_exposer );
        CTakeDamageInfo_exposer.def( bp::init< C_BaseEntity *, C_BaseEntity *, float, int, bp::optional< int > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) )) );
        CTakeDamageInfo_exposer.def( bp::init< C_BaseEntity *, C_BaseEntity *, C_BaseEntity *, float, int, bp::optional< int > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) )) );
        CTakeDamageInfo_exposer.def( bp::init< C_BaseEntity *, C_BaseEntity *, Vector const &, Vector const &, float, int, bp::optional< int, Vector * > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() )) );
        CTakeDamageInfo_exposer.def( bp::init< C_BaseEntity *, C_BaseEntity *, C_BaseEntity *, Vector const &, Vector const &, float, int, bp::optional< int, Vector * > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() )) );
        { //::CTakeDamageInfo::AddDamage
        
            typedef void ( ::CTakeDamageInfo::*AddDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AddDamage"
                , AddDamage_function_type( &::CTakeDamageInfo::AddDamage )
                , ( bp::arg("flAddAmount") ) );
        
        }
        { //::CTakeDamageInfo::AddDamageType
        
            typedef void ( ::CTakeDamageInfo::*AddDamageType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AddDamageType"
                , AddDamageType_function_type( &::CTakeDamageInfo::AddDamageType )
                , ( bp::arg("bitsDamageType") ) );
        
        }
        { //::CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel
        
            typedef void ( ::CTakeDamageInfo::*AdjustPlayerDamageInflictedForSkillLevel_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AdjustPlayerDamageInflictedForSkillLevel"
                , AdjustPlayerDamageInflictedForSkillLevel_function_type( &::CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel ) );
        
        }
        { //::CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel
        
            typedef void ( ::CTakeDamageInfo::*AdjustPlayerDamageTakenForSkillLevel_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AdjustPlayerDamageTakenForSkillLevel"
                , AdjustPlayerDamageTakenForSkillLevel_function_type( &::CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel ) );
        
        }
        { //::CTakeDamageInfo::BaseDamageIsValid
        
            typedef bool ( ::CTakeDamageInfo::*BaseDamageIsValid_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "BaseDamageIsValid"
                , BaseDamageIsValid_function_type( &::CTakeDamageInfo::BaseDamageIsValid ) );
        
        }
        { //::CTakeDamageInfo::CopyDamageToBaseDamage
        
            typedef void ( ::CTakeDamageInfo::*CopyDamageToBaseDamage_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "CopyDamageToBaseDamage"
                , CopyDamageToBaseDamage_function_type( &::CTakeDamageInfo::CopyDamageToBaseDamage ) );
        
        }
        { //::CTakeDamageInfo::DebugGetDamageTypeString
        
            typedef void ( *DebugGetDamageTypeString_function_type )( unsigned int,char *,int );
            
            CTakeDamageInfo_exposer.def( 
                "DebugGetDamageTypeString"
                , DebugGetDamageTypeString_function_type( &::CTakeDamageInfo::DebugGetDamageTypeString )
                , ( bp::arg("DamageType"), bp::arg("outbuf"), bp::arg("outbuflength") ) );
        
        }
        { //::CTakeDamageInfo::GetAmmoName
        
            typedef char const * ( ::CTakeDamageInfo::*GetAmmoName_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAmmoName"
                , GetAmmoName_function_type( &::CTakeDamageInfo::GetAmmoName ) );
        
        }
        { //::CTakeDamageInfo::GetAmmoType
        
            typedef int ( ::CTakeDamageInfo::*GetAmmoType_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAmmoType"
                , GetAmmoType_function_type( &::CTakeDamageInfo::GetAmmoType ) );
        
        }
        { //::CTakeDamageInfo::GetAttacker
        
            typedef ::C_BaseEntity * ( ::CTakeDamageInfo::*GetAttacker_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAttacker"
                , GetAttacker_function_type( &::CTakeDamageInfo::GetAttacker )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::GetBaseDamage
        
            typedef float ( ::CTakeDamageInfo::*GetBaseDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetBaseDamage"
                , GetBaseDamage_function_type( &::CTakeDamageInfo::GetBaseDamage ) );
        
        }
        { //::CTakeDamageInfo::GetDamage
        
            typedef float ( ::CTakeDamageInfo::*GetDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamage"
                , GetDamage_function_type( &::CTakeDamageInfo::GetDamage ) );
        
        }
        { //::CTakeDamageInfo::GetDamageCustom
        
            typedef int ( ::CTakeDamageInfo::*GetDamageCustom_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageCustom"
                , GetDamageCustom_function_type( &::CTakeDamageInfo::GetDamageCustom ) );
        
        }
        { //::CTakeDamageInfo::GetDamageForce
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetDamageForce_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageForce"
                , GetDamageForce_function_type( &::CTakeDamageInfo::GetDamageForce ) );
        
        }
        { //::CTakeDamageInfo::GetDamagePosition
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetDamagePosition_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamagePosition"
                , GetDamagePosition_function_type( &::CTakeDamageInfo::GetDamagePosition ) );
        
        }
        { //::CTakeDamageInfo::GetDamageStats
        
            typedef int ( ::CTakeDamageInfo::*GetDamageStats_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageStats"
                , GetDamageStats_function_type( &::CTakeDamageInfo::GetDamageStats ) );
        
        }
        { //::CTakeDamageInfo::GetDamageType
        
            typedef int ( ::CTakeDamageInfo::*GetDamageType_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageType"
                , GetDamageType_function_type( &::CTakeDamageInfo::GetDamageType ) );
        
        }
        { //::CTakeDamageInfo::GetInflictor
        
            typedef ::C_BaseEntity * ( ::CTakeDamageInfo::*GetInflictor_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetInflictor"
                , GetInflictor_function_type( &::CTakeDamageInfo::GetInflictor )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::GetMaxDamage
        
            typedef float ( ::CTakeDamageInfo::*GetMaxDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetMaxDamage"
                , GetMaxDamage_function_type( &::CTakeDamageInfo::GetMaxDamage ) );
        
        }
        { //::CTakeDamageInfo::GetRadius
        
            typedef float ( ::CTakeDamageInfo::*GetRadius_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetRadius"
                , GetRadius_function_type( &::CTakeDamageInfo::GetRadius ) );
        
        }
        { //::CTakeDamageInfo::GetReportedPosition
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetReportedPosition_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetReportedPosition"
                , GetReportedPosition_function_type( &::CTakeDamageInfo::GetReportedPosition ) );
        
        }
        { //::CTakeDamageInfo::GetWeapon
        
            typedef ::C_BaseEntity * ( ::CTakeDamageInfo::*GetWeapon_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetWeapon"
                , GetWeapon_function_type( &::CTakeDamageInfo::GetWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::IsForceFriendlyFire
        
            typedef bool ( ::CTakeDamageInfo::*IsForceFriendlyFire_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "IsForceFriendlyFire"
                , IsForceFriendlyFire_function_type( &::CTakeDamageInfo::IsForceFriendlyFire ) );
        
        }
        { //::CTakeDamageInfo::ScaleDamage
        
            typedef void ( ::CTakeDamageInfo::*ScaleDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "ScaleDamage"
                , ScaleDamage_function_type( &::CTakeDamageInfo::ScaleDamage )
                , ( bp::arg("flScaleAmount") ) );
        
        }
        { //::CTakeDamageInfo::ScaleDamageForce
        
            typedef void ( ::CTakeDamageInfo::*ScaleDamageForce_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "ScaleDamageForce"
                , ScaleDamageForce_function_type( &::CTakeDamageInfo::ScaleDamageForce )
                , ( bp::arg("flScaleAmount") ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::C_BaseEntity *,::C_BaseEntity *,float,int,int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::C_BaseEntity *,::C_BaseEntity *,::C_BaseEntity *,float,int,int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::C_BaseEntity *,::C_BaseEntity *,::Vector const &,::Vector const &,float,int,int,::Vector * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::C_BaseEntity *,::C_BaseEntity *,::C_BaseEntity *,::Vector const &,::Vector const &,float,int,int,::Vector * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() ) );
        
        }
        { //::CTakeDamageInfo::SetAmmoType
        
            typedef void ( ::CTakeDamageInfo::*SetAmmoType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetAmmoType"
                , SetAmmoType_function_type( &::CTakeDamageInfo::SetAmmoType )
                , ( bp::arg("iAmmoType") ) );
        
        }
        { //::CTakeDamageInfo::SetAttacker
        
            typedef void ( ::CTakeDamageInfo::*SetAttacker_function_type )( ::C_BaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetAttacker"
                , SetAttacker_function_type( &::CTakeDamageInfo::SetAttacker )
                , ( bp::arg("pAttacker") ) );
        
        }
        { //::CTakeDamageInfo::SetDamage
        
            typedef void ( ::CTakeDamageInfo::*SetDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamage"
                , SetDamage_function_type( &::CTakeDamageInfo::SetDamage )
                , ( bp::arg("flDamage") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageCustom
        
            typedef void ( ::CTakeDamageInfo::*SetDamageCustom_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageCustom"
                , SetDamageCustom_function_type( &::CTakeDamageInfo::SetDamageCustom )
                , ( bp::arg("iDamageCustom") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageForce
        
            typedef void ( ::CTakeDamageInfo::*SetDamageForce_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageForce"
                , SetDamageForce_function_type( &::CTakeDamageInfo::SetDamageForce )
                , ( bp::arg("damageForce") ) );
        
        }
        { //::CTakeDamageInfo::SetDamagePosition
        
            typedef void ( ::CTakeDamageInfo::*SetDamagePosition_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamagePosition"
                , SetDamagePosition_function_type( &::CTakeDamageInfo::SetDamagePosition )
                , ( bp::arg("damagePosition") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageStats
        
            typedef void ( ::CTakeDamageInfo::*SetDamageStats_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageStats"
                , SetDamageStats_function_type( &::CTakeDamageInfo::SetDamageStats )
                , ( bp::arg("iDamageCustom") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageType
        
            typedef void ( ::CTakeDamageInfo::*SetDamageType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageType"
                , SetDamageType_function_type( &::CTakeDamageInfo::SetDamageType )
                , ( bp::arg("bitsDamageType") ) );
        
        }
        { //::CTakeDamageInfo::SetForceFriendlyFire
        
            typedef void ( ::CTakeDamageInfo::*SetForceFriendlyFire_function_type )( bool ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetForceFriendlyFire"
                , SetForceFriendlyFire_function_type( &::CTakeDamageInfo::SetForceFriendlyFire )
                , ( bp::arg("bValue") ) );
        
        }
        { //::CTakeDamageInfo::SetInflictor
        
            typedef void ( ::CTakeDamageInfo::*SetInflictor_function_type )( ::C_BaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetInflictor"
                , SetInflictor_function_type( &::CTakeDamageInfo::SetInflictor )
                , ( bp::arg("pInflictor") ) );
        
        }
        { //::CTakeDamageInfo::SetMaxDamage
        
            typedef void ( ::CTakeDamageInfo::*SetMaxDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetMaxDamage"
                , SetMaxDamage_function_type( &::CTakeDamageInfo::SetMaxDamage )
                , ( bp::arg("flMaxDamage") ) );
        
        }
        { //::CTakeDamageInfo::SetRadius
        
            typedef void ( ::CTakeDamageInfo::*SetRadius_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetRadius"
                , SetRadius_function_type( &::CTakeDamageInfo::SetRadius )
                , ( bp::arg("flRadius") ) );
        
        }
        { //::CTakeDamageInfo::SetReportedPosition
        
            typedef void ( ::CTakeDamageInfo::*SetReportedPosition_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetReportedPosition"
                , SetReportedPosition_function_type( &::CTakeDamageInfo::SetReportedPosition )
                , ( bp::arg("reportedPosition") ) );
        
        }
        { //::CTakeDamageInfo::SetWeapon
        
            typedef void ( ::CTakeDamageInfo::*SetWeapon_function_type )( ::C_BaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetWeapon"
                , SetWeapon_function_type( &::CTakeDamageInfo::SetWeapon )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CTakeDamageInfo::SubtractDamage
        
            typedef void ( ::CTakeDamageInfo::*SubtractDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SubtractDamage"
                , SubtractDamage_function_type( &::CTakeDamageInfo::SubtractDamage )
                , ( bp::arg("flSubtractAmount") ) );
        
        }
        CTakeDamageInfo_exposer.staticmethod( "DebugGetDamageTypeString" );
        { //property "attributes"[fget=::CTakeDamageInfo::GetAttributes, fset=::CTakeDamageInfo::SetAttributes]
        
            typedef ::boost::python::api::object ( ::CTakeDamageInfo::*fget )(  ) const;
            typedef void ( ::CTakeDamageInfo::*fset )( ::boost::python::api::object ) ;
            
            CTakeDamageInfo_exposer.add_property( 
                "attributes"
                , fget( &::CTakeDamageInfo::GetAttributes )
                , fset( &::CTakeDamageInfo::SetAttributes ) );
        
        }
    }

    bp::class_< CMultiDamage, bp::bases< CTakeDamageInfo > >( "CMultiDamage", bp::init< >() )    
        .def( 
            "GetTarget"
            , (::C_BaseEntity * ( ::CMultiDamage::* )(  ) const)( &::CMultiDamage::GetTarget )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "Init"
            , (void ( ::CMultiDamage::* )( ::C_BaseEntity *,::C_BaseEntity *,::C_BaseEntity *,::C_BaseEntity *,::Vector const &,::Vector const &,::Vector const &,float,int,int ) )( &::CMultiDamage::Init )
            , ( bp::arg("pTarget"), bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("reportedPosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType") ) )    
        .def( 
            "IsClear"
            , (bool ( ::CMultiDamage::* )(  ) )( &::CMultiDamage::IsClear ) )    
        .def( 
            "SetTarget"
            , (void ( ::CMultiDamage::* )( ::C_BaseEntity * ) )( &::CMultiDamage::SetTarget )
            , ( bp::arg("pTarget") ) );

    { //::CShotManipulator
        typedef bp::class_< CShotManipulator > CShotManipulator_exposer_t;
        CShotManipulator_exposer_t CShotManipulator_exposer = CShotManipulator_exposer_t( "CShotManipulator", bp::init< Vector const & >(( bp::arg("vecForward") )) );
        bp::scope CShotManipulator_scope( CShotManipulator_exposer );
        bp::implicitly_convertible< Vector const &, CShotManipulator >();
        { //::CShotManipulator::ApplyAngularSpread
        
            typedef ::Vector const & ( ::CShotManipulator::*ApplyAngularSpread_function_type )( ::Vector const &,float ) ;
            
            CShotManipulator_exposer.def( 
                "ApplyAngularSpread"
                , ApplyAngularSpread_function_type( &::CShotManipulator::ApplyAngularSpread )
                , ( bp::arg("vecSpread"), bp::arg("bias")=1.0e+0 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::ApplySpread
        
            typedef ::Vector const & ( ::CShotManipulator::*ApplySpread_function_type )( ::Vector const &,float ) ;
            
            CShotManipulator_exposer.def( 
                "ApplySpread"
                , ApplySpread_function_type( &::CShotManipulator::ApplySpread )
                , ( bp::arg("vecSpread"), bp::arg("bias")=1.0e+0 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetResult
        
            typedef ::Vector const & ( ::CShotManipulator::*GetResult_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetResult"
                , GetResult_function_type( &::CShotManipulator::GetResult )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetRightVector
        
            typedef ::Vector const & ( ::CShotManipulator::*GetRightVector_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetRightVector"
                , GetRightVector_function_type( &::CShotManipulator::GetRightVector )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetShotDirection
        
            typedef ::Vector const & ( ::CShotManipulator::*GetShotDirection_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetShotDirection"
                , GetShotDirection_function_type( &::CShotManipulator::GetShotDirection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetUpVector
        
            typedef ::Vector const & ( ::CShotManipulator::*GetUpVector_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetUpVector"
                , GetUpVector_function_type( &::CShotManipulator::GetUpVector )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::SetShootDir
        
            typedef void ( ::CShotManipulator::*SetShootDir_function_type )( ::Vector const & ) ;
            
            CShotManipulator_exposer.def( 
                "SetShootDir"
                , SetShootDir_function_type( &::CShotManipulator::SetShootDir )
                , ( bp::arg("vecForward") ) );
        
        }
    }

    { //::CUserCmd
        typedef bp::class_< CUserCmd > CUserCmd_exposer_t;
        CUserCmd_exposer_t CUserCmd_exposer = CUserCmd_exposer_t( "CUserCmd" );
        bp::scope CUserCmd_scope( CUserCmd_exposer );
        CUserCmd_exposer.def_readwrite( "buttons", &CUserCmd::buttons );
        CUserCmd_exposer.def_readwrite( "command_number", &CUserCmd::command_number );
        CUserCmd_exposer.def_readwrite( "directmove", &CUserCmd::directmove );
        CUserCmd_exposer.def_readwrite( "forwardmove", &CUserCmd::forwardmove );
        CUserCmd_exposer.def_readwrite( "hasbeenpredicted", &CUserCmd::hasbeenpredicted );
        CUserCmd_exposer.def_readwrite( "headangles", &CUserCmd::headangles );
        CUserCmd_exposer.def_readwrite( "headoffset", &CUserCmd::headoffset );
        CUserCmd_exposer.def_readwrite( "impulse", &CUserCmd::impulse );
        CUserCmd_exposer.def_readwrite( "cameraoffset", &CUserCmd::m_vCameraOffset );
        CUserCmd_exposer.def_readwrite( "mouseaim", &CUserCmd::m_vMouseAim );
        CUserCmd_exposer.def_readwrite( "mousedx", &CUserCmd::mousedx );
        CUserCmd_exposer.def_readwrite( "mousedy", &CUserCmd::mousedy );
        CUserCmd_exposer.def_readwrite( "random_seed", &CUserCmd::random_seed );
        CUserCmd_exposer.def_readwrite( "sidemove", &CUserCmd::sidemove );
        CUserCmd_exposer.def_readwrite( "tick_count", &CUserCmd::tick_count );
        CUserCmd_exposer.def_readwrite( "upmove", &CUserCmd::upmove );
        CUserCmd_exposer.def_readwrite( "vecmovetoposition", &CUserCmd::vecmovetoposition );
        CUserCmd_exposer.def_readwrite( "viewangles", &CUserCmd::viewangles );
        CUserCmd_exposer.def_readwrite( "weaponselect", &CUserCmd::weaponselect );
        CUserCmd_exposer.def_readwrite( "weaponsubtype", &CUserCmd::weaponsubtype );
    }

    bp::class_< ClientClass >( "ClientClass", bp::no_init )    
        .def( 
            "GetName"
            , (char const * ( ::ClientClass::* )(  ) )( &::ClientClass::GetName ) );

    bp::class_< FireBulletsInfo_t_wrapper >( "FireBulletsInfo_t", bp::init< >() )    
        .def( bp::init< int, Vector const &, Vector const &, Vector const &, float, int, bp::optional< bool > >(( bp::arg("nShots"), bp::arg("vecSrc"), bp::arg("vecDir"), bp::arg("vecSpread"), bp::arg("flDistance"), bp::arg("nAmmoType"), bp::arg("bPrimaryAttack")=(bool)(true) )) )    
        .def_readwrite( "attributes", &FireBulletsInfo_t::m_Attributes )    
        .def_readwrite( "primaryattack", &FireBulletsInfo_t::m_bPrimaryAttack )    
        .def_readwrite( "damage", &FireBulletsInfo_t::m_flDamage )    
        .def_readwrite( "damageforcescale", &FireBulletsInfo_t::m_flDamageForceScale )    
        .def_readwrite( "distance", &FireBulletsInfo_t::m_flDistance )    
        .def_readwrite( "playerdamage", &FireBulletsInfo_t::m_flPlayerDamage )    
        .def_readwrite( "ammotype", &FireBulletsInfo_t::m_iAmmoType )    
        .def_readwrite( "shots", &FireBulletsInfo_t::m_iShots )    
        .def_readwrite( "tracerfreq", &FireBulletsInfo_t::m_iTracerFreq )    
        .def_readwrite( "flags", &FireBulletsInfo_t::m_nFlags )    
        .add_property( "additionalignoreent"
                    , bp::make_function( (::C_BaseEntity * (*)( ::FireBulletsInfo_t const & ))(&FireBulletsInfo_t_wrapper::get_m_pAdditionalIgnoreEnt), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::FireBulletsInfo_t &,::C_BaseEntity * ))(&FireBulletsInfo_t_wrapper::set_m_pAdditionalIgnoreEnt), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "attacker"
                    , bp::make_function( (::C_BaseEntity * (*)( ::FireBulletsInfo_t const & ))(&FireBulletsInfo_t_wrapper::get_m_pAttacker), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::FireBulletsInfo_t &,::C_BaseEntity * ))(&FireBulletsInfo_t_wrapper::set_m_pAttacker), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "vecdirshooting", &FireBulletsInfo_t::m_vecDirShooting )    
        .def_readwrite( "vecspread", &FireBulletsInfo_t::m_vecSpread )    
        .def_readwrite( "vecsrc", &FireBulletsInfo_t::m_vecSrc );

    bp::class_< IMouse_wrapper, boost::noncopyable >( "IMouseDoNotUse" )    
        .def( 
            "GetCursor"
            , bp::pure_virtual( (long unsigned int ( ::IMouse::* )(  ) )(&::IMouse::GetCursor) ) )    
        .def( 
            "GetIMouse"
            , (::IMouse * ( ::IMouse::* )(  ) )(&::IMouse::GetIMouse)
            , (::IMouse * ( IMouse_wrapper::* )(  ) )(&IMouse_wrapper::default_GetIMouse)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "OnClickLeftDoublePressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickLeftDoublePressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftPressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickLeftPressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftReleased"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickLeftReleased) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightDoublePressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickRightDoublePressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightPressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickRightPressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightReleased"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnClickRightReleased) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorEntered"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnCursorEntered) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorExited"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::C_HL2WarsPlayer * ) )(&::IMouse::OnCursorExited) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnHoverPaint"
            , bp::pure_virtual( (void ( ::IMouse::* )(  ) )(&::IMouse::OnHoverPaint) ) );

    bp::class_< IRestore, boost::noncopyable >( "IRestore", bp::no_init );

    bp::class_< ISave, boost::noncopyable >( "ISave", bp::no_init );

    { //::MouseTraceData_t
        typedef bp::class_< MouseTraceData_t > MouseTraceData_exposer_t;
        MouseTraceData_exposer_t MouseTraceData_exposer = MouseTraceData_exposer_t( "MouseTraceData", bp::init< >() );
        bp::scope MouseTraceData_scope( MouseTraceData_exposer );
        { //::MouseTraceData_t::Clear
        
            typedef void ( ::MouseTraceData_t::*Clear_function_type )(  ) ;
            
            MouseTraceData_exposer.def( 
                "Clear"
                , Clear_function_type( &::MouseTraceData_t::Clear ) );
        
        }
        MouseTraceData_exposer.def_readwrite( "x", &MouseTraceData_t::m_iX );
        MouseTraceData_exposer.def_readwrite( "y", &MouseTraceData_t::m_iY );
        MouseTraceData_exposer.def_readwrite( "m_nHitBox", &MouseTraceData_t::m_nHitBox );
        MouseTraceData_exposer.def_readwrite( "endpos", &MouseTraceData_t::m_vEndPos );
        MouseTraceData_exposer.def_readwrite( "normal", &MouseTraceData_t::m_vNormal );
        MouseTraceData_exposer.def_readwrite( "startpos", &MouseTraceData_t::m_vStartPos );
        MouseTraceData_exposer.def_readwrite( "groundendpos", &MouseTraceData_t::m_vWorldOnlyEndPos );
        MouseTraceData_exposer.def_readwrite( "groundnormal", &MouseTraceData_t::m_vWorldOnlyNormal );
        { //property "ent"[fget=::MouseTraceData_t::GetEnt, fset=::MouseTraceData_t::SetEnt]
        
            typedef ::C_BaseEntity * ( ::MouseTraceData_t::*fget )(  ) ;
            typedef void ( ::MouseTraceData_t::*fset )( ::C_BaseEntity * ) ;
            
            MouseTraceData_exposer.add_property( 
                "ent"
                , bp::make_function( 
                      fget( &::MouseTraceData_t::GetEnt )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::MouseTraceData_t::SetEnt ) );
        
        }
    }

    bp::class_< NetworkedClass >( "NetworkedClass", bp::init< char const *, bp::api::object, bp::optional< char const * > >(( bp::arg("pNetworkName"), bp::arg("cls_type"), bp::arg("pClientModuleName")=bp::object() )) )    
        .def( 
            "AttachClientClass"
            , (void ( ::NetworkedClass::* )( ::PyClientClassBase * ) )( &::NetworkedClass::AttachClientClass )
            , ( bp::arg("pClientClass") ) )    
        .def_readwrite( "m_pyClass", &NetworkedClass::m_pyClass );

    bp::class_< PyEntityFactory >( "EntityFactory", bp::no_init )    
        .def( bp::init< char const *, bp::api::object >(( bp::arg("pClassName"), bp::arg("PyClass") )) );

    bp::class_< PyMouse_wrapper, bp::bases< IMouse > >( "IMouse" )    
        .def( 
            "GetCursor"
            , (long unsigned int ( ::PyMouse::* )(  ) )(&::PyMouse::GetCursor)
            , (long unsigned int ( PyMouse_wrapper::* )(  ) )(&PyMouse_wrapper::default_GetCursor) )    
        .def( 
            "OnClickLeftDoublePressed"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickLeftDoublePressed)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftDoublePressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftPressed"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickLeftPressed)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftPressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftReleased"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickLeftReleased)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftReleased)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightDoublePressed"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickRightDoublePressed)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightDoublePressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightPressed"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickRightPressed)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightPressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightReleased"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnClickRightReleased)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightReleased)
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorEntered"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnCursorEntered)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnCursorEntered)
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorExited"
            , (void ( ::PyMouse::* )( ::C_HL2WarsPlayer * ) )(&::PyMouse::OnCursorExited)
            , (void ( PyMouse_wrapper::* )( ::C_HL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnCursorExited)
            , ( bp::arg("player") ) )    
        .def( 
            "OnHoverPaint"
            , (void ( ::PyMouse::* )(  ) )(&::PyMouse::OnHoverPaint)
            , (void ( PyMouse_wrapper::* )(  ) )(&PyMouse_wrapper::default_OnHoverPaint) )    
        .def( 
            "GetIMouse"
            , (::IMouse * ( ::IMouse::* )(  ) )(&::IMouse::GetIMouse)
            , (::IMouse * ( PyMouse_wrapper::* )(  ) )(&PyMouse_wrapper::default_GetIMouse)
            , bp::return_value_policy< bp::return_by_value >() );

    { //::SpatializationInfo_t
        typedef bp::class_< SpatializationInfo_t > SpatializationInfo_t_exposer_t;
        SpatializationInfo_t_exposer_t SpatializationInfo_t_exposer = SpatializationInfo_t_exposer_t( "SpatializationInfo_t" );
        bp::scope SpatializationInfo_t_scope( SpatializationInfo_t_exposer );
        bp::enum_< SpatializationInfo_t::SPATIALIZATIONTYPE>("SPATIALIZATIONTYPE")
            .value("SI_INCREATION", SpatializationInfo_t::SI_INCREATION)
            .value("SI_INSPATIALIZATION", SpatializationInfo_t::SI_INSPATIALIZATION)
            .export_values()
            ;
        SpatializationInfo_t_exposer.def_readwrite( "info", &SpatializationInfo_t::info );
        SpatializationInfo_t_exposer.def_readwrite( "type", &SpatializationInfo_t::type );
    }

    bp::class_< animevent_t_wrapper >( "animevent_t" )    
        .def_readwrite( "_event_highword", &animevent_t::_event_highword )    
        .def_readwrite( "event_newsystem", &animevent_t::event_newsystem )    
        .def( 
            "Event"
            , (int ( ::animevent_t::* )(  ) const)( &::animevent_t::Event ) )    
        .def( 
            "Event"
            , (void ( ::animevent_t::* )( int ) )( &::animevent_t::Event )
            , ( bp::arg("nEvent") ) )    
        .def( 
            "Event_OldSystem"
            , (int ( ::animevent_t::* )(  ) const)( &::animevent_t::Event_OldSystem ) )    
        .def( 
            "Event_OldSystem"
            , (void ( ::animevent_t::* )( int ) )( &::animevent_t::Event_OldSystem )
            , ( bp::arg("nEvent") ) )    
        .def_readwrite( "_event_lowword", &animevent_t::_event_lowword )    
        .def_readwrite( "cycle", &animevent_t::cycle )    
        .def_readwrite( "eventtime", &animevent_t::eventtime )    
        .def_readwrite( "m_bHandledByScript", &animevent_t::m_bHandledByScript )    
        .add_property( "pSource"
                    , bp::make_function( (::C_BaseAnimating * (*)( ::animevent_t const & ))(&animevent_t_wrapper::get_pSource), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::animevent_t &,::C_BaseAnimating * ))(&animevent_t_wrapper::set_pSource), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "type", &animevent_t::type )    
        .add_property("options"
            , bp::make_function( (bp::object (*)( ::animevent_t & ))(&animevent_t_wrapper::get_options) ) );

    { //::breakablepropparams_t
        typedef bp::class_< breakablepropparams_t_wrapper, boost::noncopyable > breakablepropparams_t_exposer_t;
        breakablepropparams_t_exposer_t breakablepropparams_t_exposer = breakablepropparams_t_exposer_t( "breakablepropparams_t", bp::init< Vector const &, QAngle const &, Vector const &, AngularImpulse const & >(( bp::arg("_origin"), bp::arg("_angles"), bp::arg("_velocity"), bp::arg("_angularVelocity") )) );
        bp::scope breakablepropparams_t_scope( breakablepropparams_t_exposer );
        breakablepropparams_t_exposer.def( "get_angles"
                , (::QAngle const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_angles)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def( "get_angularVelocity"
                , (::AngularImpulse const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_angularVelocity)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def_readwrite( "defBurstScale", &breakablepropparams_t::defBurstScale );
        breakablepropparams_t_exposer.def_readwrite( "defCollisionGroup", &breakablepropparams_t::defCollisionGroup );
        breakablepropparams_t_exposer.def_readwrite( "impactEnergyScale", &breakablepropparams_t::impactEnergyScale );
        breakablepropparams_t_exposer.def( "get_origin"
                , (::Vector const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_origin)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def( "get_velocity"
                , (::Vector const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_velocity)
                , bp::return_value_policy< bp::copy_const_reference >() );
    }

    { //::solid_t
        typedef bp::class_< solid_t_wrapper > solid_t_exposer_t;
        solid_t_exposer_t solid_t_exposer = solid_t_exposer_t( "solid_t" );
        bp::scope solid_t_scope( solid_t_exposer );
        solid_t_exposer.def_readwrite( "contents", &solid_t::contents );
        solid_t_exposer.def_readwrite( "index", &solid_t::index );
        solid_t_exposer.def_readwrite( "massCenterOverride", &solid_t::massCenterOverride );
        pyplusplus::containers::static_sized::register_array_1< char, 512 >( "__array_1_char_512" );
        { //solid_t::name [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "name"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_name_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        solid_t_exposer.def_readwrite( "params", &solid_t::params );
        { //solid_t::parent [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "parent"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_parent_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //solid_t::surfaceprop [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "surfaceprop"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_surfaceprop_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::AddMultiDamage
    
        typedef void ( *AddMultiDamage_function_type )( ::CTakeDamageInfo const &,::C_BaseEntity * );
        
        bp::def( 
            "AddMultiDamage"
            , AddMultiDamage_function_type( &::AddMultiDamage )
            , ( bp::arg("info"), bp::arg("pEntity") ) );
    
    }

    { //::ApplyMultiDamage
    
        typedef void ( *ApplyMultiDamage_function_type )(  );
        
        bp::def( 
            "ApplyMultiDamage"
            , ApplyMultiDamage_function_type( &::ApplyMultiDamage ) );
    
    }

    { //::CalculateBulletDamageForce
    
        typedef void ( *CalculateBulletDamageForce_function_type )( ::CTakeDamageInfo *,int,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateBulletDamageForce"
            , CalculateBulletDamageForce_function_type( &::CalculateBulletDamageForce )
            , ( bp::arg("info"), bp::arg("iBulletType"), bp::arg("vecBulletDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::CalculateExplosiveDamageForce
    
        typedef void ( *CalculateExplosiveDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateExplosiveDamageForce"
            , CalculateExplosiveDamageForce_function_type( &::CalculateExplosiveDamageForce )
            , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::CalculateMeleeDamageForce
    
        typedef void ( *CalculateMeleeDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateMeleeDamageForce"
            , CalculateMeleeDamageForce_function_type( &::CalculateMeleeDamageForce )
            , ( bp::arg("info"), bp::arg("vecMeleeDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::ClearMultiDamage
    
        typedef void ( *ClearMultiDamage_function_type )(  );
        
        bp::def( 
            "ClearMultiDamage"
            , ClearMultiDamage_function_type( &::ClearMultiDamage ) );
    
    }

    { //::ClientEntityList
    
        typedef ::CClientEntityList & ( *ClientEntityList_function_type )(  );
        
        bp::def( 
            "ClientEntityList"
            , ClientEntityList_function_type( &::ClientEntityList )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::GetAutoMultiplayerPhysicsMode
    
        typedef int ( *GetAutoMultiplayerPhysicsMode_function_type )( ::Vector,float );
        
        bp::def( 
            "GetAutoMultiplayerPhysicsMode"
            , GetAutoMultiplayerPhysicsMode_function_type( &::GetAutoMultiplayerPhysicsMode )
            , ( bp::arg("size"), bp::arg("mass") ) );
    
    }

    { //::GetMassEquivalent
    
        typedef char const * ( *GetMassEquivalent_function_type )( float );
        
        bp::def( 
            "GetMassEquivalent"
            , GetMassEquivalent_function_type( &::GetMassEquivalent )
            , ( bp::arg("flMass") ) );
    
    }

    { //::GuessDamageForce
    
        typedef void ( *GuessDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "GuessDamageForce"
            , GuessDamageForce_function_type( &::GuessDamageForce )
            , ( bp::arg("info"), bp::arg("vecForceDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::ImpulseScale
    
        typedef float ( *ImpulseScale_function_type )( float,float );
        
        bp::def( 
            "ImpulseScale"
            , ImpulseScale_function_type( &::ImpulseScale )
            , ( bp::arg("flTargetMass"), bp::arg("flDesiredSpeed") ) );
    
    }

    { //::PrecacheGibsForModel
    
        typedef void ( *PrecacheGibsForModel_function_type )( int );
        
        bp::def( 
            "PrecacheGibsForModel"
            , PrecacheGibsForModel_function_type( &::PrecacheGibsForModel )
            , ( bp::arg("iModel") ) );
    
    }

    { //::PropBreakableCreateAll
    
        typedef void ( *PropBreakableCreateAll_function_type )( int,::IPhysicsObject *,::Vector const &,::QAngle const &,::Vector const &,::AngularImpulse const &,float,float,int,::C_BaseEntity *,bool );
        
        bp::def( 
            "PropBreakableCreateAll"
            , PropBreakableCreateAll_function_type( &::PropBreakableCreateAll )
            , ( bp::arg("modelindex"), bp::arg("pPhysics"), bp::arg("origin"), bp::arg("angles"), bp::arg("velocity"), bp::arg("angularVelocity"), bp::arg("impactEnergyScale"), bp::arg("burstScale"), bp::arg("collisionGroup"), bp::arg("pEntity")=bp::object(), bp::arg("defaultLocation")=(bool)(true) ) );
    
    }

    { //::PropBreakableCreateAll
    
        typedef void ( *PropBreakableCreateAll_function_type )( int,::IPhysicsObject *,::breakablepropparams_t const &,::C_BaseEntity *,int,bool,bool );
        
        bp::def( 
            "PropBreakableCreateAll"
            , PropBreakableCreateAll_function_type( &::PropBreakableCreateAll )
            , ( bp::arg("modelindex"), bp::arg("pPhysics"), bp::arg("params"), bp::arg("pEntity"), bp::arg("iPrecomputedBreakableCount"), bp::arg("bIgnoreGibLImit"), bp::arg("defaultLocation")=(bool)(true) ) );
    
    }

    { //::PyGetAllClassnames
    
        typedef ::boost::python::list ( *GetAllClassnames_function_type )(  );
        
        bp::def( 
            "GetAllClassnames"
            , GetAllClassnames_function_type( &::PyGetAllClassnames ) );
    
    }

    { //::PyGetClassByClassname
    
        typedef ::boost::python::api::object ( *GetClassByClassname_function_type )( char const * );
        
        bp::def( 
            "GetClassByClassname"
            , GetClassByClassname_function_type( &::PyGetClassByClassname )
            , ( bp::arg("class_name") ) );
    
    }

    ptr_imouse_to_py_imouse();

    { //::PyReadDataDesc
    
        typedef ::boost::python::dict ( *ReadDataDesc_function_type )( ::C_BaseEntity * );
        
        bp::def( 
            "ReadDataDesc"
            , ReadDataDesc_function_type( &::PyReadDataDesc )
            , ( bp::arg("entity") ) );
    
    }
}
#else
#include "__array_1.pypp.hpp"

#include "cbase.h"

#include "takedamageinfo.h"

#include "mathlib/vmatrix.h"

#include "utlvector.h"

#include "shareddefs.h"

#include "util.h"

#include "networkvar.h"

#include "eventqueue.h"

#include "entitylist.h"

#include "takedamageinfo.h"

#include "srcpy_networkvar.h"

#include "soundent.h"

#include "entityoutput.h"

#include "SkyCamera.h"

#include "world.h"

#include "globals.h"

#include "physics_prop_ragdoll.h"

#include "srcpy_srcbuiltins.h"

#include "shared_classnames.h"

#include "npcevent.h"

#include "studio.h"

#include "srcpy_entities.h"

#include "isaverestore.h"

#include "saverestore.h"

#include "mapentities_shared.h"

#include "vcollide_parse.h"

#include "props_shared.h"

#include "beam_shared.h"

#include "shot_manipulator.h"

#include "imouse.h"

#include "hl2wars_player.h"

#include "srcpy_converters_ents.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CBaseEntityOutput_wrapper : CBaseEntityOutput, bp::wrapper< CBaseEntityOutput > {

    CBaseEntityOutput_wrapper( )
    : CBaseEntityOutput( )
      , bp::wrapper< CBaseEntityOutput >(){
        // null constructor
    
    }

};

struct IEntityFindFilter_wrapper : IEntityFindFilter, bp::wrapper< IEntityFindFilter > {

    IEntityFindFilter_wrapper()
    : IEntityFindFilter()
      , bp::wrapper< IEntityFindFilter >(){
        // null constructor
        
    }

    virtual ::CBaseEntity * GetFilterResult(  ){
        bp::override func_GetFilterResult = this->get_override( "GetFilterResult" );
        try {
            return func_GetFilterResult(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual bool ShouldFindEntity( ::CBaseEntity * pEntity ){
        bp::override func_ShouldFindEntity = this->get_override( "ShouldFindEntity" );
        try {
            return func_ShouldFindEntity( pEntity ? pEntity->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

struct CGlobalEntityList_wrapper : CGlobalEntityList, bp::wrapper< CGlobalEntityList > {

    CGlobalEntityList_wrapper( )
    : CGlobalEntityList( )
      , bp::wrapper< CGlobalEntityList >(){
        // null constructor
    
    }

    void OnAddEntity( ::IHandleEntity * pEnt, ::CBaseHandle handle ){
        CGlobalEntityList::OnAddEntity( pEnt, handle );
    }

    void OnRemoveEntity( ::IHandleEntity * pEnt, ::CBaseHandle handle ){
        CGlobalEntityList::OnRemoveEntity( pEnt, handle );
    }

};

struct CPythonSendProxyBase_wrapper : CPythonSendProxyBase, bp::wrapper< CPythonSendProxyBase > {

    CPythonSendProxyBase_wrapper(CPythonSendProxyBase const & arg )
    : CPythonSendProxyBase( arg )
      , bp::wrapper< CPythonSendProxyBase >(){
        // copy constructor
        
    }

    CPythonSendProxyBase_wrapper()
    : CPythonSendProxyBase()
      , bp::wrapper< CPythonSendProxyBase >(){
        // null constructor
        
    }

    virtual bool ShouldSend( ::CBaseEntity * pEnt, int iClient ) {
        PY_OVERRIDE_CHECK( CPythonSendProxyBase, ShouldSend )
        PY_OVERRIDE_LOG( _entitiesmisc, CPythonSendProxyBase, ShouldSend )
        bp::override func_ShouldSend = this->get_override( "ShouldSend" );
        if( func_ShouldSend.ptr() != Py_None )
            try {
                return func_ShouldSend( pEnt ? pEnt->GetPyHandle() : boost::python::object(), iClient );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CPythonSendProxyBase::ShouldSend( pEnt, iClient );
            }
        else
            return this->CPythonSendProxyBase::ShouldSend( pEnt, iClient );
    }
    
    bool default_ShouldSend( ::CBaseEntity * pEnt, int iClient ) {
        return CPythonSendProxyBase::ShouldSend( pEnt, iClient );
    }

};

struct FireBulletsInfo_t_wrapper : FireBulletsInfo_t, bp::wrapper< FireBulletsInfo_t > {

    FireBulletsInfo_t_wrapper(FireBulletsInfo_t const & arg )
    : FireBulletsInfo_t( arg )
      , bp::wrapper< FireBulletsInfo_t >(){
        // copy constructor
        
    }

    FireBulletsInfo_t_wrapper( )
    : FireBulletsInfo_t( )
      , bp::wrapper< FireBulletsInfo_t >(){
        // null constructor
    
    }

    FireBulletsInfo_t_wrapper(int nShots, ::Vector const & vecSrc, ::Vector const & vecDir, ::Vector const & vecSpread, float flDistance, int nAmmoType, bool bPrimaryAttack=true )
    : FireBulletsInfo_t( nShots, vecSrc, vecDir, vecSpread, flDistance, nAmmoType, bPrimaryAttack )
      , bp::wrapper< FireBulletsInfo_t >(){
        // constructor
    
    }

    static ::CBaseEntity * get_m_pAdditionalIgnoreEnt(FireBulletsInfo_t const & inst ){
        return inst.m_pAdditionalIgnoreEnt;
    }
    
    static void set_m_pAdditionalIgnoreEnt( FireBulletsInfo_t & inst, ::CBaseEntity * new_value ){ 
        inst.m_pAdditionalIgnoreEnt = new_value;
    }

    static ::CBaseEntity * get_m_pAttacker(FireBulletsInfo_t const & inst ){
        return inst.m_pAttacker;
    }
    
    static void set_m_pAttacker( FireBulletsInfo_t & inst, ::CBaseEntity * new_value ){ 
        inst.m_pAttacker = new_value;
    }

};

struct IMouse_wrapper : IMouse, bp::wrapper< IMouse > {

    IMouse_wrapper()
    : IMouse()
      , bp::wrapper< IMouse >(){
        // null constructor
        
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( IMouse, GetIMouse )
        PY_OVERRIDE_LOG( _entitiesmisc, IMouse, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->IMouse::GetIMouse(  );
            }
        else
            return this->IMouse::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return IMouse::GetIMouse( );
    }

    virtual void OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        try {
            func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickLeftPressed( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        try {
            func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickLeftReleased( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        try {
            func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightDoublePressed( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        try {
            func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightPressed( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        try {
            func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnClickRightReleased( ::CHL2WarsPlayer * player ){
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        try {
            func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnCursorEntered( ::CHL2WarsPlayer * player ){
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        try {
            func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void OnCursorExited( ::CHL2WarsPlayer * player ){
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        try {
            func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

struct solid_t_wrapper : solid_t, bp::wrapper< solid_t > {

    solid_t_wrapper(solid_t const & arg )
    : solid_t( arg )
      , bp::wrapper< solid_t >(){
        // copy constructor
        
    }

    solid_t_wrapper()
    : solid_t()
      , bp::wrapper< solid_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_name_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.name );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_parent_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.parent );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 512>
    pyplusplus_surfaceprop_wrapper( ::solid_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 512>( inst.surfaceprop );
    }

};

struct PyMouse_wrapper : PyMouse, bp::wrapper< PyMouse > {

    PyMouse_wrapper(PyMouse const & arg )
    : PyMouse( arg )
      , bp::wrapper< PyMouse >(){
        // copy constructor
        
    }

    PyMouse_wrapper()
    : PyMouse()
      , bp::wrapper< PyMouse >(){
        // null constructor
        
    }

    virtual void OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftDoublePressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftDoublePressed )
        bp::override func_OnClickLeftDoublePressed = this->get_override( "OnClickLeftDoublePressed" );
        if( func_OnClickLeftDoublePressed.ptr() != Py_None )
            try {
                func_OnClickLeftDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftDoublePressed( player );
            }
        else
            this->PyMouse::OnClickLeftDoublePressed( player );
    }
    
    void default_OnClickLeftDoublePressed( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickLeftDoublePressed( player );
    }

    virtual void OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftPressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftPressed )
        bp::override func_OnClickLeftPressed = this->get_override( "OnClickLeftPressed" );
        if( func_OnClickLeftPressed.ptr() != Py_None )
            try {
                func_OnClickLeftPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftPressed( player );
            }
        else
            this->PyMouse::OnClickLeftPressed( player );
    }
    
    void default_OnClickLeftPressed( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickLeftPressed( player );
    }

    virtual void OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickLeftReleased )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickLeftReleased )
        bp::override func_OnClickLeftReleased = this->get_override( "OnClickLeftReleased" );
        if( func_OnClickLeftReleased.ptr() != Py_None )
            try {
                func_OnClickLeftReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickLeftReleased( player );
            }
        else
            this->PyMouse::OnClickLeftReleased( player );
    }
    
    void default_OnClickLeftReleased( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickLeftReleased( player );
    }

    virtual void OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightDoublePressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightDoublePressed )
        bp::override func_OnClickRightDoublePressed = this->get_override( "OnClickRightDoublePressed" );
        if( func_OnClickRightDoublePressed.ptr() != Py_None )
            try {
                func_OnClickRightDoublePressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightDoublePressed( player );
            }
        else
            this->PyMouse::OnClickRightDoublePressed( player );
    }
    
    void default_OnClickRightDoublePressed( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickRightDoublePressed( player );
    }

    virtual void OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightPressed )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightPressed )
        bp::override func_OnClickRightPressed = this->get_override( "OnClickRightPressed" );
        if( func_OnClickRightPressed.ptr() != Py_None )
            try {
                func_OnClickRightPressed( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightPressed( player );
            }
        else
            this->PyMouse::OnClickRightPressed( player );
    }
    
    void default_OnClickRightPressed( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickRightPressed( player );
    }

    virtual void OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnClickRightReleased )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnClickRightReleased )
        bp::override func_OnClickRightReleased = this->get_override( "OnClickRightReleased" );
        if( func_OnClickRightReleased.ptr() != Py_None )
            try {
                func_OnClickRightReleased( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnClickRightReleased( player );
            }
        else
            this->PyMouse::OnClickRightReleased( player );
    }
    
    void default_OnClickRightReleased( ::CHL2WarsPlayer * player ) {
        PyMouse::OnClickRightReleased( player );
    }

    virtual void OnCursorEntered( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnCursorEntered )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnCursorEntered( player );
            }
        else
            this->PyMouse::OnCursorEntered( player );
    }
    
    void default_OnCursorEntered( ::CHL2WarsPlayer * player ) {
        PyMouse::OnCursorEntered( player );
    }

    virtual void OnCursorExited( ::CHL2WarsPlayer * player ) {
        PY_OVERRIDE_CHECK( PyMouse, OnCursorExited )
        PY_OVERRIDE_LOG( _entitiesmisc, PyMouse, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited( player ? player->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMouse::OnCursorExited( player );
            }
        else
            this->PyMouse::OnCursorExited( player );
    }
    
    void default_OnCursorExited( ::CHL2WarsPlayer * player ) {
        PyMouse::OnCursorExited( player );
    }

    virtual ::IMouse * GetIMouse(  ) {
        PY_OVERRIDE_CHECK( IMouse, GetIMouse )
        PY_OVERRIDE_LOG( _entitiesmisc, IMouse, GetIMouse )
        bp::override func_GetIMouse = this->get_override( "GetIMouse" );
        if( func_GetIMouse.ptr() != Py_None )
            try {
                return func_GetIMouse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->IMouse::GetIMouse(  );
            }
        else
            return this->IMouse::GetIMouse(  );
    }
    
    ::IMouse * default_GetIMouse(  ) {
        return IMouse::GetIMouse( );
    }

};

struct animevent_t_wrapper : animevent_t, bp::wrapper< animevent_t > {

    animevent_t_wrapper(animevent_t const & arg )
    : animevent_t( arg )
      , bp::wrapper< animevent_t >(){
        // copy constructor
        
    }

    animevent_t_wrapper()
    : animevent_t()
      , bp::wrapper< animevent_t >(){
        // null constructor
        
    }

    static ::CBaseAnimating * get_pSource(animevent_t const & inst ){
        return inst.pSource;
    }
    
    static void set_pSource( animevent_t & inst, ::CBaseAnimating * new_value ){ 
        inst.pSource = new_value;
    }

    static bp::object get_options(animevent_t const & inst){
        return bp::object(inst.options);
    }

};

struct breakablepropparams_t_wrapper : breakablepropparams_t, bp::wrapper< breakablepropparams_t > {

    breakablepropparams_t_wrapper(::Vector const & _origin, ::QAngle const & _angles, ::Vector const & _velocity, ::AngularImpulse const & _angularVelocity )
    : breakablepropparams_t( _origin, _angles, _velocity, _angularVelocity )
      , bp::wrapper< breakablepropparams_t >(){
        // constructor
    
    }

    static ::QAngle const & get_angles( breakablepropparams_t& inst ) {
        return inst.angles;
    }

    static ::AngularImpulse const & get_angularVelocity( breakablepropparams_t& inst ) {
        return inst.angularVelocity;
    }

    static ::Vector const & get_origin( breakablepropparams_t& inst ) {
        return inst.origin;
    }

    static ::Vector const & get_velocity( breakablepropparams_t& inst ) {
        return inst.velocity;
    }

};

struct vcollisionevent_t_wrapper : vcollisionevent_t, bp::wrapper< vcollisionevent_t > {

    vcollisionevent_t_wrapper(vcollisionevent_t const & arg )
    : vcollisionevent_t( arg )
      , bp::wrapper< vcollisionevent_t >(){
        // copy constructor
        
    }

    vcollisionevent_t_wrapper()
    : vcollisionevent_t()
      , bp::wrapper< vcollisionevent_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_surfaceProps_wrapper( ::vcollisionevent_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.surfaceProps );
    }

    static void GetSurfaceNormal( vcollisionevent_t &inst, Vector &out )
    {
       inst.pInternalData->GetSurfaceNormal(out);
    }

    static void GetContactPoint( vcollisionevent_t &inst, Vector &out )
    {
       inst.pInternalData->GetContactPoint(out);
    }

    static void GetContactSpeed( vcollisionevent_t &inst, Vector &out )
    {
       inst.pInternalData->GetContactSpeed(out);
    }

};

struct gamevcollisionevent_t_wrapper : gamevcollisionevent_t, bp::wrapper< gamevcollisionevent_t > {

    gamevcollisionevent_t_wrapper(gamevcollisionevent_t const & arg )
    : gamevcollisionevent_t( arg )
      , bp::wrapper< gamevcollisionevent_t >(){
        // copy constructor
        
    }

    gamevcollisionevent_t_wrapper()
    : gamevcollisionevent_t()
      , bp::wrapper< gamevcollisionevent_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>
    pyplusplus_postVelocity_wrapper( ::gamevcollisionevent_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>( inst.postVelocity );
    }

    static pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>
    pyplusplus_preAngularVelocity_wrapper( ::gamevcollisionevent_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>( inst.preAngularVelocity );
    }

    static pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>
    pyplusplus_preVelocity_wrapper( ::gamevcollisionevent_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::Vector, 2>( inst.preVelocity );
    }

    static bp::object GetEnt( gamevcollisionevent_t &inst, int index )
    {
       if( index < 0 || index > 1 )
           return bp::object();
       return inst.pEntities[index] ? inst.pEntities[index]->GetPyHandle() : bp::object();
    }

};

struct inputdata_t_wrapper : inputdata_t, bp::wrapper< inputdata_t > {

    inputdata_t_wrapper(inputdata_t const & arg )
    : inputdata_t( arg )
      , bp::wrapper< inputdata_t >(){
        // copy constructor
        
    }

    inputdata_t_wrapper()
    : inputdata_t()
      , bp::wrapper< inputdata_t >(){
        // null constructor
        
    }

    static ::CBaseEntity * get_pActivator(inputdata_t const & inst ){
        return inst.pActivator;
    }
    
    static void set_pActivator( inputdata_t & inst, ::CBaseEntity * new_value ){ 
        inst.pActivator = new_value;
    }

    static ::CBaseEntity * get_pCaller(inputdata_t const & inst ){
        return inst.pCaller;
    }
    
    static void set_pCaller( inputdata_t & inst, ::CBaseEntity * new_value ){ 
        inst.pCaller = new_value;
    }

};

struct variant_t_wrapper : variant_t, bp::wrapper< variant_t > {

    variant_t_wrapper(variant_t const & arg )
    : variant_t( arg )
      , bp::wrapper< variant_t >(){
        // copy constructor
        
    }

    variant_t_wrapper( )
    : variant_t( )
      , bp::wrapper< variant_t >(){
        // null constructor
    
    }

    char const * ToString(  ) const {
        return variant_t::ToString(  );
    }

    static bp::object PyEntity( variant_t &inst )
    {
       return inst.Entity() ? inst.Entity()->GetPyHandle() : bp::object();
    }

};

BOOST_PYTHON_MODULE(_entitiesmisc){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< Activity>("Activity")
        .value("ACT_INVALID", ACT_INVALID)
        .value("ACT_RESET", ACT_RESET)
        .value("ACT_IDLE", ACT_IDLE)
        .value("ACT_TRANSITION", ACT_TRANSITION)
        .value("ACT_COVER", ACT_COVER)
        .value("ACT_COVER_MED", ACT_COVER_MED)
        .value("ACT_COVER_LOW", ACT_COVER_LOW)
        .value("ACT_WALK", ACT_WALK)
        .value("ACT_WALK_AIM", ACT_WALK_AIM)
        .value("ACT_WALK_CROUCH", ACT_WALK_CROUCH)
        .value("ACT_WALK_CROUCH_AIM", ACT_WALK_CROUCH_AIM)
        .value("ACT_RUN", ACT_RUN)
        .value("ACT_RUN_AIM", ACT_RUN_AIM)
        .value("ACT_RUN_CROUCH", ACT_RUN_CROUCH)
        .value("ACT_RUN_CROUCH_AIM", ACT_RUN_CROUCH_AIM)
        .value("ACT_RUN_PROTECTED", ACT_RUN_PROTECTED)
        .value("ACT_SCRIPT_CUSTOM_MOVE", ACT_SCRIPT_CUSTOM_MOVE)
        .value("ACT_RANGE_ATTACK1", ACT_RANGE_ATTACK1)
        .value("ACT_RANGE_ATTACK2", ACT_RANGE_ATTACK2)
        .value("ACT_RANGE_ATTACK1_LOW", ACT_RANGE_ATTACK1_LOW)
        .value("ACT_RANGE_ATTACK2_LOW", ACT_RANGE_ATTACK2_LOW)
        .value("ACT_DIESIMPLE", ACT_DIESIMPLE)
        .value("ACT_DIEBACKWARD", ACT_DIEBACKWARD)
        .value("ACT_DIEFORWARD", ACT_DIEFORWARD)
        .value("ACT_DIEVIOLENT", ACT_DIEVIOLENT)
        .value("ACT_DIERAGDOLL", ACT_DIERAGDOLL)
        .value("ACT_FLY", ACT_FLY)
        .value("ACT_HOVER", ACT_HOVER)
        .value("ACT_GLIDE", ACT_GLIDE)
        .value("ACT_SWIM", ACT_SWIM)
        .value("ACT_JUMP", ACT_JUMP)
        .value("ACT_HOP", ACT_HOP)
        .value("ACT_LEAP", ACT_LEAP)
        .value("ACT_LAND", ACT_LAND)
        .value("ACT_CLIMB_UP", ACT_CLIMB_UP)
        .value("ACT_CLIMB_DOWN", ACT_CLIMB_DOWN)
        .value("ACT_CLIMB_DISMOUNT", ACT_CLIMB_DISMOUNT)
        .value("ACT_SHIPLADDER_UP", ACT_SHIPLADDER_UP)
        .value("ACT_SHIPLADDER_DOWN", ACT_SHIPLADDER_DOWN)
        .value("ACT_STRAFE_LEFT", ACT_STRAFE_LEFT)
        .value("ACT_STRAFE_RIGHT", ACT_STRAFE_RIGHT)
        .value("ACT_ROLL_LEFT", ACT_ROLL_LEFT)
        .value("ACT_ROLL_RIGHT", ACT_ROLL_RIGHT)
        .value("ACT_TURN_LEFT", ACT_TURN_LEFT)
        .value("ACT_TURN_RIGHT", ACT_TURN_RIGHT)
        .value("ACT_CROUCH", ACT_CROUCH)
        .value("ACT_CROUCHIDLE", ACT_CROUCHIDLE)
        .value("ACT_STAND", ACT_STAND)
        .value("ACT_USE", ACT_USE)
        .value("ACT_ALIEN_BURROW_IDLE", ACT_ALIEN_BURROW_IDLE)
        .value("ACT_ALIEN_BURROW_OUT", ACT_ALIEN_BURROW_OUT)
        .value("ACT_SIGNAL1", ACT_SIGNAL1)
        .value("ACT_SIGNAL2", ACT_SIGNAL2)
        .value("ACT_SIGNAL3", ACT_SIGNAL3)
        .value("ACT_SIGNAL_ADVANCE", ACT_SIGNAL_ADVANCE)
        .value("ACT_SIGNAL_FORWARD", ACT_SIGNAL_FORWARD)
        .value("ACT_SIGNAL_GROUP", ACT_SIGNAL_GROUP)
        .value("ACT_SIGNAL_HALT", ACT_SIGNAL_HALT)
        .value("ACT_SIGNAL_LEFT", ACT_SIGNAL_LEFT)
        .value("ACT_SIGNAL_RIGHT", ACT_SIGNAL_RIGHT)
        .value("ACT_SIGNAL_TAKECOVER", ACT_SIGNAL_TAKECOVER)
        .value("ACT_LOOKBACK_RIGHT", ACT_LOOKBACK_RIGHT)
        .value("ACT_LOOKBACK_LEFT", ACT_LOOKBACK_LEFT)
        .value("ACT_COWER", ACT_COWER)
        .value("ACT_SMALL_FLINCH", ACT_SMALL_FLINCH)
        .value("ACT_BIG_FLINCH", ACT_BIG_FLINCH)
        .value("ACT_MELEE_ATTACK1", ACT_MELEE_ATTACK1)
        .value("ACT_MELEE_ATTACK2", ACT_MELEE_ATTACK2)
        .value("ACT_RELOAD", ACT_RELOAD)
        .value("ACT_RELOAD_START", ACT_RELOAD_START)
        .value("ACT_RELOAD_FINISH", ACT_RELOAD_FINISH)
        .value("ACT_RELOAD_LOW", ACT_RELOAD_LOW)
        .value("ACT_ARM", ACT_ARM)
        .value("ACT_DISARM", ACT_DISARM)
        .value("ACT_DROP_WEAPON", ACT_DROP_WEAPON)
        .value("ACT_DROP_WEAPON_SHOTGUN", ACT_DROP_WEAPON_SHOTGUN)
        .value("ACT_PICKUP_GROUND", ACT_PICKUP_GROUND)
        .value("ACT_PICKUP_RACK", ACT_PICKUP_RACK)
        .value("ACT_IDLE_ANGRY", ACT_IDLE_ANGRY)
        .value("ACT_IDLE_RELAXED", ACT_IDLE_RELAXED)
        .value("ACT_IDLE_STIMULATED", ACT_IDLE_STIMULATED)
        .value("ACT_IDLE_AGITATED", ACT_IDLE_AGITATED)
        .value("ACT_IDLE_STEALTH", ACT_IDLE_STEALTH)
        .value("ACT_IDLE_HURT", ACT_IDLE_HURT)
        .value("ACT_WALK_RELAXED", ACT_WALK_RELAXED)
        .value("ACT_WALK_STIMULATED", ACT_WALK_STIMULATED)
        .value("ACT_WALK_AGITATED", ACT_WALK_AGITATED)
        .value("ACT_WALK_STEALTH", ACT_WALK_STEALTH)
        .value("ACT_RUN_RELAXED", ACT_RUN_RELAXED)
        .value("ACT_RUN_STIMULATED", ACT_RUN_STIMULATED)
        .value("ACT_RUN_AGITATED", ACT_RUN_AGITATED)
        .value("ACT_RUN_STEALTH", ACT_RUN_STEALTH)
        .value("ACT_IDLE_AIM_RELAXED", ACT_IDLE_AIM_RELAXED)
        .value("ACT_IDLE_AIM_STIMULATED", ACT_IDLE_AIM_STIMULATED)
        .value("ACT_IDLE_AIM_AGITATED", ACT_IDLE_AIM_AGITATED)
        .value("ACT_IDLE_AIM_STEALTH", ACT_IDLE_AIM_STEALTH)
        .value("ACT_WALK_AIM_RELAXED", ACT_WALK_AIM_RELAXED)
        .value("ACT_WALK_AIM_STIMULATED", ACT_WALK_AIM_STIMULATED)
        .value("ACT_WALK_AIM_AGITATED", ACT_WALK_AIM_AGITATED)
        .value("ACT_WALK_AIM_STEALTH", ACT_WALK_AIM_STEALTH)
        .value("ACT_RUN_AIM_RELAXED", ACT_RUN_AIM_RELAXED)
        .value("ACT_RUN_AIM_STIMULATED", ACT_RUN_AIM_STIMULATED)
        .value("ACT_RUN_AIM_AGITATED", ACT_RUN_AIM_AGITATED)
        .value("ACT_RUN_AIM_STEALTH", ACT_RUN_AIM_STEALTH)
        .value("ACT_CROUCHIDLE_STIMULATED", ACT_CROUCHIDLE_STIMULATED)
        .value("ACT_CROUCHIDLE_AIM_STIMULATED", ACT_CROUCHIDLE_AIM_STIMULATED)
        .value("ACT_CROUCHIDLE_AGITATED", ACT_CROUCHIDLE_AGITATED)
        .value("ACT_WALK_HURT", ACT_WALK_HURT)
        .value("ACT_RUN_HURT", ACT_RUN_HURT)
        .value("ACT_SPECIAL_ATTACK1", ACT_SPECIAL_ATTACK1)
        .value("ACT_SPECIAL_ATTACK2", ACT_SPECIAL_ATTACK2)
        .value("ACT_COMBAT_IDLE", ACT_COMBAT_IDLE)
        .value("ACT_WALK_SCARED", ACT_WALK_SCARED)
        .value("ACT_RUN_SCARED", ACT_RUN_SCARED)
        .value("ACT_VICTORY_DANCE", ACT_VICTORY_DANCE)
        .value("ACT_DIE_HEADSHOT", ACT_DIE_HEADSHOT)
        .value("ACT_DIE_CHESTSHOT", ACT_DIE_CHESTSHOT)
        .value("ACT_DIE_GUTSHOT", ACT_DIE_GUTSHOT)
        .value("ACT_DIE_BACKSHOT", ACT_DIE_BACKSHOT)
        .value("ACT_FLINCH_HEAD", ACT_FLINCH_HEAD)
        .value("ACT_FLINCH_CHEST", ACT_FLINCH_CHEST)
        .value("ACT_FLINCH_STOMACH", ACT_FLINCH_STOMACH)
        .value("ACT_FLINCH_LEFTARM", ACT_FLINCH_LEFTARM)
        .value("ACT_FLINCH_RIGHTARM", ACT_FLINCH_RIGHTARM)
        .value("ACT_FLINCH_LEFTLEG", ACT_FLINCH_LEFTLEG)
        .value("ACT_FLINCH_RIGHTLEG", ACT_FLINCH_RIGHTLEG)
        .value("ACT_FLINCH_PHYSICS", ACT_FLINCH_PHYSICS)
        .value("ACT_FLINCH_HEAD_BACK", ACT_FLINCH_HEAD_BACK)
        .value("ACT_FLINCH_CHEST_BACK", ACT_FLINCH_CHEST_BACK)
        .value("ACT_FLINCH_STOMACH_BACK", ACT_FLINCH_STOMACH_BACK)
        .value("ACT_FLINCH_CROUCH_FRONT", ACT_FLINCH_CROUCH_FRONT)
        .value("ACT_FLINCH_CROUCH_BACK", ACT_FLINCH_CROUCH_BACK)
        .value("ACT_FLINCH_CROUCH_LEFT", ACT_FLINCH_CROUCH_LEFT)
        .value("ACT_FLINCH_CROUCH_RIGHT", ACT_FLINCH_CROUCH_RIGHT)
        .value("ACT_IDLE_ON_FIRE", ACT_IDLE_ON_FIRE)
        .value("ACT_WALK_ON_FIRE", ACT_WALK_ON_FIRE)
        .value("ACT_RUN_ON_FIRE", ACT_RUN_ON_FIRE)
        .value("ACT_RAPPEL_LOOP", ACT_RAPPEL_LOOP)
        .value("ACT_180_LEFT", ACT_180_LEFT)
        .value("ACT_180_RIGHT", ACT_180_RIGHT)
        .value("ACT_90_LEFT", ACT_90_LEFT)
        .value("ACT_90_RIGHT", ACT_90_RIGHT)
        .value("ACT_STEP_LEFT", ACT_STEP_LEFT)
        .value("ACT_STEP_RIGHT", ACT_STEP_RIGHT)
        .value("ACT_STEP_BACK", ACT_STEP_BACK)
        .value("ACT_STEP_FORE", ACT_STEP_FORE)
        .value("ACT_GESTURE_RANGE_ATTACK1", ACT_GESTURE_RANGE_ATTACK1)
        .value("ACT_GESTURE_RANGE_ATTACK2", ACT_GESTURE_RANGE_ATTACK2)
        .value("ACT_GESTURE_MELEE_ATTACK1", ACT_GESTURE_MELEE_ATTACK1)
        .value("ACT_GESTURE_MELEE_ATTACK2", ACT_GESTURE_MELEE_ATTACK2)
        .value("ACT_GESTURE_RANGE_ATTACK1_LOW", ACT_GESTURE_RANGE_ATTACK1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK2_LOW", ACT_GESTURE_RANGE_ATTACK2_LOW)
        .value("ACT_MELEE_ATTACK_SWING_GESTURE", ACT_MELEE_ATTACK_SWING_GESTURE)
        .value("ACT_GESTURE_SMALL_FLINCH", ACT_GESTURE_SMALL_FLINCH)
        .value("ACT_GESTURE_BIG_FLINCH", ACT_GESTURE_BIG_FLINCH)
        .value("ACT_GESTURE_FLINCH_BLAST", ACT_GESTURE_FLINCH_BLAST)
        .value("ACT_GESTURE_FLINCH_BLAST_SHOTGUN", ACT_GESTURE_FLINCH_BLAST_SHOTGUN)
        .value("ACT_GESTURE_FLINCH_BLAST_DAMAGED", ACT_GESTURE_FLINCH_BLAST_DAMAGED)
        .value("ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN", ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN)
        .value("ACT_GESTURE_FLINCH_HEAD", ACT_GESTURE_FLINCH_HEAD)
        .value("ACT_GESTURE_FLINCH_CHEST", ACT_GESTURE_FLINCH_CHEST)
        .value("ACT_GESTURE_FLINCH_STOMACH", ACT_GESTURE_FLINCH_STOMACH)
        .value("ACT_GESTURE_FLINCH_LEFTARM", ACT_GESTURE_FLINCH_LEFTARM)
        .value("ACT_GESTURE_FLINCH_RIGHTARM", ACT_GESTURE_FLINCH_RIGHTARM)
        .value("ACT_GESTURE_FLINCH_LEFTLEG", ACT_GESTURE_FLINCH_LEFTLEG)
        .value("ACT_GESTURE_FLINCH_RIGHTLEG", ACT_GESTURE_FLINCH_RIGHTLEG)
        .value("ACT_GESTURE_TURN_LEFT", ACT_GESTURE_TURN_LEFT)
        .value("ACT_GESTURE_TURN_RIGHT", ACT_GESTURE_TURN_RIGHT)
        .value("ACT_GESTURE_TURN_LEFT45", ACT_GESTURE_TURN_LEFT45)
        .value("ACT_GESTURE_TURN_RIGHT45", ACT_GESTURE_TURN_RIGHT45)
        .value("ACT_GESTURE_TURN_LEFT90", ACT_GESTURE_TURN_LEFT90)
        .value("ACT_GESTURE_TURN_RIGHT90", ACT_GESTURE_TURN_RIGHT90)
        .value("ACT_GESTURE_TURN_LEFT45_FLAT", ACT_GESTURE_TURN_LEFT45_FLAT)
        .value("ACT_GESTURE_TURN_RIGHT45_FLAT", ACT_GESTURE_TURN_RIGHT45_FLAT)
        .value("ACT_GESTURE_TURN_LEFT90_FLAT", ACT_GESTURE_TURN_LEFT90_FLAT)
        .value("ACT_GESTURE_TURN_RIGHT90_FLAT", ACT_GESTURE_TURN_RIGHT90_FLAT)
        .value("ACT_BARNACLE_HIT", ACT_BARNACLE_HIT)
        .value("ACT_BARNACLE_PULL", ACT_BARNACLE_PULL)
        .value("ACT_BARNACLE_CHOMP", ACT_BARNACLE_CHOMP)
        .value("ACT_BARNACLE_CHEW", ACT_BARNACLE_CHEW)
        .value("ACT_DO_NOT_DISTURB", ACT_DO_NOT_DISTURB)
        .value("ACT_SPECIFIC_SEQUENCE", ACT_SPECIFIC_SEQUENCE)
        .value("ACT_VM_DRAW", ACT_VM_DRAW)
        .value("ACT_VM_HOLSTER", ACT_VM_HOLSTER)
        .value("ACT_VM_IDLE", ACT_VM_IDLE)
        .value("ACT_VM_FIDGET", ACT_VM_FIDGET)
        .value("ACT_VM_PULLBACK", ACT_VM_PULLBACK)
        .value("ACT_VM_PULLBACK_HIGH", ACT_VM_PULLBACK_HIGH)
        .value("ACT_VM_PULLBACK_LOW", ACT_VM_PULLBACK_LOW)
        .value("ACT_VM_THROW", ACT_VM_THROW)
        .value("ACT_VM_PULLPIN", ACT_VM_PULLPIN)
        .value("ACT_VM_PRIMARYATTACK", ACT_VM_PRIMARYATTACK)
        .value("ACT_VM_SECONDARYATTACK", ACT_VM_SECONDARYATTACK)
        .value("ACT_VM_RELOAD", ACT_VM_RELOAD)
        .value("ACT_VM_DRYFIRE", ACT_VM_DRYFIRE)
        .value("ACT_VM_HITLEFT", ACT_VM_HITLEFT)
        .value("ACT_VM_HITLEFT2", ACT_VM_HITLEFT2)
        .value("ACT_VM_HITRIGHT", ACT_VM_HITRIGHT)
        .value("ACT_VM_HITRIGHT2", ACT_VM_HITRIGHT2)
        .value("ACT_VM_HITCENTER", ACT_VM_HITCENTER)
        .value("ACT_VM_HITCENTER2", ACT_VM_HITCENTER2)
        .value("ACT_VM_MISSLEFT", ACT_VM_MISSLEFT)
        .value("ACT_VM_MISSLEFT2", ACT_VM_MISSLEFT2)
        .value("ACT_VM_MISSRIGHT", ACT_VM_MISSRIGHT)
        .value("ACT_VM_MISSRIGHT2", ACT_VM_MISSRIGHT2)
        .value("ACT_VM_MISSCENTER", ACT_VM_MISSCENTER)
        .value("ACT_VM_MISSCENTER2", ACT_VM_MISSCENTER2)
        .value("ACT_VM_HAULBACK", ACT_VM_HAULBACK)
        .value("ACT_VM_SWINGHARD", ACT_VM_SWINGHARD)
        .value("ACT_VM_SWINGMISS", ACT_VM_SWINGMISS)
        .value("ACT_VM_SWINGHIT", ACT_VM_SWINGHIT)
        .value("ACT_VM_IDLE_TO_LOWERED", ACT_VM_IDLE_TO_LOWERED)
        .value("ACT_VM_IDLE_LOWERED", ACT_VM_IDLE_LOWERED)
        .value("ACT_VM_LOWERED_TO_IDLE", ACT_VM_LOWERED_TO_IDLE)
        .value("ACT_VM_RECOIL1", ACT_VM_RECOIL1)
        .value("ACT_VM_RECOIL2", ACT_VM_RECOIL2)
        .value("ACT_VM_RECOIL3", ACT_VM_RECOIL3)
        .value("ACT_VM_PICKUP", ACT_VM_PICKUP)
        .value("ACT_VM_RELEASE", ACT_VM_RELEASE)
        .value("ACT_VM_ATTACH_SILENCER", ACT_VM_ATTACH_SILENCER)
        .value("ACT_VM_DETACH_SILENCER", ACT_VM_DETACH_SILENCER)
        .value("ACT_SLAM_STICKWALL_IDLE", ACT_SLAM_STICKWALL_IDLE)
        .value("ACT_SLAM_STICKWALL_ND_IDLE", ACT_SLAM_STICKWALL_ND_IDLE)
        .value("ACT_SLAM_STICKWALL_ATTACH", ACT_SLAM_STICKWALL_ATTACH)
        .value("ACT_SLAM_STICKWALL_ATTACH2", ACT_SLAM_STICKWALL_ATTACH2)
        .value("ACT_SLAM_STICKWALL_ND_ATTACH", ACT_SLAM_STICKWALL_ND_ATTACH)
        .value("ACT_SLAM_STICKWALL_ND_ATTACH2", ACT_SLAM_STICKWALL_ND_ATTACH2)
        .value("ACT_SLAM_STICKWALL_DETONATE", ACT_SLAM_STICKWALL_DETONATE)
        .value("ACT_SLAM_STICKWALL_DETONATOR_HOLSTER", ACT_SLAM_STICKWALL_DETONATOR_HOLSTER)
        .value("ACT_SLAM_STICKWALL_DRAW", ACT_SLAM_STICKWALL_DRAW)
        .value("ACT_SLAM_STICKWALL_ND_DRAW", ACT_SLAM_STICKWALL_ND_DRAW)
        .value("ACT_SLAM_STICKWALL_TO_THROW", ACT_SLAM_STICKWALL_TO_THROW)
        .value("ACT_SLAM_STICKWALL_TO_THROW_ND", ACT_SLAM_STICKWALL_TO_THROW_ND)
        .value("ACT_SLAM_STICKWALL_TO_TRIPMINE_ND", ACT_SLAM_STICKWALL_TO_TRIPMINE_ND)
        .value("ACT_SLAM_THROW_IDLE", ACT_SLAM_THROW_IDLE)
        .value("ACT_SLAM_THROW_ND_IDLE", ACT_SLAM_THROW_ND_IDLE)
        .value("ACT_SLAM_THROW_THROW", ACT_SLAM_THROW_THROW)
        .value("ACT_SLAM_THROW_THROW2", ACT_SLAM_THROW_THROW2)
        .value("ACT_SLAM_THROW_THROW_ND", ACT_SLAM_THROW_THROW_ND)
        .value("ACT_SLAM_THROW_THROW_ND2", ACT_SLAM_THROW_THROW_ND2)
        .value("ACT_SLAM_THROW_DRAW", ACT_SLAM_THROW_DRAW)
        .value("ACT_SLAM_THROW_ND_DRAW", ACT_SLAM_THROW_ND_DRAW)
        .value("ACT_SLAM_THROW_TO_STICKWALL", ACT_SLAM_THROW_TO_STICKWALL)
        .value("ACT_SLAM_THROW_TO_STICKWALL_ND", ACT_SLAM_THROW_TO_STICKWALL_ND)
        .value("ACT_SLAM_THROW_DETONATE", ACT_SLAM_THROW_DETONATE)
        .value("ACT_SLAM_THROW_DETONATOR_HOLSTER", ACT_SLAM_THROW_DETONATOR_HOLSTER)
        .value("ACT_SLAM_THROW_TO_TRIPMINE_ND", ACT_SLAM_THROW_TO_TRIPMINE_ND)
        .value("ACT_SLAM_TRIPMINE_IDLE", ACT_SLAM_TRIPMINE_IDLE)
        .value("ACT_SLAM_TRIPMINE_DRAW", ACT_SLAM_TRIPMINE_DRAW)
        .value("ACT_SLAM_TRIPMINE_ATTACH", ACT_SLAM_TRIPMINE_ATTACH)
        .value("ACT_SLAM_TRIPMINE_ATTACH2", ACT_SLAM_TRIPMINE_ATTACH2)
        .value("ACT_SLAM_TRIPMINE_TO_STICKWALL_ND", ACT_SLAM_TRIPMINE_TO_STICKWALL_ND)
        .value("ACT_SLAM_TRIPMINE_TO_THROW_ND", ACT_SLAM_TRIPMINE_TO_THROW_ND)
        .value("ACT_SLAM_DETONATOR_IDLE", ACT_SLAM_DETONATOR_IDLE)
        .value("ACT_SLAM_DETONATOR_DRAW", ACT_SLAM_DETONATOR_DRAW)
        .value("ACT_SLAM_DETONATOR_DETONATE", ACT_SLAM_DETONATOR_DETONATE)
        .value("ACT_SLAM_DETONATOR_HOLSTER", ACT_SLAM_DETONATOR_HOLSTER)
        .value("ACT_SLAM_DETONATOR_STICKWALL_DRAW", ACT_SLAM_DETONATOR_STICKWALL_DRAW)
        .value("ACT_SLAM_DETONATOR_THROW_DRAW", ACT_SLAM_DETONATOR_THROW_DRAW)
        .value("ACT_SHOTGUN_RELOAD_START", ACT_SHOTGUN_RELOAD_START)
        .value("ACT_SHOTGUN_RELOAD_FINISH", ACT_SHOTGUN_RELOAD_FINISH)
        .value("ACT_SHOTGUN_PUMP", ACT_SHOTGUN_PUMP)
        .value("ACT_SMG2_IDLE2", ACT_SMG2_IDLE2)
        .value("ACT_SMG2_FIRE2", ACT_SMG2_FIRE2)
        .value("ACT_SMG2_DRAW2", ACT_SMG2_DRAW2)
        .value("ACT_SMG2_RELOAD2", ACT_SMG2_RELOAD2)
        .value("ACT_SMG2_DRYFIRE2", ACT_SMG2_DRYFIRE2)
        .value("ACT_SMG2_TOAUTO", ACT_SMG2_TOAUTO)
        .value("ACT_SMG2_TOBURST", ACT_SMG2_TOBURST)
        .value("ACT_PHYSCANNON_UPGRADE", ACT_PHYSCANNON_UPGRADE)
        .value("ACT_RANGE_ATTACK_AR1", ACT_RANGE_ATTACK_AR1)
        .value("ACT_RANGE_ATTACK_AR2", ACT_RANGE_ATTACK_AR2)
        .value("ACT_RANGE_ATTACK_AR2_LOW", ACT_RANGE_ATTACK_AR2_LOW)
        .value("ACT_RANGE_ATTACK_AR2_GRENADE", ACT_RANGE_ATTACK_AR2_GRENADE)
        .value("ACT_RANGE_ATTACK_HMG1", ACT_RANGE_ATTACK_HMG1)
        .value("ACT_RANGE_ATTACK_ML", ACT_RANGE_ATTACK_ML)
        .value("ACT_RANGE_ATTACK_SMG1", ACT_RANGE_ATTACK_SMG1)
        .value("ACT_RANGE_ATTACK_SMG1_LOW", ACT_RANGE_ATTACK_SMG1_LOW)
        .value("ACT_RANGE_ATTACK_SMG2", ACT_RANGE_ATTACK_SMG2)
        .value("ACT_RANGE_ATTACK_SHOTGUN", ACT_RANGE_ATTACK_SHOTGUN)
        .value("ACT_RANGE_ATTACK_SHOTGUN_LOW", ACT_RANGE_ATTACK_SHOTGUN_LOW)
        .value("ACT_RANGE_ATTACK_PISTOL", ACT_RANGE_ATTACK_PISTOL)
        .value("ACT_RANGE_ATTACK_PISTOL_LOW", ACT_RANGE_ATTACK_PISTOL_LOW)
        .value("ACT_RANGE_ATTACK_SLAM", ACT_RANGE_ATTACK_SLAM)
        .value("ACT_RANGE_ATTACK_TRIPWIRE", ACT_RANGE_ATTACK_TRIPWIRE)
        .value("ACT_RANGE_ATTACK_THROW", ACT_RANGE_ATTACK_THROW)
        .value("ACT_RANGE_ATTACK_SNIPER_RIFLE", ACT_RANGE_ATTACK_SNIPER_RIFLE)
        .value("ACT_RANGE_ATTACK_RPG", ACT_RANGE_ATTACK_RPG)
        .value("ACT_MELEE_ATTACK_SWING", ACT_MELEE_ATTACK_SWING)
        .value("ACT_RANGE_AIM_LOW", ACT_RANGE_AIM_LOW)
        .value("ACT_RANGE_AIM_SMG1_LOW", ACT_RANGE_AIM_SMG1_LOW)
        .value("ACT_RANGE_AIM_PISTOL_LOW", ACT_RANGE_AIM_PISTOL_LOW)
        .value("ACT_RANGE_AIM_AR2_LOW", ACT_RANGE_AIM_AR2_LOW)
        .value("ACT_COVER_PISTOL_LOW", ACT_COVER_PISTOL_LOW)
        .value("ACT_COVER_SMG1_LOW", ACT_COVER_SMG1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_AR1", ACT_GESTURE_RANGE_ATTACK_AR1)
        .value("ACT_GESTURE_RANGE_ATTACK_AR2", ACT_GESTURE_RANGE_ATTACK_AR2)
        .value("ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE", ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE)
        .value("ACT_GESTURE_RANGE_ATTACK_HMG1", ACT_GESTURE_RANGE_ATTACK_HMG1)
        .value("ACT_GESTURE_RANGE_ATTACK_ML", ACT_GESTURE_RANGE_ATTACK_ML)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG1", ACT_GESTURE_RANGE_ATTACK_SMG1)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG1_LOW", ACT_GESTURE_RANGE_ATTACK_SMG1_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_SMG2", ACT_GESTURE_RANGE_ATTACK_SMG2)
        .value("ACT_GESTURE_RANGE_ATTACK_SHOTGUN", ACT_GESTURE_RANGE_ATTACK_SHOTGUN)
        .value("ACT_GESTURE_RANGE_ATTACK_PISTOL", ACT_GESTURE_RANGE_ATTACK_PISTOL)
        .value("ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW", ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW)
        .value("ACT_GESTURE_RANGE_ATTACK_SLAM", ACT_GESTURE_RANGE_ATTACK_SLAM)
        .value("ACT_GESTURE_RANGE_ATTACK_TRIPWIRE", ACT_GESTURE_RANGE_ATTACK_TRIPWIRE)
        .value("ACT_GESTURE_RANGE_ATTACK_THROW", ACT_GESTURE_RANGE_ATTACK_THROW)
        .value("ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE", ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE)
        .value("ACT_GESTURE_MELEE_ATTACK_SWING", ACT_GESTURE_MELEE_ATTACK_SWING)
        .value("ACT_IDLE_RIFLE", ACT_IDLE_RIFLE)
        .value("ACT_IDLE_SMG1", ACT_IDLE_SMG1)
        .value("ACT_IDLE_ANGRY_SMG1", ACT_IDLE_ANGRY_SMG1)
        .value("ACT_IDLE_PISTOL", ACT_IDLE_PISTOL)
        .value("ACT_IDLE_ANGRY_PISTOL", ACT_IDLE_ANGRY_PISTOL)
        .value("ACT_IDLE_ANGRY_SHOTGUN", ACT_IDLE_ANGRY_SHOTGUN)
        .value("ACT_IDLE_STEALTH_PISTOL", ACT_IDLE_STEALTH_PISTOL)
        .value("ACT_IDLE_PACKAGE", ACT_IDLE_PACKAGE)
        .value("ACT_WALK_PACKAGE", ACT_WALK_PACKAGE)
        .value("ACT_IDLE_SUITCASE", ACT_IDLE_SUITCASE)
        .value("ACT_WALK_SUITCASE", ACT_WALK_SUITCASE)
        .value("ACT_IDLE_SMG1_RELAXED", ACT_IDLE_SMG1_RELAXED)
        .value("ACT_IDLE_SMG1_STIMULATED", ACT_IDLE_SMG1_STIMULATED)
        .value("ACT_WALK_RIFLE_RELAXED", ACT_WALK_RIFLE_RELAXED)
        .value("ACT_RUN_RIFLE_RELAXED", ACT_RUN_RIFLE_RELAXED)
        .value("ACT_WALK_RIFLE_STIMULATED", ACT_WALK_RIFLE_STIMULATED)
        .value("ACT_RUN_RIFLE_STIMULATED", ACT_RUN_RIFLE_STIMULATED)
        .value("ACT_IDLE_AIM_RIFLE_STIMULATED", ACT_IDLE_AIM_RIFLE_STIMULATED)
        .value("ACT_WALK_AIM_RIFLE_STIMULATED", ACT_WALK_AIM_RIFLE_STIMULATED)
        .value("ACT_RUN_AIM_RIFLE_STIMULATED", ACT_RUN_AIM_RIFLE_STIMULATED)
        .value("ACT_IDLE_SHOTGUN_RELAXED", ACT_IDLE_SHOTGUN_RELAXED)
        .value("ACT_IDLE_SHOTGUN_STIMULATED", ACT_IDLE_SHOTGUN_STIMULATED)
        .value("ACT_IDLE_SHOTGUN_AGITATED", ACT_IDLE_SHOTGUN_AGITATED)
        .value("ACT_WALK_ANGRY", ACT_WALK_ANGRY)
        .value("ACT_POLICE_HARASS1", ACT_POLICE_HARASS1)
        .value("ACT_POLICE_HARASS2", ACT_POLICE_HARASS2)
        .value("ACT_IDLE_MANNEDGUN", ACT_IDLE_MANNEDGUN)
        .value("ACT_IDLE_MELEE", ACT_IDLE_MELEE)
        .value("ACT_IDLE_ANGRY_MELEE", ACT_IDLE_ANGRY_MELEE)
        .value("ACT_IDLE_RPG_RELAXED", ACT_IDLE_RPG_RELAXED)
        .value("ACT_IDLE_RPG", ACT_IDLE_RPG)
        .value("ACT_IDLE_ANGRY_RPG", ACT_IDLE_ANGRY_RPG)
        .value("ACT_COVER_LOW_RPG", ACT_COVER_LOW_RPG)
        .value("ACT_WALK_RPG", ACT_WALK_RPG)
        .value("ACT_RUN_RPG", ACT_RUN_RPG)
        .value("ACT_WALK_CROUCH_RPG", ACT_WALK_CROUCH_RPG)
        .value("ACT_RUN_CROUCH_RPG", ACT_RUN_CROUCH_RPG)
        .value("ACT_WALK_RPG_RELAXED", ACT_WALK_RPG_RELAXED)
        .value("ACT_RUN_RPG_RELAXED", ACT_RUN_RPG_RELAXED)
        .value("ACT_WALK_RIFLE", ACT_WALK_RIFLE)
        .value("ACT_WALK_AIM_RIFLE", ACT_WALK_AIM_RIFLE)
        .value("ACT_WALK_CROUCH_RIFLE", ACT_WALK_CROUCH_RIFLE)
        .value("ACT_WALK_CROUCH_AIM_RIFLE", ACT_WALK_CROUCH_AIM_RIFLE)
        .value("ACT_RUN_RIFLE", ACT_RUN_RIFLE)
        .value("ACT_RUN_AIM_RIFLE", ACT_RUN_AIM_RIFLE)
        .value("ACT_RUN_CROUCH_RIFLE", ACT_RUN_CROUCH_RIFLE)
        .value("ACT_RUN_CROUCH_AIM_RIFLE", ACT_RUN_CROUCH_AIM_RIFLE)
        .value("ACT_RUN_STEALTH_PISTOL", ACT_RUN_STEALTH_PISTOL)
        .value("ACT_WALK_AIM_SHOTGUN", ACT_WALK_AIM_SHOTGUN)
        .value("ACT_RUN_AIM_SHOTGUN", ACT_RUN_AIM_SHOTGUN)
        .value("ACT_WALK_PISTOL", ACT_WALK_PISTOL)
        .value("ACT_RUN_PISTOL", ACT_RUN_PISTOL)
        .value("ACT_WALK_AIM_PISTOL", ACT_WALK_AIM_PISTOL)
        .value("ACT_RUN_AIM_PISTOL", ACT_RUN_AIM_PISTOL)
        .value("ACT_WALK_STEALTH_PISTOL", ACT_WALK_STEALTH_PISTOL)
        .value("ACT_WALK_AIM_STEALTH_PISTOL", ACT_WALK_AIM_STEALTH_PISTOL)
        .value("ACT_RUN_AIM_STEALTH_PISTOL", ACT_RUN_AIM_STEALTH_PISTOL)
        .value("ACT_RELOAD_PISTOL", ACT_RELOAD_PISTOL)
        .value("ACT_RELOAD_PISTOL_LOW", ACT_RELOAD_PISTOL_LOW)
        .value("ACT_RELOAD_SMG1", ACT_RELOAD_SMG1)
        .value("ACT_RELOAD_SMG1_LOW", ACT_RELOAD_SMG1_LOW)
        .value("ACT_RELOAD_SHOTGUN", ACT_RELOAD_SHOTGUN)
        .value("ACT_RELOAD_SHOTGUN_LOW", ACT_RELOAD_SHOTGUN_LOW)
        .value("ACT_GESTURE_RELOAD", ACT_GESTURE_RELOAD)
        .value("ACT_GESTURE_RELOAD_PISTOL", ACT_GESTURE_RELOAD_PISTOL)
        .value("ACT_GESTURE_RELOAD_SMG1", ACT_GESTURE_RELOAD_SMG1)
        .value("ACT_GESTURE_RELOAD_SHOTGUN", ACT_GESTURE_RELOAD_SHOTGUN)
        .value("ACT_BUSY_LEAN_LEFT", ACT_BUSY_LEAN_LEFT)
        .value("ACT_BUSY_LEAN_LEFT_ENTRY", ACT_BUSY_LEAN_LEFT_ENTRY)
        .value("ACT_BUSY_LEAN_LEFT_EXIT", ACT_BUSY_LEAN_LEFT_EXIT)
        .value("ACT_BUSY_LEAN_BACK", ACT_BUSY_LEAN_BACK)
        .value("ACT_BUSY_LEAN_BACK_ENTRY", ACT_BUSY_LEAN_BACK_ENTRY)
        .value("ACT_BUSY_LEAN_BACK_EXIT", ACT_BUSY_LEAN_BACK_EXIT)
        .value("ACT_BUSY_SIT_GROUND", ACT_BUSY_SIT_GROUND)
        .value("ACT_BUSY_SIT_GROUND_ENTRY", ACT_BUSY_SIT_GROUND_ENTRY)
        .value("ACT_BUSY_SIT_GROUND_EXIT", ACT_BUSY_SIT_GROUND_EXIT)
        .value("ACT_BUSY_SIT_CHAIR", ACT_BUSY_SIT_CHAIR)
        .value("ACT_BUSY_SIT_CHAIR_ENTRY", ACT_BUSY_SIT_CHAIR_ENTRY)
        .value("ACT_BUSY_SIT_CHAIR_EXIT", ACT_BUSY_SIT_CHAIR_EXIT)
        .value("ACT_BUSY_STAND", ACT_BUSY_STAND)
        .value("ACT_BUSY_QUEUE", ACT_BUSY_QUEUE)
        .value("ACT_DUCK_DODGE", ACT_DUCK_DODGE)
        .value("ACT_DIE_BARNACLE_SWALLOW", ACT_DIE_BARNACLE_SWALLOW)
        .value("ACT_GESTURE_BARNACLE_STRANGLE", ACT_GESTURE_BARNACLE_STRANGLE)
        .value("ACT_PHYSCANNON_DETACH", ACT_PHYSCANNON_DETACH)
        .value("ACT_PHYSCANNON_ANIMATE", ACT_PHYSCANNON_ANIMATE)
        .value("ACT_PHYSCANNON_ANIMATE_PRE", ACT_PHYSCANNON_ANIMATE_PRE)
        .value("ACT_PHYSCANNON_ANIMATE_POST", ACT_PHYSCANNON_ANIMATE_POST)
        .value("ACT_DIE_FRONTSIDE", ACT_DIE_FRONTSIDE)
        .value("ACT_DIE_RIGHTSIDE", ACT_DIE_RIGHTSIDE)
        .value("ACT_DIE_BACKSIDE", ACT_DIE_BACKSIDE)
        .value("ACT_DIE_LEFTSIDE", ACT_DIE_LEFTSIDE)
        .value("ACT_OPEN_DOOR", ACT_OPEN_DOOR)
        .value("ACT_DI_ALYX_ZOMBIE_MELEE", ACT_DI_ALYX_ZOMBIE_MELEE)
        .value("ACT_DI_ALYX_ZOMBIE_TORSO_MELEE", ACT_DI_ALYX_ZOMBIE_TORSO_MELEE)
        .value("ACT_DI_ALYX_HEADCRAB_MELEE", ACT_DI_ALYX_HEADCRAB_MELEE)
        .value("ACT_DI_ALYX_ANTLION", ACT_DI_ALYX_ANTLION)
        .value("ACT_DI_ALYX_ZOMBIE_SHOTGUN64", ACT_DI_ALYX_ZOMBIE_SHOTGUN64)
        .value("ACT_DI_ALYX_ZOMBIE_SHOTGUN26", ACT_DI_ALYX_ZOMBIE_SHOTGUN26)
        .value("ACT_READINESS_RELAXED_TO_STIMULATED", ACT_READINESS_RELAXED_TO_STIMULATED)
        .value("ACT_READINESS_RELAXED_TO_STIMULATED_WALK", ACT_READINESS_RELAXED_TO_STIMULATED_WALK)
        .value("ACT_READINESS_AGITATED_TO_STIMULATED", ACT_READINESS_AGITATED_TO_STIMULATED)
        .value("ACT_READINESS_STIMULATED_TO_RELAXED", ACT_READINESS_STIMULATED_TO_RELAXED)
        .value("ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED", ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED)
        .value("ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK", ACT_READINESS_PISTOL_RELAXED_TO_STIMULATED_WALK)
        .value("ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED", ACT_READINESS_PISTOL_AGITATED_TO_STIMULATED)
        .value("ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED", ACT_READINESS_PISTOL_STIMULATED_TO_RELAXED)
        .value("ACT_IDLE_CARRY", ACT_IDLE_CARRY)
        .value("ACT_WALK_CARRY", ACT_WALK_CARRY)
        .value("ACT_STARTDYING", ACT_STARTDYING)
        .value("ACT_DYINGLOOP", ACT_DYINGLOOP)
        .value("ACT_DYINGTODEAD", ACT_DYINGTODEAD)
        .value("ACT_RIDE_MANNED_GUN", ACT_RIDE_MANNED_GUN)
        .value("ACT_VM_SPRINT_ENTER", ACT_VM_SPRINT_ENTER)
        .value("ACT_VM_SPRINT_IDLE", ACT_VM_SPRINT_IDLE)
        .value("ACT_VM_SPRINT_LEAVE", ACT_VM_SPRINT_LEAVE)
        .value("ACT_FIRE_START", ACT_FIRE_START)
        .value("ACT_FIRE_LOOP", ACT_FIRE_LOOP)
        .value("ACT_FIRE_END", ACT_FIRE_END)
        .value("ACT_CROUCHING_GRENADEIDLE", ACT_CROUCHING_GRENADEIDLE)
        .value("ACT_CROUCHING_GRENADEREADY", ACT_CROUCHING_GRENADEREADY)
        .value("ACT_CROUCHING_PRIMARYATTACK", ACT_CROUCHING_PRIMARYATTACK)
        .value("ACT_OVERLAY_GRENADEIDLE", ACT_OVERLAY_GRENADEIDLE)
        .value("ACT_OVERLAY_GRENADEREADY", ACT_OVERLAY_GRENADEREADY)
        .value("ACT_OVERLAY_PRIMARYATTACK", ACT_OVERLAY_PRIMARYATTACK)
        .value("ACT_OVERLAY_SHIELD_UP", ACT_OVERLAY_SHIELD_UP)
        .value("ACT_OVERLAY_SHIELD_DOWN", ACT_OVERLAY_SHIELD_DOWN)
        .value("ACT_OVERLAY_SHIELD_UP_IDLE", ACT_OVERLAY_SHIELD_UP_IDLE)
        .value("ACT_OVERLAY_SHIELD_ATTACK", ACT_OVERLAY_SHIELD_ATTACK)
        .value("ACT_OVERLAY_SHIELD_KNOCKBACK", ACT_OVERLAY_SHIELD_KNOCKBACK)
        .value("ACT_SHIELD_UP", ACT_SHIELD_UP)
        .value("ACT_SHIELD_DOWN", ACT_SHIELD_DOWN)
        .value("ACT_SHIELD_UP_IDLE", ACT_SHIELD_UP_IDLE)
        .value("ACT_SHIELD_ATTACK", ACT_SHIELD_ATTACK)
        .value("ACT_SHIELD_KNOCKBACK", ACT_SHIELD_KNOCKBACK)
        .value("ACT_CROUCHING_SHIELD_UP", ACT_CROUCHING_SHIELD_UP)
        .value("ACT_CROUCHING_SHIELD_DOWN", ACT_CROUCHING_SHIELD_DOWN)
        .value("ACT_CROUCHING_SHIELD_UP_IDLE", ACT_CROUCHING_SHIELD_UP_IDLE)
        .value("ACT_CROUCHING_SHIELD_ATTACK", ACT_CROUCHING_SHIELD_ATTACK)
        .value("ACT_CROUCHING_SHIELD_KNOCKBACK", ACT_CROUCHING_SHIELD_KNOCKBACK)
        .value("ACT_TURNRIGHT45", ACT_TURNRIGHT45)
        .value("ACT_TURNLEFT45", ACT_TURNLEFT45)
        .value("ACT_TURN", ACT_TURN)
        .value("ACT_OBJ_ASSEMBLING", ACT_OBJ_ASSEMBLING)
        .value("ACT_OBJ_DISMANTLING", ACT_OBJ_DISMANTLING)
        .value("ACT_OBJ_STARTUP", ACT_OBJ_STARTUP)
        .value("ACT_OBJ_RUNNING", ACT_OBJ_RUNNING)
        .value("ACT_OBJ_IDLE", ACT_OBJ_IDLE)
        .value("ACT_OBJ_PLACING", ACT_OBJ_PLACING)
        .value("ACT_OBJ_DETERIORATING", ACT_OBJ_DETERIORATING)
        .value("ACT_OBJ_UPGRADING", ACT_OBJ_UPGRADING)
        .value("ACT_DEPLOY", ACT_DEPLOY)
        .value("ACT_DEPLOY_IDLE", ACT_DEPLOY_IDLE)
        .value("ACT_UNDEPLOY", ACT_UNDEPLOY)
        .value("ACT_CROSSBOW_DRAW_UNLOADED", ACT_CROSSBOW_DRAW_UNLOADED)
        .value("ACT_GAUSS_SPINUP", ACT_GAUSS_SPINUP)
        .value("ACT_GAUSS_SPINCYCLE", ACT_GAUSS_SPINCYCLE)
        .value("ACT_VM_PRIMARYATTACK_SILENCED", ACT_VM_PRIMARYATTACK_SILENCED)
        .value("ACT_VM_RELOAD_SILENCED", ACT_VM_RELOAD_SILENCED)
        .value("ACT_VM_DRYFIRE_SILENCED", ACT_VM_DRYFIRE_SILENCED)
        .value("ACT_VM_IDLE_SILENCED", ACT_VM_IDLE_SILENCED)
        .value("ACT_VM_DRAW_SILENCED", ACT_VM_DRAW_SILENCED)
        .value("ACT_VM_IDLE_EMPTY_LEFT", ACT_VM_IDLE_EMPTY_LEFT)
        .value("ACT_VM_DRYFIRE_LEFT", ACT_VM_DRYFIRE_LEFT)
        .value("ACT_VM_IS_DRAW", ACT_VM_IS_DRAW)
        .value("ACT_VM_IS_HOLSTER", ACT_VM_IS_HOLSTER)
        .value("ACT_VM_IS_IDLE", ACT_VM_IS_IDLE)
        .value("ACT_VM_IS_PRIMARYATTACK", ACT_VM_IS_PRIMARYATTACK)
        .value("ACT_PLAYER_IDLE_FIRE", ACT_PLAYER_IDLE_FIRE)
        .value("ACT_PLAYER_CROUCH_FIRE", ACT_PLAYER_CROUCH_FIRE)
        .value("ACT_PLAYER_CROUCH_WALK_FIRE", ACT_PLAYER_CROUCH_WALK_FIRE)
        .value("ACT_PLAYER_WALK_FIRE", ACT_PLAYER_WALK_FIRE)
        .value("ACT_PLAYER_RUN_FIRE", ACT_PLAYER_RUN_FIRE)
        .value("ACT_IDLETORUN", ACT_IDLETORUN)
        .value("ACT_RUNTOIDLE", ACT_RUNTOIDLE)
        .value("ACT_VM_DRAW_DEPLOYED", ACT_VM_DRAW_DEPLOYED)
        .value("ACT_HL2MP_IDLE_MELEE", ACT_HL2MP_IDLE_MELEE)
        .value("ACT_HL2MP_RUN_MELEE", ACT_HL2MP_RUN_MELEE)
        .value("ACT_HL2MP_IDLE_CROUCH_MELEE", ACT_HL2MP_IDLE_CROUCH_MELEE)
        .value("ACT_HL2MP_WALK_CROUCH_MELEE", ACT_HL2MP_WALK_CROUCH_MELEE)
        .value("ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE", ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE)
        .value("ACT_HL2MP_GESTURE_RELOAD_MELEE", ACT_HL2MP_GESTURE_RELOAD_MELEE)
        .value("ACT_HL2MP_JUMP_MELEE", ACT_HL2MP_JUMP_MELEE)
        .value("ACT_VM_FIZZLE", ACT_VM_FIZZLE)
        .value("ACT_MP_STAND_IDLE", ACT_MP_STAND_IDLE)
        .value("ACT_MP_CROUCH_IDLE", ACT_MP_CROUCH_IDLE)
        .value("ACT_MP_CROUCH_DEPLOYED_IDLE", ACT_MP_CROUCH_DEPLOYED_IDLE)
        .value("ACT_MP_CROUCH_DEPLOYED", ACT_MP_CROUCH_DEPLOYED)
        .value("ACT_MP_DEPLOYED_IDLE", ACT_MP_DEPLOYED_IDLE)
        .value("ACT_MP_RUN", ACT_MP_RUN)
        .value("ACT_MP_WALK", ACT_MP_WALK)
        .value("ACT_MP_AIRWALK", ACT_MP_AIRWALK)
        .value("ACT_MP_CROUCHWALK", ACT_MP_CROUCHWALK)
        .value("ACT_MP_SPRINT", ACT_MP_SPRINT)
        .value("ACT_MP_JUMP", ACT_MP_JUMP)
        .value("ACT_MP_JUMP_START", ACT_MP_JUMP_START)
        .value("ACT_MP_JUMP_FLOAT", ACT_MP_JUMP_FLOAT)
        .value("ACT_MP_JUMP_LAND", ACT_MP_JUMP_LAND)
        .value("ACT_MP_DOUBLEJUMP", ACT_MP_DOUBLEJUMP)
        .value("ACT_MP_SWIM", ACT_MP_SWIM)
        .value("ACT_MP_DEPLOYED", ACT_MP_DEPLOYED)
        .value("ACT_MP_SWIM_DEPLOYED", ACT_MP_SWIM_DEPLOYED)
        .value("ACT_MP_VCD", ACT_MP_VCD)
        .value("ACT_MP_ATTACK_STAND_PRIMARYFIRE", ACT_MP_ATTACK_STAND_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED", ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED)
        .value("ACT_MP_ATTACK_STAND_SECONDARYFIRE", ACT_MP_ATTACK_STAND_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_STAND_GRENADE", ACT_MP_ATTACK_STAND_GRENADE)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARYFIRE", ACT_MP_ATTACK_CROUCH_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED", ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED)
        .value("ACT_MP_ATTACK_CROUCH_SECONDARYFIRE", ACT_MP_ATTACK_CROUCH_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE", ACT_MP_ATTACK_CROUCH_GRENADE)
        .value("ACT_MP_ATTACK_SWIM_PRIMARYFIRE", ACT_MP_ATTACK_SWIM_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_SWIM_SECONDARYFIRE", ACT_MP_ATTACK_SWIM_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_SWIM_GRENADE", ACT_MP_ATTACK_SWIM_GRENADE)
        .value("ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE", ACT_MP_ATTACK_AIRWALK_PRIMARYFIRE)
        .value("ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE", ACT_MP_ATTACK_AIRWALK_SECONDARYFIRE)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE", ACT_MP_ATTACK_AIRWALK_GRENADE)
        .value("ACT_MP_RELOAD_STAND", ACT_MP_RELOAD_STAND)
        .value("ACT_MP_RELOAD_STAND_LOOP", ACT_MP_RELOAD_STAND_LOOP)
        .value("ACT_MP_RELOAD_STAND_END", ACT_MP_RELOAD_STAND_END)
        .value("ACT_MP_RELOAD_CROUCH", ACT_MP_RELOAD_CROUCH)
        .value("ACT_MP_RELOAD_CROUCH_LOOP", ACT_MP_RELOAD_CROUCH_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_END", ACT_MP_RELOAD_CROUCH_END)
        .value("ACT_MP_RELOAD_SWIM", ACT_MP_RELOAD_SWIM)
        .value("ACT_MP_RELOAD_SWIM_LOOP", ACT_MP_RELOAD_SWIM_LOOP)
        .value("ACT_MP_RELOAD_SWIM_END", ACT_MP_RELOAD_SWIM_END)
        .value("ACT_MP_RELOAD_AIRWALK", ACT_MP_RELOAD_AIRWALK)
        .value("ACT_MP_RELOAD_AIRWALK_LOOP", ACT_MP_RELOAD_AIRWALK_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_END", ACT_MP_RELOAD_AIRWALK_END)
        .value("ACT_MP_ATTACK_STAND_PREFIRE", ACT_MP_ATTACK_STAND_PREFIRE)
        .value("ACT_MP_ATTACK_STAND_POSTFIRE", ACT_MP_ATTACK_STAND_POSTFIRE)
        .value("ACT_MP_ATTACK_STAND_STARTFIRE", ACT_MP_ATTACK_STAND_STARTFIRE)
        .value("ACT_MP_ATTACK_CROUCH_PREFIRE", ACT_MP_ATTACK_CROUCH_PREFIRE)
        .value("ACT_MP_ATTACK_CROUCH_POSTFIRE", ACT_MP_ATTACK_CROUCH_POSTFIRE)
        .value("ACT_MP_ATTACK_SWIM_PREFIRE", ACT_MP_ATTACK_SWIM_PREFIRE)
        .value("ACT_MP_ATTACK_SWIM_POSTFIRE", ACT_MP_ATTACK_SWIM_POSTFIRE)
        .value("ACT_MP_STAND_PRIMARY", ACT_MP_STAND_PRIMARY)
        .value("ACT_MP_CROUCH_PRIMARY", ACT_MP_CROUCH_PRIMARY)
        .value("ACT_MP_RUN_PRIMARY", ACT_MP_RUN_PRIMARY)
        .value("ACT_MP_WALK_PRIMARY", ACT_MP_WALK_PRIMARY)
        .value("ACT_MP_AIRWALK_PRIMARY", ACT_MP_AIRWALK_PRIMARY)
        .value("ACT_MP_CROUCHWALK_PRIMARY", ACT_MP_CROUCHWALK_PRIMARY)
        .value("ACT_MP_JUMP_PRIMARY", ACT_MP_JUMP_PRIMARY)
        .value("ACT_MP_JUMP_START_PRIMARY", ACT_MP_JUMP_START_PRIMARY)
        .value("ACT_MP_JUMP_FLOAT_PRIMARY", ACT_MP_JUMP_FLOAT_PRIMARY)
        .value("ACT_MP_JUMP_LAND_PRIMARY", ACT_MP_JUMP_LAND_PRIMARY)
        .value("ACT_MP_SWIM_PRIMARY", ACT_MP_SWIM_PRIMARY)
        .value("ACT_MP_DEPLOYED_PRIMARY", ACT_MP_DEPLOYED_PRIMARY)
        .value("ACT_MP_SWIM_DEPLOYED_PRIMARY", ACT_MP_SWIM_DEPLOYED_PRIMARY)
        .value("ACT_MP_ATTACK_STAND_PRIMARY", ACT_MP_ATTACK_STAND_PRIMARY)
        .value("ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED", ACT_MP_ATTACK_STAND_PRIMARY_DEPLOYED)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARY", ACT_MP_ATTACK_CROUCH_PRIMARY)
        .value("ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED", ACT_MP_ATTACK_CROUCH_PRIMARY_DEPLOYED)
        .value("ACT_MP_ATTACK_SWIM_PRIMARY", ACT_MP_ATTACK_SWIM_PRIMARY)
        .value("ACT_MP_ATTACK_AIRWALK_PRIMARY", ACT_MP_ATTACK_AIRWALK_PRIMARY)
        .value("ACT_MP_RELOAD_STAND_PRIMARY", ACT_MP_RELOAD_STAND_PRIMARY)
        .value("ACT_MP_RELOAD_STAND_PRIMARY_LOOP", ACT_MP_RELOAD_STAND_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_STAND_PRIMARY_END", ACT_MP_RELOAD_STAND_PRIMARY_END)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY", ACT_MP_RELOAD_CROUCH_PRIMARY)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP", ACT_MP_RELOAD_CROUCH_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_PRIMARY_END", ACT_MP_RELOAD_CROUCH_PRIMARY_END)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY", ACT_MP_RELOAD_SWIM_PRIMARY)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY_LOOP", ACT_MP_RELOAD_SWIM_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_SWIM_PRIMARY_END", ACT_MP_RELOAD_SWIM_PRIMARY_END)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY", ACT_MP_RELOAD_AIRWALK_PRIMARY)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP", ACT_MP_RELOAD_AIRWALK_PRIMARY_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_PRIMARY_END", ACT_MP_RELOAD_AIRWALK_PRIMARY_END)
        .value("ACT_MP_ATTACK_STAND_GRENADE_PRIMARY", ACT_MP_ATTACK_STAND_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY", ACT_MP_ATTACK_CROUCH_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY", ACT_MP_ATTACK_SWIM_GRENADE_PRIMARY)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY", ACT_MP_ATTACK_AIRWALK_GRENADE_PRIMARY)
        .value("ACT_MP_STAND_SECONDARY", ACT_MP_STAND_SECONDARY)
        .value("ACT_MP_CROUCH_SECONDARY", ACT_MP_CROUCH_SECONDARY)
        .value("ACT_MP_RUN_SECONDARY", ACT_MP_RUN_SECONDARY)
        .value("ACT_MP_WALK_SECONDARY", ACT_MP_WALK_SECONDARY)
        .value("ACT_MP_AIRWALK_SECONDARY", ACT_MP_AIRWALK_SECONDARY)
        .value("ACT_MP_CROUCHWALK_SECONDARY", ACT_MP_CROUCHWALK_SECONDARY)
        .value("ACT_MP_JUMP_SECONDARY", ACT_MP_JUMP_SECONDARY)
        .value("ACT_MP_JUMP_START_SECONDARY", ACT_MP_JUMP_START_SECONDARY)
        .value("ACT_MP_JUMP_FLOAT_SECONDARY", ACT_MP_JUMP_FLOAT_SECONDARY)
        .value("ACT_MP_JUMP_LAND_SECONDARY", ACT_MP_JUMP_LAND_SECONDARY)
        .value("ACT_MP_SWIM_SECONDARY", ACT_MP_SWIM_SECONDARY)
        .value("ACT_MP_ATTACK_STAND_SECONDARY", ACT_MP_ATTACK_STAND_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_SECONDARY", ACT_MP_ATTACK_CROUCH_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_SECONDARY", ACT_MP_ATTACK_SWIM_SECONDARY)
        .value("ACT_MP_ATTACK_AIRWALK_SECONDARY", ACT_MP_ATTACK_AIRWALK_SECONDARY)
        .value("ACT_MP_RELOAD_STAND_SECONDARY", ACT_MP_RELOAD_STAND_SECONDARY)
        .value("ACT_MP_RELOAD_STAND_SECONDARY_LOOP", ACT_MP_RELOAD_STAND_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_STAND_SECONDARY_END", ACT_MP_RELOAD_STAND_SECONDARY_END)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY", ACT_MP_RELOAD_CROUCH_SECONDARY)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP", ACT_MP_RELOAD_CROUCH_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_CROUCH_SECONDARY_END", ACT_MP_RELOAD_CROUCH_SECONDARY_END)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY", ACT_MP_RELOAD_SWIM_SECONDARY)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY_LOOP", ACT_MP_RELOAD_SWIM_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_SWIM_SECONDARY_END", ACT_MP_RELOAD_SWIM_SECONDARY_END)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY", ACT_MP_RELOAD_AIRWALK_SECONDARY)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP", ACT_MP_RELOAD_AIRWALK_SECONDARY_LOOP)
        .value("ACT_MP_RELOAD_AIRWALK_SECONDARY_END", ACT_MP_RELOAD_AIRWALK_SECONDARY_END)
        .value("ACT_MP_ATTACK_STAND_GRENADE_SECONDARY", ACT_MP_ATTACK_STAND_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY", ACT_MP_ATTACK_CROUCH_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY", ACT_MP_ATTACK_SWIM_GRENADE_SECONDARY)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY", ACT_MP_ATTACK_AIRWALK_GRENADE_SECONDARY)
        .value("ACT_MP_STAND_MELEE", ACT_MP_STAND_MELEE)
        .value("ACT_MP_CROUCH_MELEE", ACT_MP_CROUCH_MELEE)
        .value("ACT_MP_RUN_MELEE", ACT_MP_RUN_MELEE)
        .value("ACT_MP_WALK_MELEE", ACT_MP_WALK_MELEE)
        .value("ACT_MP_AIRWALK_MELEE", ACT_MP_AIRWALK_MELEE)
        .value("ACT_MP_CROUCHWALK_MELEE", ACT_MP_CROUCHWALK_MELEE)
        .value("ACT_MP_JUMP_MELEE", ACT_MP_JUMP_MELEE)
        .value("ACT_MP_JUMP_START_MELEE", ACT_MP_JUMP_START_MELEE)
        .value("ACT_MP_JUMP_FLOAT_MELEE", ACT_MP_JUMP_FLOAT_MELEE)
        .value("ACT_MP_JUMP_LAND_MELEE", ACT_MP_JUMP_LAND_MELEE)
        .value("ACT_MP_SWIM_MELEE", ACT_MP_SWIM_MELEE)
        .value("ACT_MP_ATTACK_STAND_MELEE", ACT_MP_ATTACK_STAND_MELEE)
        .value("ACT_MP_ATTACK_STAND_MELEE_SECONDARY", ACT_MP_ATTACK_STAND_MELEE_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_MELEE", ACT_MP_ATTACK_CROUCH_MELEE)
        .value("ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY", ACT_MP_ATTACK_CROUCH_MELEE_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_MELEE", ACT_MP_ATTACK_SWIM_MELEE)
        .value("ACT_MP_ATTACK_AIRWALK_MELEE", ACT_MP_ATTACK_AIRWALK_MELEE)
        .value("ACT_MP_ATTACK_STAND_GRENADE_MELEE", ACT_MP_ATTACK_STAND_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_MELEE", ACT_MP_ATTACK_CROUCH_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_MELEE", ACT_MP_ATTACK_SWIM_GRENADE_MELEE)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE", ACT_MP_ATTACK_AIRWALK_GRENADE_MELEE)
        .value("ACT_MP_STAND_ITEM1", ACT_MP_STAND_ITEM1)
        .value("ACT_MP_CROUCH_ITEM1", ACT_MP_CROUCH_ITEM1)
        .value("ACT_MP_RUN_ITEM1", ACT_MP_RUN_ITEM1)
        .value("ACT_MP_WALK_ITEM1", ACT_MP_WALK_ITEM1)
        .value("ACT_MP_AIRWALK_ITEM1", ACT_MP_AIRWALK_ITEM1)
        .value("ACT_MP_CROUCHWALK_ITEM1", ACT_MP_CROUCHWALK_ITEM1)
        .value("ACT_MP_JUMP_ITEM1", ACT_MP_JUMP_ITEM1)
        .value("ACT_MP_JUMP_START_ITEM1", ACT_MP_JUMP_START_ITEM1)
        .value("ACT_MP_JUMP_FLOAT_ITEM1", ACT_MP_JUMP_FLOAT_ITEM1)
        .value("ACT_MP_JUMP_LAND_ITEM1", ACT_MP_JUMP_LAND_ITEM1)
        .value("ACT_MP_SWIM_ITEM1", ACT_MP_SWIM_ITEM1)
        .value("ACT_MP_ATTACK_STAND_ITEM1", ACT_MP_ATTACK_STAND_ITEM1)
        .value("ACT_MP_ATTACK_STAND_ITEM1_SECONDARY", ACT_MP_ATTACK_STAND_ITEM1_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_ITEM1", ACT_MP_ATTACK_CROUCH_ITEM1)
        .value("ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY", ACT_MP_ATTACK_CROUCH_ITEM1_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_ITEM1", ACT_MP_ATTACK_SWIM_ITEM1)
        .value("ACT_MP_ATTACK_AIRWALK_ITEM1", ACT_MP_ATTACK_AIRWALK_ITEM1)
        .value("ACT_MP_STAND_ITEM2", ACT_MP_STAND_ITEM2)
        .value("ACT_MP_CROUCH_ITEM2", ACT_MP_CROUCH_ITEM2)
        .value("ACT_MP_RUN_ITEM2", ACT_MP_RUN_ITEM2)
        .value("ACT_MP_WALK_ITEM2", ACT_MP_WALK_ITEM2)
        .value("ACT_MP_AIRWALK_ITEM2", ACT_MP_AIRWALK_ITEM2)
        .value("ACT_MP_CROUCHWALK_ITEM2", ACT_MP_CROUCHWALK_ITEM2)
        .value("ACT_MP_JUMP_ITEM2", ACT_MP_JUMP_ITEM2)
        .value("ACT_MP_JUMP_START_ITEM2", ACT_MP_JUMP_START_ITEM2)
        .value("ACT_MP_JUMP_FLOAT_ITEM2", ACT_MP_JUMP_FLOAT_ITEM2)
        .value("ACT_MP_JUMP_LAND_ITEM2", ACT_MP_JUMP_LAND_ITEM2)
        .value("ACT_MP_SWIM_ITEM2", ACT_MP_SWIM_ITEM2)
        .value("ACT_MP_ATTACK_STAND_ITEM2", ACT_MP_ATTACK_STAND_ITEM2)
        .value("ACT_MP_ATTACK_STAND_ITEM2_SECONDARY", ACT_MP_ATTACK_STAND_ITEM2_SECONDARY)
        .value("ACT_MP_ATTACK_CROUCH_ITEM2", ACT_MP_ATTACK_CROUCH_ITEM2)
        .value("ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY", ACT_MP_ATTACK_CROUCH_ITEM2_SECONDARY)
        .value("ACT_MP_ATTACK_SWIM_ITEM2", ACT_MP_ATTACK_SWIM_ITEM2)
        .value("ACT_MP_ATTACK_AIRWALK_ITEM2", ACT_MP_ATTACK_AIRWALK_ITEM2)
        .value("ACT_MP_GESTURE_FLINCH", ACT_MP_GESTURE_FLINCH)
        .value("ACT_MP_GESTURE_FLINCH_PRIMARY", ACT_MP_GESTURE_FLINCH_PRIMARY)
        .value("ACT_MP_GESTURE_FLINCH_SECONDARY", ACT_MP_GESTURE_FLINCH_SECONDARY)
        .value("ACT_MP_GESTURE_FLINCH_MELEE", ACT_MP_GESTURE_FLINCH_MELEE)
        .value("ACT_MP_GESTURE_FLINCH_ITEM1", ACT_MP_GESTURE_FLINCH_ITEM1)
        .value("ACT_MP_GESTURE_FLINCH_ITEM2", ACT_MP_GESTURE_FLINCH_ITEM2)
        .value("ACT_MP_GESTURE_FLINCH_HEAD", ACT_MP_GESTURE_FLINCH_HEAD)
        .value("ACT_MP_GESTURE_FLINCH_CHEST", ACT_MP_GESTURE_FLINCH_CHEST)
        .value("ACT_MP_GESTURE_FLINCH_STOMACH", ACT_MP_GESTURE_FLINCH_STOMACH)
        .value("ACT_MP_GESTURE_FLINCH_LEFTARM", ACT_MP_GESTURE_FLINCH_LEFTARM)
        .value("ACT_MP_GESTURE_FLINCH_RIGHTARM", ACT_MP_GESTURE_FLINCH_RIGHTARM)
        .value("ACT_MP_GESTURE_FLINCH_LEFTLEG", ACT_MP_GESTURE_FLINCH_LEFTLEG)
        .value("ACT_MP_GESTURE_FLINCH_RIGHTLEG", ACT_MP_GESTURE_FLINCH_RIGHTLEG)
        .value("ACT_MP_GRENADE1_DRAW", ACT_MP_GRENADE1_DRAW)
        .value("ACT_MP_GRENADE1_IDLE", ACT_MP_GRENADE1_IDLE)
        .value("ACT_MP_GRENADE1_ATTACK", ACT_MP_GRENADE1_ATTACK)
        .value("ACT_MP_GRENADE2_DRAW", ACT_MP_GRENADE2_DRAW)
        .value("ACT_MP_GRENADE2_IDLE", ACT_MP_GRENADE2_IDLE)
        .value("ACT_MP_GRENADE2_ATTACK", ACT_MP_GRENADE2_ATTACK)
        .value("ACT_MP_PRIMARY_GRENADE1_DRAW", ACT_MP_PRIMARY_GRENADE1_DRAW)
        .value("ACT_MP_PRIMARY_GRENADE1_IDLE", ACT_MP_PRIMARY_GRENADE1_IDLE)
        .value("ACT_MP_PRIMARY_GRENADE1_ATTACK", ACT_MP_PRIMARY_GRENADE1_ATTACK)
        .value("ACT_MP_PRIMARY_GRENADE2_DRAW", ACT_MP_PRIMARY_GRENADE2_DRAW)
        .value("ACT_MP_PRIMARY_GRENADE2_IDLE", ACT_MP_PRIMARY_GRENADE2_IDLE)
        .value("ACT_MP_PRIMARY_GRENADE2_ATTACK", ACT_MP_PRIMARY_GRENADE2_ATTACK)
        .value("ACT_MP_SECONDARY_GRENADE1_DRAW", ACT_MP_SECONDARY_GRENADE1_DRAW)
        .value("ACT_MP_SECONDARY_GRENADE1_IDLE", ACT_MP_SECONDARY_GRENADE1_IDLE)
        .value("ACT_MP_SECONDARY_GRENADE1_ATTACK", ACT_MP_SECONDARY_GRENADE1_ATTACK)
        .value("ACT_MP_SECONDARY_GRENADE2_DRAW", ACT_MP_SECONDARY_GRENADE2_DRAW)
        .value("ACT_MP_SECONDARY_GRENADE2_IDLE", ACT_MP_SECONDARY_GRENADE2_IDLE)
        .value("ACT_MP_SECONDARY_GRENADE2_ATTACK", ACT_MP_SECONDARY_GRENADE2_ATTACK)
        .value("ACT_MP_MELEE_GRENADE1_DRAW", ACT_MP_MELEE_GRENADE1_DRAW)
        .value("ACT_MP_MELEE_GRENADE1_IDLE", ACT_MP_MELEE_GRENADE1_IDLE)
        .value("ACT_MP_MELEE_GRENADE1_ATTACK", ACT_MP_MELEE_GRENADE1_ATTACK)
        .value("ACT_MP_MELEE_GRENADE2_DRAW", ACT_MP_MELEE_GRENADE2_DRAW)
        .value("ACT_MP_MELEE_GRENADE2_IDLE", ACT_MP_MELEE_GRENADE2_IDLE)
        .value("ACT_MP_MELEE_GRENADE2_ATTACK", ACT_MP_MELEE_GRENADE2_ATTACK)
        .value("ACT_MP_ITEM1_GRENADE1_DRAW", ACT_MP_ITEM1_GRENADE1_DRAW)
        .value("ACT_MP_ITEM1_GRENADE1_IDLE", ACT_MP_ITEM1_GRENADE1_IDLE)
        .value("ACT_MP_ITEM1_GRENADE1_ATTACK", ACT_MP_ITEM1_GRENADE1_ATTACK)
        .value("ACT_MP_ITEM1_GRENADE2_DRAW", ACT_MP_ITEM1_GRENADE2_DRAW)
        .value("ACT_MP_ITEM1_GRENADE2_IDLE", ACT_MP_ITEM1_GRENADE2_IDLE)
        .value("ACT_MP_ITEM1_GRENADE2_ATTACK", ACT_MP_ITEM1_GRENADE2_ATTACK)
        .value("ACT_MP_ITEM2_GRENADE1_DRAW", ACT_MP_ITEM2_GRENADE1_DRAW)
        .value("ACT_MP_ITEM2_GRENADE1_IDLE", ACT_MP_ITEM2_GRENADE1_IDLE)
        .value("ACT_MP_ITEM2_GRENADE1_ATTACK", ACT_MP_ITEM2_GRENADE1_ATTACK)
        .value("ACT_MP_ITEM2_GRENADE2_DRAW", ACT_MP_ITEM2_GRENADE2_DRAW)
        .value("ACT_MP_ITEM2_GRENADE2_IDLE", ACT_MP_ITEM2_GRENADE2_IDLE)
        .value("ACT_MP_ITEM2_GRENADE2_ATTACK", ACT_MP_ITEM2_GRENADE2_ATTACK)
        .value("ACT_MP_STAND_BUILDING", ACT_MP_STAND_BUILDING)
        .value("ACT_MP_CROUCH_BUILDING", ACT_MP_CROUCH_BUILDING)
        .value("ACT_MP_RUN_BUILDING", ACT_MP_RUN_BUILDING)
        .value("ACT_MP_WALK_BUILDING", ACT_MP_WALK_BUILDING)
        .value("ACT_MP_AIRWALK_BUILDING", ACT_MP_AIRWALK_BUILDING)
        .value("ACT_MP_CROUCHWALK_BUILDING", ACT_MP_CROUCHWALK_BUILDING)
        .value("ACT_MP_JUMP_BUILDING", ACT_MP_JUMP_BUILDING)
        .value("ACT_MP_JUMP_START_BUILDING", ACT_MP_JUMP_START_BUILDING)
        .value("ACT_MP_JUMP_FLOAT_BUILDING", ACT_MP_JUMP_FLOAT_BUILDING)
        .value("ACT_MP_JUMP_LAND_BUILDING", ACT_MP_JUMP_LAND_BUILDING)
        .value("ACT_MP_SWIM_BUILDING", ACT_MP_SWIM_BUILDING)
        .value("ACT_MP_ATTACK_STAND_BUILDING", ACT_MP_ATTACK_STAND_BUILDING)
        .value("ACT_MP_ATTACK_CROUCH_BUILDING", ACT_MP_ATTACK_CROUCH_BUILDING)
        .value("ACT_MP_ATTACK_SWIM_BUILDING", ACT_MP_ATTACK_SWIM_BUILDING)
        .value("ACT_MP_ATTACK_AIRWALK_BUILDING", ACT_MP_ATTACK_AIRWALK_BUILDING)
        .value("ACT_MP_ATTACK_STAND_GRENADE_BUILDING", ACT_MP_ATTACK_STAND_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING", ACT_MP_ATTACK_CROUCH_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_SWIM_GRENADE_BUILDING", ACT_MP_ATTACK_SWIM_GRENADE_BUILDING)
        .value("ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING", ACT_MP_ATTACK_AIRWALK_GRENADE_BUILDING)
        .value("ACT_MP_STAND_PDA", ACT_MP_STAND_PDA)
        .value("ACT_MP_CROUCH_PDA", ACT_MP_CROUCH_PDA)
        .value("ACT_MP_RUN_PDA", ACT_MP_RUN_PDA)
        .value("ACT_MP_WALK_PDA", ACT_MP_WALK_PDA)
        .value("ACT_MP_AIRWALK_PDA", ACT_MP_AIRWALK_PDA)
        .value("ACT_MP_CROUCHWALK_PDA", ACT_MP_CROUCHWALK_PDA)
        .value("ACT_MP_JUMP_PDA", ACT_MP_JUMP_PDA)
        .value("ACT_MP_JUMP_START_PDA", ACT_MP_JUMP_START_PDA)
        .value("ACT_MP_JUMP_FLOAT_PDA", ACT_MP_JUMP_FLOAT_PDA)
        .value("ACT_MP_JUMP_LAND_PDA", ACT_MP_JUMP_LAND_PDA)
        .value("ACT_MP_SWIM_PDA", ACT_MP_SWIM_PDA)
        .value("ACT_MP_ATTACK_STAND_PDA", ACT_MP_ATTACK_STAND_PDA)
        .value("ACT_MP_ATTACK_SWIM_PDA", ACT_MP_ATTACK_SWIM_PDA)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH", ACT_MP_GESTURE_VC_HANDMOUTH)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT", ACT_MP_GESTURE_VC_FINGERPOINT)
        .value("ACT_MP_GESTURE_VC_FISTPUMP", ACT_MP_GESTURE_VC_FISTPUMP)
        .value("ACT_MP_GESTURE_VC_THUMBSUP", ACT_MP_GESTURE_VC_THUMBSUP)
        .value("ACT_MP_GESTURE_VC_NODYES", ACT_MP_GESTURE_VC_NODYES)
        .value("ACT_MP_GESTURE_VC_NODNO", ACT_MP_GESTURE_VC_NODNO)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY", ACT_MP_GESTURE_VC_HANDMOUTH_PRIMARY)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY", ACT_MP_GESTURE_VC_FINGERPOINT_PRIMARY)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY", ACT_MP_GESTURE_VC_FISTPUMP_PRIMARY)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY", ACT_MP_GESTURE_VC_THUMBSUP_PRIMARY)
        .value("ACT_MP_GESTURE_VC_NODYES_PRIMARY", ACT_MP_GESTURE_VC_NODYES_PRIMARY)
        .value("ACT_MP_GESTURE_VC_NODNO_PRIMARY", ACT_MP_GESTURE_VC_NODNO_PRIMARY)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY", ACT_MP_GESTURE_VC_HANDMOUTH_SECONDARY)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY", ACT_MP_GESTURE_VC_FINGERPOINT_SECONDARY)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY", ACT_MP_GESTURE_VC_FISTPUMP_SECONDARY)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY", ACT_MP_GESTURE_VC_THUMBSUP_SECONDARY)
        .value("ACT_MP_GESTURE_VC_NODYES_SECONDARY", ACT_MP_GESTURE_VC_NODYES_SECONDARY)
        .value("ACT_MP_GESTURE_VC_NODNO_SECONDARY", ACT_MP_GESTURE_VC_NODNO_SECONDARY)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_MELEE", ACT_MP_GESTURE_VC_HANDMOUTH_MELEE)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_MELEE", ACT_MP_GESTURE_VC_FINGERPOINT_MELEE)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_MELEE", ACT_MP_GESTURE_VC_FISTPUMP_MELEE)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_MELEE", ACT_MP_GESTURE_VC_THUMBSUP_MELEE)
        .value("ACT_MP_GESTURE_VC_NODYES_MELEE", ACT_MP_GESTURE_VC_NODYES_MELEE)
        .value("ACT_MP_GESTURE_VC_NODNO_MELEE", ACT_MP_GESTURE_VC_NODNO_MELEE)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1", ACT_MP_GESTURE_VC_HANDMOUTH_ITEM1)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1", ACT_MP_GESTURE_VC_FINGERPOINT_ITEM1)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_ITEM1", ACT_MP_GESTURE_VC_FISTPUMP_ITEM1)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_ITEM1", ACT_MP_GESTURE_VC_THUMBSUP_ITEM1)
        .value("ACT_MP_GESTURE_VC_NODYES_ITEM1", ACT_MP_GESTURE_VC_NODYES_ITEM1)
        .value("ACT_MP_GESTURE_VC_NODNO_ITEM1", ACT_MP_GESTURE_VC_NODNO_ITEM1)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2", ACT_MP_GESTURE_VC_HANDMOUTH_ITEM2)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2", ACT_MP_GESTURE_VC_FINGERPOINT_ITEM2)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_ITEM2", ACT_MP_GESTURE_VC_FISTPUMP_ITEM2)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_ITEM2", ACT_MP_GESTURE_VC_THUMBSUP_ITEM2)
        .value("ACT_MP_GESTURE_VC_NODYES_ITEM2", ACT_MP_GESTURE_VC_NODYES_ITEM2)
        .value("ACT_MP_GESTURE_VC_NODNO_ITEM2", ACT_MP_GESTURE_VC_NODNO_ITEM2)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING", ACT_MP_GESTURE_VC_HANDMOUTH_BUILDING)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING", ACT_MP_GESTURE_VC_FINGERPOINT_BUILDING)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_BUILDING", ACT_MP_GESTURE_VC_FISTPUMP_BUILDING)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_BUILDING", ACT_MP_GESTURE_VC_THUMBSUP_BUILDING)
        .value("ACT_MP_GESTURE_VC_NODYES_BUILDING", ACT_MP_GESTURE_VC_NODYES_BUILDING)
        .value("ACT_MP_GESTURE_VC_NODNO_BUILDING", ACT_MP_GESTURE_VC_NODNO_BUILDING)
        .value("ACT_MP_GESTURE_VC_HANDMOUTH_PDA", ACT_MP_GESTURE_VC_HANDMOUTH_PDA)
        .value("ACT_MP_GESTURE_VC_FINGERPOINT_PDA", ACT_MP_GESTURE_VC_FINGERPOINT_PDA)
        .value("ACT_MP_GESTURE_VC_FISTPUMP_PDA", ACT_MP_GESTURE_VC_FISTPUMP_PDA)
        .value("ACT_MP_GESTURE_VC_THUMBSUP_PDA", ACT_MP_GESTURE_VC_THUMBSUP_PDA)
        .value("ACT_MP_GESTURE_VC_NODYES_PDA", ACT_MP_GESTURE_VC_NODYES_PDA)
        .value("ACT_MP_GESTURE_VC_NODNO_PDA", ACT_MP_GESTURE_VC_NODNO_PDA)
        .value("ACT_VM_UNUSABLE", ACT_VM_UNUSABLE)
        .value("ACT_VM_UNUSABLE_TO_USABLE", ACT_VM_UNUSABLE_TO_USABLE)
        .value("ACT_VM_USABLE_TO_UNUSABLE", ACT_VM_USABLE_TO_UNUSABLE)
        .value("ACT_PRIMARY_VM_DRAW", ACT_PRIMARY_VM_DRAW)
        .value("ACT_PRIMARY_VM_HOLSTER", ACT_PRIMARY_VM_HOLSTER)
        .value("ACT_PRIMARY_VM_IDLE", ACT_PRIMARY_VM_IDLE)
        .value("ACT_PRIMARY_VM_PULLBACK", ACT_PRIMARY_VM_PULLBACK)
        .value("ACT_PRIMARY_VM_PRIMARYATTACK", ACT_PRIMARY_VM_PRIMARYATTACK)
        .value("ACT_PRIMARY_VM_SECONDARYATTACK", ACT_PRIMARY_VM_SECONDARYATTACK)
        .value("ACT_PRIMARY_VM_RELOAD", ACT_PRIMARY_VM_RELOAD)
        .value("ACT_PRIMARY_VM_DRYFIRE", ACT_PRIMARY_VM_DRYFIRE)
        .value("ACT_PRIMARY_VM_IDLE_TO_LOWERED", ACT_PRIMARY_VM_IDLE_TO_LOWERED)
        .value("ACT_PRIMARY_VM_IDLE_LOWERED", ACT_PRIMARY_VM_IDLE_LOWERED)
        .value("ACT_PRIMARY_VM_LOWERED_TO_IDLE", ACT_PRIMARY_VM_LOWERED_TO_IDLE)
        .value("ACT_SECONDARY_VM_DRAW", ACT_SECONDARY_VM_DRAW)
        .value("ACT_SECONDARY_VM_HOLSTER", ACT_SECONDARY_VM_HOLSTER)
        .value("ACT_SECONDARY_VM_IDLE", ACT_SECONDARY_VM_IDLE)
        .value("ACT_SECONDARY_VM_PULLBACK", ACT_SECONDARY_VM_PULLBACK)
        .value("ACT_SECONDARY_VM_PRIMARYATTACK", ACT_SECONDARY_VM_PRIMARYATTACK)
        .value("ACT_SECONDARY_VM_SECONDARYATTACK", ACT_SECONDARY_VM_SECONDARYATTACK)
        .value("ACT_SECONDARY_VM_RELOAD", ACT_SECONDARY_VM_RELOAD)
        .value("ACT_SECONDARY_VM_DRYFIRE", ACT_SECONDARY_VM_DRYFIRE)
        .value("ACT_SECONDARY_VM_IDLE_TO_LOWERED", ACT_SECONDARY_VM_IDLE_TO_LOWERED)
        .value("ACT_SECONDARY_VM_IDLE_LOWERED", ACT_SECONDARY_VM_IDLE_LOWERED)
        .value("ACT_SECONDARY_VM_LOWERED_TO_IDLE", ACT_SECONDARY_VM_LOWERED_TO_IDLE)
        .value("ACT_MELEE_VM_DRAW", ACT_MELEE_VM_DRAW)
        .value("ACT_MELEE_VM_HOLSTER", ACT_MELEE_VM_HOLSTER)
        .value("ACT_MELEE_VM_IDLE", ACT_MELEE_VM_IDLE)
        .value("ACT_MELEE_VM_PULLBACK", ACT_MELEE_VM_PULLBACK)
        .value("ACT_MELEE_VM_PRIMARYATTACK", ACT_MELEE_VM_PRIMARYATTACK)
        .value("ACT_MELEE_VM_SECONDARYATTACK", ACT_MELEE_VM_SECONDARYATTACK)
        .value("ACT_MELEE_VM_RELOAD", ACT_MELEE_VM_RELOAD)
        .value("ACT_MELEE_VM_DRYFIRE", ACT_MELEE_VM_DRYFIRE)
        .value("ACT_MELEE_VM_IDLE_TO_LOWERED", ACT_MELEE_VM_IDLE_TO_LOWERED)
        .value("ACT_MELEE_VM_IDLE_LOWERED", ACT_MELEE_VM_IDLE_LOWERED)
        .value("ACT_MELEE_VM_LOWERED_TO_IDLE", ACT_MELEE_VM_LOWERED_TO_IDLE)
        .value("ACT_PDA_VM_DRAW", ACT_PDA_VM_DRAW)
        .value("ACT_PDA_VM_HOLSTER", ACT_PDA_VM_HOLSTER)
        .value("ACT_PDA_VM_IDLE", ACT_PDA_VM_IDLE)
        .value("ACT_PDA_VM_PULLBACK", ACT_PDA_VM_PULLBACK)
        .value("ACT_PDA_VM_PRIMARYATTACK", ACT_PDA_VM_PRIMARYATTACK)
        .value("ACT_PDA_VM_SECONDARYATTACK", ACT_PDA_VM_SECONDARYATTACK)
        .value("ACT_PDA_VM_RELOAD", ACT_PDA_VM_RELOAD)
        .value("ACT_PDA_VM_DRYFIRE", ACT_PDA_VM_DRYFIRE)
        .value("ACT_PDA_VM_IDLE_TO_LOWERED", ACT_PDA_VM_IDLE_TO_LOWERED)
        .value("ACT_PDA_VM_IDLE_LOWERED", ACT_PDA_VM_IDLE_LOWERED)
        .value("ACT_PDA_VM_LOWERED_TO_IDLE", ACT_PDA_VM_LOWERED_TO_IDLE)
        .value("ACT_ITEM1_VM_DRAW", ACT_ITEM1_VM_DRAW)
        .value("ACT_ITEM1_VM_HOLSTER", ACT_ITEM1_VM_HOLSTER)
        .value("ACT_ITEM1_VM_IDLE", ACT_ITEM1_VM_IDLE)
        .value("ACT_ITEM1_VM_PULLBACK", ACT_ITEM1_VM_PULLBACK)
        .value("ACT_ITEM1_VM_PRIMARYATTACK", ACT_ITEM1_VM_PRIMARYATTACK)
        .value("ACT_ITEM1_VM_SECONDARYATTACK", ACT_ITEM1_VM_SECONDARYATTACK)
        .value("ACT_ITEM1_VM_RELOAD", ACT_ITEM1_VM_RELOAD)
        .value("ACT_ITEM1_VM_DRYFIRE", ACT_ITEM1_VM_DRYFIRE)
        .value("ACT_ITEM1_VM_IDLE_TO_LOWERED", ACT_ITEM1_VM_IDLE_TO_LOWERED)
        .value("ACT_ITEM1_VM_IDLE_LOWERED", ACT_ITEM1_VM_IDLE_LOWERED)
        .value("ACT_ITEM1_VM_LOWERED_TO_IDLE", ACT_ITEM1_VM_LOWERED_TO_IDLE)
        .value("ACT_ITEM2_VM_DRAW", ACT_ITEM2_VM_DRAW)
        .value("ACT_ITEM2_VM_HOLSTER", ACT_ITEM2_VM_HOLSTER)
        .value("ACT_ITEM2_VM_IDLE", ACT_ITEM2_VM_IDLE)
        .value("ACT_ITEM2_VM_PULLBACK", ACT_ITEM2_VM_PULLBACK)
        .value("ACT_ITEM2_VM_PRIMARYATTACK", ACT_ITEM2_VM_PRIMARYATTACK)
        .value("ACT_ITEM2_VM_SECONDARYATTACK", ACT_ITEM2_VM_SECONDARYATTACK)
        .value("ACT_ITEM2_VM_RELOAD", ACT_ITEM2_VM_RELOAD)
        .value("ACT_ITEM2_VM_DRYFIRE", ACT_ITEM2_VM_DRYFIRE)
        .value("ACT_ITEM2_VM_IDLE_TO_LOWERED", ACT_ITEM2_VM_IDLE_TO_LOWERED)
        .value("ACT_ITEM2_VM_IDLE_LOWERED", ACT_ITEM2_VM_IDLE_LOWERED)
        .value("ACT_ITEM2_VM_LOWERED_TO_IDLE", ACT_ITEM2_VM_LOWERED_TO_IDLE)
        .value("ACT_RELOAD_SUCCEED", ACT_RELOAD_SUCCEED)
        .value("ACT_RELOAD_FAIL", ACT_RELOAD_FAIL)
        .value("ACT_WALK_AIM_AUTOGUN", ACT_WALK_AIM_AUTOGUN)
        .value("ACT_RUN_AIM_AUTOGUN", ACT_RUN_AIM_AUTOGUN)
        .value("ACT_IDLE_AUTOGUN", ACT_IDLE_AUTOGUN)
        .value("ACT_IDLE_AIM_AUTOGUN", ACT_IDLE_AIM_AUTOGUN)
        .value("ACT_RELOAD_AUTOGUN", ACT_RELOAD_AUTOGUN)
        .value("ACT_CROUCH_IDLE_AUTOGUN", ACT_CROUCH_IDLE_AUTOGUN)
        .value("ACT_RANGE_ATTACK_AUTOGUN", ACT_RANGE_ATTACK_AUTOGUN)
        .value("ACT_JUMP_AUTOGUN", ACT_JUMP_AUTOGUN)
        .value("ACT_IDLE_AIM_PISTOL", ACT_IDLE_AIM_PISTOL)
        .value("ACT_WALK_AIM_DUAL", ACT_WALK_AIM_DUAL)
        .value("ACT_RUN_AIM_DUAL", ACT_RUN_AIM_DUAL)
        .value("ACT_IDLE_DUAL", ACT_IDLE_DUAL)
        .value("ACT_IDLE_AIM_DUAL", ACT_IDLE_AIM_DUAL)
        .value("ACT_RELOAD_DUAL", ACT_RELOAD_DUAL)
        .value("ACT_CROUCH_IDLE_DUAL", ACT_CROUCH_IDLE_DUAL)
        .value("ACT_RANGE_ATTACK_DUAL", ACT_RANGE_ATTACK_DUAL)
        .value("ACT_JUMP_DUAL", ACT_JUMP_DUAL)
        .value("ACT_IDLE_SHOTGUN", ACT_IDLE_SHOTGUN)
        .value("ACT_IDLE_AIM_SHOTGUN", ACT_IDLE_AIM_SHOTGUN)
        .value("ACT_CROUCH_IDLE_SHOTGUN", ACT_CROUCH_IDLE_SHOTGUN)
        .value("ACT_JUMP_SHOTGUN", ACT_JUMP_SHOTGUN)
        .value("ACT_IDLE_AIM_RIFLE", ACT_IDLE_AIM_RIFLE)
        .value("ACT_RELOAD_RIFLE", ACT_RELOAD_RIFLE)
        .value("ACT_CROUCH_IDLE_RIFLE", ACT_CROUCH_IDLE_RIFLE)
        .value("ACT_RANGE_ATTACK_RIFLE", ACT_RANGE_ATTACK_RIFLE)
        .value("ACT_JUMP_RIFLE", ACT_JUMP_RIFLE)
        .value("ACT_SLEEP", ACT_SLEEP)
        .value("ACT_WAKE", ACT_WAKE)
        .value("ACT_FLICK_LEFT", ACT_FLICK_LEFT)
        .value("ACT_FLICK_LEFT_MIDDLE", ACT_FLICK_LEFT_MIDDLE)
        .value("ACT_FLICK_RIGHT_MIDDLE", ACT_FLICK_RIGHT_MIDDLE)
        .value("ACT_FLICK_RIGHT", ACT_FLICK_RIGHT)
        .value("ACT_SPINAROUND", ACT_SPINAROUND)
        .value("ACT_PREP_TO_FIRE", ACT_PREP_TO_FIRE)
        .value("ACT_FIRE", ACT_FIRE)
        .value("ACT_FIRE_RECOVER", ACT_FIRE_RECOVER)
        .value("ACT_SPRAY", ACT_SPRAY)
        .value("ACT_PREP_EXPLODE", ACT_PREP_EXPLODE)
        .value("ACT_EXPLODE", ACT_EXPLODE)
        .value("LAST_SHARED_ACTIVITY", LAST_SHARED_ACTIVITY)
        .export_values()
        ;

    bp::enum_< Class_T>("Class_T")
        .value("CLASS_NONE", CLASS_NONE)
        .value("CLASS_PLAYER", CLASS_PLAYER)
        .value("CLASS_PLAYER_ALLY", CLASS_PLAYER_ALLY)
        .value("CLASS_PLAYER_ALLY_VITAL", CLASS_PLAYER_ALLY_VITAL)
        .value("CLASS_ANTLION", CLASS_ANTLION)
        .value("CLASS_BARNACLE", CLASS_BARNACLE)
        .value("CLASS_BLOB", CLASS_BLOB)
        .value("CLASS_BULLSEYE", CLASS_BULLSEYE)
        .value("CLASS_CITIZEN_PASSIVE", CLASS_CITIZEN_PASSIVE)
        .value("CLASS_CITIZEN_REBEL", CLASS_CITIZEN_REBEL)
        .value("CLASS_COMBINE", CLASS_COMBINE)
        .value("CLASS_COMBINE_GUNSHIP", CLASS_COMBINE_GUNSHIP)
        .value("CLASS_CONSCRIPT", CLASS_CONSCRIPT)
        .value("CLASS_HEADCRAB", CLASS_HEADCRAB)
        .value("CLASS_MANHACK", CLASS_MANHACK)
        .value("CLASS_METROPOLICE", CLASS_METROPOLICE)
        .value("CLASS_MILITARY", CLASS_MILITARY)
        .value("CLASS_SCANNER", CLASS_SCANNER)
        .value("CLASS_STALKER", CLASS_STALKER)
        .value("CLASS_VORTIGAUNT", CLASS_VORTIGAUNT)
        .value("CLASS_ZOMBIE", CLASS_ZOMBIE)
        .value("CLASS_PROTOSNIPER", CLASS_PROTOSNIPER)
        .value("CLASS_MISSILE", CLASS_MISSILE)
        .value("CLASS_FLARE", CLASS_FLARE)
        .value("CLASS_EARTH_FAUNA", CLASS_EARTH_FAUNA)
        .value("CLASS_HACKED_ROLLERMINE", CLASS_HACKED_ROLLERMINE)
        .value("CLASS_COMBINE_HUNTER", CLASS_COMBINE_HUNTER)
        .value("LAST_SHARED_ENTITY_CLASS", LAST_SHARED_ENTITY_CLASS)
        .export_values()
        ;

    bp::enum_< Collision_Group_t>("Collision_Group_t")
        .value("COLLISION_GROUP_NONE", COLLISION_GROUP_NONE)
        .value("COLLISION_GROUP_DEBRIS", COLLISION_GROUP_DEBRIS)
        .value("COLLISION_GROUP_DEBRIS_TRIGGER", COLLISION_GROUP_DEBRIS_TRIGGER)
        .value("COLLISION_GROUP_INTERACTIVE_DEBRIS", COLLISION_GROUP_INTERACTIVE_DEBRIS)
        .value("COLLISION_GROUP_INTERACTIVE", COLLISION_GROUP_INTERACTIVE)
        .value("COLLISION_GROUP_PLAYER", COLLISION_GROUP_PLAYER)
        .value("COLLISION_GROUP_BREAKABLE_GLASS", COLLISION_GROUP_BREAKABLE_GLASS)
        .value("COLLISION_GROUP_VEHICLE", COLLISION_GROUP_VEHICLE)
        .value("COLLISION_GROUP_PLAYER_MOVEMENT", COLLISION_GROUP_PLAYER_MOVEMENT)
        .value("COLLISION_GROUP_NPC", COLLISION_GROUP_NPC)
        .value("COLLISION_GROUP_IN_VEHICLE", COLLISION_GROUP_IN_VEHICLE)
        .value("COLLISION_GROUP_WEAPON", COLLISION_GROUP_WEAPON)
        .value("COLLISION_GROUP_VEHICLE_CLIP", COLLISION_GROUP_VEHICLE_CLIP)
        .value("COLLISION_GROUP_PROJECTILE", COLLISION_GROUP_PROJECTILE)
        .value("COLLISION_GROUP_DOOR_BLOCKER", COLLISION_GROUP_DOOR_BLOCKER)
        .value("COLLISION_GROUP_PASSABLE_DOOR", COLLISION_GROUP_PASSABLE_DOOR)
        .value("COLLISION_GROUP_DISSOLVING", COLLISION_GROUP_DISSOLVING)
        .value("COLLISION_GROUP_PUSHAWAY", COLLISION_GROUP_PUSHAWAY)
        .value("COLLISION_GROUP_NPC_ACTOR", COLLISION_GROUP_NPC_ACTOR)
        .value("COLLISION_GROUP_NPC_SCRIPTED", COLLISION_GROUP_NPC_SCRIPTED)
        .value("COLLISION_GROUP_PZ_CLIP", COLLISION_GROUP_PZ_CLIP)
        .value("COLLISION_GROUP_DEBRIS_BLOCK_PROJECTILE", COLLISION_GROUP_DEBRIS_BLOCK_PROJECTILE)
        .value("LAST_SHARED_COLLISION_GROUP", LAST_SHARED_COLLISION_GROUP)
        .export_values()
        ;

    bp::enum_< EntityEvent_t>("EntityEvent_t")
        .value("ENTITY_EVENT_WATER_TOUCH", ENTITY_EVENT_WATER_TOUCH)
        .value("ENTITY_EVENT_WATER_UNTOUCH", ENTITY_EVENT_WATER_UNTOUCH)
        .value("ENTITY_EVENT_PARENT_CHANGED", ENTITY_EVENT_PARENT_CHANGED)
        .export_values()
        ;

    bp::enum_< MoveCollide_t>("MoveCollide_t")
        .value("MOVECOLLIDE_DEFAULT", MOVECOLLIDE_DEFAULT)
        .value("MOVECOLLIDE_FLY_BOUNCE", MOVECOLLIDE_FLY_BOUNCE)
        .value("MOVECOLLIDE_FLY_CUSTOM", MOVECOLLIDE_FLY_CUSTOM)
        .value("MOVECOLLIDE_FLY_SLIDE", MOVECOLLIDE_FLY_SLIDE)
        .value("MOVECOLLIDE_COUNT", MOVECOLLIDE_COUNT)
        .value("MOVECOLLIDE_MAX_BITS", MOVECOLLIDE_MAX_BITS)
        .export_values()
        ;

    bp::enum_< MoveType_t>("MoveType_t")
        .value("MOVETYPE_NONE", MOVETYPE_NONE)
        .value("MOVETYPE_ISOMETRIC", MOVETYPE_ISOMETRIC)
        .value("MOVETYPE_WALK", MOVETYPE_WALK)
        .value("MOVETYPE_STEP", MOVETYPE_STEP)
        .value("MOVETYPE_FLY", MOVETYPE_FLY)
        .value("MOVETYPE_FLYGRAVITY", MOVETYPE_FLYGRAVITY)
        .value("MOVETYPE_VPHYSICS", MOVETYPE_VPHYSICS)
        .value("MOVETYPE_PUSH", MOVETYPE_PUSH)
        .value("MOVETYPE_NOCLIP", MOVETYPE_NOCLIP)
        .value("MOVETYPE_LADDER", MOVETYPE_LADDER)
        .value("MOVETYPE_OBSERVER", MOVETYPE_OBSERVER)
        .value("MOVETYPE_CUSTOM", MOVETYPE_CUSTOM)
        .value("MOVETYPE_STRATEGIC", MOVETYPE_STRATEGIC)
        .value("MOVETYPE_LAST", MOVETYPE_LAST)
        .value("MOVETYPE_MAX_BITS", MOVETYPE_MAX_BITS)
        .export_values()
        ;

    bp::enum_< RenderFx_t>("RenderFx_t")
        .value("kRenderFxNone", kRenderFxNone)
        .value("kRenderFxPulseSlow", kRenderFxPulseSlow)
        .value("kRenderFxPulseFast", kRenderFxPulseFast)
        .value("kRenderFxPulseSlowWide", kRenderFxPulseSlowWide)
        .value("kRenderFxPulseFastWide", kRenderFxPulseFastWide)
        .value("kRenderFxFadeSlow", kRenderFxFadeSlow)
        .value("kRenderFxFadeFast", kRenderFxFadeFast)
        .value("kRenderFxSolidSlow", kRenderFxSolidSlow)
        .value("kRenderFxSolidFast", kRenderFxSolidFast)
        .value("kRenderFxStrobeSlow", kRenderFxStrobeSlow)
        .value("kRenderFxStrobeFast", kRenderFxStrobeFast)
        .value("kRenderFxStrobeFaster", kRenderFxStrobeFaster)
        .value("kRenderFxFlickerSlow", kRenderFxFlickerSlow)
        .value("kRenderFxFlickerFast", kRenderFxFlickerFast)
        .value("kRenderFxNoDissipation", kRenderFxNoDissipation)
        .value("kRenderFxFadeOut", kRenderFxFadeOut)
        .value("kRenderFxFadeIn", kRenderFxFadeIn)
        .value("kRenderFxPulseFastWider", kRenderFxPulseFastWider)
        .value("kRenderFxGlowShell", kRenderFxGlowShell)
        .value("kRenderFxMax", kRenderFxMax)
        .export_values()
        ;

    bp::enum_< RenderMode_t>("RenderMode_t")
        .value("kRenderNormal", kRenderNormal)
        .value("kRenderTransColor", kRenderTransColor)
        .value("kRenderTransTexture", kRenderTransTexture)
        .value("kRenderGlow", kRenderGlow)
        .value("kRenderTransAlpha", kRenderTransAlpha)
        .value("kRenderTransAdd", kRenderTransAdd)
        .value("kRenderEnvironmental", kRenderEnvironmental)
        .value("kRenderTransAddFrameBlend", kRenderTransAddFrameBlend)
        .value("kRenderTransAlphaAdd", kRenderTransAlphaAdd)
        .value("kRenderWorldGlow", kRenderWorldGlow)
        .value("kRenderNone", kRenderNone)
        .value("kRenderModeCount", kRenderModeCount)
        .export_values()
        ;

    bp::enum_< SolidFlags_t>("SolidFlags_t")
        .value("FSOLID_CUSTOMRAYTEST", FSOLID_CUSTOMRAYTEST)
        .value("FSOLID_CUSTOMBOXTEST", FSOLID_CUSTOMBOXTEST)
        .value("FSOLID_NOT_SOLID", FSOLID_NOT_SOLID)
        .value("FSOLID_TRIGGER", FSOLID_TRIGGER)
        .value("FSOLID_NOT_STANDABLE", FSOLID_NOT_STANDABLE)
        .value("FSOLID_VOLUME_CONTENTS", FSOLID_VOLUME_CONTENTS)
        .value("FSOLID_FORCE_WORLD_ALIGNED", FSOLID_FORCE_WORLD_ALIGNED)
        .value("FSOLID_USE_TRIGGER_BOUNDS", FSOLID_USE_TRIGGER_BOUNDS)
        .value("FSOLID_ROOT_PARENT_ALIGNED", FSOLID_ROOT_PARENT_ALIGNED)
        .value("FSOLID_TRIGGER_TOUCH_DEBRIS", FSOLID_TRIGGER_TOUCH_DEBRIS)
        .value("FSOLID_TRIGGER_TOUCH_PLAYER", FSOLID_TRIGGER_TOUCH_PLAYER)
        .value("FSOLID_NOT_MOVEABLE", FSOLID_NOT_MOVEABLE)
        .value("FSOLID_MAX_BITS", FSOLID_MAX_BITS)
        .export_values()
        ;

    bp::enum_< SolidType_t>("SolidType_t")
        .value("SOLID_NONE", SOLID_NONE)
        .value("SOLID_BSP", SOLID_BSP)
        .value("SOLID_BBOX", SOLID_BBOX)
        .value("SOLID_OBB", SOLID_OBB)
        .value("SOLID_OBB_YAW", SOLID_OBB_YAW)
        .value("SOLID_CUSTOM", SOLID_CUSTOM)
        .value("SOLID_VPHYSICS", SOLID_VPHYSICS)
        .value("SOLID_LAST", SOLID_LAST)
        .export_values()
        ;

    bp::enum_< USE_TYPE>("USE_TYPE")
        .value("USE_OFF", USE_OFF)
        .value("USE_ON", USE_ON)
        .value("USE_SET", USE_SET)
        .value("USE_TOGGLE", USE_TOGGLE)
        .export_values()
        ;

    bp::enum_< WarsCollision_Group_t>("WarsCollision_Group_t")
        .value("WARS_COLLISION_GROUP_IGNORE_UNIT_START", WARS_COLLISION_GROUP_IGNORE_UNIT_START)
        .value("WARS_COLLISION_GROUP_IGNORE_UNIT_END", WARS_COLLISION_GROUP_IGNORE_UNIT_END)
        .value("WARS_COLLISION_GROUP_UNIT_START", WARS_COLLISION_GROUP_UNIT_START)
        .value("WARS_COLLISION_GROUP_UNIT_END", WARS_COLLISION_GROUP_UNIT_END)
        .value("WARS_COLLISION_GROUP_IGNORE_ALL_UNITS", WARS_COLLISION_GROUP_IGNORE_ALL_UNITS)
        .value("WARS_COLLISION_GROUP_BUILDING", WARS_COLLISION_GROUP_BUILDING)
        .value("WARS_COLLISION_GROUP_IGNORE_ALL_UNITS_AND_BUILD", WARS_COLLISION_GROUP_IGNORE_ALL_UNITS_AND_BUILD)
        .export_values()
        ;

    bp::enum_< _fieldtypes>("_fieldtypes")
        .value("FIELD_VOID", FIELD_VOID)
        .value("FIELD_FLOAT", FIELD_FLOAT)
        .value("FIELD_STRING", FIELD_STRING)
        .value("FIELD_VECTOR", FIELD_VECTOR)
        .value("FIELD_QUATERNION", FIELD_QUATERNION)
        .value("FIELD_INTEGER", FIELD_INTEGER)
        .value("FIELD_BOOLEAN", FIELD_BOOLEAN)
        .value("FIELD_SHORT", FIELD_SHORT)
        .value("FIELD_CHARACTER", FIELD_CHARACTER)
        .value("FIELD_COLOR32", FIELD_COLOR32)
        .value("FIELD_EMBEDDED", FIELD_EMBEDDED)
        .value("FIELD_CUSTOM", FIELD_CUSTOM)
        .value("FIELD_CLASSPTR", FIELD_CLASSPTR)
        .value("FIELD_EHANDLE", FIELD_EHANDLE)
        .value("FIELD_EDICT", FIELD_EDICT)
        .value("FIELD_POSITION_VECTOR", FIELD_POSITION_VECTOR)
        .value("FIELD_TIME", FIELD_TIME)
        .value("FIELD_TICK", FIELD_TICK)
        .value("FIELD_MODELNAME", FIELD_MODELNAME)
        .value("FIELD_SOUNDNAME", FIELD_SOUNDNAME)
        .value("FIELD_INPUT", FIELD_INPUT)
        .value("FIELD_FUNCTION", FIELD_FUNCTION)
        .value("FIELD_VMATRIX", FIELD_VMATRIX)
        .value("FIELD_VMATRIX_WORLDSPACE", FIELD_VMATRIX_WORLDSPACE)
        .value("FIELD_MATRIX3X4_WORLDSPACE", FIELD_MATRIX3X4_WORLDSPACE)
        .value("FIELD_INTERVAL", FIELD_INTERVAL)
        .value("FIELD_MODELINDEX", FIELD_MODELINDEX)
        .value("FIELD_MATERIALINDEX", FIELD_MATERIALINDEX)
        .value("FIELD_VECTOR2D", FIELD_VECTOR2D)
        .value("FIELD_INTEGER64", FIELD_INTEGER64)
        .value("FIELD_VECTOR4D", FIELD_VECTOR4D)
        .value("FIELD_TYPECOUNT", FIELD_TYPECOUNT)
        .export_values()
        ;

    bp::class_< CBaseEntityOutput_wrapper, boost::noncopyable >( "CBaseEntityOutput", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddEventAction"
            , (void ( ::CBaseEntityOutput::* )( ::CEventAction * ) )( &::CBaseEntityOutput::AddEventAction )
            , ( bp::arg("pEventAction") ) )    
        .def( 
            "DeleteAllElements"
            , (void ( ::CBaseEntityOutput::* )(  ) )( &::CBaseEntityOutput::DeleteAllElements ) )    
        .def( 
            "FireOutput"
            , (void ( ::CBaseEntityOutput::* )( ::variant_t,::CBaseEntity *,::CBaseEntity *,float ) )( &::CBaseEntityOutput::FireOutput )
            , ( bp::arg("Value"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("fDelay")=0 ) )    
        .def( 
            "GetMaxDelay"
            , (float ( ::CBaseEntityOutput::* )(  ) )( &::CBaseEntityOutput::GetMaxDelay ) )    
        .def( 
            "NumberOfElements"
            , (int ( ::CBaseEntityOutput::* )(  ) )( &::CBaseEntityOutput::NumberOfElements ) )    
        .def( 
            "ParseEventAction"
            , (void ( ::CBaseEntityOutput::* )( char const * ) )( &::CBaseEntityOutput::ParseEventAction )
            , ( bp::arg("EventData") ) )    
        .def( 
            "RemoveEventAction"
            , (void ( ::CBaseEntityOutput::* )( ::CEventAction * ) )( &::CBaseEntityOutput::RemoveEventAction )
            , ( bp::arg("pEventAction") ) )    
        .def( 
            "ValueFieldType"
            , (::fieldtype_t ( ::CBaseEntityOutput::* )(  ) )( &::CBaseEntityOutput::ValueFieldType ) );

    bp::class_< CEventQueue >( "CEventQueue", bp::init< >() )    
        .def( 
            "AddEvent"
            , (void ( ::CEventQueue::* )( char const *,char const *,::variant_t,float,::CBaseEntity *,::CBaseEntity *,int ) )( &::CEventQueue::AddEvent )
            , ( bp::arg("target"), bp::arg("action"), bp::arg("Value"), bp::arg("fireDelay"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("outputID")=(int)(0) ) )    
        .def( 
            "AddEvent"
            , (void ( ::CEventQueue::* )( ::CBaseEntity *,char const *,float,::CBaseEntity *,::CBaseEntity *,int ) )( &::CEventQueue::AddEvent )
            , ( bp::arg("target"), bp::arg("action"), bp::arg("fireDelay"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("outputID")=(int)(0) ) )    
        .def( 
            "AddEvent"
            , (void ( ::CEventQueue::* )( ::CBaseEntity *,char const *,::variant_t,float,::CBaseEntity *,::CBaseEntity *,int ) )( &::CEventQueue::AddEvent )
            , ( bp::arg("target"), bp::arg("action"), bp::arg("Value"), bp::arg("fireDelay"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("outputID")=(int)(0) ) )    
        .def( 
            "CancelEventOn"
            , (void ( ::CEventQueue::* )( ::CBaseEntity *,char const * ) )( &::CEventQueue::CancelEventOn )
            , ( bp::arg("pTarget"), bp::arg("sInputName") ) )    
        .def( 
            "CancelEvents"
            , (void ( ::CEventQueue::* )( ::CBaseEntity * ) )( &::CEventQueue::CancelEvents )
            , ( bp::arg("pCaller") ) )    
        .def( 
            "Clear"
            , (void ( ::CEventQueue::* )(  ) )( &::CEventQueue::Clear ) )    
        .def( 
            "Dump"
            , (void ( ::CEventQueue::* )(  ) )( &::CEventQueue::Dump ) )    
        .def( 
            "HasEventPending"
            , (bool ( ::CEventQueue::* )( ::CBaseEntity *,char const * ) )( &::CEventQueue::HasEventPending )
            , ( bp::arg("pTarget"), bp::arg("sInputName") ) )    
        .def( 
            "ServiceEvents"
            , (void ( ::CEventQueue::* )(  ) )( &::CEventQueue::ServiceEvents ) );

    bp::class_< IEntityFindFilter_wrapper, boost::noncopyable >( "IEntityFindFilter" )    
        .def( 
            "GetFilterResult"
            , bp::pure_virtual( (::CBaseEntity * ( ::IEntityFindFilter::* )(  ) )(&::IEntityFindFilter::GetFilterResult) )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "ShouldFindEntity"
            , bp::pure_virtual( (bool ( ::IEntityFindFilter::* )( ::CBaseEntity * ) )(&::IEntityFindFilter::ShouldFindEntity) )
            , ( bp::arg("pEntity") ) );

    bp::class_< CGlobalEntityList_wrapper, boost::noncopyable >( "CGlobalEntityList", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddPostClientMessageEntity"
            , (void ( ::CGlobalEntityList::* )( ::CBaseEntity * ) )( &::CGlobalEntityList::AddPostClientMessageEntity )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "CleanupDeleteList"
            , (void ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::CleanupDeleteList ) )    
        .def( 
            "FindEntityByClassname"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const * ) )( &::CGlobalEntityList::FindEntityByClassname )
            , ( bp::arg("pStartEntity"), bp::arg("szName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameFast"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,::string_t ) )( &::CGlobalEntityList::FindEntityByClassnameFast )
            , ( bp::arg("pStartEntity"), bp::arg("iszClassname") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameNearest"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( char const *,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityByClassnameNearest )
            , ( bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameNearest2D"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( char const *,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityByClassnameNearest2D )
            , ( bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameNearestFast"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::string_t,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityByClassnameNearestFast )
            , ( bp::arg("iszClassname"), bp::arg("vecSrc"), bp::arg("flRadius") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameWithin"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityByClassnameWithin )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByClassnameWithin"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::Vector const &,::Vector const & ) )( &::CGlobalEntityList::FindEntityByClassnameWithin )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("vecMins"), bp::arg("vecMaxs") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByModel"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const * ) )( &::CGlobalEntityList::FindEntityByModel )
            , ( bp::arg("pStartEntity"), bp::arg("szModelName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByName"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,::IEntityFindFilter * ) )( &::CGlobalEntityList::FindEntityByName )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object(), bp::arg("pFilter")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByName"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,::string_t,::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,::IEntityFindFilter * ) )( &::CGlobalEntityList::FindEntityByName )
            , ( bp::arg("pStartEntity"), bp::arg("iszName"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object(), bp::arg("pFilter")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByNameFast"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,::string_t ) )( &::CGlobalEntityList::FindEntityByNameFast )
            , ( bp::arg("pStartEntity"), bp::arg("iszName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByNameNearest"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( char const *,::Vector const &,float,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityByNameNearest )
            , ( bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByNameWithin"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::Vector const &,float,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityByNameWithin )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByOutputTarget"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,::string_t ) )( &::CGlobalEntityList::FindEntityByOutputTarget )
            , ( bp::arg("pStartEntity"), bp::arg("iTarget") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityByTarget"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const * ) )( &::CGlobalEntityList::FindEntityByTarget )
            , ( bp::arg("pStartEntity"), bp::arg("szName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityClassNearestFacing"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::Vector const &,::Vector const &,float,char * ) )( &::CGlobalEntityList::FindEntityClassNearestFacing )
            , ( bp::arg("origin"), bp::arg("facing"), bp::arg("threshold"), bp::arg("classname") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityGeneric"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityGeneric )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityGenericNearest"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( char const *,::Vector const &,float,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityGenericNearest )
            , ( bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityGenericWithin"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,char const *,::Vector const &,float,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityGenericWithin )
            , ( bp::arg("pStartEntity"), bp::arg("szName"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityInSphere"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity *,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityInSphere )
            , ( bp::arg("pStartEntity"), bp::arg("vecCenter"), bp::arg("flRadius") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityNearestFacing"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::Vector const &,::Vector const &,float ) )( &::CGlobalEntityList::FindEntityNearestFacing )
            , ( bp::arg("origin"), bp::arg("facing"), bp::arg("threshold") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindEntityProcedural"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( char const *,::CBaseEntity *,::CBaseEntity *,::CBaseEntity * ) )( &::CGlobalEntityList::FindEntityProcedural )
            , ( bp::arg("szName"), bp::arg("pSearchingEntity")=bp::object(), bp::arg("pActivator")=bp::object(), bp::arg("pCaller")=bp::object() )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FirstEnt"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::FirstEnt )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "IsClearingEntities"
            , (bool ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::IsClearingEntities ) )    
        .def( 
            "IsEntityPtr"
            , (bool ( ::CGlobalEntityList::* )( void * ) )( &::CGlobalEntityList::IsEntityPtr )
            , ( bp::arg("pTest") ) )    
        .def( 
            "NextEnt"
            , (::CBaseEntity * ( ::CGlobalEntityList::* )( ::CBaseEntity * ) )( &::CGlobalEntityList::NextEnt )
            , ( bp::arg("pCurrentEnt") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "NumberOfEdicts"
            , (int ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::NumberOfEdicts ) )    
        .def( 
            "NumberOfEntities"
            , (int ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::NumberOfEntities ) )    
        .def( 
            "OnAddEntity"
            , (void ( CGlobalEntityList_wrapper::* )( ::IHandleEntity *,::CBaseHandle ) )(&CGlobalEntityList_wrapper::OnAddEntity)
            , ( bp::arg("pEnt"), bp::arg("handle") ) )    
        .def( 
            "OnRemoveEntity"
            , (void ( CGlobalEntityList_wrapper::* )( ::IHandleEntity *,::CBaseHandle ) )(&CGlobalEntityList_wrapper::OnRemoveEntity)
            , ( bp::arg("pEnt"), bp::arg("handle") ) )    
        .def( 
            "PostClientMessagesSent"
            , (void ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::PostClientMessagesSent ) )    
        .def( 
            "ReportEntityFlagsChanged"
            , (void ( ::CGlobalEntityList::* )( ::CBaseEntity *,unsigned int,unsigned int ) )( &::CGlobalEntityList::ReportEntityFlagsChanged )
            , ( bp::arg("pEntity"), bp::arg("flagsOld"), bp::arg("flagsNow") ) )    
        .def( 
            "ResetDeleteList"
            , (int ( ::CGlobalEntityList::* )(  ) )( &::CGlobalEntityList::ResetDeleteList ) );

    { //::CTakeDamageInfo
        typedef bp::class_< CTakeDamageInfo > CTakeDamageInfo_exposer_t;
        CTakeDamageInfo_exposer_t CTakeDamageInfo_exposer = CTakeDamageInfo_exposer_t( "CTakeDamageInfo", bp::init< >() );
        bp::scope CTakeDamageInfo_scope( CTakeDamageInfo_exposer );
        CTakeDamageInfo_exposer.def( bp::init< CBaseEntity *, CBaseEntity *, float, int, bp::optional< int > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) )) );
        CTakeDamageInfo_exposer.def( bp::init< CBaseEntity *, CBaseEntity *, CBaseEntity *, float, int, bp::optional< int > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) )) );
        CTakeDamageInfo_exposer.def( bp::init< CBaseEntity *, CBaseEntity *, Vector const &, Vector const &, float, int, bp::optional< int, Vector * > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() )) );
        CTakeDamageInfo_exposer.def( bp::init< CBaseEntity *, CBaseEntity *, CBaseEntity *, Vector const &, Vector const &, float, int, bp::optional< int, Vector * > >(( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() )) );
        { //::CTakeDamageInfo::AddDamage
        
            typedef void ( ::CTakeDamageInfo::*AddDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AddDamage"
                , AddDamage_function_type( &::CTakeDamageInfo::AddDamage )
                , ( bp::arg("flAddAmount") ) );
        
        }
        { //::CTakeDamageInfo::AddDamageType
        
            typedef void ( ::CTakeDamageInfo::*AddDamageType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AddDamageType"
                , AddDamageType_function_type( &::CTakeDamageInfo::AddDamageType )
                , ( bp::arg("bitsDamageType") ) );
        
        }
        { //::CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel
        
            typedef void ( ::CTakeDamageInfo::*AdjustPlayerDamageInflictedForSkillLevel_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AdjustPlayerDamageInflictedForSkillLevel"
                , AdjustPlayerDamageInflictedForSkillLevel_function_type( &::CTakeDamageInfo::AdjustPlayerDamageInflictedForSkillLevel ) );
        
        }
        { //::CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel
        
            typedef void ( ::CTakeDamageInfo::*AdjustPlayerDamageTakenForSkillLevel_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "AdjustPlayerDamageTakenForSkillLevel"
                , AdjustPlayerDamageTakenForSkillLevel_function_type( &::CTakeDamageInfo::AdjustPlayerDamageTakenForSkillLevel ) );
        
        }
        { //::CTakeDamageInfo::BaseDamageIsValid
        
            typedef bool ( ::CTakeDamageInfo::*BaseDamageIsValid_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "BaseDamageIsValid"
                , BaseDamageIsValid_function_type( &::CTakeDamageInfo::BaseDamageIsValid ) );
        
        }
        { //::CTakeDamageInfo::CopyDamageToBaseDamage
        
            typedef void ( ::CTakeDamageInfo::*CopyDamageToBaseDamage_function_type )(  ) ;
            
            CTakeDamageInfo_exposer.def( 
                "CopyDamageToBaseDamage"
                , CopyDamageToBaseDamage_function_type( &::CTakeDamageInfo::CopyDamageToBaseDamage ) );
        
        }
        { //::CTakeDamageInfo::DebugGetDamageTypeString
        
            typedef void ( *DebugGetDamageTypeString_function_type )( unsigned int,char *,int );
            
            CTakeDamageInfo_exposer.def( 
                "DebugGetDamageTypeString"
                , DebugGetDamageTypeString_function_type( &::CTakeDamageInfo::DebugGetDamageTypeString )
                , ( bp::arg("DamageType"), bp::arg("outbuf"), bp::arg("outbuflength") ) );
        
        }
        { //::CTakeDamageInfo::GetAmmoName
        
            typedef char const * ( ::CTakeDamageInfo::*GetAmmoName_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAmmoName"
                , GetAmmoName_function_type( &::CTakeDamageInfo::GetAmmoName ) );
        
        }
        { //::CTakeDamageInfo::GetAmmoType
        
            typedef int ( ::CTakeDamageInfo::*GetAmmoType_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAmmoType"
                , GetAmmoType_function_type( &::CTakeDamageInfo::GetAmmoType ) );
        
        }
        { //::CTakeDamageInfo::GetAttacker
        
            typedef ::CBaseEntity * ( ::CTakeDamageInfo::*GetAttacker_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetAttacker"
                , GetAttacker_function_type( &::CTakeDamageInfo::GetAttacker )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::GetBaseDamage
        
            typedef float ( ::CTakeDamageInfo::*GetBaseDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetBaseDamage"
                , GetBaseDamage_function_type( &::CTakeDamageInfo::GetBaseDamage ) );
        
        }
        { //::CTakeDamageInfo::GetDamage
        
            typedef float ( ::CTakeDamageInfo::*GetDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamage"
                , GetDamage_function_type( &::CTakeDamageInfo::GetDamage ) );
        
        }
        { //::CTakeDamageInfo::GetDamageCustom
        
            typedef int ( ::CTakeDamageInfo::*GetDamageCustom_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageCustom"
                , GetDamageCustom_function_type( &::CTakeDamageInfo::GetDamageCustom ) );
        
        }
        { //::CTakeDamageInfo::GetDamageForce
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetDamageForce_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageForce"
                , GetDamageForce_function_type( &::CTakeDamageInfo::GetDamageForce ) );
        
        }
        { //::CTakeDamageInfo::GetDamagePosition
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetDamagePosition_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamagePosition"
                , GetDamagePosition_function_type( &::CTakeDamageInfo::GetDamagePosition ) );
        
        }
        { //::CTakeDamageInfo::GetDamageStats
        
            typedef int ( ::CTakeDamageInfo::*GetDamageStats_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageStats"
                , GetDamageStats_function_type( &::CTakeDamageInfo::GetDamageStats ) );
        
        }
        { //::CTakeDamageInfo::GetDamageType
        
            typedef int ( ::CTakeDamageInfo::*GetDamageType_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetDamageType"
                , GetDamageType_function_type( &::CTakeDamageInfo::GetDamageType ) );
        
        }
        { //::CTakeDamageInfo::GetInflictor
        
            typedef ::CBaseEntity * ( ::CTakeDamageInfo::*GetInflictor_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetInflictor"
                , GetInflictor_function_type( &::CTakeDamageInfo::GetInflictor )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::GetMaxDamage
        
            typedef float ( ::CTakeDamageInfo::*GetMaxDamage_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetMaxDamage"
                , GetMaxDamage_function_type( &::CTakeDamageInfo::GetMaxDamage ) );
        
        }
        { //::CTakeDamageInfo::GetRadius
        
            typedef float ( ::CTakeDamageInfo::*GetRadius_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetRadius"
                , GetRadius_function_type( &::CTakeDamageInfo::GetRadius ) );
        
        }
        { //::CTakeDamageInfo::GetReportedPosition
        
            typedef ::Vector ( ::CTakeDamageInfo::*GetReportedPosition_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetReportedPosition"
                , GetReportedPosition_function_type( &::CTakeDamageInfo::GetReportedPosition ) );
        
        }
        { //::CTakeDamageInfo::GetWeapon
        
            typedef ::CBaseEntity * ( ::CTakeDamageInfo::*GetWeapon_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "GetWeapon"
                , GetWeapon_function_type( &::CTakeDamageInfo::GetWeapon )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CTakeDamageInfo::IsForceFriendlyFire
        
            typedef bool ( ::CTakeDamageInfo::*IsForceFriendlyFire_function_type )(  ) const;
            
            CTakeDamageInfo_exposer.def( 
                "IsForceFriendlyFire"
                , IsForceFriendlyFire_function_type( &::CTakeDamageInfo::IsForceFriendlyFire ) );
        
        }
        { //::CTakeDamageInfo::ScaleDamage
        
            typedef void ( ::CTakeDamageInfo::*ScaleDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "ScaleDamage"
                , ScaleDamage_function_type( &::CTakeDamageInfo::ScaleDamage )
                , ( bp::arg("flScaleAmount") ) );
        
        }
        { //::CTakeDamageInfo::ScaleDamageForce
        
            typedef void ( ::CTakeDamageInfo::*ScaleDamageForce_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "ScaleDamageForce"
                , ScaleDamageForce_function_type( &::CTakeDamageInfo::ScaleDamageForce )
                , ( bp::arg("flScaleAmount") ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::CBaseEntity *,::CBaseEntity *,float,int,int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,float,int,int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0) ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::CBaseEntity *,::CBaseEntity *,::Vector const &,::Vector const &,float,int,int,::Vector * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() ) );
        
        }
        { //::CTakeDamageInfo::Set
        
            typedef void ( ::CTakeDamageInfo::*Set_function_type )( ::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,::Vector const &,::Vector const &,float,int,int,::Vector * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "Set"
                , Set_function_type( &::CTakeDamageInfo::Set )
                , ( bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType")=(int)(0), bp::arg("reportedPosition")=bp::object() ) );
        
        }
        { //::CTakeDamageInfo::SetAmmoType
        
            typedef void ( ::CTakeDamageInfo::*SetAmmoType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetAmmoType"
                , SetAmmoType_function_type( &::CTakeDamageInfo::SetAmmoType )
                , ( bp::arg("iAmmoType") ) );
        
        }
        { //::CTakeDamageInfo::SetAttacker
        
            typedef void ( ::CTakeDamageInfo::*SetAttacker_function_type )( ::CBaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetAttacker"
                , SetAttacker_function_type( &::CTakeDamageInfo::SetAttacker )
                , ( bp::arg("pAttacker") ) );
        
        }
        { //::CTakeDamageInfo::SetDamage
        
            typedef void ( ::CTakeDamageInfo::*SetDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamage"
                , SetDamage_function_type( &::CTakeDamageInfo::SetDamage )
                , ( bp::arg("flDamage") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageCustom
        
            typedef void ( ::CTakeDamageInfo::*SetDamageCustom_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageCustom"
                , SetDamageCustom_function_type( &::CTakeDamageInfo::SetDamageCustom )
                , ( bp::arg("iDamageCustom") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageForce
        
            typedef void ( ::CTakeDamageInfo::*SetDamageForce_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageForce"
                , SetDamageForce_function_type( &::CTakeDamageInfo::SetDamageForce )
                , ( bp::arg("damageForce") ) );
        
        }
        { //::CTakeDamageInfo::SetDamagePosition
        
            typedef void ( ::CTakeDamageInfo::*SetDamagePosition_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamagePosition"
                , SetDamagePosition_function_type( &::CTakeDamageInfo::SetDamagePosition )
                , ( bp::arg("damagePosition") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageStats
        
            typedef void ( ::CTakeDamageInfo::*SetDamageStats_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageStats"
                , SetDamageStats_function_type( &::CTakeDamageInfo::SetDamageStats )
                , ( bp::arg("iDamageCustom") ) );
        
        }
        { //::CTakeDamageInfo::SetDamageType
        
            typedef void ( ::CTakeDamageInfo::*SetDamageType_function_type )( int ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetDamageType"
                , SetDamageType_function_type( &::CTakeDamageInfo::SetDamageType )
                , ( bp::arg("bitsDamageType") ) );
        
        }
        { //::CTakeDamageInfo::SetForceFriendlyFire
        
            typedef void ( ::CTakeDamageInfo::*SetForceFriendlyFire_function_type )( bool ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetForceFriendlyFire"
                , SetForceFriendlyFire_function_type( &::CTakeDamageInfo::SetForceFriendlyFire )
                , ( bp::arg("bValue") ) );
        
        }
        { //::CTakeDamageInfo::SetInflictor
        
            typedef void ( ::CTakeDamageInfo::*SetInflictor_function_type )( ::CBaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetInflictor"
                , SetInflictor_function_type( &::CTakeDamageInfo::SetInflictor )
                , ( bp::arg("pInflictor") ) );
        
        }
        { //::CTakeDamageInfo::SetMaxDamage
        
            typedef void ( ::CTakeDamageInfo::*SetMaxDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetMaxDamage"
                , SetMaxDamage_function_type( &::CTakeDamageInfo::SetMaxDamage )
                , ( bp::arg("flMaxDamage") ) );
        
        }
        { //::CTakeDamageInfo::SetRadius
        
            typedef void ( ::CTakeDamageInfo::*SetRadius_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetRadius"
                , SetRadius_function_type( &::CTakeDamageInfo::SetRadius )
                , ( bp::arg("flRadius") ) );
        
        }
        { //::CTakeDamageInfo::SetReportedPosition
        
            typedef void ( ::CTakeDamageInfo::*SetReportedPosition_function_type )( ::Vector const & ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetReportedPosition"
                , SetReportedPosition_function_type( &::CTakeDamageInfo::SetReportedPosition )
                , ( bp::arg("reportedPosition") ) );
        
        }
        { //::CTakeDamageInfo::SetWeapon
        
            typedef void ( ::CTakeDamageInfo::*SetWeapon_function_type )( ::CBaseEntity * ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SetWeapon"
                , SetWeapon_function_type( &::CTakeDamageInfo::SetWeapon )
                , ( bp::arg("pWeapon") ) );
        
        }
        { //::CTakeDamageInfo::SubtractDamage
        
            typedef void ( ::CTakeDamageInfo::*SubtractDamage_function_type )( float ) ;
            
            CTakeDamageInfo_exposer.def( 
                "SubtractDamage"
                , SubtractDamage_function_type( &::CTakeDamageInfo::SubtractDamage )
                , ( bp::arg("flSubtractAmount") ) );
        
        }
        CTakeDamageInfo_exposer.staticmethod( "DebugGetDamageTypeString" );
        { //property "attributes"[fget=::CTakeDamageInfo::GetAttributes, fset=::CTakeDamageInfo::SetAttributes]
        
            typedef ::boost::python::api::object ( ::CTakeDamageInfo::*fget )(  ) const;
            typedef void ( ::CTakeDamageInfo::*fset )( ::boost::python::api::object ) ;
            
            CTakeDamageInfo_exposer.add_property( 
                "attributes"
                , fget( &::CTakeDamageInfo::GetAttributes )
                , fset( &::CTakeDamageInfo::SetAttributes ) );
        
        }
    }

    bp::class_< CMultiDamage, bp::bases< CTakeDamageInfo > >( "CMultiDamage", bp::init< >() )    
        .def( 
            "GetTarget"
            , (::CBaseEntity * ( ::CMultiDamage::* )(  ) const)( &::CMultiDamage::GetTarget )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "Init"
            , (void ( ::CMultiDamage::* )( ::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,::CBaseEntity *,::Vector const &,::Vector const &,::Vector const &,float,int,int ) )( &::CMultiDamage::Init )
            , ( bp::arg("pTarget"), bp::arg("pInflictor"), bp::arg("pAttacker"), bp::arg("pWeapon"), bp::arg("damageForce"), bp::arg("damagePosition"), bp::arg("reportedPosition"), bp::arg("flDamage"), bp::arg("bitsDamageType"), bp::arg("iKillType") ) )    
        .def( 
            "IsClear"
            , (bool ( ::CMultiDamage::* )(  ) )( &::CMultiDamage::IsClear ) )    
        .def( 
            "SetTarget"
            , (void ( ::CMultiDamage::* )( ::CBaseEntity * ) )( &::CMultiDamage::SetTarget )
            , ( bp::arg("pTarget") ) );

    bp::class_< CPythonNetworkArray >( "NetworkArrayInternal", bp::init< bp::api::object, char const *, bp::optional< bp::list, bool, bool, bp::api::object > >(( bp::arg("self"), bp::arg("name"), bp::arg("data")=boost::python::list(), bp::arg("initstatechanged")=(bool)(false), bp::arg("changedcallback")=(bool)(false), bp::arg("sendproxy")=boost::python::api::object() )) )    
        .def( 
            "__delitem__"
            , (void ( ::CPythonNetworkArray::* )( ::boost::python::api::object ) )( &::CPythonNetworkArray::DelItem )
            , ( bp::arg("key") ) )    
        .def( 
            "__getitem__"
            , (::boost::python::api::object ( ::CPythonNetworkArray::* )( ::boost::python::api::object ) )( &::CPythonNetworkArray::GetItem )
            , ( bp::arg("key") ) )    
        .def( 
            "Set"
            , (void ( ::CPythonNetworkArray::* )( ::boost::python::list ) )( &::CPythonNetworkArray::Set )
            , ( bp::arg("data") ) )    
        .def( 
            "__setitem__"
            , (void ( ::CPythonNetworkArray::* )( ::boost::python::api::object,::boost::python::api::object ) )( &::CPythonNetworkArray::SetItem )
            , ( bp::arg("key"), bp::arg("data") ) )    
        .def( 
            "__str__"
            , (::boost::python::api::object ( ::CPythonNetworkArray::* )(  ) )( &::CPythonNetworkArray::Str ) );

    bp::class_< CPythonNetworkDict >( "NetworkDictInternal", bp::init< bp::api::object, char const *, bp::optional< bp::dict, bool, bool, bp::api::object > >(( bp::arg("self"), bp::arg("name"), bp::arg("data")=boost::python::dict(), bp::arg("initstatechanged")=(bool)(false), bp::arg("changedcallback")=(bool)(false), bp::arg("sendproxy")=boost::python::api::object() )) )    
        .def( 
            "__getitem__"
            , (::boost::python::api::object ( ::CPythonNetworkDict::* )( ::boost::python::api::object ) )( &::CPythonNetworkDict::GetItem )
            , ( bp::arg("key") ) )    
        .def( 
            "Set"
            , (void ( ::CPythonNetworkDict::* )( ::boost::python::dict ) )( &::CPythonNetworkDict::Set )
            , ( bp::arg("data") ) )    
        .def( 
            "__setitem__"
            , (void ( ::CPythonNetworkDict::* )( ::boost::python::api::object,::boost::python::api::object ) )( &::CPythonNetworkDict::SetItem )
            , ( bp::arg("key"), bp::arg("data") ) )    
        .def( 
            "__str__"
            , (::boost::python::api::object ( ::CPythonNetworkDict::* )(  ) )( &::CPythonNetworkDict::Str ) );

    bp::class_< CPythonNetworkVar >( "NetworkVarInternal", bp::init< bp::api::object, char const *, bp::optional< bp::api::object, bool, bool, bp::api::object > >(( bp::arg("self"), bp::arg("name"), bp::arg("data")=boost::python::api::object(), bp::arg("initstatechanged")=(bool)(false), bp::arg("changedcallback")=(bool)(false), bp::arg("sendproxy")=boost::python::api::object() )) )    
        .def( 
            "Get"
            , (::boost::python::api::object ( ::CPythonNetworkVar::* )(  ) )( &::CPythonNetworkVar::Get ) )    
        .def( 
            "Set"
            , (void ( ::CPythonNetworkVar::* )( ::boost::python::api::object ) )( &::CPythonNetworkVar::Set )
            , ( bp::arg("data") ) )    
        .def( 
            "__str__"
            , (::boost::python::api::object ( ::CPythonNetworkVar::* )(  ) )( &::CPythonNetworkVar::Str ) );

    bp::class_< CPythonSendProxyBase_wrapper >( "SendProxyBase" )    
        .def( 
            "ShouldSend"
            , (bool ( ::CPythonSendProxyBase::* )( ::CBaseEntity *,int ) )(&::CPythonSendProxyBase::ShouldSend)
            , (bool ( CPythonSendProxyBase_wrapper::* )( ::CBaseEntity *,int ) )(&CPythonSendProxyBase_wrapper::default_ShouldSend)
            , ( bp::arg("pEnt"), bp::arg("iClient") ) );

    bp::class_< CPythonSendProxyAlliesOnly, bp::bases< CPythonSendProxyBase > >( "SendProxyAlliesOnly" )    
        .def( 
            "ShouldSend"
            , (bool ( ::CPythonSendProxyAlliesOnly::* )( ::CBaseEntity *,int ) )( &::CPythonSendProxyAlliesOnly::ShouldSend )
            , ( bp::arg("pEnt"), bp::arg("iClient") ) );

    bp::class_< CPythonSendProxyOwnerOnly, bp::bases< CPythonSendProxyBase > >( "SendProxyOwnerOnly" )    
        .def( 
            "ShouldSend"
            , (bool ( ::CPythonSendProxyOwnerOnly::* )( ::CBaseEntity *,int ) )( &::CPythonSendProxyOwnerOnly::ShouldSend )
            , ( bp::arg("pEnt"), bp::arg("iClient") ) );

    { //::CShotManipulator
        typedef bp::class_< CShotManipulator > CShotManipulator_exposer_t;
        CShotManipulator_exposer_t CShotManipulator_exposer = CShotManipulator_exposer_t( "CShotManipulator", bp::init< Vector const & >(( bp::arg("vecForward") )) );
        bp::scope CShotManipulator_scope( CShotManipulator_exposer );
        bp::implicitly_convertible< Vector const &, CShotManipulator >();
        { //::CShotManipulator::ApplyAngularSpread
        
            typedef ::Vector const & ( ::CShotManipulator::*ApplyAngularSpread_function_type )( ::Vector const &,float ) ;
            
            CShotManipulator_exposer.def( 
                "ApplyAngularSpread"
                , ApplyAngularSpread_function_type( &::CShotManipulator::ApplyAngularSpread )
                , ( bp::arg("vecSpread"), bp::arg("bias")=1.0e+0 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::ApplySpread
        
            typedef ::Vector const & ( ::CShotManipulator::*ApplySpread_function_type )( ::Vector const &,float ) ;
            
            CShotManipulator_exposer.def( 
                "ApplySpread"
                , ApplySpread_function_type( &::CShotManipulator::ApplySpread )
                , ( bp::arg("vecSpread"), bp::arg("bias")=1.0e+0 )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetResult
        
            typedef ::Vector const & ( ::CShotManipulator::*GetResult_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetResult"
                , GetResult_function_type( &::CShotManipulator::GetResult )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetRightVector
        
            typedef ::Vector const & ( ::CShotManipulator::*GetRightVector_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetRightVector"
                , GetRightVector_function_type( &::CShotManipulator::GetRightVector )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetShotDirection
        
            typedef ::Vector const & ( ::CShotManipulator::*GetShotDirection_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetShotDirection"
                , GetShotDirection_function_type( &::CShotManipulator::GetShotDirection )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::GetUpVector
        
            typedef ::Vector const & ( ::CShotManipulator::*GetUpVector_function_type )(  ) ;
            
            CShotManipulator_exposer.def( 
                "GetUpVector"
                , GetUpVector_function_type( &::CShotManipulator::GetUpVector )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CShotManipulator::SetShootDir
        
            typedef void ( ::CShotManipulator::*SetShootDir_function_type )( ::Vector const & ) ;
            
            CShotManipulator_exposer.def( 
                "SetShootDir"
                , SetShootDir_function_type( &::CShotManipulator::SetShootDir )
                , ( bp::arg("vecForward") ) );
        
        }
    }

    { //::CUserCmd
        typedef bp::class_< CUserCmd > CUserCmd_exposer_t;
        CUserCmd_exposer_t CUserCmd_exposer = CUserCmd_exposer_t( "CUserCmd" );
        bp::scope CUserCmd_scope( CUserCmd_exposer );
        CUserCmd_exposer.def_readwrite( "buttons", &CUserCmd::buttons );
        CUserCmd_exposer.def_readwrite( "command_number", &CUserCmd::command_number );
        CUserCmd_exposer.def_readwrite( "directmove", &CUserCmd::directmove );
        CUserCmd_exposer.def_readwrite( "forwardmove", &CUserCmd::forwardmove );
        CUserCmd_exposer.def_readwrite( "hasbeenpredicted", &CUserCmd::hasbeenpredicted );
        CUserCmd_exposer.def_readwrite( "headangles", &CUserCmd::headangles );
        CUserCmd_exposer.def_readwrite( "headoffset", &CUserCmd::headoffset );
        CUserCmd_exposer.def_readwrite( "impulse", &CUserCmd::impulse );
        CUserCmd_exposer.def_readwrite( "cameraoffset", &CUserCmd::m_vCameraOffset );
        CUserCmd_exposer.def_readwrite( "mouseaim", &CUserCmd::m_vMouseAim );
        CUserCmd_exposer.def_readwrite( "mousedx", &CUserCmd::mousedx );
        CUserCmd_exposer.def_readwrite( "mousedy", &CUserCmd::mousedy );
        CUserCmd_exposer.def_readwrite( "random_seed", &CUserCmd::random_seed );
        CUserCmd_exposer.def_readwrite( "sidemove", &CUserCmd::sidemove );
        CUserCmd_exposer.def_readwrite( "tick_count", &CUserCmd::tick_count );
        CUserCmd_exposer.def_readwrite( "upmove", &CUserCmd::upmove );
        CUserCmd_exposer.def_readwrite( "vecmovetoposition", &CUserCmd::vecmovetoposition );
        CUserCmd_exposer.def_readwrite( "viewangles", &CUserCmd::viewangles );
        CUserCmd_exposer.def_readwrite( "weaponselect", &CUserCmd::weaponselect );
        CUserCmd_exposer.def_readwrite( "weaponsubtype", &CUserCmd::weaponsubtype );
    }

    bp::class_< FireBulletsInfo_t_wrapper >( "FireBulletsInfo_t", bp::init< >() )    
        .def( bp::init< int, Vector const &, Vector const &, Vector const &, float, int, bp::optional< bool > >(( bp::arg("nShots"), bp::arg("vecSrc"), bp::arg("vecDir"), bp::arg("vecSpread"), bp::arg("flDistance"), bp::arg("nAmmoType"), bp::arg("bPrimaryAttack")=(bool)(true) )) )    
        .def_readwrite( "attributes", &FireBulletsInfo_t::m_Attributes )    
        .def_readwrite( "primaryattack", &FireBulletsInfo_t::m_bPrimaryAttack )    
        .def_readwrite( "damage", &FireBulletsInfo_t::m_flDamage )    
        .def_readwrite( "damageforcescale", &FireBulletsInfo_t::m_flDamageForceScale )    
        .def_readwrite( "distance", &FireBulletsInfo_t::m_flDistance )    
        .def_readwrite( "playerdamage", &FireBulletsInfo_t::m_flPlayerDamage )    
        .def_readwrite( "ammotype", &FireBulletsInfo_t::m_iAmmoType )    
        .def_readwrite( "shots", &FireBulletsInfo_t::m_iShots )    
        .def_readwrite( "tracerfreq", &FireBulletsInfo_t::m_iTracerFreq )    
        .def_readwrite( "flags", &FireBulletsInfo_t::m_nFlags )    
        .add_property( "additionalignoreent"
                    , bp::make_function( (::CBaseEntity * (*)( ::FireBulletsInfo_t const & ))(&FireBulletsInfo_t_wrapper::get_m_pAdditionalIgnoreEnt), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::FireBulletsInfo_t &,::CBaseEntity * ))(&FireBulletsInfo_t_wrapper::set_m_pAdditionalIgnoreEnt), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "attacker"
                    , bp::make_function( (::CBaseEntity * (*)( ::FireBulletsInfo_t const & ))(&FireBulletsInfo_t_wrapper::get_m_pAttacker), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::FireBulletsInfo_t &,::CBaseEntity * ))(&FireBulletsInfo_t_wrapper::set_m_pAttacker), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "vecdirshooting", &FireBulletsInfo_t::m_vecDirShooting )    
        .def_readwrite( "vecspread", &FireBulletsInfo_t::m_vecSpread )    
        .def_readwrite( "vecsrc", &FireBulletsInfo_t::m_vecSrc );

    bp::class_< IMouse_wrapper, boost::noncopyable >( "IMouseDoNotUse" )    
        .def( 
            "GetIMouse"
            , (::IMouse * ( ::IMouse::* )(  ) )(&::IMouse::GetIMouse)
            , (::IMouse * ( IMouse_wrapper::* )(  ) )(&IMouse_wrapper::default_GetIMouse)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "OnClickLeftDoublePressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickLeftDoublePressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftPressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickLeftPressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftReleased"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickLeftReleased) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightDoublePressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickRightDoublePressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightPressed"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickRightPressed) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightReleased"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnClickRightReleased) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorEntered"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnCursorEntered) )
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorExited"
            , bp::pure_virtual( (void ( ::IMouse::* )( ::CHL2WarsPlayer * ) )(&::IMouse::OnCursorExited) )
            , ( bp::arg("player") ) );

    bp::class_< IRestore, boost::noncopyable >( "IRestore", bp::no_init );

    bp::class_< ISave, boost::noncopyable >( "ISave", bp::no_init );

    { //::MouseTraceData_t
        typedef bp::class_< MouseTraceData_t > MouseTraceData_exposer_t;
        MouseTraceData_exposer_t MouseTraceData_exposer = MouseTraceData_exposer_t( "MouseTraceData", bp::init< >() );
        bp::scope MouseTraceData_scope( MouseTraceData_exposer );
        { //::MouseTraceData_t::Clear
        
            typedef void ( ::MouseTraceData_t::*Clear_function_type )(  ) ;
            
            MouseTraceData_exposer.def( 
                "Clear"
                , Clear_function_type( &::MouseTraceData_t::Clear ) );
        
        }
        MouseTraceData_exposer.def_readwrite( "m_nHitBox", &MouseTraceData_t::m_nHitBox );
        MouseTraceData_exposer.def_readwrite( "endpos", &MouseTraceData_t::m_vEndPos );
        MouseTraceData_exposer.def_readwrite( "normal", &MouseTraceData_t::m_vNormal );
        MouseTraceData_exposer.def_readwrite( "startpos", &MouseTraceData_t::m_vStartPos );
        MouseTraceData_exposer.def_readwrite( "groundendpos", &MouseTraceData_t::m_vWorldOnlyEndPos );
        MouseTraceData_exposer.def_readwrite( "groundnormal", &MouseTraceData_t::m_vWorldOnlyNormal );
        { //property "ent"[fget=::MouseTraceData_t::GetEnt, fset=::MouseTraceData_t::SetEnt]
        
            typedef ::CBaseEntity * ( ::MouseTraceData_t::*fget )(  ) ;
            typedef void ( ::MouseTraceData_t::*fset )( ::CBaseEntity * ) ;
            
            MouseTraceData_exposer.add_property( 
                "ent"
                , bp::make_function( 
                      fget( &::MouseTraceData_t::GetEnt )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::MouseTraceData_t::SetEnt ) );
        
        }
    }

    bp::class_< NetworkedClass >( "NetworkedClass", bp::init< char const *, bp::api::object >(( bp::arg("pNetworkName"), bp::arg("cls_type") )) )    
        .def( 
            "SetupServerClass"
            , (void ( ::NetworkedClass::* )(  ) )( &::NetworkedClass::SetupServerClass ) )    
        .def_readwrite( "m_PyClass", &NetworkedClass::m_PyClass );

    { //::solid_t
        typedef bp::class_< solid_t_wrapper > solid_t_exposer_t;
        solid_t_exposer_t solid_t_exposer = solid_t_exposer_t( "solid_t" );
        bp::scope solid_t_scope( solid_t_exposer );
        solid_t_exposer.def_readwrite( "contents", &solid_t::contents );
        solid_t_exposer.def_readwrite( "index", &solid_t::index );
        solid_t_exposer.def_readwrite( "massCenterOverride", &solid_t::massCenterOverride );
        pyplusplus::containers::static_sized::register_array_1< char, 512 >( "__array_1_char_512" );
        { //solid_t::name [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "name"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_name_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        solid_t_exposer.def_readwrite( "params", &solid_t::params );
        { //solid_t::parent [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "parent"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_parent_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //solid_t::surfaceprop [variable], type=char[512]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 512> ( *array_wrapper_creator )( ::solid_t & );
            
            solid_t_exposer.add_property( "surfaceprop"
                , bp::make_function( array_wrapper_creator(&solid_t_wrapper::pyplusplus_surfaceprop_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< PyBoneFollowerManager, boost::noncopyable >( "BoneFollowerManager" )    
        .def( 
            "AddBoneFollower"
            , (void ( ::PyBoneFollowerManager::* )( ::CBaseAnimating *,char const *,::solid_t * ) )( &::PyBoneFollowerManager::AddBoneFollower )
            , ( bp::arg("pParentEntity"), bp::arg("pFollowerBoneName"), bp::arg("pSolid")=bp::object() ) )    
        .def( 
            "DestroyBoneFollowers"
            , (void ( ::PyBoneFollowerManager::* )(  ) )( &::PyBoneFollowerManager::DestroyBoneFollowers ) )    
        .def( 
            "GetBoneFollower"
            , (::pyphysfollower_t ( ::PyBoneFollowerManager::* )( int ) )( &::PyBoneFollowerManager::GetBoneFollower )
            , ( bp::arg("iFollowerIndex") ) )    
        .def( 
            "GetBoneFollowerIndex"
            , (int ( ::PyBoneFollowerManager::* )( ::CBoneFollower * ) )( &::PyBoneFollowerManager::GetBoneFollowerIndex )
            , ( bp::arg("pFollower") ) )    
        .def( 
            "GetNumBoneFollowers"
            , (int ( ::PyBoneFollowerManager::* )(  ) const)( &::PyBoneFollowerManager::GetNumBoneFollowers ) )    
        .def( 
            "InitBoneFollowers"
            , (void ( ::PyBoneFollowerManager::* )( ::CBaseAnimating *,::boost::python::list ) )( &::PyBoneFollowerManager::InitBoneFollowers )
            , ( bp::arg("pParentEntity"), bp::arg("followerbonenames") ) )    
        .def( 
            "UpdateBoneFollowers"
            , (void ( ::PyBoneFollowerManager::* )( ::CBaseAnimating * ) )( &::PyBoneFollowerManager::UpdateBoneFollowers )
            , ( bp::arg("pParentEntity") ) );

    bp::class_< PyEntityFactory >( "EntityFactory", bp::no_init )    
        .def( bp::init< char const *, bp::api::object >(( bp::arg("pClassName"), bp::arg("PyClass") )) );

    bp::class_< PyMouse_wrapper, bp::bases< IMouse > >( "IMouse" )    
        .def( 
            "OnClickLeftDoublePressed"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickLeftDoublePressed)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftDoublePressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftPressed"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickLeftPressed)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftPressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickLeftReleased"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickLeftReleased)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickLeftReleased)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightDoublePressed"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickRightDoublePressed)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightDoublePressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightPressed"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickRightPressed)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightPressed)
            , ( bp::arg("player") ) )    
        .def( 
            "OnClickRightReleased"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnClickRightReleased)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnClickRightReleased)
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorEntered"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnCursorEntered)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnCursorEntered)
            , ( bp::arg("player") ) )    
        .def( 
            "OnCursorExited"
            , (void ( ::PyMouse::* )( ::CHL2WarsPlayer * ) )(&::PyMouse::OnCursorExited)
            , (void ( PyMouse_wrapper::* )( ::CHL2WarsPlayer * ) )(&PyMouse_wrapper::default_OnCursorExited)
            , ( bp::arg("player") ) )    
        .def( 
            "GetIMouse"
            , (::IMouse * ( ::IMouse::* )(  ) )(&::IMouse::GetIMouse)
            , (::IMouse * ( PyMouse_wrapper::* )(  ) )(&PyMouse_wrapper::default_GetIMouse)
            , bp::return_value_policy< bp::return_by_value >() );

    bp::class_< PyOutputEvent, bp::bases< CBaseEntityOutput >, boost::noncopyable >( "COutputEvent", bp::init< >() )    
        .def( 
            "FireOutput"
            , (void ( ::PyOutputEvent::* )( ::CBaseEntity *,::CBaseEntity *,float ) )( &::PyOutputEvent::FireOutput )
            , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("fDelay")=0 ) )    
        .def( 
            "FireOutput"
            , (void ( ::PyOutputEvent::* )( ::variant_t,::CBaseEntity *,::CBaseEntity *,float ) )( &::PyOutputEvent::FireOutput )
            , ( bp::arg("Value"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("fDelay")=0 ) )    
        .def( 
            "Set"
            , (void ( ::PyOutputEvent::* )( ::variant_t ) )( &::PyOutputEvent::Set )
            , ( bp::arg("value") ) );

    bp::class_< ServerClass >( "ServerClass", bp::no_init )    
        .def( 
            "GetName"
            , (char const * ( ::ServerClass::* )(  ) )( &::ServerClass::GetName ) );

    bp::class_< animevent_t_wrapper >( "animevent_t" )    
        .def_readwrite( "_event_lowword", &animevent_t::_event_lowword )    
        .def_readwrite( "event_newsystem", &animevent_t::event_newsystem )    
        .def( 
            "Event"
            , (int ( ::animevent_t::* )(  ) const)( &::animevent_t::Event ) )    
        .def( 
            "Event"
            , (void ( ::animevent_t::* )( int ) )( &::animevent_t::Event )
            , ( bp::arg("nEvent") ) )    
        .def( 
            "Event_OldSystem"
            , (int ( ::animevent_t::* )(  ) const)( &::animevent_t::Event_OldSystem ) )    
        .def( 
            "Event_OldSystem"
            , (void ( ::animevent_t::* )( int ) )( &::animevent_t::Event_OldSystem )
            , ( bp::arg("nEvent") ) )    
        .def_readwrite( "_event_highword", &animevent_t::_event_highword )    
        .def_readwrite( "cycle", &animevent_t::cycle )    
        .def_readwrite( "eventtime", &animevent_t::eventtime )    
        .def_readwrite( "m_bHandledByScript", &animevent_t::m_bHandledByScript )    
        .add_property( "pSource"
                    , bp::make_function( (::CBaseAnimating * (*)( ::animevent_t const & ))(&animevent_t_wrapper::get_pSource), bp::return_internal_reference< >() )
                    , bp::make_function( (void (*)( ::animevent_t &,::CBaseAnimating * ))(&animevent_t_wrapper::set_pSource), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "type", &animevent_t::type )    
        .add_property("options"
            , bp::make_function( (bp::object (*)( ::animevent_t & ))(&animevent_t_wrapper::get_options) ) );

    { //::breakablepropparams_t
        typedef bp::class_< breakablepropparams_t_wrapper, boost::noncopyable > breakablepropparams_t_exposer_t;
        breakablepropparams_t_exposer_t breakablepropparams_t_exposer = breakablepropparams_t_exposer_t( "breakablepropparams_t", bp::init< Vector const &, QAngle const &, Vector const &, AngularImpulse const & >(( bp::arg("_origin"), bp::arg("_angles"), bp::arg("_velocity"), bp::arg("_angularVelocity") )) );
        bp::scope breakablepropparams_t_scope( breakablepropparams_t_exposer );
        breakablepropparams_t_exposer.def( "get_angles"
                , (::QAngle const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_angles)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def( "get_angularVelocity"
                , (::AngularImpulse const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_angularVelocity)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def_readwrite( "defBurstScale", &breakablepropparams_t::defBurstScale );
        breakablepropparams_t_exposer.def_readwrite( "defCollisionGroup", &breakablepropparams_t::defCollisionGroup );
        breakablepropparams_t_exposer.def_readwrite( "impactEnergyScale", &breakablepropparams_t::impactEnergyScale );
        breakablepropparams_t_exposer.def( "get_origin"
                , (::Vector const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_origin)
                , bp::return_value_policy< bp::copy_const_reference >() );
        breakablepropparams_t_exposer.def( "get_velocity"
                , (::Vector const & (*)( ::breakablepropparams_t & ))(&breakablepropparams_t_wrapper::get_velocity)
                , bp::return_value_policy< bp::copy_const_reference >() );
    }

    { //::vcollisionevent_t
        typedef bp::class_< vcollisionevent_t_wrapper > vcollisionevent_t_exposer_t;
        vcollisionevent_t_exposer_t vcollisionevent_t_exposer = vcollisionevent_t_exposer_t( "vcollisionevent_t" );
        bp::scope vcollisionevent_t_scope( vcollisionevent_t_exposer );
        vcollisionevent_t_exposer.def_readwrite( "collisionSpeed", &vcollisionevent_t::collisionSpeed );
        vcollisionevent_t_exposer.def_readwrite( "deltaCollisionTime", &vcollisionevent_t::deltaCollisionTime );
        vcollisionevent_t_exposer.def_readwrite( "isCollision", &vcollisionevent_t::isCollision );
        vcollisionevent_t_exposer.def_readwrite( "isShadowCollision", &vcollisionevent_t::isShadowCollision );
        pyplusplus::containers::static_sized::register_array_1< int, 2 >( "__array_1_int_2" );
        { //vcollisionevent_t::surfaceProps [variable], type=int[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::vcollisionevent_t & );
            
            vcollisionevent_t_exposer.add_property( "surfaceProps"
                , bp::make_function( array_wrapper_creator(&vcollisionevent_t_wrapper::pyplusplus_surfaceProps_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        vcollisionevent_t_exposer.def("GetSurfaceNormal", &::vcollisionevent_t_wrapper::GetSurfaceNormal);
        vcollisionevent_t_exposer.def("GetContactPoint", &::vcollisionevent_t_wrapper::GetContactPoint);
        vcollisionevent_t_exposer.def("GetContactSpeed", &::vcollisionevent_t_wrapper::GetContactSpeed);
    }

    { //::gamevcollisionevent_t
        typedef bp::class_< gamevcollisionevent_t_wrapper, bp::bases< vcollisionevent_t > > gamevcollisionevent_t_exposer_t;
        gamevcollisionevent_t_exposer_t gamevcollisionevent_t_exposer = gamevcollisionevent_t_exposer_t( "gamevcollisionevent_t" );
        bp::scope gamevcollisionevent_t_scope( gamevcollisionevent_t_exposer );
        pyplusplus::containers::static_sized::register_array_1< ::Vector, 2, bp::return_internal_reference< > >( "__array_1__scope_Vector_2" );
        { //gamevcollisionevent_t::postVelocity [variable], type=Vector[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::Vector, 2> ( *array_wrapper_creator )( ::gamevcollisionevent_t & );
            
            gamevcollisionevent_t_exposer.add_property( "postVelocity"
                , bp::make_function( array_wrapper_creator(&gamevcollisionevent_t_wrapper::pyplusplus_postVelocity_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        pyplusplus::containers::static_sized::register_array_1< ::Vector, 2, bp::return_internal_reference< > >( "__array_1__scope_Vector_2" );
        { //gamevcollisionevent_t::preAngularVelocity [variable], type=AngularImpulse[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::Vector, 2> ( *array_wrapper_creator )( ::gamevcollisionevent_t & );
            
            gamevcollisionevent_t_exposer.add_property( "preAngularVelocity"
                , bp::make_function( array_wrapper_creator(&gamevcollisionevent_t_wrapper::pyplusplus_preAngularVelocity_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //gamevcollisionevent_t::preVelocity [variable], type=Vector[2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::Vector, 2> ( *array_wrapper_creator )( ::gamevcollisionevent_t & );
            
            gamevcollisionevent_t_exposer.add_property( "preVelocity"
                , bp::make_function( array_wrapper_creator(&gamevcollisionevent_t_wrapper::pyplusplus_preVelocity_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        gamevcollisionevent_t_exposer.def("GetEnt", &::gamevcollisionevent_t_wrapper::GetEnt);
    }

    bp::class_< inputdata_t_wrapper >( "inputdata_t" )    
        .def_readwrite( "outputid", &inputdata_t::nOutputID )    
        .add_property( "activator"
                    , bp::make_function( (::CBaseEntity * (*)( ::inputdata_t const & ))(&inputdata_t_wrapper::get_pActivator), bp::return_value_policy< bp::return_by_value >() )
                    , bp::make_function( (void (*)( ::inputdata_t &,::CBaseEntity * ))(&inputdata_t_wrapper::set_pActivator), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .add_property( "caller"
                    , bp::make_function( (::CBaseEntity * (*)( ::inputdata_t const & ))(&inputdata_t_wrapper::get_pCaller), bp::return_value_policy< bp::return_by_value >() )
                    , bp::make_function( (void (*)( ::inputdata_t &,::CBaseEntity * ))(&inputdata_t_wrapper::set_pCaller), bp::with_custodian_and_ward_postcall< 1, 2 >() ) )    
        .def_readwrite( "value", &inputdata_t::value );

    bp::class_< pyphysfollower_t >( "physfollower" )    
        .def_readwrite( "boneindex", &pyphysfollower_t::boneindex )    
        .def_readwrite( "follower", &pyphysfollower_t::follower );

    bp::class_< variant_t_wrapper >( "variant_t", bp::init< >() )    
        .def( 
            "Bool"
            , (bool ( ::variant_t::* )(  ) const)( &::variant_t::Bool ) )    
        .def( 
            "Color32"
            , (::color32 ( ::variant_t::* )(  ) const)( &::variant_t::Color32 ) )    
        .def( 
            "Convert"
            , (bool ( ::variant_t::* )( ::fieldtype_t ) )( &::variant_t::Convert )
            , ( bp::arg("newType") ) )    
        .def( 
            "FieldType"
            , (::fieldtype_t ( ::variant_t::* )(  ) )( &::variant_t::FieldType ) )    
        .def( 
            "Float"
            , (float ( ::variant_t::* )(  ) const)( &::variant_t::Float ) )    
        .def( 
            "Int"
            , (int ( ::variant_t::* )(  ) const)( &::variant_t::Int ) )    
        .def( 
            "Set"
            , (void ( ::variant_t::* )( ::fieldtype_t,void * ) )( &::variant_t::Set )
            , ( bp::arg("ftype"), bp::arg("data") ) )    
        .def( 
            "SetBool"
            , (void ( ::variant_t::* )( bool ) )( &::variant_t::SetBool )
            , ( bp::arg("b") ) )    
        .def( 
            "SetColor32"
            , (void ( ::variant_t::* )( ::color32 ) )( &::variant_t::SetColor32 )
            , ( bp::arg("val") ) )    
        .def( 
            "SetColor32"
            , (void ( ::variant_t::* )( int,int,int,int ) )( &::variant_t::SetColor32 )
            , ( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) )    
        .def( 
            "SetEntity"
            , (void ( ::variant_t::* )( ::CBaseEntity * ) )( &::variant_t::SetEntity )
            , ( bp::arg("val") ) )    
        .def( 
            "SetFloat"
            , (void ( ::variant_t::* )( float ) )( &::variant_t::SetFloat )
            , ( bp::arg("val") ) )    
        .def( 
            "SetInt"
            , (void ( ::variant_t::* )( int ) )( &::variant_t::SetInt )
            , ( bp::arg("val") ) )    
        .def( 
            "SetOther"
            , (void ( ::variant_t::* )( void * ) )( &::variant_t::SetOther )
            , ( bp::arg("data") ) )    
        .def( 
            "SetPositionVector3D"
            , (void ( ::variant_t::* )( ::Vector const & ) )( &::variant_t::SetPositionVector3D )
            , ( bp::arg("val") ) )    
        .def( 
            "SetString"
            , (void ( ::variant_t::* )( ::string_t ) )( &::variant_t::SetString )
            , ( bp::arg("str") ) )    
        .def( 
            "SetVector3D"
            , (void ( ::variant_t::* )( ::Vector const & ) )( &::variant_t::SetVector3D )
            , ( bp::arg("val") ) )    
        .def( 
            "String"
            , (char const * ( ::variant_t::* )(  ) const)( &::variant_t::String ) )    
        .def( 
            "StringID"
            , (::string_t ( ::variant_t::* )(  ) const)( &::variant_t::StringID ) )    
        .def( 
            "ToString"
            , (char const * ( variant_t_wrapper::* )(  ) const)(&variant_t_wrapper::ToString) )    
        .def( 
            "Vector3D"
            , (void ( ::variant_t::* )( ::Vector & ) const)( &::variant_t::Vector3D )
            , ( bp::arg("vec") ) )    
        .def("Entity", &::variant_t_wrapper::PyEntity);

    { //::AddMultiDamage
    
        typedef void ( *AddMultiDamage_function_type )( ::CTakeDamageInfo const &,::CBaseEntity * );
        
        bp::def( 
            "AddMultiDamage"
            , AddMultiDamage_function_type( &::AddMultiDamage )
            , ( bp::arg("info"), bp::arg("pEntity") ) );
    
    }

    { //::ApplyMultiDamage
    
        typedef void ( *ApplyMultiDamage_function_type )(  );
        
        bp::def( 
            "ApplyMultiDamage"
            , ApplyMultiDamage_function_type( &::ApplyMultiDamage ) );
    
    }

    { //::CalculateBulletDamageForce
    
        typedef void ( *CalculateBulletDamageForce_function_type )( ::CTakeDamageInfo *,int,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateBulletDamageForce"
            , CalculateBulletDamageForce_function_type( &::CalculateBulletDamageForce )
            , ( bp::arg("info"), bp::arg("iBulletType"), bp::arg("vecBulletDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::CalculateExplosiveDamageForce
    
        typedef void ( *CalculateExplosiveDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateExplosiveDamageForce"
            , CalculateExplosiveDamageForce_function_type( &::CalculateExplosiveDamageForce )
            , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::CalculateMeleeDamageForce
    
        typedef void ( *CalculateMeleeDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "CalculateMeleeDamageForce"
            , CalculateMeleeDamageForce_function_type( &::CalculateMeleeDamageForce )
            , ( bp::arg("info"), bp::arg("vecMeleeDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::ClearMultiDamage
    
        typedef void ( *ClearMultiDamage_function_type )(  );
        
        bp::def( 
            "ClearMultiDamage"
            , ClearMultiDamage_function_type( &::ClearMultiDamage ) );
    
    }

    { //::CreateServerRagdoll
    
        typedef ::CBaseEntity * ( *CreateServerRagdoll_function_type )( ::CBaseAnimating *,int,::CTakeDamageInfo const &,int,bool );
        
        bp::def( 
            "CreateServerRagdoll"
            , CreateServerRagdoll_function_type( &::CreateServerRagdoll )
            , ( bp::arg("pAnimating"), bp::arg("forceBone"), bp::arg("info"), bp::arg("collisionGroup"), bp::arg("bUseLRURetirement")=(bool)(false) )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::DetachAttachedRagdoll
    
        typedef void ( *DetachAttachedRagdoll_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "DetachAttachedRagdoll"
            , DetachAttachedRagdoll_function_type( &::DetachAttachedRagdoll )
            , ( bp::arg("pRagdollIn") ) );
    
    }

    { //::DetachAttachedRagdollsForEntity
    
        typedef void ( *DetachAttachedRagdollsForEntity_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "DetachAttachedRagdollsForEntity"
            , DetachAttachedRagdollsForEntity_function_type( &::DetachAttachedRagdollsForEntity )
            , ( bp::arg("pRagdollParent") ) );
    
    }

    { //::GetAttachmentPositionInSpaceOfBone
    
        typedef ::Vector ( *GetAttachmentPositionInSpaceOfBone_function_type )( ::CStudioHdr *,char const *,int );
        
        bp::def( 
            "GetAttachmentPositionInSpaceOfBone"
            , GetAttachmentPositionInSpaceOfBone_function_type( &::GetAttachmentPositionInSpaceOfBone )
            , ( bp::arg("pStudioHdr"), bp::arg("pAttachmentName"), bp::arg("outputBoneIndex") ) );
    
    }

    { //::GetAutoMultiplayerPhysicsMode
    
        typedef int ( *GetAutoMultiplayerPhysicsMode_function_type )( ::Vector,float );
        
        bp::def( 
            "GetAutoMultiplayerPhysicsMode"
            , GetAutoMultiplayerPhysicsMode_function_type( &::GetAutoMultiplayerPhysicsMode )
            , ( bp::arg("size"), bp::arg("mass") ) );
    
    }

    { //::GetCurrentSkyCamera
    
        typedef ::CSkyCamera * ( *GetCurrentSkyCamera_function_type )(  );
        
        bp::def( 
            "GetCurrentSkyCamera"
            , GetCurrentSkyCamera_function_type( &::GetCurrentSkyCamera )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::GetMassEquivalent
    
        typedef char const * ( *GetMassEquivalent_function_type )( float );
        
        bp::def( 
            "GetMassEquivalent"
            , GetMassEquivalent_function_type( &::GetMassEquivalent )
            , ( bp::arg("flMass") ) );
    
    }

    { //::GuessDamageForce
    
        typedef void ( *GuessDamageForce_function_type )( ::CTakeDamageInfo *,::Vector const &,::Vector const &,float );
        
        bp::def( 
            "GuessDamageForce"
            , GuessDamageForce_function_type( &::GuessDamageForce )
            , ( bp::arg("info"), bp::arg("vecForceDir"), bp::arg("vecForceOrigin"), bp::arg("flScale")=1.0e+0 ) );
    
    }

    { //::ImpulseScale
    
        typedef float ( *ImpulseScale_function_type )( float,float );
        
        bp::def( 
            "ImpulseScale"
            , ImpulseScale_function_type( &::ImpulseScale )
            , ( bp::arg("flTargetMass"), bp::arg("flDesiredSpeed") ) );
    
    }

    { //::PrecacheGibsForModel
    
        typedef void ( *PrecacheGibsForModel_function_type )( int );
        
        bp::def( 
            "PrecacheGibsForModel"
            , PrecacheGibsForModel_function_type( &::PrecacheGibsForModel )
            , ( bp::arg("iModel") ) );
    
    }

    { //::PropBreakableCreateAll
    
        typedef void ( *PropBreakableCreateAll_function_type )( int,::IPhysicsObject *,::Vector const &,::QAngle const &,::Vector const &,::AngularImpulse const &,float,float,int,::CBaseEntity *,bool );
        
        bp::def( 
            "PropBreakableCreateAll"
            , PropBreakableCreateAll_function_type( &::PropBreakableCreateAll )
            , ( bp::arg("modelindex"), bp::arg("pPhysics"), bp::arg("origin"), bp::arg("angles"), bp::arg("velocity"), bp::arg("angularVelocity"), bp::arg("impactEnergyScale"), bp::arg("burstScale"), bp::arg("collisionGroup"), bp::arg("pEntity")=bp::object(), bp::arg("defaultLocation")=(bool)(true) ) );
    
    }

    { //::PropBreakableCreateAll
    
        typedef void ( *PropBreakableCreateAll_function_type )( int,::IPhysicsObject *,::breakablepropparams_t const &,::CBaseEntity *,int,bool,bool );
        
        bp::def( 
            "PropBreakableCreateAll"
            , PropBreakableCreateAll_function_type( &::PropBreakableCreateAll )
            , ( bp::arg("modelindex"), bp::arg("pPhysics"), bp::arg("params"), bp::arg("pEntity"), bp::arg("iPrecomputedBreakableCount"), bp::arg("bIgnoreGibLImit"), bp::arg("defaultLocation")=(bool)(true) ) );
    
    }

    { //::PyCreateServerRagdollAttached
    
        typedef ::CRagdollProp * ( *CreateServerRagdollAttached_function_type )( ::CBaseAnimating *,::Vector const &,int,int,::PyPhysicsObject &,::CBaseAnimating *,int,::Vector const &,int,::Vector const & );
        
        bp::def( 
            "CreateServerRagdollAttached"
            , CreateServerRagdollAttached_function_type( &::PyCreateServerRagdollAttached )
            , ( bp::arg("pAnimating"), bp::arg("vecForce"), bp::arg("forceBone"), bp::arg("collisionGroup"), bp::arg("pyAttached"), bp::arg("pParentEntity"), bp::arg("boneAttach"), bp::arg("originAttached"), bp::arg("parentBoneAttach"), bp::arg("boneOrigin") )
            , bp::return_value_policy< bp::return_by_value >() );
    
    }

    { //::PyGetAllClassnames
    
        typedef ::boost::python::list ( *GetAllClassnames_function_type )(  );
        
        bp::def( 
            "GetAllClassnames"
            , GetAllClassnames_function_type( &::PyGetAllClassnames ) );
    
    }

    { //::PyGetClassByClassname
    
        typedef ::boost::python::api::object ( *GetClassByClassname_function_type )( char const * );
        
        bp::def( 
            "GetClassByClassname"
            , GetClassByClassname_function_type( &::PyGetClassByClassname )
            , ( bp::arg("class_name") ) );
    
    }

    { //::PyGetWorldEntity
    
        typedef ::boost::python::api::object ( *GetWorldEntity_function_type )(  );
        
        bp::def( 
            "GetWorldEntity"
            , GetWorldEntity_function_type( &::PyGetWorldEntity ) );
    
    }

    { //::PyRespawnPlayer
    
        typedef ::boost::python::api::object ( *RespawnPlayer_function_type )( ::CBasePlayer *,char const * );
        
        bp::def( 
            "RespawnPlayer"
            , RespawnPlayer_function_type( &::PyRespawnPlayer )
            , ( bp::arg("pPlayer"), bp::arg("classname") ) );
    
    }

    bp::scope().attr("entlist") = bp::object( boost::ref( gEntList ) );

    bp::scope().attr( "g_vecAttackDir" ) = boost::ref(g_vecAttackDir);

    bp::scope().attr( "SOUND_NONE" ) = (int)SOUND_NONE;

    bp::scope().attr( "SOUND_COMBAT" ) = (int)SOUND_COMBAT;

    bp::scope().attr( "SOUND_WORLD" ) = (int)SOUND_WORLD;

    bp::scope().attr( "SOUND_PLAYER" ) = (int)SOUND_PLAYER;

    bp::scope().attr( "SOUND_DANGER" ) = (int)SOUND_DANGER;

    bp::scope().attr( "SOUND_BULLET_IMPACT" ) = (int)SOUND_BULLET_IMPACT;

    bp::scope().attr( "SOUND_CARCASS" ) = (int)SOUND_CARCASS;

    bp::scope().attr( "SOUND_GARBAGE" ) = (int)SOUND_GARBAGE;

    bp::scope().attr( "SOUND_THUMPER" ) = (int)SOUND_THUMPER;

    bp::scope().attr( "SOUND_BUGBAIT" ) = (int)SOUND_BUGBAIT;

    bp::scope().attr( "SOUND_PHYSICS_DANGER" ) = (int)SOUND_PHYSICS_DANGER;

    bp::scope().attr( "SOUND_DANGER_SNIPERONLY" ) = (int)SOUND_DANGER_SNIPERONLY;

    bp::scope().attr( "SOUND_MOVE_AWAY" ) = (int)SOUND_MOVE_AWAY;

    bp::scope().attr( "SOUND_PLAYER_VEHICLE" ) = (int)SOUND_PLAYER_VEHICLE;

    bp::scope().attr( "SOUND_READINESS_LOW" ) = (int)SOUND_READINESS_LOW;

    bp::scope().attr( "SOUND_READINESS_MEDIUM" ) = (int)SOUND_READINESS_MEDIUM;

    bp::scope().attr( "SOUND_READINESS_HIGH" ) = (int)SOUND_READINESS_HIGH;

    bp::scope().attr( "SOUND_CONTEXT_FROM_SNIPER" ) = (int)SOUND_CONTEXT_FROM_SNIPER;

    bp::scope().attr( "SOUND_CONTEXT_GUNFIRE" ) = (int)SOUND_CONTEXT_GUNFIRE;

    bp::scope().attr( "SOUND_CONTEXT_MORTAR" ) = (int)SOUND_CONTEXT_MORTAR;

    bp::scope().attr( "SOUND_CONTEXT_COMBINE_ONLY" ) = (int)SOUND_CONTEXT_COMBINE_ONLY;

    bp::scope().attr( "SOUND_CONTEXT_REACT_TO_SOURCE" ) = (int)SOUND_CONTEXT_REACT_TO_SOURCE;

    bp::scope().attr( "SOUND_CONTEXT_EXPLOSION" ) = (int)SOUND_CONTEXT_EXPLOSION;

    bp::scope().attr( "SOUND_CONTEXT_EXCLUDE_COMBINE" ) = (int)SOUND_CONTEXT_EXCLUDE_COMBINE;

    bp::scope().attr( "SOUND_CONTEXT_DANGER_APPROACH" ) = (int)SOUND_CONTEXT_DANGER_APPROACH;

    bp::scope().attr( "SOUND_CONTEXT_ALLIES_ONLY" ) = (int)SOUND_CONTEXT_ALLIES_ONLY;

    bp::scope().attr( "SOUND_CONTEXT_PLAYER_VEHICLE" ) = (int)SOUND_CONTEXT_PLAYER_VEHICLE;

    bp::scope().attr( "ALL_CONTEXTS" ) = (int)ALL_CONTEXTS;

    bp::scope().attr( "ALL_SCENTS" ) = (int)ALL_SCENTS;

    bp::scope().attr( "ALL_SOUNDS" ) = (int)ALL_SOUNDS;

    bp::scope().attr( "SOUNDENT_CHANNEL_UNSPECIFIED" ) = (int)SOUNDENT_CHANNEL_UNSPECIFIED;

    bp::scope().attr( "SOUNDENT_CHANNEL_REPEATING" ) = (int)SOUNDENT_CHANNEL_REPEATING;

    bp::scope().attr( "SOUNDENT_CHANNEL_REPEATED_DANGER" ) = (int)SOUNDENT_CHANNEL_REPEATED_DANGER;

    bp::scope().attr( "SOUNDENT_CHANNEL_REPEATED_PHYSICS_DANGER" ) = (int)SOUNDENT_CHANNEL_REPEATED_PHYSICS_DANGER;

    bp::scope().attr( "SOUNDENT_CHANNEL_WEAPON" ) = (int)SOUNDENT_CHANNEL_WEAPON;

    bp::scope().attr( "SOUNDENT_CHANNEL_INJURY" ) = (int)SOUNDENT_CHANNEL_INJURY;

    bp::scope().attr( "SOUNDENT_CHANNEL_BULLET_IMPACT" ) = (int)SOUNDENT_CHANNEL_BULLET_IMPACT;

    bp::scope().attr( "SOUNDENT_CHANNEL_NPC_FOOTSTEP" ) = (int)SOUNDENT_CHANNEL_NPC_FOOTSTEP;

    bp::scope().attr( "SOUNDENT_CHANNEL_SPOOKY_NOISE" ) = (int)SOUNDENT_CHANNEL_SPOOKY_NOISE;

    bp::scope().attr( "SOUNDENT_CHANNEL_ZOMBINE_GRENADE" ) = (int)SOUNDENT_CHANNEL_ZOMBINE_GRENADE;

    bp::scope().attr( "FL_EDICT_CHANGED" ) = (int)FL_EDICT_CHANGED;

    bp::scope().attr( "FL_EDICT_FREE" ) = (int)FL_EDICT_FREE;

    bp::scope().attr( "FL_EDICT_FULL" ) = (int)FL_EDICT_FULL;

    bp::scope().attr( "FL_EDICT_FULLCHECK" ) = (int)FL_EDICT_FULLCHECK;

    bp::scope().attr( "FL_EDICT_ALWAYS" ) = (int)FL_EDICT_ALWAYS;

    bp::scope().attr( "FL_EDICT_DONTSEND" ) = (int)FL_EDICT_DONTSEND;

    bp::scope().attr( "FL_EDICT_PVSCHECK" ) = (int)FL_EDICT_PVSCHECK;

    bp::scope().attr( "FL_EDICT_PENDING_DORMANT_CHECK" ) = (int)FL_EDICT_PENDING_DORMANT_CHECK;

    bp::scope().attr( "FL_EDICT_DIRTY_PVS_INFORMATION" ) = (int)FL_EDICT_DIRTY_PVS_INFORMATION;

    bp::scope().attr( "FL_FULL_EDICT_CHANGED" ) = (int)FL_FULL_EDICT_CHANGED;

    ptr_imouse_to_py_imouse();

    bp::scope().attr("g_EventQueue") = bp::object( boost::ref( g_EventQueue ) );
}
#endif

