//========= Copyright © 1996-2006, Valve Corporation, All rights reserved. ============//
// STATIC: "FOW"				"0..1"

// DYNAMIC: "COMPRESSED_VERTS"	"0..1"
// DYNAMIC: "SKINNING"			"0..1"
// DYNAMIC: "DOWATERFOG"		"0..1"

// Includes
#include "common_vs_fxc.h"
#include "fow_vs_fxc.h"

// Globals
static const int  g_iFogType		= DOWATERFOG;
static const bool g_bSkinning		= SKINNING ? true : false;

const float4 g_vFoWWorldSize		: register( SHADER_SPECIFIC_CONST_3 );

// Structs
struct VS_INPUT
{
	float4 vPos					: POSITION;		// Position
	float4 vNormal				: NORMAL;		// Normal
	float4 vBoneWeights			: BLENDWEIGHT;	// Skin weights
	float4 vBoneIndices			: BLENDINDICES;	// Skin indices
	float4 vTexCoord0			: TEXCOORD0;	// Base texture coordinates
	float3 vPosFlex				: POSITION1;	// Delta positions for flexing
	float4 vTangent				: TANGENT;
};

struct VS_OUTPUT
{
    float4 vProjPosition		: POSITION;		// Projection-space position   
	float2 vTexCoord0			: TEXCOORD0;

#if ( FOW == 1 )
	float2 vFowCoord				: TEXCOORD1;
#endif
};

// Main
VS_OUTPUT main( const VS_INPUT i )
{
	VS_OUTPUT o;

	// Flexes coming in from a separate stream (contribution masked by cFlexScale.x)
	float4 vObjPosition = i.vPos;
	vObjPosition.xyz += i.vPosFlex.xyz * cFlexScale.x;

	float3 vObjNormal;
	float4 vObjTangent;
	DecompressVertex_NormalTangent( i.vNormal, i.vTangent, vObjNormal, vObjTangent );

	// Transform the position
	float3 vWorldPosition = { 0.0f, 0.0f, 0.0f };
	float3 vWorldNormal = { 0.0f, 0.0f, 0.0f };
	float3 vWorldTangent = { 0.0f, 0.0f, 0.0f };
	float3 vWorldBinormal = { 0.0f, 0.0f, 0.0f };
	SkinPositionNormalAndTangentSpace( g_bSkinning, vObjPosition, vObjNormal, vObjTangent, i.vBoneWeights, i.vBoneIndices, vWorldPosition, vWorldNormal, vWorldTangent, vWorldBinormal );

	// Transform into projection space
	float4 vProjPosition = mul( float4( vWorldPosition, 1.0f ), cViewProj );
	o.vProjPosition = vProjPosition;

	// Pass through tex coords
	o.vTexCoord0.xy = i.vTexCoord0.xy;

#if ( FOW == 1 )
	o.vFowCoord = CalcFoWCoord( g_vFoWWorldSize, vWorldPosition.xy );
#endif

	return o;
}