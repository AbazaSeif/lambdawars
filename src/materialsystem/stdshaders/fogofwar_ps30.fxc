//========= Copyright © 1996-2006, Valve Corporation, All rights reserved. ============//
// Includes =======================================================================================
// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..0"	[= 0] [XBOX]
// STATIC: "FOW"				 "0..1"

#include "common_ps_fxc.h" 
#include "fow_ps_fxc.h"

// Texture Samplers ===============================================================================
sampler FogOfWarSampler		: register( s0 );

// Shaders Constants and Globals ==================================================================
//const float4 g_Color        : register( c0 );

// Interpolated values ============================================================================
struct PS_INPUT
{
	float2 vTexCoord0 : TEXCOORD0;
};

// Main ===========================================================================================
float4 main( PS_INPUT i ) : COLOR
{
    float4 result;
  
 #if FOW
	/*
    // Take neighbooring states into account to make it look smoother.
#if defined(SHADER_MODEL_PS_2_0)
    const int NUM = 9;              
    const float3 gTexCoordsWeights[NUM] = {
                float3(-0.001953125, 0.001953125, 0.0625), 
                float3( 0.00 ,     0.001953125, 0.0625),
                float3( 0.001953125, 0.001953125, 0.0625),
                float3(-0.001953125, 0.00, 0.0625 ),
                float3( 0.0,       0.0, 0.5),
                float3( 0.001953125, 0.001953125, 0.0625 ),
                float3(-0.001953125,-0.001953125, 0.0625),
                float3( 0.00 ,    -0.001953125, 0.0625),
                float3( 0.001953125,-0.001953125, 0.0625)
        }; 
#else
    const int NUM = 25;
    const float3 gTexCoordsWeights[NUM] = {
        // First row
        float3(-0.00390625, -0.00390625, 0.0002),
        float3(-0.001953125, -0.00390625, 0.0033),
        float3(0.00, -0.00390625, 0.0081),
        float3(0.001953125, -0.00390625, 0.0033),
        float3(0.00390625, -0.00390625, 0.0002),
        
        // Second row
        float3(-0.00390625, -0.001953125, 0.0033),
        float3(-0.001953125, -0.001953125, 0.0479),
        float3(0.00, -0.001953125, 0.1164),
        float3(0.001953125, -0.001953125, 0.0479),
        float3(0.00390625, -0.001953125, 0.0033),
        
        // Third middle row
        float3(-0.00390625, 0.0, 0.0081),
        float3(-0.001953125, 0.0, 0.1164),
        float3(0.00, 0.0, 0.2831),
        float3(0.001953125, 0.0, 0.1164),
        float3(0.00390625, 0.0, 0.0081),
        
        // Fourth row
        float3(-0.00390625, 0.001953125, 0.0033),
        float3(-0.001953125, 0.001953125, 0.0479),
        float3(0.00, 0.001953125, 0.1164),
        float3(0.001953125, 0.001953125, 0.0479),
        float3(0.00390625, 0.001953125, 0.0033),
        
        // Last fifth row
        float3(-0.00390625, 0.00390625, 0.0002),
        float3(-0.001953125, 0.00390625, 0.0033),
        float3(0.00, 0.00390625, 0.0081),
        float3(0.001953125, 0.00390625, 0.0033),
        float3(0.00390625, 0.00390625, 0.0002),
    };
#endif
	

    float fowvalue = 0.0f;
    int idx;
    for (idx=0; idx < NUM; idx++) {
        fowvalue += tex2D( FogOfWarSampler, i.vTexCoord0.xy + gTexCoordsWeights[idx].xy ).r * gTexCoordsWeights[idx].z;
    }
    fowvalue /= 0.5;
    fowvalue = 1.0f - max(min(1.0, fowvalue), 0.0);
	*/

	float fowvalue = 1.0f - tex2D( FogOfWarSampler, i.vTexCoord0.xy ).r;
    
    result = float4(0.15, 0.15, 0.15, fowvalue);
    result = ( result * FOW_GRAY_FACTOR	 * FOW_DARKNESS_VALUE ) + ( result * FOW_COLOR_FACTOR * FOW_DARKNESS_VALUE );

    return FinalOutput( result, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#else
	return float4(0.0, 0.0, 0.0, 0.0);
#endif
}
