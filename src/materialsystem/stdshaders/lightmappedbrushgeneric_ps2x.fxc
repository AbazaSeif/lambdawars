//========== Copyright (c) Sandern Corporation, All rights reserved. ==========//

// STATIC: "LIGHTING_PREVIEW"			"0..2"
// STATIC: "BUMPMAP"					"0..1"
// STATIC: "CUBEMAP"					"0..1"
// STATIC: "FOW"						"0..1"
// STATIC: "TEAMCOLORTEXTURE"			"0..1"
#include "common_fog_ps_fxc.h"

#include "shader_constant_register_map.h"
#include "fow_ps_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_teamcolor.h"
#include "common_lightmappedgeneric_fxc.h"

sampler BaseSampler						: register( s0 );
sampler LightmapSampler					: register( s5 );

sampler BumpmapSampler			: register( s3 );
sampler EnvmapSampler			: register( s4 );

const float4 g_FogParams				: register( PSREG_FOG_PARAMS );
const float4 g_EyePos_SpecExponent		: register( PSREG_EYEPOS_SPEC_EXPONENT );

#if LIGHTING_PREVIEW == 0

static const float3 g_cAmbientColor = float3( 0.0, 0.0, 0.0 );
const float4 g_TintValuesTimesLightmapScale	: register( PSREG_CONSTANT_21 );

#endif


#if ( FOW == 1 )

sampler FoWSampler					: register( s10 );	// Fog of War

#endif

#if ( TEAMCOLORTEXTURE == 1 )

sampler TeamColorSampler		: register( s2 );

const float4 g_TeamColor						: register( PSREG_CONSTANT_19 );

#endif // TEAMCOLORTEXTURE

const float4 g_EnvmapTint : register( PSREG_CONSTANT_18 );

struct PS_INPUT
{
	float4 vProjPos							: POSITION;	
	float4 vBaseTexCoord					: TEXCOORD0;	// xy = blend 1 coord, zw = lightmap cord
	float4 worldPos_projPosZ				: TEXCOORD1;
	float2 vFowCoord						: TEXCOORD4;	// xy = fow
    
	float3x3 tangentSpaceTranspose	: TEXCOORD5;
	// tangentSpaceTranspose		: TEXCOORD6
	// tangentSpaceTranspose		: TEXCOORD7
};

#if LIGHTING_PREVIEW == 2
LPREVIEW_PS_OUT main( PS_INPUT i ) : COLOR
#else
float4 main( PS_INPUT i ) : COLOR
#endif
{
	float4 vResult = tex2D( BaseSampler, i.vBaseTexCoord.xy );
#if BUMPMAP
	float4 vNormal = tex2D( BumpmapSampler, i.vBaseTexCoord.xy );
#else
	float4 vNormal = float4(0, 0, 1, 1);
#endif // BUMPMAP
    
	float3 worldSpaceNormal = mul( vNormal, i.tangentSpaceTranspose );
    
    float3 worldVertToEyeVector = g_EyePos_SpecExponent.xyz - i.worldPos_projPosZ.xyz;
    
#if TEAMCOLORTEXTURE
	if( g_TeamColor.a > 0.0 )
	{
		vResult.rgb = ApplyTeamColor( TeamColorSampler, GammaToLinear(g_TeamColor), i.vBaseTexCoord.xy, vResult );
	}
#endif

#if LIGHTING_PREVIEW == 0
	float3 specularLighting = float3( 0.0f, 0.0f, 0.0f );
    
#if CUBEMAP
	float3 reflectVect = CalcReflectionVectorUnnormalized( worldSpaceNormal, worldVertToEyeVector );
    
	specularLighting = ENV_MAP_SCALE * texCUBE( EnvmapSampler, reflectVect );
    
	specularLighting *= g_EnvmapTint;
#endif // CUBEMAP

    float4 lightmapTexCoord1And2 = float4(0, 0, 0, 0);
    lightmapTexCoord1And2.xy = i.vBaseTexCoord.zw;
	float2 bumpCoord1 = ComputeLightmapCoordinates( lightmapTexCoord1And2, float2(0,0) );
	float3 lightmapColor = LightMapSample( LightmapSampler, bumpCoord1 );
    
	float3 diffuseLighting = (lightmapColor * g_TintValuesTimesLightmapScale.rgb);
	diffuseLighting += g_cAmbientColor;
	
	vResult.rgb = (vResult.rgb * diffuseLighting) + specularLighting;
    
#if ( FOW == 1 )
	vResult.rgb = CalcFoW( FoWSampler, i.vFowCoord.xy, vResult.rgb );
#endif

	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos_SpecExponent.xyz, i.worldPos_projPosZ.xyz, i.worldPos_projPosZ.w );
	
	return FinalOutput( vResult, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, false, i.worldPos_projPosZ.w );
#elif ( LIGHTING_PREVIEW == 1 )
	float dotprod = 0.7+0.25 * dot( worldSpaceNormal, normalize( float3( 1, 2, -.5 ) ) );
	return FinalOutput( float4( dotprod*vResult.xyz, 1.0f ), 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#elif ( LIGHTING_PREVIEW == 2 )
	LPREVIEW_PS_OUT ret;
	ret.color = float4( vResult.xyz, 1.0f );
	ret.normal = float4( worldSpaceNormal, i.worldPos_projPosZ.w );
	ret.position = float4( i.worldPos_projPosZ.xyz, 1.0f );
	ret.flags = float4( 1, 1, 1, 1.0f );
	
	return FinalOutput( ret, 0, PIXEL_FOG_TYPE_NONE, TONEMAP_SCALE_NONE );
#elif ( LIGHTING_PREVIEW == 3 )
	return float4( worldSpaceNormal, i.worldPos_projPosZ.w );
#endif
}
