#!/usr/bin/env python3

tables = [
    # Determines number of networked python classes we can have per type.
    # Note that there is a limit of about 512 classes in total (engine errors out above this number).
    # Shift numbers depending on what's most needed.
    ('DT_BaseEntity', 32, 'C_BaseEntity'),
    ('DT_BaseAnimating', 32, 'C_BaseAnimating'),
    ('DT_BaseAnimatingOverlay', 2, 'C_BaseAnimatingOverlay'),
    ('DT_BaseFlex', 8, 'C_BaseFlex'),
    ('DT_BaseCombatCharacter', 20, 'C_BaseCombatCharacter'),
    ('DT_BasePlayer', 2, 'C_BasePlayer'),
    ('DT_BaseProjectile', 16, 'C_BaseProjectile'),
    ('DT_BaseGrenade', 16, 'C_BaseGrenade'),
    ('DT_BaseCombatWeapon', 2, 'C_BaseCombatWeapon'),
    ('DT_PlayerResource', 1, 'C_PlayerResource'),
    ('DT_BreakableProp', 2, 'C_BreakableProp'),
    ('DT_BaseToggle', 2, 'C_BaseToggle'),
    ('DT_BaseTrigger', 16, 'C_BaseTrigger'),
    
    ('DT_Beam', 2, 'C_Beam'),
    ('DT_Sprite', 2, 'C_Sprite'),
    ('DT_SmokeTrail', 2, 'C_SmokeTrail'),
    
    ('DT_HL2WarsPlayer', 4, 'C_HL2WarsPlayer'),
    ('DT_UnitBase', 128, 'C_UnitBase'),
    ('DT_WarsWeapon', 20, 'C_WarsWeapon'),
    ('DT_FuncUnit', 12, 'C_FuncUnit'),
    ('DT_BaseFuncMapBoundary', 2, 'CBaseFuncMapBoundary'),
]

path = '../game/shared/python/srcpy_scclasses.cpp'

template = '''// Autogenerated file
#include "cbase.h"
#include "srcpy.h"
//#include "srcpy_boostpython.h"
#ifdef CLIENT_DLL
#include "srcpy_client_class.h"

// Needed for fallback entity creation:
#include "basegrenade_shared.h"
#include "Sprite.h"
#include "c_smoke_trail.h"
#include "beam_shared.h"
#include "basecombatweapon_shared.h"
#include "c_playerresource.h"
#include "c_breakableprop.h"
#include "c_basetoggle.h"
#include "c_triggers.h"

#ifdef HL2WARS_DLL
#include "c_hl2wars_player.h"
#include "unit_base_shared.h"
#include "c_wars_weapon.h"
#include "wars_func_unit.h"
#include "wars_mapboundary.h"
#endif // HL2WARS_DLL

#else
#include "srcpy_server_class.h"
#endif
#include "tier0/memdbgon.h"

#ifdef CLIENT_DLL
%(client_entries)s
#else
%(server_entries)s
#endif // CLIENT_DLL
'''

client_entries = ''
server_entries = ''

for e in tables:
    client_entries += '\tEXTERN_RECV_TABLE( %s );\n' % e[0]
    server_entries += '\tEXTERN_SEND_TABLE( %s );\n' % e[0]
    for i in range(0, e[1]):
        args = {'table': e[0], 'num': i, 'fallback': e[2]}
        client_entries += '\tIMPLEMENT_PYCLIENTCLASS_SYSTEM( CPY%(table)s%(num)d, PY%(table)s%(num)d, &(%(table)s::g_RecvTable), %(fallback)s );\n' % args
        server_entries += '\tIMPLEMENT_PYSERVERCLASS_SYSTEM( SPY%(table)s%(num)d, PY%(table)s%(num)d, &(%(table)s::g_SendTable) );\n' % args

with open(path, 'w') as fp:
    fp.write(template % {'client_entries': client_entries, 'server_entries': server_entries})
